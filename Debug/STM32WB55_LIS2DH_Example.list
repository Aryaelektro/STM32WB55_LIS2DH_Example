
STM32WB55_LIS2DH_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e204  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800e348  0800e348  0000f348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea68  0800ea68  0000fa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea70  0800ea70  0000fa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ea74  0800ea74  0000fa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800ea78  00010004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002700  200001f0  0800ec64  000101f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200028f0  0800ec64  000108f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021305  00000000  00000000  00010220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004122  00000000  00000000  00031525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002180  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019a0  00000000  00000000  000377c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025fa2  00000000  00000000  00039168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002272b  00000000  00000000  0005f10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e3abd  00000000  00000000  00081835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001652f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3e8  00000000  00000000  00165338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  0016f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e32c 	.word	0x0800e32c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800e32c 	.word	0x0800e32c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <SELECT+0x1c>)
 8000fa0:	f002 f912 	bl	80031c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fe97 	bl	8002cd8 <HAL_Delay>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000800 	.word	0x48000800

08000fb4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <DESELECT+0x1c>)
 8000fc0:	f002 f902 	bl	80031c8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 fe87 	bl	8002cd8 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fde:	bf00      	nop
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <SPI_TxByte+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d1f8      	bne.n	8000fe0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	2364      	movs	r3, #100	@ 0x64
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <SPI_TxByte+0x30>)
 8000ff6:	f004 feb9 	bl	8005d6c <HAL_SPI_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002e4 	.word	0x200002e4

08001008 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001014:	bf00      	nop
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <SPI_TxBuffer+0x30>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b02      	cmp	r3, #2
 8001022:	d1f8      	bne.n	8001016 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	2364      	movs	r3, #100	@ 0x64
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <SPI_TxBuffer+0x30>)
 800102c:	f004 fe9e 	bl	8005d6c <HAL_SPI_Transmit>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002e4 	.word	0x200002e4

0800103c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001042:	23ff      	movs	r3, #255	@ 0xff
 8001044:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001046:	bf00      	nop
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <SPI_RxByte+0x34>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b02      	cmp	r3, #2
 8001054:	d1f8      	bne.n	8001048 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001056:	1dba      	adds	r2, r7, #6
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <SPI_RxByte+0x34>)
 8001062:	f004 fff8 	bl	8006056 <HAL_SPI_TransmitReceive>

  return data;
 8001066:	79bb      	ldrb	r3, [r7, #6]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002e4 	.word	0x200002e4

08001074 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800107c:	f7ff ffde 	bl	800103c <SPI_RxByte>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <SD_ReadyWait+0x30>)
 8001098:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800109c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800109e:	f7ff ffcd 	bl	800103c <SPI_RxByte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d004      	beq.n	80010b6 <SD_ReadyWait+0x26>
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SD_ReadyWait+0x30>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f3      	bne.n	800109e <SD_ReadyWait+0xe>

  return res;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000275e 	.word	0x2000275e

080010c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80010ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010ce:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80010d0:	f7ff ff70 	bl	8000fb4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	e005      	b.n	80010e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010da:	20ff      	movs	r0, #255	@ 0xff
 80010dc:	f7ff ff7a 	bl	8000fd4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddf6      	ble.n	80010da <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80010ec:	f7ff ff52 	bl	8000f94 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001104:	2395      	movs	r3, #149	@ 0x95
 8001106:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001108:	463b      	mov	r3, r7
 800110a:	2106      	movs	r1, #6
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff7b 	bl	8001008 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001112:	e002      	b.n	800111a <SD_PowerOn+0x56>
  {
    cnt--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800111a:	f7ff ff8f 	bl	800103c <SPI_RxByte>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d002      	beq.n	800112a <SD_PowerOn+0x66>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f4      	bne.n	8001114 <SD_PowerOn+0x50>
  }

  DESELECT();
 800112a:	f7ff ff43 	bl	8000fb4 <DESELECT>
  SPI_TxByte(0XFF);
 800112e:	20ff      	movs	r0, #255	@ 0xff
 8001130:	f7ff ff50 	bl	8000fd4 <SPI_TxByte>

  PowerFlag = 1;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <SD_PowerOn+0x80>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000020d 	.word	0x2000020d

08001148 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <SD_PowerOff+0x14>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000020d 	.word	0x2000020d

08001160 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <SD_CheckPower+0x14>)
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000020d 	.word	0x2000020d

08001178 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001184:	22c8      	movs	r2, #200	@ 0xc8
 8001186:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8001188:	f7ff ff58 	bl	800103c <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2bff      	cmp	r3, #255	@ 0xff
 8001194:	d104      	bne.n	80011a0 <SD_RxDataBlock+0x28>
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80011a4:	d001      	beq.n	80011aa <SD_RxDataBlock+0x32>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e00f      	b.n	80011ca <SD_RxDataBlock+0x52>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <SPI_RxBytePtr>
  } while(len--);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f4      	bne.n	80011aa <SD_RxDataBlock+0x32>

  /* discard CRC */
  SPI_RxByte();
 80011c0:	f7ff ff3c 	bl	800103c <SPI_RxByte>
  SPI_RxByte();
 80011c4:	f7ff ff3a 	bl	800103c <SPI_RxByte>

  return TRUE;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000275d 	.word	0x2000275d

080011d8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80011e8:	f7ff ff52 	bl	8001090 <SD_ReadyWait>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d001      	beq.n	80011f6 <SD_TxDataBlock+0x1e>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e02f      	b.n	8001256 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feeb 	bl	8000fd4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bfd      	cmp	r3, #253	@ 0xfd
 8001202:	d020      	beq.n	8001246 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fefd 	bl	8001008 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800120e:	f7ff ff15 	bl	800103c <SPI_RxByte>
    SPI_RxByte();
 8001212:	f7ff ff13 	bl	800103c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001216:	e00b      	b.n	8001230 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001218:	f7ff ff10 	bl	800103c <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b05      	cmp	r3, #5
 8001228:	d006      	beq.n	8001238 <SD_TxDataBlock+0x60>
      i++;
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b40      	cmp	r3, #64	@ 0x40
 8001234:	d9f0      	bls.n	8001218 <SD_TxDataBlock+0x40>
 8001236:	e000      	b.n	800123a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001238:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800123a:	bf00      	nop
 800123c:	f7ff fefe 	bl	800103c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0fa      	beq.n	800123c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b05      	cmp	r3, #5
 800124e:	d101      	bne.n	8001254 <SD_TxDataBlock+0x7c>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800126a:	f7ff ff11 	bl	8001090 <SD_ReadyWait>
 800126e:	4603      	mov	r3, r0
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d001      	beq.n	8001278 <SD_SendCmd+0x1a>
 8001274:	23ff      	movs	r3, #255	@ 0xff
 8001276:	e042      	b.n	80012fe <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff feaa 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	0e1b      	lsrs	r3, r3, #24
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fea4 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe9e 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe98 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe93 	bl	8000fd4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b40      	cmp	r3, #64	@ 0x40
 80012b2:	d102      	bne.n	80012ba <SD_SendCmd+0x5c>
 80012b4:	2395      	movs	r3, #149	@ 0x95
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e007      	b.n	80012ca <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b48      	cmp	r3, #72	@ 0x48
 80012be:	d102      	bne.n	80012c6 <SD_SendCmd+0x68>
 80012c0:	2387      	movs	r3, #135	@ 0x87
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <SD_SendCmd+0x6c>
  else crc = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe81 	bl	8000fd4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b4c      	cmp	r3, #76	@ 0x4c
 80012d6:	d101      	bne.n	80012dc <SD_SendCmd+0x7e>
 80012d8:	f7ff feb0 	bl	800103c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80012dc:	230a      	movs	r3, #10
 80012de:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80012e0:	f7ff feac 	bl	800103c <SPI_RxByte>
 80012e4:	4603      	mov	r3, r0
 80012e6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80012e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da05      	bge.n	80012fc <SD_SendCmd+0x9e>
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f1      	bne.n	80012e0 <SD_SendCmd+0x82>

  return res;
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SD_disk_initialize+0x14>
 8001318:	2301      	movs	r3, #1
 800131a:	e0d6      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <SD_disk_initialize+0x2a>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	e0cb      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* power on */
  SD_PowerOn();
 8001332:	f7ff fec7 	bl	80010c4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001336:	f7ff fe2d 	bl	8000f94 <SELECT>

  /* check disk type */
  type = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800133e:	2100      	movs	r1, #0
 8001340:	2040      	movs	r0, #64	@ 0x40
 8001342:	f7ff ff8c 	bl	800125e <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	f040 80a6 	bne.w	800149a <SD_disk_initialize+0x192>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800134e:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001356:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800135a:	2048      	movs	r0, #72	@ 0x48
 800135c:	f7ff ff7f 	bl	800125e <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d158      	bne.n	8001418 <SD_disk_initialize+0x110>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e00c      	b.n	8001386 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800136c:	7bfc      	ldrb	r4, [r7, #15]
 800136e:	f7ff fe65 	bl	800103c <SPI_RxByte>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f104 0310 	add.w	r3, r4, #16
 800137a:	443b      	add	r3, r7
 800137c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d9ef      	bls.n	800136c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800138c:	7abb      	ldrb	r3, [r7, #10]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8083 	bne.w	800149a <SD_disk_initialize+0x192>
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	2baa      	cmp	r3, #170	@ 0xaa
 8001398:	d17f      	bne.n	800149a <SD_disk_initialize+0x192>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800139a:	2100      	movs	r1, #0
 800139c:	2077      	movs	r0, #119	@ 0x77
 800139e:	f7ff ff5e 	bl	800125e <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d807      	bhi.n	80013b8 <SD_disk_initialize+0xb0>
 80013a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ac:	2069      	movs	r0, #105	@ 0x69
 80013ae:	f7ff ff56 	bl	800125e <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <SD_disk_initialize+0xbc>
        } while (Timer1);
 80013b8:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1eb      	bne.n	800139a <SD_disk_initialize+0x92>
 80013c2:	e000      	b.n	80013c6 <SD_disk_initialize+0xbe>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013c4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d064      	beq.n	800149a <SD_disk_initialize+0x192>
 80013d0:	2100      	movs	r1, #0
 80013d2:	207a      	movs	r0, #122	@ 0x7a
 80013d4:	f7ff ff43 	bl	800125e <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d15d      	bne.n	800149a <SD_disk_initialize+0x192>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e00c      	b.n	80013fe <SD_disk_initialize+0xf6>
          {
            ocr[n] = SPI_RxByte();
 80013e4:	7bfc      	ldrb	r4, [r7, #15]
 80013e6:	f7ff fe29 	bl	800103c <SPI_RxByte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	f104 0310 	add.w	r3, r4, #16
 80013f2:	443b      	add	r3, r7
 80013f4:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9ef      	bls.n	80013e4 <SD_disk_initialize+0xdc>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SD_disk_initialize+0x10a>
 800140e:	230c      	movs	r3, #12
 8001410:	e000      	b.n	8001414 <SD_disk_initialize+0x10c>
 8001412:	2304      	movs	r3, #4
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e040      	b.n	800149a <SD_disk_initialize+0x192>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001418:	2100      	movs	r1, #0
 800141a:	2077      	movs	r0, #119	@ 0x77
 800141c:	f7ff ff1f 	bl	800125e <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d808      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001426:	2100      	movs	r1, #0
 8001428:	2069      	movs	r0, #105	@ 0x69
 800142a:	f7ff ff18 	bl	800125e <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d801      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001434:	2302      	movs	r3, #2
 8001436:	e000      	b.n	800143a <SD_disk_initialize+0x132>
 8001438:	2301      	movs	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d10e      	bne.n	8001460 <SD_disk_initialize+0x158>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001442:	2100      	movs	r1, #0
 8001444:	2077      	movs	r0, #119	@ 0x77
 8001446:	f7ff ff0a 	bl	800125e <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d80e      	bhi.n	800146e <SD_disk_initialize+0x166>
 8001450:	2100      	movs	r1, #0
 8001452:	2069      	movs	r0, #105	@ 0x69
 8001454:	f7ff ff03 	bl	800125e <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <SD_disk_initialize+0x166>
 800145e:	e00d      	b.n	800147c <SD_disk_initialize+0x174>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001460:	2100      	movs	r1, #0
 8001462:	2041      	movs	r0, #65	@ 0x41
 8001464:	f7ff fefb 	bl	800125e <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <SD_disk_initialize+0x172>
        }

      } while (Timer1);
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e1      	bne.n	800143c <SD_disk_initialize+0x134>
 8001478:	e000      	b.n	800147c <SD_disk_initialize+0x174>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800147a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SD_disk_initialize+0x18e>
 8001486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148a:	2050      	movs	r0, #80	@ 0x50
 800148c:	f7ff fee7 	bl	800125e <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SD_disk_initialize+0x192>
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <SD_disk_initialize+0x1d4>)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80014a0:	f7ff fd88 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80014a4:	f7ff fdca 	bl	800103c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <SD_disk_initialize+0x1b8>
  {
    Stat &= ~STA_NOINIT;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <SD_disk_initialize+0x1bc>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014c0:	f7ff fe42 	bl	8001148 <SD_PowerOff>
  }

  return Stat;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000004 	.word	0x20000004
 80014d8:	2000275d 	.word	0x2000275d
 80014dc:	2000020c 	.word	0x2000020c

080014e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_status+0x14>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e002      	b.n	80014fa <SD_disk_status+0x1a>
  return Stat;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SD_disk_status+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000004 	.word	0x20000004

0800150c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <SD_disk_read+0x1c>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <SD_disk_read+0x20>
 8001528:	2304      	movs	r3, #4
 800152a:	e051      	b.n	80015d0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SD_disk_read+0xcc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SD_disk_read+0x32>
 800153a:	2303      	movs	r3, #3
 800153c:	e048      	b.n	80015d0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <SD_disk_read+0xd0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <SD_disk_read+0x44>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001550:	f7ff fd20 	bl	8000f94 <SELECT>

  if (count == 1)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2051      	movs	r0, #81	@ 0x51
 800155e:	f7ff fe7e 	bl	800125e <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <SD_disk_read+0xb0>
 8001568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fe03 	bl	8001178 <SD_RxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d021      	beq.n	80015bc <SD_disk_read+0xb0>
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	e01e      	b.n	80015bc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2052      	movs	r0, #82	@ 0x52
 8001582:	f7ff fe6c 	bl	800125e <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fdf1 	bl	8001178 <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <SD_disk_read+0xa6>
        buff += 512;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <SD_disk_read+0x80>
 80015b0:	e000      	b.n	80015b4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80015b2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80015b4:	2100      	movs	r1, #0
 80015b6:	204c      	movs	r0, #76	@ 0x4c
 80015b8:	f7ff fe51 	bl	800125e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80015bc:	f7ff fcfa 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80015c0:	f7ff fd3c 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <SD_disk_write+0x1c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SD_disk_write+0x20>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e06b      	b.n	80016d8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <SD_disk_write+0x100>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SD_disk_write+0x32>
 800160e:	2303      	movs	r3, #3
 8001610:	e062      	b.n	80016d8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <SD_disk_write+0x100>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_write+0x44>
 8001620:	2302      	movs	r3, #2
 8001622:	e059      	b.n	80016d8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <SD_disk_write+0x104>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <SD_disk_write+0x56>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	607b      	str	r3, [r7, #4]

  SELECT();
 8001636:	f7ff fcad 	bl	8000f94 <SELECT>

  if (count == 1)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2058      	movs	r0, #88	@ 0x58
 8001644:	f7ff fe0b 	bl	800125e <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <SD_disk_write+0xe4>
 800164e:	21fe      	movs	r1, #254	@ 0xfe
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdc1 	bl	80011d8 <SD_TxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <SD_disk_write+0xe4>
      count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e030      	b.n	80016c4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SD_disk_write+0x104>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	@ 0x77
 8001672:	f7ff fdf4 	bl	800125e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	2057      	movs	r0, #87	@ 0x57
 800167a:	f7ff fdf0 	bl	800125e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2059      	movs	r0, #89	@ 0x59
 8001682:	f7ff fdec 	bl	800125e <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11b      	bne.n	80016c4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800168c:	21fc      	movs	r1, #252	@ 0xfc
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff fda2 	bl	80011d8 <SD_TxDataBlock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <SD_disk_write+0xd0>
        buff += 512;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <SD_disk_write+0xac>
 80016ae:	e000      	b.n	80016b2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016b0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80016b2:	21fd      	movs	r1, #253	@ 0xfd
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd8f 	bl	80011d8 <SD_TxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_write+0xe4>
      {
        count = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80016c4:	f7ff fc76 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80016c8:	f7ff fcb8 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000004 	.word	0x20000004
 80016e4:	2000020c 	.word	0x2000020c

080016e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x1e>
 8001702:	2304      	movs	r3, #4
 8001704:	e113      	b.n	800192e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d124      	bne.n	800175c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d012      	beq.n	8001740 <SD_disk_ioctl+0x58>
 800171a:	2b02      	cmp	r3, #2
 800171c:	dc1a      	bgt.n	8001754 <SD_disk_ioctl+0x6c>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <SD_disk_ioctl+0x40>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d006      	beq.n	8001734 <SD_disk_ioctl+0x4c>
 8001726:	e015      	b.n	8001754 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001728:	f7ff fd0e 	bl	8001148 <SD_PowerOff>
      res = RES_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001732:	e0fa      	b.n	800192a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001734:	f7ff fcc6 	bl	80010c4 <SD_PowerOn>
      res = RES_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800173e:	e0f4      	b.n	800192a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	1c5c      	adds	r4, r3, #1
 8001744:	f7ff fd0c 	bl	8001160 <SD_CheckPower>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001752:	e0ea      	b.n	800192a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001754:	2304      	movs	r3, #4
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175a:	e0e6      	b.n	800192a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <SD_disk_ioctl+0x250>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x86>
 800176a:	2303      	movs	r3, #3
 800176c:	e0df      	b.n	800192e <SD_disk_ioctl+0x246>

    SELECT();
 800176e:	f7ff fc11 	bl	8000f94 <SELECT>

    switch (ctrl)
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b0d      	cmp	r3, #13
 8001776:	f200 80c9 	bhi.w	800190c <SD_disk_ioctl+0x224>
 800177a:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <SD_disk_ioctl+0x98>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001877 	.word	0x08001877
 8001784:	080017b9 	.word	0x080017b9
 8001788:	08001867 	.word	0x08001867
 800178c:	0800190d 	.word	0x0800190d
 8001790:	0800190d 	.word	0x0800190d
 8001794:	0800190d 	.word	0x0800190d
 8001798:	0800190d 	.word	0x0800190d
 800179c:	0800190d 	.word	0x0800190d
 80017a0:	0800190d 	.word	0x0800190d
 80017a4:	0800190d 	.word	0x0800190d
 80017a8:	0800190d 	.word	0x0800190d
 80017ac:	08001889 	.word	0x08001889
 80017b0:	080018ad 	.word	0x080018ad
 80017b4:	080018d1 	.word	0x080018d1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017b8:	2100      	movs	r1, #0
 80017ba:	2049      	movs	r0, #73	@ 0x49
 80017bc:	f7ff fd4f 	bl	800125e <SD_SendCmd>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80a6 	bne.w	8001914 <SD_disk_ioctl+0x22c>
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2110      	movs	r1, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fcd2 	bl	8001178 <SD_RxDataBlock>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 809c 	beq.w	8001914 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	461a      	mov	r2, r3
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017f8:	8bfb      	ldrh	r3, [r7, #30]
 80017fa:	029a      	lsls	r2, r3, #10
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e02d      	b.n	800185e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001802:	7c7b      	ldrb	r3, [r7, #17]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	09db      	lsrs	r3, r3, #7
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7d7b      	ldrb	r3, [r7, #21]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0306 	and.w	r3, r3, #6
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3302      	adds	r3, #2
 8001826:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800182a:	7d3b      	ldrb	r3, [r7, #20]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	7cbb      	ldrb	r3, [r7, #18]
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	b29b      	uxth	r3, r3
 8001842:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001856:	3b09      	subs	r3, #9
 8001858:	409a      	lsls	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001864:	e056      	b.n	8001914 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001874:	e055      	b.n	8001922 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001876:	f7ff fc0b 	bl	8001090 <SD_ReadyWait>
 800187a:	4603      	mov	r3, r0
 800187c:	2bff      	cmp	r3, #255	@ 0xff
 800187e:	d14b      	bne.n	8001918 <SD_disk_ioctl+0x230>
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001886:	e047      	b.n	8001918 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001888:	2100      	movs	r1, #0
 800188a:	2049      	movs	r0, #73	@ 0x49
 800188c:	f7ff fce7 	bl	800125e <SD_SendCmd>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d142      	bne.n	800191c <SD_disk_ioctl+0x234>
 8001896:	2110      	movs	r1, #16
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f7ff fc6d 	bl	8001178 <SD_RxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03b      	beq.n	800191c <SD_disk_ioctl+0x234>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018aa:	e037      	b.n	800191c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ac:	2100      	movs	r1, #0
 80018ae:	204a      	movs	r0, #74	@ 0x4a
 80018b0:	f7ff fcd5 	bl	800125e <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d132      	bne.n	8001920 <SD_disk_ioctl+0x238>
 80018ba:	2110      	movs	r1, #16
 80018bc:	6a38      	ldr	r0, [r7, #32]
 80018be:	f7ff fc5b 	bl	8001178 <SD_RxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02b      	beq.n	8001920 <SD_disk_ioctl+0x238>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018ce:	e027      	b.n	8001920 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018d0:	2100      	movs	r1, #0
 80018d2:	207a      	movs	r0, #122	@ 0x7a
 80018d4:	f7ff fcc3 	bl	800125e <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018e4:	e00b      	b.n	80018fe <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80018e6:	6a3c      	ldr	r4, [r7, #32]
 80018e8:	1c63      	adds	r3, r4, #1
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	f7ff fba6 	bl	800103c <SPI_RxByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f8:	3301      	adds	r3, #1
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001902:	2b03      	cmp	r3, #3
 8001904:	d9ef      	bls.n	80018e6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800190c:	2304      	movs	r3, #4
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001912:	e006      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001920:	bf00      	nop
    }

    DESELECT();
 8001922:	f7ff fb47 	bl	8000fb4 <DESELECT>
    SPI_RxByte();
 8001926:	f7ff fb89 	bl	800103c <SPI_RxByte>
  }

  return res;
 800192a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800192e:	4618      	mov	r0, r3
 8001930:	372c      	adds	r7, #44	@ 0x2c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000004 	.word	0x20000004

0800193c <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <lis2dh12_read_reg+0x20>
  {
    return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <lis2dh12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685c      	ldr	r4, [r3, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68d8      	ldr	r0, [r3, #12]
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	7af9      	ldrb	r1, [r7, #11]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	47a0      	blx	r4
 800196c:	6178      	str	r0, [r7, #20]

  return ret;
 800196e:	697b      	ldr	r3, [r7, #20]
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}

08001978 <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	461a      	mov	r2, r3
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
 8001988:	4613      	mov	r3, r2
 800198a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <lis2dh12_write_reg+0x20>
  {
    return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <lis2dh12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68d8      	ldr	r0, [r3, #12]
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	7af9      	ldrb	r1, [r7, #11]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	47a0      	blx	r4
 80019a8:	6178      	str	r0, [r7, #20]

  return ret;
 80019aa:	697b      	ldr	r3, [r7, #20]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 1.0f;
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80019ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019d2:	eef0 7a66 	vmov.f32	s15, s13
}
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(const stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 80019f0:	f107 0210 	add.w	r2, r7, #16
 80019f4:	2301      	movs	r3, #1
 80019f6:	2120      	movs	r1, #32
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff9f 	bl	800193c <lis2dh12_read_reg>
 80019fe:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <lis2dh12_operating_mode_set+0x32>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2123      	movs	r1, #35	@ 0x23
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff94 	bl	800193c <lis2dh12_read_reg>
 8001a14:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d128      	bne.n	8001a6e <lis2dh12_operating_mode_set+0x8a>
  {
    if (val == LIS2DH12_HR_12bit)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <lis2dh12_operating_mode_set+0x4e>
    {
      ctrl_reg1.lpen = 0;
 8001a22:	7c3b      	ldrb	r3, [r7, #16]
 8001a24:	f36f 03c3 	bfc	r3, #3, #1
 8001a28:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 8001a2a:	7b3b      	ldrb	r3, [r7, #12]
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_NM_10bit)
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <lis2dh12_operating_mode_set+0x64>
    {
      ctrl_reg1.lpen = 0;
 8001a38:	7c3b      	ldrb	r3, [r7, #16]
 8001a3a:	f36f 03c3 	bfc	r3, #3, #1
 8001a3e:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8001a40:	7b3b      	ldrb	r3, [r7, #12]
 8001a42:	f36f 03c3 	bfc	r3, #3, #1
 8001a46:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_LP_8bit)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d107      	bne.n	8001a5e <lis2dh12_operating_mode_set+0x7a>
    {
      ctrl_reg1.lpen = 1;
 8001a4e:	7c3b      	ldrb	r3, [r7, #16]
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	f36f 03c3 	bfc	r3, #3, #1
 8001a5c:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 8001a5e:	f107 0210 	add.w	r2, r7, #16
 8001a62:	2301      	movs	r3, #1
 8001a64:	2120      	movs	r1, #32
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff86 	bl	8001978 <lis2dh12_write_reg>
 8001a6c:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <lis2dh12_operating_mode_set+0xa0>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2123      	movs	r1, #35	@ 0x23
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff7b 	bl	8001978 <lis2dh12_write_reg>
 8001a82:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001a84:	697b      	ldr	r3, [r7, #20]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(const stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8001a9a:	f107 0208 	add.w	r2, r7, #8
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff4a 	bl	800193c <lis2dh12_read_reg>
 8001aa8:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <lis2dh12_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	7a3b      	ldrb	r3, [r7, #8]
 8001aba:	f362 1307 	bfi	r3, r2, #4, #4
 8001abe:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff55 	bl	8001978 <lis2dh12_write_reg>
 8001ace:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(const stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001ae6:	f107 0208 	add.w	r2, r7, #8
 8001aea:	2301      	movs	r3, #1
 8001aec:	2123      	movs	r1, #35	@ 0x23
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff24 	bl	800193c <lis2dh12_read_reg>
 8001af4:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10f      	bne.n	8001b1c <lis2dh12_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	7a3b      	ldrb	r3, [r7, #8]
 8001b06:	f362 1305 	bfi	r3, r2, #4, #2
 8001b0a:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001b0c:	f107 0208 	add.w	r2, r7, #8
 8001b10:	2301      	movs	r3, #1
 8001b12:	2123      	movs	r1, #35	@ 0x23
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff2f 	bl	8001978 <lis2dh12_write_reg>
 8001b1a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001b32:	f107 0208 	add.w	r2, r7, #8
 8001b36:	2301      	movs	r3, #1
 8001b38:	2123      	movs	r1, #35	@ 0x23
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fefe 	bl	800193c <lis2dh12_read_reg>
 8001b40:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10f      	bne.n	8001b68 <lis2dh12_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	7a3b      	ldrb	r3, [r7, #8]
 8001b52:	f362 13c7 	bfi	r3, r2, #7, #1
 8001b56:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001b58:	f107 0208 	add.w	r2, r7, #8
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2123      	movs	r1, #35	@ 0x23
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff09 	bl	8001978 <lis2dh12_write_reg>
 8001b66:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
 8001b7c:	f107 0208 	add.w	r2, r7, #8
 8001b80:	2301      	movs	r3, #1
 8001b82:	2127      	movs	r1, #39	@ 0x27
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fed9 	bl	800193c <lis2dh12_read_reg>
 8001b8a:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
 8001b8c:	7a3b      	ldrb	r3, [r7, #8]
 8001b8e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	701a      	strb	r2, [r3, #0]

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	2306      	movs	r3, #6
 8001bb4:	2128      	movs	r1, #40	@ 0x28
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fec0 	bl	800193c <lis2dh12_read_reg>
 8001bbc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	7b3a      	ldrb	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3302      	adds	r3, #2
 8001be4:	b212      	sxth	r2, r2
 8001be6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3302      	adds	r3, #2
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	7bba      	ldrb	r2, [r7, #14]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	b212      	sxth	r2, r2
 8001c02:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001c04:	7c7a      	ldrb	r2, [r7, #17]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	b212      	sxth	r2, r2
 8001c0c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3304      	adds	r3, #4
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	7c3a      	ldrb	r2, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	3304      	adds	r3, #4
 8001c26:	b212      	sxth	r2, r2
 8001c28:	801a      	strh	r2, [r3, #0]

  return ret;
 8001c2a:	697b      	ldr	r3, [r7, #20]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 8001c3e:	2301      	movs	r3, #1
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	210f      	movs	r1, #15
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fe79 	bl	800193c <lis2dh12_read_reg>
 8001c4a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c5e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c62:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c6e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c72:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001c76:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c7e:	e000      	b.n	8001c82 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c80:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f9      	beq.n	8001c80 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	f023 0218 	bic.w	r2, r3, #24
 8001cb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff9a 	bl	8001c56 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
  }
  return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <initialize_sd_card>:

/* Main Example --------------------------------------------------------------*/
static void initialize_sd_card(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  // Mount SDCard
  send_uart("MOUNTING_SD_CARD\n");
 8001d42:	4847      	ldr	r0, [pc, #284]	@ (8001e60 <initialize_sd_card+0x124>)
 8001d44:	f000 f9e6 	bl	8002114 <send_uart>
  HAL_Delay(1000);
 8001d48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d4c:	f000 ffc4 	bl	8002cd8 <HAL_Delay>

  fresult = f_mount(&fs, "", 1); /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
 8001d50:	2201      	movs	r2, #1
 8001d52:	4944      	ldr	r1, [pc, #272]	@ (8001e64 <initialize_sd_card+0x128>)
 8001d54:	4844      	ldr	r0, [pc, #272]	@ (8001e68 <initialize_sd_card+0x12c>)
 8001d56:	f007 f9f3 	bl	8009140 <f_mount>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b43      	ldr	r3, [pc, #268]	@ (8001e6c <initialize_sd_card+0x130>)
 8001d60:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8001d62:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <initialize_sd_card+0x130>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01c      	beq.n	8001da4 <initialize_sd_card+0x68>
  {
    send_uart("*************************************\n");
 8001d6a:	4841      	ldr	r0, [pc, #260]	@ (8001e70 <initialize_sd_card+0x134>)
 8001d6c:	f000 f9d2 	bl	8002114 <send_uart>
    send_uart("ERR_MOUNTING_SD_CARD\n");
 8001d70:	4840      	ldr	r0, [pc, #256]	@ (8001e74 <initialize_sd_card+0x138>)
 8001d72:	f000 f9cf 	bl	8002114 <send_uart>
    send_uart("*************************************\n");
 8001d76:	483e      	ldr	r0, [pc, #248]	@ (8001e70 <initialize_sd_card+0x134>)
 8001d78:	f000 f9cc 	bl	8002114 <send_uart>
    for (int x = 0; x < 6; x++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	e00c      	b.n	8001d9c <initialize_sd_card+0x60>
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d8a:	f001 fa35 	bl	80031f8 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8001d8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d92:	f000 ffa1 	bl	8002cd8 <HAL_Delay>
    for (int x = 0; x < 6; x++)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	ddef      	ble.n	8001d82 <initialize_sd_card+0x46>
 8001da2:	e008      	b.n	8001db6 <initialize_sd_card+0x7a>
    }
  }
  else
  {
    send_uart("*************************************\n");
 8001da4:	4832      	ldr	r0, [pc, #200]	@ (8001e70 <initialize_sd_card+0x134>)
 8001da6:	f000 f9b5 	bl	8002114 <send_uart>
    send_uart("SUCC_MOUNTING_SD_CARD\n");
 8001daa:	4833      	ldr	r0, [pc, #204]	@ (8001e78 <initialize_sd_card+0x13c>)
 8001dac:	f000 f9b2 	bl	8002114 <send_uart>
    send_uart("*************************************\n");
 8001db0:	482f      	ldr	r0, [pc, #188]	@ (8001e70 <initialize_sd_card+0x134>)
 8001db2:	f000 f9af 	bl	8002114 <send_uart>
  }

  /*************** Card capacity details ********************/
  /*Checking free space*/
  f_getfree("", &fre_clust, &pfs);
 8001db6:	4a31      	ldr	r2, [pc, #196]	@ (8001e7c <initialize_sd_card+0x140>)
 8001db8:	4931      	ldr	r1, [pc, #196]	@ (8001e80 <initialize_sd_card+0x144>)
 8001dba:	482a      	ldr	r0, [pc, #168]	@ (8001e64 <initialize_sd_card+0x128>)
 8001dbc:	f007 fe0a 	bl	80099d4 <f_getfree>
  total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e7c <initialize_sd_card+0x140>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	3b02      	subs	r3, #2
 8001dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e7c <initialize_sd_card+0x140>)
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	8952      	ldrh	r2, [r2, #10]
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fb6e 	bl	80004b4 <__aeabi_ui2d>
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <initialize_sd_card+0x148>)
 8001dde:	f7fe fbe3 	bl	80005a8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe feb5 	bl	8000b58 <__aeabi_d2uiz>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <initialize_sd_card+0x14c>)
 8001df2:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_TOTAL_SIZE: \t%lu\n", total);
 8001df4:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <initialize_sd_card+0x14c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4924      	ldr	r1, [pc, #144]	@ (8001e8c <initialize_sd_card+0x150>)
 8001dfc:	4824      	ldr	r0, [pc, #144]	@ (8001e90 <initialize_sd_card+0x154>)
 8001dfe:	f008 fe5b 	bl	800aab8 <siprintf>
  send_uart(buffer);
 8001e02:	4823      	ldr	r0, [pc, #140]	@ (8001e90 <initialize_sd_card+0x154>)
 8001e04:	f000 f986 	bl	8002114 <send_uart>
  clear_buffer();
 8001e08:	f000 f9be 	bl	8002188 <clear_buffer>
  free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <initialize_sd_card+0x140>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	895b      	ldrh	r3, [r3, #10]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <initialize_sd_card+0x144>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fb49 	bl	80004b4 <__aeabi_ui2d>
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <initialize_sd_card+0x148>)
 8001e28:	f7fe fbbe 	bl	80005a8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fe90 	bl	8000b58 <__aeabi_d2uiz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <initialize_sd_card+0x158>)
 8001e3c:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_FREE_SPACE: \t%lu\n", free_space);
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <initialize_sd_card+0x158>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4914      	ldr	r1, [pc, #80]	@ (8001e98 <initialize_sd_card+0x15c>)
 8001e46:	4812      	ldr	r0, [pc, #72]	@ (8001e90 <initialize_sd_card+0x154>)
 8001e48:	f008 fe36 	bl	800aab8 <siprintf>
  send_uart(buffer);
 8001e4c:	4810      	ldr	r0, [pc, #64]	@ (8001e90 <initialize_sd_card+0x154>)
 8001e4e:	f000 f961 	bl	8002114 <send_uart>
  clear_buffer();
 8001e52:	f000 f999 	bl	8002188 <clear_buffer>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	0800e348 	.word	0x0800e348
 8001e64:	0800e35c 	.word	0x0800e35c
 8001e68:	200006e4 	.word	0x200006e4
 8001e6c:	20002748 	.word	0x20002748
 8001e70:	0800e360 	.word	0x0800e360
 8001e74:	0800e388 	.word	0x0800e388
 8001e78:	0800e3a0 	.word	0x0800e3a0
 8001e7c:	2000274c 	.word	0x2000274c
 8001e80:	20002750 	.word	0x20002750
 8001e84:	3fe00000 	.word	0x3fe00000
 8001e88:	20002754 	.word	0x20002754
 8001e8c:	0800e3b8 	.word	0x0800e3b8
 8001e90:	20000210 	.word	0x20000210
 8001e94:	20002758 	.word	0x20002758
 8001e98:	0800e3d4 	.word	0x0800e3d4

08001e9c <lis2dh12_read_data_polling>:

void lis2dh12_read_data_polling(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b090      	sub	sp, #64	@ 0x40
 8001ea0:	af02      	add	r7, sp, #8
  int counter = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  int file_exists = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  char filename[20];

  do
  {
    if (counter == 0)
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <lis2dh12_read_data_polling+0x24>
    {
      snprintf(filename, sizeof(filename), "test.csv");
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4a69      	ldr	r2, [pc, #420]	@ (800205c <lis2dh12_read_data_polling+0x1c0>)
 8001eb6:	2114      	movs	r1, #20
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f008 fdc9 	bl	800aa50 <sniprintf>
 8001ebe:	e006      	b.n	8001ece <lis2dh12_read_data_polling+0x32>
    }
    else
    {
      snprintf(filename, sizeof(filename), "test_%d.csv", counter);
 8001ec0:	f107 0014 	add.w	r0, r7, #20
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	4a66      	ldr	r2, [pc, #408]	@ (8002060 <lis2dh12_read_data_polling+0x1c4>)
 8001ec8:	2114      	movs	r1, #20
 8001eca:	f008 fdc1 	bl	800aa50 <sniprintf>
    }

    if (f_open(&fil, filename, FA_OPEN_EXISTING) == FR_OK)
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4863      	ldr	r0, [pc, #396]	@ (8002064 <lis2dh12_read_data_polling+0x1c8>)
 8001ed8:	f007 f978 	bl	80091cc <f_open>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <lis2dh12_read_data_polling+0x58>
    {
      f_close(&fil);
 8001ee2:	4860      	ldr	r0, [pc, #384]	@ (8002064 <lis2dh12_read_data_polling+0x1c8>)
 8001ee4:	f007 fd4c 	bl	8009980 <f_close>
      file_exists = 1;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	633b      	str	r3, [r7, #48]	@ 0x30
      counter++;
 8001eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eee:	3301      	adds	r3, #1
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ef2:	e001      	b.n	8001ef8 <lis2dh12_read_data_polling+0x5c>
    }
    else
    {
      file_exists = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    }
  }
  while (file_exists);
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1d5      	bne.n	8001eaa <lis2dh12_read_data_polling+0xe>
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8001efe:	4b5a      	ldr	r3, [pc, #360]	@ (8002068 <lis2dh12_read_data_polling+0x1cc>)
 8001f00:	607b      	str	r3, [r7, #4]
  dev_ctx.read_reg = platform_read;
 8001f02:	4b5a      	ldr	r3, [pc, #360]	@ (800206c <lis2dh12_read_data_polling+0x1d0>)
 8001f04:	60bb      	str	r3, [r7, #8]
  dev_ctx.mdelay = platform_delay;
 8001f06:	4b5a      	ldr	r3, [pc, #360]	@ (8002070 <lis2dh12_read_data_polling+0x1d4>)
 8001f08:	60fb      	str	r3, [r7, #12]
  dev_ctx.handle = &hi2c1;
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002074 <lis2dh12_read_data_polling+0x1d8>)
 8001f0c:	613b      	str	r3, [r7, #16]
  /* Wait boot time and initialize platform specific hardware */
  //  platform_init();
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8001f0e:	2005      	movs	r0, #5
 8001f10:	f000 f918 	bl	8002144 <platform_delay>
  /* Check device ID */
  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4958      	ldr	r1, [pc, #352]	@ (8002078 <lis2dh12_read_data_polling+0x1dc>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fe8b 	bl	8001c34 <lis2dh12_device_id_get>

  if (whoamI != LIS2DH12_ID)
 8001f1e:	4b56      	ldr	r3, [pc, #344]	@ (8002078 <lis2dh12_read_data_polling+0x1dc>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b33      	cmp	r3, #51	@ 0x33
 8001f24:	d001      	beq.n	8001f2a <lis2dh12_read_data_polling+0x8e>
  {
    while (1)
 8001f26:	bf00      	nop
 8001f28:	e7fd      	b.n	8001f26 <lis2dh12_read_data_polling+0x8a>
    {
      /* manage here device not found */
    }
  }
  /* Enable Block Data Update. */
  lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fdf9 	bl	8001b26 <lis2dh12_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_1Hz);
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fda8 	bl	8001a8e <lis2dh12_data_rate_set>
  /* Set full scale to 2g. */
  lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fdc9 	bl	8001ada <lis2dh12_full_scale_set>
  /* Enable temperature sensor. */
  //  lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
  /* Set device in continuous mode with 12 bit resol. */
  lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fd49 	bl	80019e4 <lis2dh12_operating_mode_set>

  for (int i = 0; i < SAMPLES; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f56:	e06f      	b.n	8002038 <lis2dh12_read_data_polling+0x19c>
  { //sampling 200 data = 2 detik (i.0n 100Hz)
    uint32_t start_time = HAL_GetTick(); //HAL_GetTick(); resolution in ms
 8001f58:	f000 fea6 	bl	8002ca8 <HAL_GetTick>
 8001f5c:	62b8      	str	r0, [r7, #40]	@ 0x28
    lis2dh12_reg_t reg;
    lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8001f5e:	463a      	mov	r2, r7
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe04 	bl	8001b72 <lis2dh12_xl_data_ready_get>
    memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4843      	ldr	r0, [pc, #268]	@ (800207c <lis2dh12_read_data_polling+0x1e0>)
 8001f70:	f008 fe05 	bl	800ab7e <memset>
    lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	4941      	ldr	r1, [pc, #260]	@ (800207c <lis2dh12_read_data_polling+0x1e0>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe13 	bl	8001ba4 <lis2dh12_acceleration_raw_get>
    acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <lis2dh12_read_data_polling+0x1e0>)
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fd15 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 8001f8a:	eef0 7a40 	vmov.f32	s15, s0
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001f90:	edc3 7a00 	vstr	s15, [r3]
    acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8001f94:	4b39      	ldr	r3, [pc, #228]	@ (800207c <lis2dh12_read_data_polling+0x1e0>)
 8001f96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd0a 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 8001fa0:	eef0 7a40 	vmov.f32	s15, s0
 8001fa4:	4b36      	ldr	r3, [pc, #216]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001fa6:	edc3 7a01 	vstr	s15, [r3, #4]
    acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8001faa:	4b34      	ldr	r3, [pc, #208]	@ (800207c <lis2dh12_read_data_polling+0x1e0>)
 8001fac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fcff 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 8001fb6:	eef0 7a40 	vmov.f32	s15, s0
 8001fba:	4b31      	ldr	r3, [pc, #196]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001fbc:	edc3 7a02 	vstr	s15, [r3, #8]
//    memcpy(sd_write_buffer + total_data_length, data_buffer[i], line_length);
//    total_data_length += line_length;
    sprintf(
        (char*) tx_buffer,
        "%d,%d,%d\n",
        (int) acceleration_mg[0],
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
    sprintf(
 8001fc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        (int) acceleration_mg[1],
 8001fca:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001fcc:	edd3 7a01 	vldr	s15, [r3, #4]
    sprintf(
 8001fd0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        (int) acceleration_mg[2]);
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <lis2dh12_read_data_polling+0x1e4>)
 8001fd6:	edd3 7a02 	vldr	s15, [r3, #8]
    sprintf(
 8001fda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	ee16 3a90 	vmov	r3, s13
 8001fe8:	ee17 2a10 	vmov	r2, s14
 8001fec:	4925      	ldr	r1, [pc, #148]	@ (8002084 <lis2dh12_read_data_polling+0x1e8>)
 8001fee:	4826      	ldr	r0, [pc, #152]	@ (8002088 <lis2dh12_read_data_polling+0x1ec>)
 8001ff0:	f008 fd62 	bl	800aab8 <siprintf>
//    {
//      // Handle buffer overflow or snprintf failure
//      break;
//    }
//**************************************************************
    if (f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2232      	movs	r2, #50	@ 0x32
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4819      	ldr	r0, [pc, #100]	@ (8002064 <lis2dh12_read_data_polling+0x1c8>)
 8001ffe:	f007 f8e5 	bl	80091cc <f_open>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10c      	bne.n	8002022 <lis2dh12_read_data_polling+0x186>
    {
      f_write(&fil, tx_buffer, bufsize(tx_buffer), 0);
 8002008:	481f      	ldr	r0, [pc, #124]	@ (8002088 <lis2dh12_read_data_polling+0x1ec>)
 800200a:	f000 f8a6 	bl	800215a <bufsize>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	2300      	movs	r3, #0
 8002014:	491c      	ldr	r1, [pc, #112]	@ (8002088 <lis2dh12_read_data_polling+0x1ec>)
 8002016:	4813      	ldr	r0, [pc, #76]	@ (8002064 <lis2dh12_read_data_polling+0x1c8>)
 8002018:	f007 faa0 	bl	800955c <f_write>
      f_close(&fil);
 800201c:	4811      	ldr	r0, [pc, #68]	@ (8002064 <lis2dh12_read_data_polling+0x1c8>)
 800201e:	f007 fcaf 	bl	8009980 <f_close>
    }

    // Wait until 10ms have passed
    while (HAL_GetTick() < start_time + 10)
 8002022:	bf00      	nop
 8002024:	f000 fe40 	bl	8002ca8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202c:	330a      	adds	r3, #10
 800202e:	429a      	cmp	r2, r3
 8002030:	d3f8      	bcc.n	8002024 <lis2dh12_read_data_polling+0x188>
  for (int i = 0; i < SAMPLES; i++)
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	3301      	adds	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800203a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800203e:	db8b      	blt.n	8001f58 <lis2dh12_read_data_polling+0xbc>
    {
      //wait for 1ms
    }
  }
  sprintf(buffer, "finish polling sensor data and saved to %s\n", filename);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	461a      	mov	r2, r3
 8002046:	4911      	ldr	r1, [pc, #68]	@ (800208c <lis2dh12_read_data_polling+0x1f0>)
 8002048:	4811      	ldr	r0, [pc, #68]	@ (8002090 <lis2dh12_read_data_polling+0x1f4>)
 800204a:	f008 fd35 	bl	800aab8 <siprintf>
  send_uart(buffer);
 800204e:	4810      	ldr	r0, [pc, #64]	@ (8002090 <lis2dh12_read_data_polling+0x1f4>)
 8002050:	f000 f860 	bl	8002114 <send_uart>
}
 8002054:	bf00      	nop
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	0800e3f0 	.word	0x0800e3f0
 8002060:	0800e3fc 	.word	0x0800e3fc
 8002064:	20001718 	.word	0x20001718
 8002068:	08002095 	.word	0x08002095
 800206c:	080020d5 	.word	0x080020d5
 8002070:	08002145 	.word	0x08002145
 8002074:	20000290 	.word	0x20000290
 8002078:	200006cc 	.word	0x200006cc
 800207c:	200006b8 	.word	0x200006b8
 8002080:	200006c0 	.word	0x200006c0
 8002084:	0800e408 	.word	0x0800e408
 8002088:	200006d0 	.word	0x200006d0
 800208c:	0800e414 	.word	0x0800e414
 8002090:	20000210 	.word	0x20000210

08002094 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static void platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af04      	add	r7, sp, #16
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	460b      	mov	r3, r1
 80020a2:	72fb      	strb	r3, [r7, #11]
 80020a4:	4613      	mov	r3, r2
 80020a6:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ae:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	893b      	ldrh	r3, [r7, #8]
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2301      	movs	r3, #1
 80020c4:	2132      	movs	r1, #50	@ 0x32
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f001 f94c 	bl	8003364 <HAL_I2C_Mem_Write>
  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <platform_read>:

static void platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af04      	add	r7, sp, #16
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	460b      	mov	r3, r1
 80020e2:	72fb      	strb	r3, [r7, #11]
 80020e4:	4613      	mov	r3, r2
 80020e6:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 80020e8:	7afb      	ldrb	r3, [r7, #11]
 80020ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ee:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg,
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	893b      	ldrh	r3, [r7, #8]
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	2132      	movs	r1, #50	@ 0x32
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f001 fa40 	bl	800358c <HAL_I2C_Mem_Read>
  I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <send_uart>:

void send_uart(char *string)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(string);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe f87f 	bl	8000220 <strlen>
 8002122:	4603      	mov	r3, r0
 8002124:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, (uint8_t*) string, len, 1000);
 8002126:	7bfb      	ldrb	r3, [r7, #15]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <send_uart+0x2c>)
 8002132:	f004 fb87 	bl	8006844 <HAL_UART_Transmit>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000348 	.word	0x20000348

08002144 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fdc3 	bl	8002cd8 <HAL_Delay>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <bufsize>:

int bufsize(char *buf)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  int i = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8002166:	e002      	b.n	800216e <bufsize+0x14>
    i++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f6      	bne.n	8002168 <bufsize+0xe>
  return i;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <clear_buffer>:

void clear_buffer(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
  for (int i = 0; i < BUFFER_SIZE; i++)
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	e007      	b.n	80021a4 <clear_buffer+0x1c>
    buffer[i] = '\0';
 8002194:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <clear_buffer+0x30>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BUFFER_SIZE; i++)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80021a8:	ddf4      	ble.n	8002194 <clear_buffer+0xc>
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000210 	.word	0x20000210

080021bc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c0:	f000 fd04 	bl	8002bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c4:	f000 f81a 	bl	80021fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021c8:	f000 f88c 	bl	80022e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021cc:	f000 f99a 	bl	8002504 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80021d0:	f000 f924 	bl	800241c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80021d4:	f000 f96e 	bl	80024b4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80021d8:	f000 f8a2 	bl	8002320 <MX_I2C1_Init>
  MX_SPI1_Init();
 80021dc:	f000 f8e0 	bl	80023a0 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK)
 80021e0:	f005 f942 	bl	8007468 <MX_FATFS_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <main+0x32>
  {
    Error_Handler();
 80021ea:	f000 f9e7 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  //  logging_sdcard("################\n");
  initialize_sd_card();
 80021ee:	f7ff fda5 	bl	8001d3c <initialize_sd_card>
  lis2dh12_read_data_polling();
 80021f2:	f7ff fe53 	bl	8001e9c <lis2dh12_read_data_polling>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021f6:	bf00      	nop
 80021f8:	e7fd      	b.n	80021f6 <main+0x3a>
	...

080021fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b09a      	sub	sp, #104	@ 0x68
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	2248      	movs	r2, #72	@ 0x48
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f008 fcb7 	bl	800ab7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8002222:	f001 ff1f 	bl	8004064 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff fd3c 	bl	8001ca4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800222c:	4b2c      	ldr	r3, [pc, #176]	@ (80022e0 <SystemClock_Config+0xe4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002234:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <SystemClock_Config+0xe4>)
 8002236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <SystemClock_Config+0xe4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 8002248:	2327      	movs	r3, #39	@ 0x27
 800224a:	623b      	str	r3, [r7, #32]
      | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800224c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002252:	2301      	movs	r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800225c:	2301      	movs	r3, #1
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002260:	2340      	movs	r3, #64	@ 0x40
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002264:	2300      	movs	r3, #0
 8002266:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002268:	2360      	movs	r3, #96	@ 0x60
 800226a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226c:	2302      	movs	r3, #2
 800226e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002270:	2301      	movs	r3, #1
 8002272:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002278:	2318      	movs	r3, #24
 800227a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800227c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002280:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002282:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002286:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002288:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800228c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228e:	f107 0320 	add.w	r3, r7, #32
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fa7a 	bl	800478c <HAL_RCC_OscConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800229e:	f000 f98d 	bl	80025bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80022a2:	236f      	movs	r3, #111	@ 0x6f
 80022a4:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a6:	2303      	movs	r3, #3
 80022a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2101      	movs	r1, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fdd6 	bl	8004e74 <HAL_RCC_ClockConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80022ce:	f000 f975 	bl	80025bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 80022d2:	f003 fb91 	bl	80059f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022d6:	bf00      	nop
 80022d8:	3768      	adds	r7, #104	@ 0x68
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58000400 	.word	0x58000400

080022e4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	@ 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80022ea:	463b      	mov	r3, r7
 80022ec:	2250      	movs	r2, #80	@ 0x50
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f008 fc44 	bl	800ab7e <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80022f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80022fc:	2300      	movs	r3, #0
 80022fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002300:	2300      	movs	r3, #0
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fa00 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8002312:	f000 f953 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002316:	bf00      	nop
 8002318:	3750      	adds	r7, #80	@ 0x50
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002324:	4b1b      	ldr	r3, [pc, #108]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002326:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <MX_I2C1_Init+0x78>)
 8002328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_I2C1_Init+0x74>)
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <MX_I2C1_Init+0x7c>)
 800232e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002330:	4b18      	ldr	r3, [pc, #96]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002338:	2201      	movs	r2, #1
 800233a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800233c:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <MX_I2C1_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <MX_I2C1_Init+0x74>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800235a:	480e      	ldr	r0, [pc, #56]	@ (8002394 <MX_I2C1_Init+0x74>)
 800235c:	f000 ff66 	bl	800322c <HAL_I2C_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002366:	f000 f929 	bl	80025bc <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800236a:	2100      	movs	r1, #0
 800236c:	4809      	ldr	r0, [pc, #36]	@ (8002394 <MX_I2C1_Init+0x74>)
 800236e:	f001 fce9 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002378:	f000 f920 	bl	80025bc <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	4805      	ldr	r0, [pc, #20]	@ (8002394 <MX_I2C1_Init+0x74>)
 8002380:	f001 fd2b 	bl	8003dda <HAL_I2CEx_ConfigDigitalFilter>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800238a:	f000 f917 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000290 	.word	0x20000290
 8002398:	40005400 	.word	0x40005400
 800239c:	00b07cb4 	.word	0x00b07cb4

080023a0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <MX_SPI1_Init+0x78>)
 80023a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023ba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023d6:	2218      	movs	r2, #24
 80023d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023ee:	2207      	movs	r2, #7
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <MX_SPI1_Init+0x74>)
 80023fa:	2208      	movs	r2, #8
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_SPI1_Init+0x74>)
 8002400:	f003 fc11 	bl	8005c26 <HAL_SPI_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800240a:	f000 f8d7 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200002e4 	.word	0x200002e4
 8002418:	40013000 	.word	0x40013000

0800241c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002420:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002422:	4a23      	ldr	r2, [pc, #140]	@ (80024b0 <MX_USART1_UART_Init+0x94>)
 8002424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002426:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800243a:	4b1c      	ldr	r3, [pc, #112]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b17      	ldr	r3, [pc, #92]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002454:	2200      	movs	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002458:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 800245a:	2200      	movs	r2, #0
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002460:	2200      	movs	r2, #0
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002464:	4811      	ldr	r0, [pc, #68]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002466:	f004 f99d 	bl	80067a4 <HAL_UART_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002470:	f000 f8a4 	bl	80025bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002474:	2100      	movs	r1, #0
 8002476:	480d      	ldr	r0, [pc, #52]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 8002478:	f004 fef2 	bl	8007260 <HAL_UARTEx_SetTxFifoThreshold>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002482:	f000 f89b 	bl	80025bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002486:	2100      	movs	r1, #0
 8002488:	4808      	ldr	r0, [pc, #32]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 800248a:	f004 ff27 	bl	80072dc <HAL_UARTEx_SetRxFifoThreshold>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002494:	f000 f892 	bl	80025bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002498:	4804      	ldr	r0, [pc, #16]	@ (80024ac <MX_USART1_UART_Init+0x90>)
 800249a:	f004 fea8 	bl	80071ee <HAL_UARTEx_DisableFifoMode>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024a4:	f000 f88a 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000348 	.word	0x20000348
 80024b0:	40013800 	.word	0x40013800

080024b4 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024ba:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <MX_USB_PCD_Init+0x4c>)
 80024bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80024be:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024c0:	2208      	movs	r2, #8
 80024c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024cc:	2202      	movs	r2, #2
 80024ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80024d0:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024d8:	2200      	movs	r2, #0
 80024da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024de:	2200      	movs	r2, #0
 80024e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80024e8:	4804      	ldr	r0, [pc, #16]	@ (80024fc <MX_USB_PCD_Init+0x48>)
 80024ea:	f001 fcc2 	bl	8003e72 <HAL_PCD_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80024f4:	f000 f862 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200003dc 	.word	0x200003dc
 8002500:	40006800 	.word	0x40006800

08002504 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	2004      	movs	r0, #4
 800251a:	f7ff fbd9 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2002      	movs	r0, #2
 8002520:	f7ff fbd6 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fbd3 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800252a:	2008      	movs	r0, #8
 800252c:	f7ff fbd0 	bl	8001cd0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2123      	movs	r1, #35	@ 0x23
 8002534:	481e      	ldr	r0, [pc, #120]	@ (80025b0 <MX_GPIO_Init+0xac>)
 8002536:	f000 fe47 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002540:	481c      	ldr	r0, [pc, #112]	@ (80025b4 <MX_GPIO_Init+0xb0>)
 8002542:	f000 fe41 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002546:	2310      	movs	r3, #16
 8002548:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4817      	ldr	r0, [pc, #92]	@ (80025b4 <MX_GPIO_Init+0xb0>)
 8002558:	f000 fcc6 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 800255c:	2323      	movs	r3, #35	@ 0x23
 800255e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	480f      	ldr	r0, [pc, #60]	@ (80025b0 <MX_GPIO_Init+0xac>)
 8002572:	f000 fcb9 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800257a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257c:	2301      	movs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4809      	ldr	r0, [pc, #36]	@ (80025b4 <MX_GPIO_Init+0xb0>)
 800258e:	f000 fcab 	bl	8002ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8002592:	2303      	movs	r3, #3
 8002594:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_GPIO_Init+0xb4>)
 80025a4:	f000 fca0 	bl	8002ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	48000400 	.word	0x48000400
 80025b4:	48000800 	.word	0x48000800
 80025b8:	48000c00 	.word	0x48000c00

080025bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c0:	b672      	cpsid	i
}
 80025c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <Error_Handler+0x8>

080025c8 <LL_AHB2_GRP1_EnableClock>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002606:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4313      	orrs	r3, r2
 8002610:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002616:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002638:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800263a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4313      	orrs	r3, r2
 8002642:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002648:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002650:	68fb      	ldr	r3, [r7, #12]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b09c      	sub	sp, #112	@ 0x70
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2250      	movs	r2, #80	@ 0x50
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f008 fa76 	bl	800ab7e <memset>
  if(hi2c->Instance==I2C1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_I2C_MspInit+0x88>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d126      	bne.n	80026ea <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800269c:	2304      	movs	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026a0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4618      	mov	r0, r3
 80026ac:	f003 f82e 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026b6:	f7ff ff81 	bl	80025bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7ff ff84 	bl	80025c8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c6:	2312      	movs	r3, #18
 80026c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026d2:	2304      	movs	r3, #4
 80026d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026da:	4619      	mov	r1, r3
 80026dc:	4806      	ldr	r0, [pc, #24]	@ (80026f8 <HAL_I2C_MspInit+0x8c>)
 80026de:	f000 fc03 	bl	8002ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026e2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80026e6:	f7ff ff88 	bl	80025fa <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026ea:	bf00      	nop
 80026ec:	3770      	adds	r7, #112	@ 0x70
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40005400 	.word	0x40005400
 80026f8:	48000400 	.word	0x48000400

080026fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0f      	ldr	r2, [pc, #60]	@ (8002758 <HAL_SPI_MspInit+0x5c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d117      	bne.n	800274e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800271e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002722:	f7ff ff83 	bl	800262c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff ff4e 	bl	80025c8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800272c:	23e0      	movs	r3, #224	@ 0xe0
 800272e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800273c:	2305      	movs	r3, #5
 800273e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4619      	mov	r1, r3
 8002746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800274a:	f000 fbcd 	bl	8002ee8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800274e:	bf00      	nop
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40013000 	.word	0x40013000

0800275c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b09c      	sub	sp, #112	@ 0x70
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	2250      	movs	r2, #80	@ 0x50
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f008 f9fe 	bl	800ab7e <memset>
  if(huart->Instance==USART1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_UART_MspInit+0x84>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d124      	bne.n	80027d6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800278c:	2301      	movs	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	4618      	mov	r0, r3
 800279a:	f002 ffb7 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027a4:	f7ff ff0a 	bl	80025bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80027ac:	f7ff ff3e 	bl	800262c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b0:	2002      	movs	r0, #2
 80027b2:	f7ff ff09 	bl	80025c8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027b6:	23c0      	movs	r3, #192	@ 0xc0
 80027b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027be:	2301      	movs	r3, #1
 80027c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027c6:	2307      	movs	r3, #7
 80027c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027ce:	4619      	mov	r1, r3
 80027d0:	4804      	ldr	r0, [pc, #16]	@ (80027e4 <HAL_UART_MspInit+0x88>)
 80027d2:	f000 fb89 	bl	8002ee8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80027d6:	bf00      	nop
 80027d8:	3770      	adds	r7, #112	@ 0x70
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40013800 	.word	0x40013800
 80027e4:	48000400 	.word	0x48000400

080027e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09c      	sub	sp, #112	@ 0x70
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	2250      	movs	r2, #80	@ 0x50
 8002806:	2100      	movs	r1, #0
 8002808:	4618      	mov	r0, r3
 800280a:	f008 f9b8 	bl	800ab7e <memset>
  if(hpcd->Instance==USB)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1f      	ldr	r2, [pc, #124]	@ (8002890 <HAL_PCD_MspInit+0xa8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d136      	bne.n	8002886 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002818:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800281c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800281e:	2318      	movs	r3, #24
 8002820:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002822:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002826:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002828:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800282c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800282e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002832:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002838:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800283a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800283e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	4618      	mov	r0, r3
 8002846:	f002 ff61 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002850:	f7ff feb4 	bl	80025bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	2001      	movs	r0, #1
 8002856:	f7ff feb7 	bl	80025c8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800285a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800285e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	2300      	movs	r3, #0
 800286a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800286c:	230a      	movs	r3, #10
 800286e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800287a:	f000 fb35 	bl	8002ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800287e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002882:	f7ff feba 	bl	80025fa <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002886:	bf00      	nop
 8002888:	3770      	adds	r7, #112	@ 0x70
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40006800 	.word	0x40006800

08002894 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <SDTimer_Handler+0x40>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <SDTimer_Handler+0x1c>
    Timer1--;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <SDTimer_Handler+0x40>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <SDTimer_Handler+0x40>)
 80028ae:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80028b0:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <SDTimer_Handler+0x44>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <SDTimer_Handler+0x34>
    Timer2--;
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <SDTimer_Handler+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <SDTimer_Handler+0x44>)
 80028c6:	701a      	strb	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	2000275d 	.word	0x2000275d
 80028d8:	2000275e 	.word	0x2000275e

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <NMI_Handler+0x4>

080028e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <MemManage_Handler+0x4>

080028f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <UsageFault_Handler+0x4>

08002904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <SysTick_Handler+0x30>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <SysTick_Handler+0x30>)
 8002940:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002942:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <SysTick_Handler+0x30>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b09      	cmp	r3, #9
 800294a:	d904      	bls.n	8002956 <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <SysTick_Handler+0x30>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8002952:	f7ff ff9f 	bl	8002894 <SDTimer_Handler>
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002956:	f000 f993 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000275c 	.word	0x2000275c

08002964 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
	return 1;
 8002968:	2301      	movs	r3, #1
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_kill>:

int _kill(int pid, int sig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800297e:	f008 f951 	bl	800ac24 <__errno>
 8002982:	4603      	mov	r3, r0
 8002984:	2216      	movs	r2, #22
 8002986:	601a      	str	r2, [r3, #0]
	return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <_exit>:

void _exit (int status)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffe7 	bl	8002974 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029a6:	bf00      	nop
 80029a8:	e7fd      	b.n	80029a6 <_exit+0x12>

080029aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e00a      	b.n	80029d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029bc:	f3af 8000 	nop.w
 80029c0:	4601      	mov	r1, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	b2ca      	uxtb	r2, r1
 80029ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	3301      	adds	r3, #1
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dbf0      	blt.n	80029bc <_read+0x12>
	}

return len;
 80029da:	687b      	ldr	r3, [r7, #4]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	return -1;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a0c:	605a      	str	r2, [r3, #4]
	return 0;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_isatty>:

int _isatty(int file)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
	return 0;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <_sbrk+0x5c>)
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <_sbrk+0x60>)
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a60:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <_sbrk+0x64>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <_sbrk+0x68>)
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a6e:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <_sbrk+0x64>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d207      	bcs.n	8002a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a7c:	f008 f8d2 	bl	800ac24 <__errno>
 8002a80:	4603      	mov	r3, r0
 8002a82:	220c      	movs	r2, #12
 8002a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e009      	b.n	8002aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a92:	4b07      	ldr	r3, [pc, #28]	@ (8002ab0 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	4a05      	ldr	r2, [pc, #20]	@ (8002ab0 <_sbrk+0x64>)
 8002a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20030000 	.word	0x20030000
 8002aac:	00000400 	.word	0x00000400
 8002ab0:	20002760 	.word	0x20002760
 8002ab4:	200028f0 	.word	0x200028f0

08002ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002abc:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <SystemInit+0x98>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <SystemInit+0x98>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002ae4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002af0:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <SystemInit+0x9c>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b02:	f023 0305 	bic.w	r3, r3, #5
 8002b06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b22:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <SystemInit+0xa0>)
 8002b24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <SystemInit+0xa0>)
 8002b2c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00
 8002b54:	faf6fefb 	.word	0xfaf6fefb
 8002b58:	22041000 	.word	0x22041000

08002b5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b60:	3304      	adds	r3, #4

08002b62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b66:	d3f9      	bcc.n	8002b5c <CopyDataInit>
  bx lr
 8002b68:	4770      	bx	lr

08002b6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b6c:	3004      	adds	r0, #4

08002b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b70:	d3fb      	bcc.n	8002b6a <FillZerobss>
  bx lr
 8002b72:	4770      	bx	lr

08002b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b74:	480c      	ldr	r0, [pc, #48]	@ (8002ba8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b78:	f7ff ff9e 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002b7c:	480b      	ldr	r0, [pc, #44]	@ (8002bac <LoopForever+0x8>)
 8002b7e:	490c      	ldr	r1, [pc, #48]	@ (8002bb0 <LoopForever+0xc>)
 8002b80:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <LoopForever+0x10>)
 8002b82:	2300      	movs	r3, #0
 8002b84:	f7ff ffed 	bl	8002b62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002b88:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <LoopForever+0x14>)
 8002b8a:	490c      	ldr	r1, [pc, #48]	@ (8002bbc <LoopForever+0x18>)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f7ff ffee 	bl	8002b6e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002b92:	480b      	ldr	r0, [pc, #44]	@ (8002bc0 <LoopForever+0x1c>)
 8002b94:	490b      	ldr	r1, [pc, #44]	@ (8002bc4 <LoopForever+0x20>)
 8002b96:	2300      	movs	r3, #0
 8002b98:	f7ff ffe9 	bl	8002b6e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b9c:	f008 f848 	bl	800ac30 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002ba0:	f7ff fb0c 	bl	80021bc <main>

08002ba4 <LoopForever>:

LoopForever:
  b LoopForever
 8002ba4:	e7fe      	b.n	8002ba4 <LoopForever>
 8002ba6:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002ba8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	200001f0 	.word	0x200001f0
 8002bb4:	0800ea78 	.word	0x0800ea78
  INIT_BSS _sbss, _ebss
 8002bb8:	200001f0 	.word	0x200001f0
 8002bbc:	200028f0 	.word	0x200028f0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002bc0:	20030000 	.word	0x20030000
 8002bc4:	20030000 	.word	0x20030000

08002bc8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC1_IRQHandler>
	...

08002bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <HAL_Init+0x3c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <HAL_Init+0x3c>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be2:	2003      	movs	r0, #3
 8002be4:	f000 f94e 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be8:	2000      	movs	r0, #0
 8002bea:	f000 f80f 	bl	8002c0c <HAL_InitTick>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	e001      	b.n	8002bfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bfa:	f7ff fd30 	bl	800265e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	58004000 	.word	0x58004000

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <HAL_InitTick+0x6c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d024      	beq.n	8002c6a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c20:	f002 fad4 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <HAL_InitTick+0x6c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c30:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f948 	bl	8002ece <HAL_SYSTICK_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10f      	bne.n	8002c64 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b0f      	cmp	r3, #15
 8002c48:	d809      	bhi.n	8002c5e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c52:	f000 f922 	bl	8002e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_InitTick+0x70>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e007      	b.n	8002c6e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
 8002c62:	e004      	b.n	8002c6e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e001      	b.n	8002c6e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	2000000c 	.word	0x2000000c

08002c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000010 	.word	0x20000010
 8002ca4:	20002764 	.word	0x20002764

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20002764 	.word	0x20002764

08002cc0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <HAL_GetTickPrio+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	2000000c 	.word	0x2000000c

08002cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce0:	f7ff ffe2 	bl	8002ca8 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d005      	beq.n	8002cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <HAL_Delay+0x44>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cfe:	bf00      	nop
 8002d00:	f7ff ffd2 	bl	8002ca8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d8f7      	bhi.n	8002d00 <HAL_Delay+0x28>
  {
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000010 	.word	0x20000010

08002d20 <__NVIC_SetPriorityGrouping>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_GetPriorityGrouping>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	@ (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_SetPriority>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	db0a      	blt.n	8002dae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	490c      	ldr	r1, [pc, #48]	@ (8002dd0 <__NVIC_SetPriority+0x4c>)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	440b      	add	r3, r1
 8002da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002dac:	e00a      	b.n	8002dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4908      	ldr	r1, [pc, #32]	@ (8002dd4 <__NVIC_SetPriority+0x50>)
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3b04      	subs	r3, #4
 8002dbc:	0112      	lsls	r2, r2, #4
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	761a      	strb	r2, [r3, #24]
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000e100 	.word	0xe000e100
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <NVIC_EncodePriority>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b089      	sub	sp, #36	@ 0x24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f1c3 0307 	rsb	r3, r3, #7
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	bf28      	it	cs
 8002df6:	2304      	movcs	r3, #4
 8002df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2b06      	cmp	r3, #6
 8002e00:	d902      	bls.n	8002e08 <NVIC_EncodePriority+0x30>
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3b03      	subs	r3, #3
 8002e06:	e000      	b.n	8002e0a <NVIC_EncodePriority+0x32>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e20:	f04f 31ff 	mov.w	r1, #4294967295
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	4313      	orrs	r3, r2
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <SysTick_Config>:
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	@ (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff8e 	bl	8002d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff47 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff5e 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff90 	bl	8002dd8 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5f 	bl	8002d84 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffb2 	bl	8002e40 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef6:	e14c      	b.n	8003192 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 813e 	beq.w	800318c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d005      	beq.n	8002f28 <HAL_GPIO_Init+0x40>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d130      	bne.n	8002f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5e:	2201      	movs	r2, #1
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 0201 	and.w	r2, r3, #1
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d017      	beq.n	8002fc6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d123      	bne.n	800301a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	220f      	movs	r2, #15
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	6939      	ldr	r1, [r7, #16]
 8003016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0203 	and.w	r2, r3, #3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8098 	beq.w	800318c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800305c:	4a54      	ldr	r2, [pc, #336]	@ (80031b0 <HAL_GPIO_Init+0x2c8>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003086:	d019      	beq.n	80030bc <HAL_GPIO_Init+0x1d4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a4a      	ldr	r2, [pc, #296]	@ (80031b4 <HAL_GPIO_Init+0x2cc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <HAL_GPIO_Init+0x1d0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a49      	ldr	r2, [pc, #292]	@ (80031b8 <HAL_GPIO_Init+0x2d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00d      	beq.n	80030b4 <HAL_GPIO_Init+0x1cc>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a48      	ldr	r2, [pc, #288]	@ (80031bc <HAL_GPIO_Init+0x2d4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d007      	beq.n	80030b0 <HAL_GPIO_Init+0x1c8>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a47      	ldr	r2, [pc, #284]	@ (80031c0 <HAL_GPIO_Init+0x2d8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_GPIO_Init+0x1c4>
 80030a8:	2304      	movs	r3, #4
 80030aa:	e008      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030ac:	2307      	movs	r3, #7
 80030ae:	e006      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030b0:	2303      	movs	r3, #3
 80030b2:	e004      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e002      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_GPIO_Init+0x1d6>
 80030bc:	2300      	movs	r3, #0
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	f002 0203 	and.w	r2, r2, #3
 80030c4:	0092      	lsls	r2, r2, #2
 80030c6:	4093      	lsls	r3, r2
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ce:	4938      	ldr	r1, [pc, #224]	@ (80031b0 <HAL_GPIO_Init+0x2c8>)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030dc:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003100:	4a30      	ldr	r2, [pc, #192]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003106:	4b2f      	ldr	r3, [pc, #188]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800312a:	4a26      	ldr	r2, [pc, #152]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003130:	4b24      	ldr	r3, [pc, #144]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003156:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800315e:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	43db      	mvns	r3, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003184:	4a0f      	ldr	r2, [pc, #60]	@ (80031c4 <HAL_GPIO_Init+0x2dc>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3301      	adds	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f aeab 	bne.w	8002ef8 <HAL_GPIO_Init+0x10>
  }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40010000 	.word	0x40010000
 80031b4:	48000400 	.word	0x48000400
 80031b8:	48000800 	.word	0x48000800
 80031bc:	48000c00 	.word	0x48000c00
 80031c0:	48001000 	.word	0x48001000
 80031c4:	58000800 	.word	0x58000800

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43d9      	mvns	r1, r3
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	400b      	ands	r3, r1
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e08d      	b.n	800335a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fa0a 	bl	800266c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800327c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d108      	bne.n	80032ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e007      	b.n	80032de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003300:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 80f9 	bne.w	800357e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_I2C_Mem_Write+0x34>
 8003392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0ed      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Mem_Write+0x4e>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0e6      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ba:	f7ff fc75 	bl	8002ca8 <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2319      	movs	r3, #25
 80033c6:	2201      	movs	r2, #1
 80033c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fac3 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0d1      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	@ 0x21
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2240      	movs	r2, #64	@ 0x40
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003404:	88f8      	ldrh	r0, [r7, #6]
 8003406:	893a      	ldrh	r2, [r7, #8]
 8003408:	8979      	ldrh	r1, [r7, #10]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4603      	mov	r3, r0
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f9d3 	bl	80037c0 <I2C_RequestMemoryWrite>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0a9      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2bff      	cmp	r3, #255	@ 0xff
 8003434:	d90e      	bls.n	8003454 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	22ff      	movs	r2, #255	@ 0xff
 800343a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	b2da      	uxtb	r2, r3
 8003442:	8979      	ldrh	r1, [r7, #10]
 8003444:	2300      	movs	r3, #0
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fc47 	bl	8003ce0 <I2C_TransferConfig>
 8003452:	e00f      	b.n	8003474 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	b2da      	uxtb	r2, r3
 8003464:	8979      	ldrh	r1, [r7, #10]
 8003466:	2300      	movs	r3, #0
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fc36 	bl	8003ce0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fac6 	bl	8003a0a <I2C_WaitOnTXISFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e07b      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d034      	beq.n	800352c <HAL_I2C_Mem_Write+0x1c8>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d130      	bne.n	800352c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	@ 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fa3f 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04d      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2bff      	cmp	r3, #255	@ 0xff
 80034ec:	d90e      	bls.n	800350c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22ff      	movs	r2, #255	@ 0xff
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	2300      	movs	r3, #0
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fbeb 	bl	8003ce0 <I2C_TransferConfig>
 800350a:	e00f      	b.n	800352c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	b2da      	uxtb	r2, r3
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	2300      	movs	r3, #0
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fbda 	bl	8003ce0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d19e      	bne.n	8003474 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 faac 	bl	8003a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e01a      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2220      	movs	r2, #32
 8003550:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_I2C_Mem_Write+0x224>)
 800355e:	400b      	ands	r3, r1
 8003560:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fe00e800 	.word	0xfe00e800

0800358c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	f040 80fd 	bne.w	80037ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x34>
 80035ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0f1      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_I2C_Mem_Read+0x4e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e0ea      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035e2:	f7ff fb61 	bl	8002ca8 <HAL_GetTick>
 80035e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2319      	movs	r3, #25
 80035ee:	2201      	movs	r2, #1
 80035f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9af 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0d5      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2222      	movs	r2, #34	@ 0x22
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2240      	movs	r2, #64	@ 0x40
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800362c:	88f8      	ldrh	r0, [r7, #6]
 800362e:	893a      	ldrh	r2, [r7, #8]
 8003630:	8979      	ldrh	r1, [r7, #10]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	4603      	mov	r3, r0
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f913 	bl	8003868 <I2C_RequestMemoryRead>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0ad      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2bff      	cmp	r3, #255	@ 0xff
 800365c:	d90e      	bls.n	800367c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	22ff      	movs	r2, #255	@ 0xff
 8003662:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003668:	b2da      	uxtb	r2, r3
 800366a:	8979      	ldrh	r1, [r7, #10]
 800366c:	4b52      	ldr	r3, [pc, #328]	@ (80037b8 <HAL_I2C_Mem_Read+0x22c>)
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fb33 	bl	8003ce0 <I2C_TransferConfig>
 800367a:	e00f      	b.n	800369c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	b2da      	uxtb	r2, r3
 800368c:	8979      	ldrh	r1, [r7, #10]
 800368e:	4b4a      	ldr	r3, [pc, #296]	@ (80037b8 <HAL_I2C_Mem_Read+0x22c>)
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fb22 	bl	8003ce0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a2:	2200      	movs	r2, #0
 80036a4:	2104      	movs	r1, #4
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f956 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07c      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d034      	beq.n	800375c <HAL_I2C_Mem_Read+0x1d0>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d130      	bne.n	800375c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f927 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e04d      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2bff      	cmp	r3, #255	@ 0xff
 800371c:	d90e      	bls.n	800373c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22ff      	movs	r2, #255	@ 0xff
 8003722:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003728:	b2da      	uxtb	r2, r3
 800372a:	8979      	ldrh	r1, [r7, #10]
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fad3 	bl	8003ce0 <I2C_TransferConfig>
 800373a:	e00f      	b.n	800375c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	b2da      	uxtb	r2, r3
 800374c:	8979      	ldrh	r1, [r7, #10]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fac2 	bl	8003ce0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d19a      	bne.n	800369c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f994 	bl	8003a98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e01a      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2220      	movs	r2, #32
 8003780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_I2C_Mem_Read+0x230>)
 800378e:	400b      	ands	r3, r1
 8003790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	80002400 	.word	0x80002400
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	817b      	strh	r3, [r7, #10]
 80037d2:	460b      	mov	r3, r1
 80037d4:	813b      	strh	r3, [r7, #8]
 80037d6:	4613      	mov	r3, r2
 80037d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	8979      	ldrh	r1, [r7, #10]
 80037e0:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <I2C_RequestMemoryWrite+0xa4>)
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fa79 	bl	8003ce0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f909 	bl	8003a0a <I2C_WaitOnTXISFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e02c      	b.n	800385c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003808:	893b      	ldrh	r3, [r7, #8]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
 8003812:	e015      	b.n	8003840 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003814:	893b      	ldrh	r3, [r7, #8]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	b29b      	uxth	r3, r3
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f8ef 	bl	8003a0a <I2C_WaitOnTXISFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e012      	b.n	800385c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2200      	movs	r2, #0
 8003848:	2180      	movs	r1, #128	@ 0x80
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 f884 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	80002000 	.word	0x80002000

08003868 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	8979      	ldrh	r1, [r7, #10]
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <I2C_RequestMemoryRead+0xa4>)
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2300      	movs	r3, #0
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fa26 	bl	8003ce0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f8b6 	bl	8003a0a <I2C_WaitOnTXISFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e02c      	b.n	8003902 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038ae:	893b      	ldrh	r3, [r7, #8]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038b8:	e015      	b.n	80038e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ba:	893b      	ldrh	r3, [r7, #8]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	69b9      	ldr	r1, [r7, #24]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f89c 	bl	8003a0a <I2C_WaitOnTXISFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e012      	b.n	8003902 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038dc:	893b      	ldrh	r3, [r7, #8]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	@ 0x40
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f831 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	80002000 	.word	0x80002000

08003910 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d103      	bne.n	800392e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d007      	beq.n	800394c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	619a      	str	r2, [r3, #24]
  }
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003968:	e03b      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	6839      	ldr	r1, [r7, #0]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f8d6 	bl	8003b20 <I2C_IsErrorOccurred>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d02d      	beq.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003986:	f7ff f98f 	bl	8002ca8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d302      	bcc.n	800399c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d122      	bne.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d113      	bne.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e00f      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d0b4      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a16:	e033      	b.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f87f 	bl	8003b20 <I2C_IsErrorOccurred>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e031      	b.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d025      	beq.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a34:	f7ff f938 	bl	8002ca8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d11a      	bne.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d013      	beq.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e007      	b.n	8003a90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d1c4      	bne.n	8003a18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa4:	e02f      	b.n	8003b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f838 	bl	8003b20 <I2C_IsErrorOccurred>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e02d      	b.n	8003b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7ff f8f5 	bl	8002ca8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11a      	bne.n	8003b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d013      	beq.n	8003b06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e007      	b.n	8003b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d1c8      	bne.n	8003aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d068      	beq.n	8003c1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b54:	e049      	b.n	8003bea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d045      	beq.n	8003bea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7ff f8a3 	bl	8002ca8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_IsErrorOccurred+0x54>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d13a      	bne.n	8003bea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b96:	d121      	bne.n	8003bdc <I2C_IsErrorOccurred+0xbc>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9e:	d01d      	beq.n	8003bdc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d01a      	beq.n	8003bdc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bb6:	f7ff f877 	bl	8002ca8 <HAL_GetTick>
 8003bba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bbc:	e00e      	b.n	8003bdc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bbe:	f7ff f873 	bl	8002ca8 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b19      	cmp	r3, #25
 8003bca:	d907      	bls.n	8003bdc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bda:	e006      	b.n	8003bea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d1e9      	bne.n	8003bbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d003      	beq.n	8003c00 <I2C_IsErrorOccurred+0xe0>
 8003bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0aa      	beq.n	8003b56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f043 0308 	orr.w	r3, r3, #8
 8003c58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01c      	beq.n	8003cce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff fe3b 	bl	8003910 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <I2C_IsErrorOccurred+0x1bc>)
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3728      	adds	r7, #40	@ 0x28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf8:	7a7b      	ldrb	r3, [r7, #9]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	0d5b      	lsrs	r3, r3, #21
 8003d1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d1e:	4b08      	ldr	r3, [pc, #32]	@ (8003d40 <I2C_TransferConfig+0x60>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	43db      	mvns	r3, r3
 8003d24:	ea02 0103 	and.w	r1, r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	03ff63ff 	.word	0x03ff63ff

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d139      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e033      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2224      	movs	r2, #36	@ 0x24
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0c0      	b.n	8004006 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d106      	bne.n	8003e9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7fe fca5 	bl	80027e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 faa2 	bl	80073f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e03e      	b.n	8003f34 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	3311      	adds	r3, #17
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3310      	adds	r3, #16
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	440b      	add	r3, r1
 8003eec:	3313      	adds	r3, #19
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	3320      	adds	r3, #32
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	3324      	adds	r3, #36	@ 0x24
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	440b      	add	r3, r1
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	3301      	adds	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3bb      	bcc.n	8003eb6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e044      	b.n	8003fce <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f6c:	7bfa      	ldrb	r2, [r7, #15]
 8003f6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	440b      	add	r3, r1
 8003f94:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	791b      	ldrb	r3, [r3, #4]
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3b5      	bcc.n	8003f44 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fe4:	f003 fa21 	bl	800742a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7a9b      	ldrb	r3, [r3, #10]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f805 	bl	800400e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004032:	b29b      	uxth	r3, r3
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004046:	b29b      	uxth	r3, r3
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a04      	ldr	r2, [pc, #16]	@ (8004080 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800406e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	58000400 	.word	0x58000400

08004084 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004088:	4b04      	ldr	r3, [pc, #16]	@ (800409c <HAL_PWREx_GetVoltageRange+0x18>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	58000400 	.word	0x58000400

080040a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b2:	d101      	bne.n	80040b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_HSE_Enable>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <LL_RCC_HSE_Disable>:
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_HSE_IsReady>:
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004112:	d101      	bne.n	8004118 <LL_RCC_HSE_IsReady+0x18>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <LL_RCC_HSE_IsReady+0x1a>
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_RCC_HSI_Enable>:
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_RCC_HSI_Disable>:
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004154:	6013      	str	r3, [r2, #0]
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_HSI_IsReady>:
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d101      	bne.n	8004178 <LL_RCC_HSI_IsReady+0x18>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <LL_RCC_HSI_IsReady+0x1a>
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_HSI48_Enable>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_RCC_HSI48_Disable>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80041d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_RCC_HSI48_IsReady>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d101      	bne.n	800420a <LL_RCC_HSI48_IsReady+0x18>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <LL_RCC_HSI48_IsReady+0x1a>
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_RCC_LSE_Enable>:
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800422e:	bf00      	nop
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_RCC_LSE_Disable>:
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_LSE_EnableBypass>:
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_RCC_LSE_DisableBypass>:
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d101      	bne.n	80042b6 <LL_RCC_LSE_IsReady+0x18>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <LL_RCC_LSE_IsReady+0x1a>
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d101      	bne.n	800431e <LL_RCC_LSI1_IsReady+0x18>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_RCC_LSI1_IsReady+0x1a>
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004336:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004358:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b08      	cmp	r3, #8
 8004380:	d101      	bne.n	8004386 <LL_RCC_LSI2_IsReady+0x18>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <LL_RCC_LSI2_IsReady+0x1a>
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800439a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b02      	cmp	r3, #2
 800440c:	d101      	bne.n	8004412 <LL_RCC_MSI_IsReady+0x16>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <LL_RCC_MSI_IsReady+0x18>
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004456:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2bb0      	cmp	r3, #176	@ 0xb0
 800445c:	d901      	bls.n	8004462 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800445e:	23b0      	movs	r3, #176	@ 0xb0
 8004460:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004462:	687b      	ldr	r3, [r7, #4]
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 0203 	bic.w	r2, r3, #3
 80044ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	608b      	str	r3, [r1, #8]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800450e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004512:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800456e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004622:	6013      	str	r3, [r2, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800463c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800465e:	d101      	bne.n	8004664 <LL_RCC_PLL_IsReady+0x18>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <LL_RCC_PLL_IsReady+0x1a>
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80046a2:	b480      	push	{r7}
 80046a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80046a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0303 	and.w	r3, r3, #3
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d101      	bne.n	80046ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80046f6:	b480      	push	{r7}
 80046f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800470a:	d101      	bne.n	8004710 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004730:	d101      	bne.n	8004736 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004754:	d101      	bne.n	800475a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004778:	d101      	bne.n	800477e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800477a:	2301      	movs	r3, #1
 800477c:	e000      	b.n	8004780 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08d      	sub	sp, #52	@ 0x34
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e363      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 808d 	beq.w	80048c6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ac:	f7ff fe89 	bl	80044c2 <LL_RCC_GetSysClkSource>
 80047b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047b2:	f7ff ff82 	bl	80046ba <LL_RCC_PLL_GetMainSource>
 80047b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x3e>
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d147      	bne.n	8004854 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d144      	bne.n	8004854 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e347      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80047da:	f7ff fe34 	bl	8004446 <LL_RCC_MSI_GetRange>
 80047de:	4603      	mov	r3, r0
 80047e0:	429c      	cmp	r4, r3
 80047e2:	d914      	bls.n	800480e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd2f 	bl	800524c <RCC_SetFlashLatencyFromMSIRange>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e336      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fe0e 	bl	800441e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe32 	bl	8004470 <LL_RCC_MSI_SetCalibTrimming>
 800480c:	e013      	b.n	8004836 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fe03 	bl	800441e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fe27 	bl	8004470 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fd10 	bl	800524c <RCC_SetFlashLatencyFromMSIRange>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e317      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004836:	f000 fcc9 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 800483a:	4603      	mov	r3, r0
 800483c:	4aa4      	ldr	r2, [pc, #656]	@ (8004ad0 <HAL_RCC_OscConfig+0x344>)
 800483e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004840:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad4 <HAL_RCC_OscConfig+0x348>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe f9e1 	bl	8002c0c <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d039      	beq.n	80048c4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e308      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01e      	beq.n	800489a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800485c:	f7ff fdb0 	bl	80043c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004860:	f7fe fa22 	bl	8002ca8 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004868:	f7fe fa1e 	bl	8002ca8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e2f5      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800487a:	f7ff fdbf 	bl	80043fc <LL_RCC_MSI_IsReady>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f1      	beq.n	8004868 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fdc8 	bl	800441e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff fdec 	bl	8004470 <LL_RCC_MSI_SetCalibTrimming>
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800489a:	f7ff fda0 	bl	80043de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800489e:	f7fe fa03 	bl	8002ca8 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048a6:	f7fe f9ff 	bl	8002ca8 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e2d6      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80048b8:	f7ff fda0 	bl	80043fc <LL_RCC_MSI_IsReady>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f1      	bne.n	80048a6 <HAL_RCC_OscConfig+0x11a>
 80048c2:	e000      	b.n	80048c6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d047      	beq.n	8004962 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d2:	f7ff fdf6 	bl	80044c2 <LL_RCC_GetSysClkSource>
 80048d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d8:	f7ff feef 	bl	80046ba <LL_RCC_PLL_GetMainSource>
 80048dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x164>
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d108      	bne.n	80048fc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d105      	bne.n	80048fc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d134      	bne.n	8004962 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e2b4      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d102      	bne.n	800490c <HAL_RCC_OscConfig+0x180>
 8004906:	f7ff fbdd 	bl	80040c4 <LL_RCC_HSE_Enable>
 800490a:	e001      	b.n	8004910 <HAL_RCC_OscConfig+0x184>
 800490c:	f7ff fbe9 	bl	80040e2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d012      	beq.n	800493e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fe f9c6 	bl	8002ca8 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004920:	f7fe f9c2 	bl	8002ca8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	@ 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e299      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004932:	f7ff fbe5 	bl	8004100 <LL_RCC_HSE_IsReady>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f1      	beq.n	8004920 <HAL_RCC_OscConfig+0x194>
 800493c:	e011      	b.n	8004962 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fe f9b3 	bl	8002ca8 <HAL_GetTick>
 8004942:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004946:	f7fe f9af 	bl	8002ca8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	@ 0x64
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e286      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004958:	f7ff fbd2 	bl	8004100 <LL_RCC_HSE_IsReady>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f1      	bne.n	8004946 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	f7ff fda8 	bl	80044c2 <LL_RCC_GetSysClkSource>
 8004972:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004974:	f7ff fea1 	bl	80046ba <LL_RCC_PLL_GetMainSource>
 8004978:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d005      	beq.n	800498c <HAL_RCC_OscConfig+0x200>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b0c      	cmp	r3, #12
 8004984:	d10e      	bne.n	80049a4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d10b      	bne.n	80049a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e266      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fbf1 	bl	8004184 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80049a2:	e031      	b.n	8004a08 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d019      	beq.n	80049e0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	f7ff fbba 	bl	8004124 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fe f97a 	bl	8002ca8 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b8:	f7fe f976 	bl	8002ca8 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e24d      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049ca:	f7ff fbc9 	bl	8004160 <LL_RCC_HSI_IsReady>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f1      	beq.n	80049b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fbd3 	bl	8004184 <LL_RCC_HSI_SetCalibTrimming>
 80049de:	e013      	b.n	8004a08 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e0:	f7ff fbaf 	bl	8004142 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fe f960 	bl	8002ca8 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ec:	f7fe f95c 	bl	8002ca8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e233      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049fe:	f7ff fbaf 	bl	8004160 <LL_RCC_HSI_IsReady>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f1      	bne.n	80049ec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a3 	beq.w	8004b68 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d076      	beq.n	8004b18 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d046      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004a36:	f7ff fc66 	bl	8004306 <LL_RCC_LSI1_IsReady>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004a40:	f7ff fc3f 	bl	80042c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a44:	f7fe f930 	bl	8002ca8 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004a4c:	f7fe f92c 	bl	8002ca8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e203      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004a5e:	f7ff fc52 	bl	8004306 <LL_RCC_LSI1_IsReady>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f1      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004a68:	f7ff fc5f 	bl	800432a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe f91c 	bl	8002ca8 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004a74:	f7fe f918 	bl	8002ca8 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e1ef      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004a86:	f7ff fc72 	bl	800436e <LL_RCC_LSI2_IsReady>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f1      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff fc7c 	bl	8004392 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004a9a:	f7ff fc23 	bl	80042e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fe f903 	bl	8002ca8 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004aa6:	f7fe f8ff 	bl	8002ca8 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1d6      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ab8:	f7ff fc25 	bl	8004306 <LL_RCC_LSI1_IsReady>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f1      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x31a>
 8004ac2:	e051      	b.n	8004b68 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ac4:	f7ff fbfd 	bl	80042c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fe f8ee 	bl	8002ca8 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ace:	e00c      	b.n	8004aea <HAL_RCC_OscConfig+0x35e>
 8004ad0:	20000008 	.word	0x20000008
 8004ad4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ad8:	f7fe f8e6 	bl	8002ca8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1bd      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004aea:	f7ff fc0c 	bl	8004306 <LL_RCC_LSI1_IsReady>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f1      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004af4:	f7ff fc2a 	bl	800434c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004afa:	f7fe f8d5 	bl	8002ca8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e1ac      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b0c:	f7ff fc2f 	bl	800436e <LL_RCC_LSI2_IsReady>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f1      	bne.n	8004afa <HAL_RCC_OscConfig+0x36e>
 8004b16:	e027      	b.n	8004b68 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004b18:	f7ff fc18 	bl	800434c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fe f8c4 	bl	8002ca8 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b24:	f7fe f8c0 	bl	8002ca8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e197      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004b36:	f7ff fc1a 	bl	800436e <LL_RCC_LSI2_IsReady>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f1      	bne.n	8004b24 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004b40:	f7ff fbd0 	bl	80042e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b44:	f7fe f8b0 	bl	8002ca8 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b4c:	f7fe f8ac 	bl	8002ca8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e183      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004b5e:	f7ff fbd2 	bl	8004306 <LL_RCC_LSI1_IsReady>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1f1      	bne.n	8004b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05b      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b74:	4ba7      	ldr	r3, [pc, #668]	@ (8004e14 <HAL_RCC_OscConfig+0x688>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d114      	bne.n	8004baa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b80:	f7ff fa70 	bl	8004064 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b84:	f7fe f890 	bl	8002ca8 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8c:	f7fe f88c 	bl	8002ca8 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e163      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8004e14 <HAL_RCC_OscConfig+0x688>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x42c>
 8004bb2:	f7ff fb30 	bl	8004216 <LL_RCC_LSE_Enable>
 8004bb6:	e00c      	b.n	8004bd2 <HAL_RCC_OscConfig+0x446>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b05      	cmp	r3, #5
 8004bbe:	d104      	bne.n	8004bca <HAL_RCC_OscConfig+0x43e>
 8004bc0:	f7ff fb4b 	bl	800425a <LL_RCC_LSE_EnableBypass>
 8004bc4:	f7ff fb27 	bl	8004216 <LL_RCC_LSE_Enable>
 8004bc8:	e003      	b.n	8004bd2 <HAL_RCC_OscConfig+0x446>
 8004bca:	f7ff fb35 	bl	8004238 <LL_RCC_LSE_Disable>
 8004bce:	f7ff fb55 	bl	800427c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fe f865 	bl	8002ca8 <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fe f861 	bl	8002ca8 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e136      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004bf8:	f7ff fb51 	bl	800429e <LL_RCC_LSE_IsReady>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ef      	beq.n	8004be2 <HAL_RCC_OscConfig+0x456>
 8004c02:	e013      	b.n	8004c2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fe f850 	bl	8002ca8 <HAL_GetTick>
 8004c08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fe f84c 	bl	8002ca8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e121      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c22:	f7ff fb3c 	bl	800429e <LL_RCC_LSE_IsReady>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ef      	bne.n	8004c0c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02c      	beq.n	8004c92 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d014      	beq.n	8004c6a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c40:	f7ff fab5 	bl	80041ae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fe f830 	bl	8002ca8 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4c:	f7fe f82c 	bl	8002ca8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e103      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004c5e:	f7ff fac8 	bl	80041f2 <LL_RCC_HSI48_IsReady>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f1      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4c0>
 8004c68:	e013      	b.n	8004c92 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c6a:	f7ff fab1 	bl	80041d0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fe f81b 	bl	8002ca8 <HAL_GetTick>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c76:	f7fe f817 	bl	8002ca8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0ee      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004c88:	f7ff fab3 	bl	80041f2 <LL_RCC_HSI48_IsReady>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f1      	bne.n	8004c76 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80e4 	beq.w	8004e64 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9c:	f7ff fc11 	bl	80044c2 <LL_RCC_GetSysClkSource>
 8004ca0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	f040 80b4 	bne.w	8004e1c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0203 	and.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d123      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d11c      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	0a1b      	lsrs	r3, r3, #8
 8004cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d114      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d10d      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d05d      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d058      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0a1      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d22:	f7ff fc84 	bl	800462e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d26:	f7fd ffbf 	bl	8002ca8 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fd ffbb 	bl	8002ca8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e092      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ef      	bne.n	8004d2e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	4b30      	ldr	r3, [pc, #192]	@ (8004e18 <HAL_RCC_OscConfig+0x68c>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d60:	4311      	orrs	r1, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d66:	0212      	lsls	r2, r2, #8
 8004d68:	4311      	orrs	r1, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d6e:	4311      	orrs	r1, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d74:	4311      	orrs	r1, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d84:	f7ff fc44 	bl	8004610 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d98:	f7fd ff86 	bl	8002ca8 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd ff82 	bl	8002ca8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e059      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0ef      	beq.n	8004da0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc0:	e050      	b.n	8004e64 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e04f      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d147      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dd4:	f7ff fc1c 	bl	8004610 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004de8:	f7fd ff5e 	bl	8002ca8 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fd ff5a 	bl	8002ca8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e031      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ef      	beq.n	8004df0 <HAL_RCC_OscConfig+0x664>
 8004e10:	e028      	b.n	8004e64 <HAL_RCC_OscConfig+0x6d8>
 8004e12:	bf00      	nop
 8004e14:	58000400 	.word	0x58000400
 8004e18:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d01e      	beq.n	8004e60 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e22:	f7ff fc04 	bl	800462e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fd ff3f 	bl	8002ca8 <HAL_GetTick>
 8004e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fd ff3b 	bl	8002ca8 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e012      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ef      	bne.n	8004e2e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <HAL_RCC_OscConfig+0x6e4>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	60cb      	str	r3, [r1, #12]
 8004e5e:	e001      	b.n	8004e64 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3734      	adds	r7, #52	@ 0x34
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd90      	pop	{r4, r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	eefefffc 	.word	0xeefefffc

08004e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e12d      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e88:	4b98      	ldr	r3, [pc, #608]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d91b      	bls.n	8004ece <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e96:	4b95      	ldr	r3, [pc, #596]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 0207 	bic.w	r2, r3, #7
 8004e9e:	4993      	ldr	r1, [pc, #588]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea6:	f7fd feff 	bl	8002ca8 <HAL_GetTick>
 8004eaa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004eae:	f7fd fefb 	bl	8002ca8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e111      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec0:	4b8a      	ldr	r3, [pc, #552]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d1ef      	bne.n	8004eae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fafb 	bl	80044da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ee4:	f7fd fee0 	bl	8002ca8 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004eec:	f7fd fedc 	bl	8002ca8 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0f2      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004efe:	f7ff fbe8 	bl	80046d2 <LL_RCC_IsActiveFlag_HPRE>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f1      	beq.n	8004eec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d016      	beq.n	8004f42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff faf2 	bl	8004502 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f1e:	f7fd fec3 	bl	8002ca8 <HAL_GetTick>
 8004f22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f26:	f7fd febf 	bl	8002ca8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0d5      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004f38:	f7ff fbdd 	bl	80046f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f1      	beq.n	8004f26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff faeb 	bl	800452e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f58:	f7fd fea6 	bl	8002ca8 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f60:	f7fd fea2 	bl	8002ca8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e0b8      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004f72:	f7ff fbd3 	bl	800471c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f1      	beq.n	8004f60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d016      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fae5 	bl	800455c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f92:	f7fd fe89 	bl	8002ca8 <HAL_GetTick>
 8004f96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f9a:	f7fd fe85 	bl	8002ca8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e09b      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004fac:	f7ff fbc9 	bl	8004742 <LL_RCC_IsActiveFlag_PPRE1>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f1      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d017      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fadb 	bl	8004584 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fce:	f7fd fe6b 	bl	8002ca8 <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fd6:	f7fd fe67 	bl	8002ca8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e07d      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004fe8:	f7ff fbbd 	bl	8004766 <LL_RCC_IsActiveFlag_PPRE2>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f1      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d043      	beq.n	8005086 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d106      	bne.n	8005014 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005006:	f7ff f87b 	bl	8004100 <LL_RCC_HSE_IsReady>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11e      	bne.n	800504e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e067      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d106      	bne.n	800502a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800501c:	f7ff fb16 	bl	800464c <LL_RCC_PLL_IsReady>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d113      	bne.n	800504e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e05c      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005032:	f7ff f9e3 	bl	80043fc <LL_RCC_MSI_IsReady>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d108      	bne.n	800504e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e051      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005040:	f7ff f88e 	bl	8004160 <LL_RCC_HSI_IsReady>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e04a      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fa21 	bl	800449a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fe26 	bl	8002ca8 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd fe22 	bl	8002ca8 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e036      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	f7ff fa24 	bl	80044c2 <LL_RCC_GetSysClkSource>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	429a      	cmp	r2, r3
 8005084:	d1ec      	bne.n	8005060 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005086:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d21b      	bcs.n	80050cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005094:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 0207 	bic.w	r2, r3, #7
 800509c:	4913      	ldr	r1, [pc, #76]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fd fe00 	bl	8002ca8 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	e008      	b.n	80050be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050ac:	f7fd fdfc 	bl	8002ca8 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e012      	b.n	80050e4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCC_ClockConfig+0x278>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1ef      	bne.n	80050ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050cc:	f000 f87e 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4a07      	ldr	r2, [pc, #28]	@ (80050f0 <HAL_RCC_ClockConfig+0x27c>)
 80050d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80050d6:	f7fd fdf3 	bl	8002cc0 <HAL_GetTickPrio>
 80050da:	4603      	mov	r3, r0
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fd95 	bl	8002c0c <HAL_InitTick>
 80050e2:	4603      	mov	r3, r0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	58004000 	.word	0x58004000
 80050f0:	20000008 	.word	0x20000008

080050f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f4:	b590      	push	{r4, r7, lr}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fa:	f7ff f9e2 	bl	80044c2 <LL_RCC_GetSysClkSource>
 80050fe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005106:	f7ff f99e 	bl	8004446 <LL_RCC_MSI_GetRange>
 800510a:	4603      	mov	r3, r0
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e04b      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b04      	cmp	r3, #4
 8005120:	d102      	bne.n	8005128 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005122:	4b28      	ldr	r3, [pc, #160]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e045      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d10a      	bne.n	8005144 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800512e:	f7fe ffb7 	bl	80040a0 <LL_RCC_HSE_IsEnabledDiv2>
 8005132:	4603      	mov	r3, r0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d102      	bne.n	800513e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005138:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e03a      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800513e:	4b22      	ldr	r3, [pc, #136]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e037      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005144:	f7ff fab9 	bl	80046ba <LL_RCC_PLL_GetMainSource>
 8005148:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d003      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x64>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b03      	cmp	r3, #3
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x6a>
 8005156:	e00d      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005158:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800515a:	60bb      	str	r3, [r7, #8]
        break;
 800515c:	e015      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800515e:	f7fe ff9f 	bl	80040a0 <LL_RCC_HSE_IsEnabledDiv2>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d102      	bne.n	800516e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005168:	4b16      	ldr	r3, [pc, #88]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800516a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800516c:	e00d      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800516e:	4b16      	ldr	r3, [pc, #88]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005170:	60bb      	str	r3, [r7, #8]
        break;
 8005172:	e00a      	b.n	800518a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005174:	f7ff f967 	bl	8004446 <LL_RCC_MSI_GetRange>
 8005178:	4603      	mov	r3, r0
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	4a0f      	ldr	r2, [pc, #60]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005186:	60bb      	str	r3, [r7, #8]
        break;
 8005188:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800518a:	f7ff fa71 	bl	8004670 <LL_RCC_PLL_GetN>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	fb03 f402 	mul.w	r4, r3, r2
 8005196:	f7ff fa84 	bl	80046a2 <LL_RCC_PLL_GetDivider>
 800519a:	4603      	mov	r3, r0
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	3301      	adds	r3, #1
 80051a0:	fbb4 f4f3 	udiv	r4, r4, r3
 80051a4:	f7ff fa71 	bl	800468a <LL_RCC_PLL_GetR>
 80051a8:	4603      	mov	r3, r0
 80051aa:	0f5b      	lsrs	r3, r3, #29
 80051ac:	3301      	adds	r3, #1
 80051ae:	fbb4 f3f3 	udiv	r3, r4, r3
 80051b2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80051b4:	68fb      	ldr	r3, [r7, #12]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	0800e550 	.word	0x0800e550
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	01e84800 	.word	0x01e84800

080051cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051cc:	b598      	push	{r3, r4, r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051d0:	f7ff ff90 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 80051d4:	4604      	mov	r4, r0
 80051d6:	f7ff f9e9 	bl	80045ac <LL_RCC_GetAHBPrescaler>
 80051da:	4603      	mov	r3, r0
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	4a03      	ldr	r2, [pc, #12]	@ (80051f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd98      	pop	{r3, r4, r7, pc}
 80051f0:	0800e4f0 	.word	0x0800e4f0

080051f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f4:	b598      	push	{r3, r4, r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051f8:	f7ff ffe8 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 80051fc:	4604      	mov	r4, r0
 80051fe:	f7ff f9ef 	bl	80045e0 <LL_RCC_GetAPB1Prescaler>
 8005202:	4603      	mov	r3, r0
 8005204:	0a1b      	lsrs	r3, r3, #8
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	4a04      	ldr	r2, [pc, #16]	@ (800521c <HAL_RCC_GetPCLK1Freq+0x28>)
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd98      	pop	{r3, r4, r7, pc}
 800521c:	0800e530 	.word	0x0800e530

08005220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005220:	b598      	push	{r3, r4, r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005224:	f7ff ffd2 	bl	80051cc <HAL_RCC_GetHCLKFreq>
 8005228:	4604      	mov	r4, r0
 800522a:	f7ff f9e5 	bl	80045f8 <LL_RCC_GetAPB2Prescaler>
 800522e:	4603      	mov	r3, r0
 8005230:	0adb      	lsrs	r3, r3, #11
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	4a04      	ldr	r2, [pc, #16]	@ (8005248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd98      	pop	{r3, r4, r7, pc}
 8005248:	0800e530 	.word	0x0800e530

0800524c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2bb0      	cmp	r3, #176	@ 0xb0
 8005258:	d903      	bls.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800525a:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e007      	b.n	8005272 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	4a11      	ldr	r2, [pc, #68]	@ (80052b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005270:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005272:	f7ff f9a7 	bl	80045c4 <LL_RCC_GetAHB4Prescaler>
 8005276:	4603      	mov	r3, r0
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	4a0d      	ldr	r2, [pc, #52]	@ (80052b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	fbb2 f3f3 	udiv	r3, r2, r3
 800528a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	0c9c      	lsrs	r4, r3, #18
 8005296:	f7fe fef5 	bl	8004084 <HAL_PWREx_GetVoltageRange>
 800529a:	4603      	mov	r3, r0
 800529c:	4619      	mov	r1, r3
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f80c 	bl	80052bc <RCC_SetFlashLatency>
 80052a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	0800e550 	.word	0x0800e550
 80052b4:	0800e4f0 	.word	0x0800e4f0
 80052b8:	431bde83 	.word	0x431bde83

080052bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b093      	sub	sp, #76	@ 0x4c
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80052c6:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <RCC_SetFlashLatency+0xe8>)
 80052c8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80052cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80052d2:	4a35      	ldr	r2, [pc, #212]	@ (80053a8 <RCC_SetFlashLatency+0xec>)
 80052d4:	f107 031c 	add.w	r3, r7, #28
 80052d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80052da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80052de:	4b33      	ldr	r3, [pc, #204]	@ (80053ac <RCC_SetFlashLatency+0xf0>)
 80052e0:	f107 040c 	add.w	r4, r7, #12
 80052e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80052ea:	2300      	movs	r3, #0
 80052ec:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f4:	d11a      	bne.n	800532c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fa:	e013      	b.n	8005324 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80052fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	3348      	adds	r3, #72	@ 0x48
 8005302:	443b      	add	r3, r7
 8005304:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d807      	bhi.n	800531e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800530e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	3348      	adds	r3, #72	@ 0x48
 8005314:	443b      	add	r3, r7
 8005316:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800531a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800531c:	e020      	b.n	8005360 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800531e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005320:	3301      	adds	r3, #1
 8005322:	643b      	str	r3, [r7, #64]	@ 0x40
 8005324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005326:	2b03      	cmp	r3, #3
 8005328:	d9e8      	bls.n	80052fc <RCC_SetFlashLatency+0x40>
 800532a:	e019      	b.n	8005360 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800532c:	2300      	movs	r3, #0
 800532e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005330:	e013      	b.n	800535a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	3348      	adds	r3, #72	@ 0x48
 8005338:	443b      	add	r3, r7
 800533a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d807      	bhi.n	8005354 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	3348      	adds	r3, #72	@ 0x48
 800534a:	443b      	add	r3, r7
 800534c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005350:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005352:	e005      	b.n	8005360 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005356:	3301      	adds	r3, #1
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535c:	2b02      	cmp	r3, #2
 800535e:	d9e8      	bls.n	8005332 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005360:	4b13      	ldr	r3, [pc, #76]	@ (80053b0 <RCC_SetFlashLatency+0xf4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f023 0207 	bic.w	r2, r3, #7
 8005368:	4911      	ldr	r1, [pc, #68]	@ (80053b0 <RCC_SetFlashLatency+0xf4>)
 800536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005370:	f7fd fc9a 	bl	8002ca8 <HAL_GetTick>
 8005374:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005376:	e008      	b.n	800538a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005378:	f7fd fc96 	bl	8002ca8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e007      	b.n	800539a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800538a:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <RCC_SetFlashLatency+0xf4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005394:	429a      	cmp	r2, r3
 8005396:	d1ef      	bne.n	8005378 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	374c      	adds	r7, #76	@ 0x4c
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	0800e480 	.word	0x0800e480
 80053a8:	0800e490 	.word	0x0800e490
 80053ac:	0800e49c 	.word	0x0800e49c
 80053b0:	58004000 	.word	0x58004000

080053b4 <LL_RCC_LSE_IsEnabled>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80053b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <LL_RCC_LSE_IsEnabled+0x18>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <LL_RCC_LSE_IsEnabled+0x1a>
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <LL_RCC_LSE_IsReady>:
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d101      	bne.n	80053f0 <LL_RCC_LSE_IsReady+0x18>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <LL_RCC_LSE_IsReady+0x1a>
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <LL_RCC_MSI_EnablePLLMode>:
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_RCC_SetRFWKPClockSource>:
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_RCC_SetSMPSClockSource>:
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800544e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	f023 0203 	bic.w	r2, r3, #3
 8005458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4313      	orrs	r3, r2
 8005460:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <LL_RCC_SetSMPSPrescaler>:
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_SetUSARTClockSource>:
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f023 0203 	bic.w	r2, r3, #3
 80054aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <LL_RCC_SetLPUARTClockSource>:
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_RCC_SetI2CClockSource>:
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005506:	43db      	mvns	r3, r3
 8005508:	401a      	ands	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_SetLPTIMClockSource>:
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005534:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	43db      	mvns	r3, r3
 8005540:	401a      	ands	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_RCC_SetSAIClockSource>:
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_RCC_SetRNGClockSource>:
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800559c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_SetCLK48ClockSource>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <LL_RCC_SetUSBClockSource>:
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ffe3 	bl	80055b4 <LL_RCC_SetCLK48ClockSource>
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <LL_RCC_SetADCClockSource>:
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005606:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800560a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <LL_RCC_SetRTCClockSource>:
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800562a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_RCC_GetRTCClockSource>:
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_RCC_ForceBackupDomainReset>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800567c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_RCC_ReleaseBackupDomainReset>:
{
 800568a:	b480      	push	{r7}
 800568c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800569a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80056a2:	bf00      	nop
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <LL_RCC_PLLSAI1_Enable>:
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056be:	6013      	str	r3, [r2, #0]
}
 80056c0:	bf00      	nop
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <LL_RCC_PLLSAI1_Disable>:
{
 80056ca:	b480      	push	{r7}
 80056cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80056ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_PLLSAI1_IsReady>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056fa:	d101      	bne.n	8005700 <LL_RCC_PLLSAI1_IsReady+0x18>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005718:	2300      	movs	r3, #0
 800571a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d034      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005730:	d021      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005732:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005736:	d81b      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800573c:	d01d      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800573e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005742:	d815      	bhi.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800574c:	d110      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800575e:	e00d      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f94d 	bl	8005a04 <RCCEx_PLLSAI1_ConfigNP>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800576e:	e005      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	77fb      	strb	r3, [r7, #31]
        break;
 8005774:	e002      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d105      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fee8 	bl	800555c <LL_RCC_SetSAIClockSource>
 800578c:	e001      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578e:	7ffb      	ldrb	r3, [r7, #31]
 8005790:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800579a:	2b00      	cmp	r3, #0
 800579c:	d046      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800579e:	f7ff ff56 	bl	800564e <LL_RCC_GetRTCClockSource>
 80057a2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d03c      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80057ae:	f7fe fc59 	bl	8004064 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff30 	bl	8005622 <LL_RCC_SetRTCClockSource>
 80057c2:	e02e      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057cc:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80057ce:	f7ff ff4b 	bl	8005668 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80057d2:	f7ff ff5a 	bl	800568a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80057e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80057ee:	f7ff fde1 	bl	80053b4 <LL_RCC_LSE_IsEnabled>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d114      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057f8:	f7fd fa56 	bl	8002ca8 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80057fe:	e00b      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005800:	f7fd fa52 	bl	8002ca8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d902      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	77fb      	strb	r3, [r7, #31]
              break;
 8005816:	e004      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005818:	f7ff fdde 	bl	80053d8 <LL_RCC_LSE_IsReady>
 800581c:	4603      	mov	r3, r0
 800581e:	2b01      	cmp	r3, #1
 8005820:	d1ee      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005822:	7ffb      	ldrb	r3, [r7, #31]
 8005824:	77bb      	strb	r3, [r7, #30]
 8005826:	e001      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	7ffb      	ldrb	r3, [r7, #31]
 800582a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff fe2a 	bl	8005496 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff fe35 	bl	80054c2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0310 	and.w	r3, r3, #16
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fe5d 	bl	8005528 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fe52 	bl	8005528 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fe2a 	bl	80054ee <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fe1f 	bl	80054ee <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d022      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fe8d 	bl	80055e0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058ce:	d107      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058de:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058e8:	d10b      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f8e3 	bl	8005aba <RCCEx_PLLSAI1_ConfigNQ>
 80058f4:	4603      	mov	r3, r0
 80058f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590a:	2b00      	cmp	r3, #0
 800590c:	d02b      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005916:	d008      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005920:	d003      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fe2a 	bl	8005588 <LL_RCC_SetRNGClockSource>
 8005934:	e00a      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	2000      	movs	r0, #0
 8005942:	f7ff fe21 	bl	8005588 <LL_RCC_SetRNGClockSource>
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff fe34 	bl	80055b4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005954:	d107      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005964:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800596e:	2b00      	cmp	r3, #0
 8005970:	d022      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fe3d 	bl	80055f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005984:	d107      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800599e:	d10b      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3304      	adds	r3, #4
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 f8e3 	bl	8005b70 <RCCEx_PLLSAI1_ConfigNR>
 80059aa:	4603      	mov	r3, r0
 80059ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80059b4:	7ffb      	ldrb	r3, [r7, #31]
 80059b6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fd26 	bl	800541a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fd45 	bl	800546e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fd2c 	bl	8005446 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80059ee:	7fbb      	ldrb	r3, [r7, #30]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80059fc:	f7ff fcfe 	bl	80053fc <LL_RCC_MSI_EnablePLLMode>
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005a10:	f7ff fe5b 	bl	80056ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a14:	f7fd f948 	bl	8002ca8 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a1c:	f7fd f944 	bl	8002ca8 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2e:	e004      	b.n	8005a3a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a30:	f7ff fe5a 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d137      	bne.n	8005ab0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a6e:	f7ff fe1d 	bl	80056ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a72:	f7fd f919 	bl	8002ca8 <HAL_GetTick>
 8005a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a78:	e009      	b.n	8005a8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a7a:	f7fd f915 	bl	8002ca8 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d902      	bls.n	8005a8e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	73fb      	strb	r3, [r7, #15]
        break;
 8005a8c:	e004      	b.n	8005a98 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a8e:	f7ff fe2b 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d1f0      	bne.n	8005a7a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005aac:	4313      	orrs	r3, r2
 8005aae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ac6:	f7ff fe00 	bl	80056ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aca:	f7fd f8ed 	bl	8002ca8 <HAL_GetTick>
 8005ace:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ad0:	e009      	b.n	8005ae6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad2:	f7fd f8e9 	bl	8002ca8 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d902      	bls.n	8005ae6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae4:	e004      	b.n	8005af0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ae6:	f7ff fdff 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f0      	bne.n	8005ad2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d137      	bne.n	8005b66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b24:	f7ff fdc2 	bl	80056ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b28:	f7fd f8be 	bl	8002ca8 <HAL_GetTick>
 8005b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b2e:	e009      	b.n	8005b44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b30:	f7fd f8ba 	bl	8002ca8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d902      	bls.n	8005b44 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	73fb      	strb	r3, [r7, #15]
        break;
 8005b42:	e004      	b.n	8005b4e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b44:	f7ff fdd0 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d1f0      	bne.n	8005b30 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d108      	bne.n	8005b66 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b62:	4313      	orrs	r3, r2
 8005b64:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b7c:	f7ff fda5 	bl	80056ca <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b80:	f7fd f892 	bl	8002ca8 <HAL_GetTick>
 8005b84:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b86:	e009      	b.n	8005b9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b88:	f7fd f88e 	bl	8002ca8 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d902      	bls.n	8005b9c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9a:	e004      	b.n	8005ba6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b9c:	f7ff fda4 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d137      	bne.n	8005c1c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bda:	f7ff fd67 	bl	80056ac <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fd f863 	bl	8002ca8 <HAL_GetTick>
 8005be2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005be4:	e009      	b.n	8005bfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005be6:	f7fd f85f 	bl	8002ca8 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d902      	bls.n	8005bfa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	73fb      	strb	r3, [r7, #15]
        break;
 8005bf8:	e004      	b.n	8005c04 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bfa:	f7ff fd75 	bl	80056e8 <LL_RCC_PLLSAI1_IsReady>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d1f0      	bne.n	8005be6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d108      	bne.n	8005c1c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e095      	b.n	8005d64 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c48:	d009      	beq.n	8005c5e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
 8005c50:	e005      	b.n	8005c5e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fc fd3f 	bl	80026fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c9e:	d902      	bls.n	8005ca6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e002      	b.n	8005cac <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005cb4:	d007      	beq.n	8005cc6 <HAL_SPI_Init+0xa0>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d08:	ea42 0103 	orr.w	r1, r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	f003 0204 	and.w	r2, r3, #4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005d42:	ea42 0103 	orr.w	r1, r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_SPI_Transmit+0x22>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e15f      	b.n	800604e <HAL_SPI_Transmit+0x2e2>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d96:	f7fc ff87 	bl	8002ca8 <HAL_GetTick>
 8005d9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d002      	beq.n	8005db2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
 8005dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005db0:	e148      	b.n	8006044 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <HAL_SPI_Transmit+0x52>
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc2:	e13f      	b.n	8006044 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	88fa      	ldrh	r2, [r7, #6]
 8005ddc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e0e:	d10f      	bne.n	8005e30 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3a:	2b40      	cmp	r3, #64	@ 0x40
 8005e3c:	d007      	beq.n	8005e4e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e56:	d94f      	bls.n	8005ef8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_SPI_Transmit+0xfa>
 8005e60:	8afb      	ldrh	r3, [r7, #22]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d142      	bne.n	8005eec <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	881a      	ldrh	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e8a:	e02f      	b.n	8005eec <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d112      	bne.n	8005ec0 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	881a      	ldrh	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eaa:	1c9a      	adds	r2, r3, #2
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ebe:	e015      	b.n	8005eec <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec0:	f7fc fef2 	bl	8002ca8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d803      	bhi.n	8005ed8 <HAL_SPI_Transmit+0x16c>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d102      	bne.n	8005ede <HAL_SPI_Transmit+0x172>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005eea:	e0ab      	b.n	8006044 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1ca      	bne.n	8005e8c <HAL_SPI_Transmit+0x120>
 8005ef6:	e080      	b.n	8005ffa <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_Transmit+0x19a>
 8005f00:	8afb      	ldrh	r3, [r7, #22]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d174      	bne.n	8005ff0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d912      	bls.n	8005f36 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	881a      	ldrh	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	1c9a      	adds	r2, r3, #2
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b02      	subs	r3, #2
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f34:	e05c      	b.n	8005ff0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f5c:	e048      	b.n	8005ff0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d12b      	bne.n	8005fc4 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d912      	bls.n	8005f9c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b02      	subs	r3, #2
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f9a:	e029      	b.n	8005ff0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005fc2:	e015      	b.n	8005ff0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc4:	f7fc fe70 	bl	8002ca8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d803      	bhi.n	8005fdc <HAL_SPI_Transmit+0x270>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Transmit+0x276>
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005fee:	e029      	b.n	8006044 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1b1      	bne.n	8005f5e <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fb6a 	bl	80066d8 <SPI_EndRxTxTransaction>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e003      	b.n	8006044 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800604c:	7ffb      	ldrb	r3, [r7, #31]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b08a      	sub	sp, #40	@ 0x28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006064:	2301      	movs	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_SPI_TransmitReceive+0x26>
 8006078:	2302      	movs	r3, #2
 800607a:	e20a      	b.n	8006492 <HAL_SPI_TransmitReceive+0x43c>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006084:	f7fc fe10 	bl	8002ca8 <HAL_GetTick>
 8006088:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006090:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006098:	887b      	ldrh	r3, [r7, #2]
 800609a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800609c:	887b      	ldrh	r3, [r7, #2]
 800609e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060a0:	7efb      	ldrb	r3, [r7, #27]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d00e      	beq.n	80060c4 <HAL_SPI_TransmitReceive+0x6e>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ac:	d106      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x66>
 80060b6:	7efb      	ldrb	r3, [r7, #27]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d003      	beq.n	80060c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060bc:	2302      	movs	r3, #2
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80060c2:	e1e0      	b.n	8006486 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x80>
 80060d0:	887b      	ldrh	r3, [r7, #2]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80060dc:	e1d3      	b.n	8006486 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d003      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2205      	movs	r2, #5
 80060ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	887a      	ldrh	r2, [r7, #2]
 8006102:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	887a      	ldrh	r2, [r7, #2]
 800610a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	887a      	ldrh	r2, [r7, #2]
 8006118:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	887a      	ldrh	r2, [r7, #2]
 800611e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006134:	d802      	bhi.n	800613c <HAL_SPI_TransmitReceive+0xe6>
 8006136:	8a3b      	ldrh	r3, [r7, #16]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d908      	bls.n	800614e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	e007      	b.n	800615e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800615c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b40      	cmp	r3, #64	@ 0x40
 800616a:	d007      	beq.n	800617c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800617a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006184:	f240 8081 	bls.w	800628a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_TransmitReceive+0x140>
 8006190:	8a7b      	ldrh	r3, [r7, #18]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d16d      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	1c9a      	adds	r2, r3, #2
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ba:	e05a      	b.n	8006272 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d11b      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x1ac>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d016      	beq.n	8006202 <HAL_SPI_TransmitReceive+0x1ac>
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d113      	bne.n	8006202 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d11c      	bne.n	800624a <HAL_SPI_TransmitReceive+0x1f4>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	b292      	uxth	r2, r2
 8006228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	1c9a      	adds	r2, r3, #2
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006246:	2301      	movs	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800624a:	f7fc fd2d 	bl	8002ca8 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006256:	429a      	cmp	r2, r3
 8006258:	d80b      	bhi.n	8006272 <HAL_SPI_TransmitReceive+0x21c>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006260:	d007      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006270:	e109      	b.n	8006486 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d19f      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x166>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d199      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x166>
 8006288:	e0e3      	b.n	8006452 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_SPI_TransmitReceive+0x244>
 8006292:	8a7b      	ldrh	r3, [r7, #18]
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 80cf 	bne.w	8006438 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d912      	bls.n	80062ca <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	881a      	ldrh	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	1c9a      	adds	r2, r3, #2
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b02      	subs	r3, #2
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062c8:	e0b6      	b.n	8006438 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f0:	e0a2      	b.n	8006438 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d134      	bne.n	800636a <HAL_SPI_TransmitReceive+0x314>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d02f      	beq.n	800636a <HAL_SPI_TransmitReceive+0x314>
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	2b01      	cmp	r3, #1
 800630e:	d12c      	bne.n	800636a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d912      	bls.n	8006340 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	881a      	ldrh	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b02      	subs	r3, #2
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800633e:	e012      	b.n	8006366 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d148      	bne.n	800640a <HAL_SPI_TransmitReceive+0x3b4>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d042      	beq.n	800640a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	d923      	bls.n	80063d8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	b292      	uxth	r2, r2
 800639c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	3b02      	subs	r3, #2
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d81f      	bhi.n	8006406 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e016      	b.n	8006406 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f103 020c 	add.w	r2, r3, #12
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006406:	2301      	movs	r3, #1
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800640a:	f7fc fc4d 	bl	8002ca8 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006416:	429a      	cmp	r2, r3
 8006418:	d803      	bhi.n	8006422 <HAL_SPI_TransmitReceive+0x3cc>
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d102      	bne.n	8006428 <HAL_SPI_TransmitReceive+0x3d2>
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	2b00      	cmp	r3, #0
 8006426:	d107      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006436:	e026      	b.n	8006486 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f af57 	bne.w	80062f2 <HAL_SPI_TransmitReceive+0x29c>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af50 	bne.w	80062f2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 f93e 	bl	80066d8 <SPI_EndRxTxTransaction>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647c:	e003      	b.n	8006486 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800648e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006492:	4618      	mov	r0, r3
 8006494:	3728      	adds	r7, #40	@ 0x28
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064ac:	f7fc fbfc 	bl	8002ca8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4413      	add	r3, r2
 80064ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064bc:	f7fc fbf4 	bl	8002ca8 <HAL_GetTick>
 80064c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064c2:	4b39      	ldr	r3, [pc, #228]	@ (80065a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	015b      	lsls	r3, r3, #5
 80064c8:	0d1b      	lsrs	r3, r3, #20
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d2:	e054      	b.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d050      	beq.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064dc:	f7fc fbe4 	bl	8002ca8 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d902      	bls.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d13d      	bne.n	800656e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800650a:	d111      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006514:	d004      	beq.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651e:	d107      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800652e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006538:	d10f      	bne.n	800655a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e017      	b.n	800659e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3b01      	subs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	429a      	cmp	r2, r3
 800659a:	d19b      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000008 	.word	0x20000008

080065ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065be:	f7fc fb73 	bl	8002ca8 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	4413      	add	r3, r2
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80065ce:	f7fc fb6b 	bl	8002ca8 <HAL_GetTick>
 80065d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80065dc:	4b3d      	ldr	r3, [pc, #244]	@ (80066d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00da      	lsls	r2, r3, #3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	0d1b      	lsrs	r3, r3, #20
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065f4:	e060      	b.n	80066b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065fc:	d107      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0x62>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d104      	bne.n	800660e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800660c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d050      	beq.n	80066b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006616:	f7fc fb47 	bl	8002ca8 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006622:	429a      	cmp	r2, r3
 8006624:	d902      	bls.n	800662c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13d      	bne.n	80066a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800663a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006644:	d111      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800664e:	d004      	beq.n	800665a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006658:	d107      	bne.n	800666a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	d10f      	bne.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e010      	b.n	80066ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d196      	bne.n	80065f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000008 	.word	0x20000008

080066d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff ff5b 	bl	80065ac <SPI_WaitFifoStateUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006700:	f043 0220 	orr.w	r2, r3, #32
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e027      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	2180      	movs	r1, #128	@ 0x80
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fec0 	bl	800649c <SPI_WaitFlagStateUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006726:	f043 0220 	orr.w	r2, r3, #32
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e014      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff34 	bl	80065ac <SPI_WaitFifoStateUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e000      	b.n	800675c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <LL_RCC_GetUSARTClockSource>:
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800676c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006770:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4013      	ands	r3, r2
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <LL_RCC_GetLPUARTClockSource>:
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800678c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006790:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4013      	ands	r3, r2
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e042      	b.n	800683c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fb ffc7 	bl	800275c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2224      	movs	r2, #36	@ 0x24
 80067d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fade 	bl	8006db0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8b3 	bl	8006960 <UART_SetConfig>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e01b      	b.n	800683c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb5d 	bl	8006ef4 <UART_CheckIdleState>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	@ 0x28
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685a:	2b20      	cmp	r3, #32
 800685c:	d17b      	bne.n	8006956 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_Transmit+0x26>
 8006864:	88fb      	ldrh	r3, [r7, #6]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e074      	b.n	8006958 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2221      	movs	r2, #33	@ 0x21
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687e:	f7fc fa13 	bl	8002ca8 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	88fa      	ldrh	r2, [r7, #6]
 8006888:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689c:	d108      	bne.n	80068b0 <HAL_UART_Transmit+0x6c>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e003      	b.n	80068b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068b8:	e030      	b.n	800691c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2180      	movs	r1, #128	@ 0x80
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fbbf 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e03d      	b.n	8006958 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10b      	bne.n	80068fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	3302      	adds	r3, #2
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e007      	b.n	800690a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1c8      	bne.n	80068ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	2140      	movs	r1, #64	@ 0x40
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fb88 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e006      	b.n	8006958 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006964:	b08c      	sub	sp, #48	@ 0x30
 8006966:	af00      	add	r7, sp, #0
 8006968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	431a      	orrs	r2, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	431a      	orrs	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	4313      	orrs	r3, r2
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4baf      	ldr	r3, [pc, #700]	@ (8006c4c <UART_SetConfig+0x2ec>)
 8006990:	4013      	ands	r3, r2
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006998:	430b      	orrs	r3, r1
 800699a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4aa4      	ldr	r2, [pc, #656]	@ (8006c50 <UART_SetConfig+0x2f0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c8:	4313      	orrs	r3, r2
 80069ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e0:	430b      	orrs	r3, r1
 80069e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	f023 010f 	bic.w	r1, r3, #15
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a95      	ldr	r2, [pc, #596]	@ (8006c54 <UART_SetConfig+0x2f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d125      	bne.n	8006a50 <UART_SetConfig+0xf0>
 8006a04:	2003      	movs	r0, #3
 8006a06:	f7ff fead 	bl	8006764 <LL_RCC_GetUSARTClockSource>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d81b      	bhi.n	8006a48 <UART_SetConfig+0xe8>
 8006a10:	a201      	add	r2, pc, #4	@ (adr r2, 8006a18 <UART_SetConfig+0xb8>)
 8006a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a16:	bf00      	nop
 8006a18:	08006a29 	.word	0x08006a29
 8006a1c:	08006a39 	.word	0x08006a39
 8006a20:	08006a31 	.word	0x08006a31
 8006a24:	08006a41 	.word	0x08006a41
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e042      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a30:	2302      	movs	r3, #2
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e03e      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e03a      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a46:	e036      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e032      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a7e      	ldr	r2, [pc, #504]	@ (8006c50 <UART_SetConfig+0x2f0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d12a      	bne.n	8006ab0 <UART_SetConfig+0x150>
 8006a5a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006a5e:	f7ff fe91 	bl	8006784 <LL_RCC_GetLPUARTClockSource>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a68:	d01a      	beq.n	8006aa0 <UART_SetConfig+0x140>
 8006a6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a6e:	d81b      	bhi.n	8006aa8 <UART_SetConfig+0x148>
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a74:	d00c      	beq.n	8006a90 <UART_SetConfig+0x130>
 8006a76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7a:	d815      	bhi.n	8006aa8 <UART_SetConfig+0x148>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <UART_SetConfig+0x128>
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a84:	d008      	beq.n	8006a98 <UART_SetConfig+0x138>
 8006a86:	e00f      	b.n	8006aa8 <UART_SetConfig+0x148>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8e:	e012      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a90:	2302      	movs	r3, #2
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a96:	e00e      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e00a      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e006      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e002      	b.n	8006ab6 <UART_SetConfig+0x156>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a65      	ldr	r2, [pc, #404]	@ (8006c50 <UART_SetConfig+0x2f0>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	f040 8097 	bne.w	8006bf0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d823      	bhi.n	8006b12 <UART_SetConfig+0x1b2>
 8006aca:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <UART_SetConfig+0x170>)
 8006acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad0:	08006af5 	.word	0x08006af5
 8006ad4:	08006b13 	.word	0x08006b13
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006b13 	.word	0x08006b13
 8006ae0:	08006b03 	.word	0x08006b03
 8006ae4:	08006b13 	.word	0x08006b13
 8006ae8:	08006b13 	.word	0x08006b13
 8006aec:	08006b13 	.word	0x08006b13
 8006af0:	08006b0b 	.word	0x08006b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af4:	f7fe fb7e 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8006af8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006afa:	e010      	b.n	8006b1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006afc:	4b56      	ldr	r3, [pc, #344]	@ (8006c58 <UART_SetConfig+0x2f8>)
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b00:	e00d      	b.n	8006b1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b02:	f7fe faf7 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8006b06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b08:	e009      	b.n	8006b1e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b10:	e005      	b.n	8006b1e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 812b 	beq.w	8006d7c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	4a4c      	ldr	r2, [pc, #304]	@ (8006c5c <UART_SetConfig+0x2fc>)
 8006b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d305      	bcc.n	8006b56 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d903      	bls.n	8006b5e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b5c:	e10e      	b.n	8006d7c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	2200      	movs	r2, #0
 8006b62:	60bb      	str	r3, [r7, #8]
 8006b64:	60fa      	str	r2, [r7, #12]
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c5c <UART_SetConfig+0x2fc>)
 8006b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2200      	movs	r2, #0
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b80:	f7fa f85a 	bl	8000c38 <__aeabi_uldivmod>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	020b      	lsls	r3, r1, #8
 8006b96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b9a:	0202      	lsls	r2, r0, #8
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	6849      	ldr	r1, [r1, #4]
 8006ba0:	0849      	lsrs	r1, r1, #1
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	eb12 0804 	adds.w	r8, r2, r4
 8006bac:	eb43 0905 	adc.w	r9, r3, r5
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	469a      	mov	sl, r3
 8006bb8:	4693      	mov	fp, r2
 8006bba:	4652      	mov	r2, sl
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	f7fa f839 	bl	8000c38 <__aeabi_uldivmod>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4613      	mov	r3, r2
 8006bcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd4:	d308      	bcc.n	8006be8 <UART_SetConfig+0x288>
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bdc:	d204      	bcs.n	8006be8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6a3a      	ldr	r2, [r7, #32]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e0c9      	b.n	8006d7c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bee:	e0c5      	b.n	8006d7c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf8:	d16d      	bne.n	8006cd6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	2b07      	cmp	r3, #7
 8006c02:	d82d      	bhi.n	8006c60 <UART_SetConfig+0x300>
 8006c04:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x2ac>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c2d 	.word	0x08006c2d
 8006c10:	08006c35 	.word	0x08006c35
 8006c14:	08006c61 	.word	0x08006c61
 8006c18:	08006c3b 	.word	0x08006c3b
 8006c1c:	08006c61 	.word	0x08006c61
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c61 	.word	0x08006c61
 8006c28:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe faf8 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c32:	e01b      	b.n	8006c6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b08      	ldr	r3, [pc, #32]	@ (8006c58 <UART_SetConfig+0x2f8>)
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c38:	e018      	b.n	8006c6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe fa5b 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8006c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c40:	e014      	b.n	8006c6c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c48:	e010      	b.n	8006c6c <UART_SetConfig+0x30c>
 8006c4a:	bf00      	nop
 8006c4c:	cfff69f3 	.word	0xcfff69f3
 8006c50:	40008000 	.word	0x40008000
 8006c54:	40013800 	.word	0x40013800
 8006c58:	00f42400 	.word	0x00f42400
 8006c5c:	0800e590 	.word	0x0800e590
      default:
        pclk = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8084 	beq.w	8006d7c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	4a4b      	ldr	r2, [pc, #300]	@ (8006da8 <UART_SetConfig+0x448>)
 8006c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c86:	005a      	lsls	r2, r3, #1
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	441a      	add	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	2b0f      	cmp	r3, #15
 8006c9e:	d916      	bls.n	8006cce <UART_SetConfig+0x36e>
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca6:	d212      	bcs.n	8006cce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f023 030f 	bic.w	r3, r3, #15
 8006cb0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	8bfb      	ldrh	r3, [r7, #30]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	8bfa      	ldrh	r2, [r7, #30]
 8006cca:	60da      	str	r2, [r3, #12]
 8006ccc:	e056      	b.n	8006d7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cd4:	e052      	b.n	8006d7c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	2b07      	cmp	r3, #7
 8006cde:	d822      	bhi.n	8006d26 <UART_SetConfig+0x3c6>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0x388>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d09 	.word	0x08006d09
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d27 	.word	0x08006d27
 8006cf4:	08006d17 	.word	0x08006d17
 8006cf8:	08006d27 	.word	0x08006d27
 8006cfc:	08006d27 	.word	0x08006d27
 8006d00:	08006d27 	.word	0x08006d27
 8006d04:	08006d1f 	.word	0x08006d1f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fe fa8a 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8006d0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d0e:	e010      	b.n	8006d32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d10:	4b26      	ldr	r3, [pc, #152]	@ (8006dac <UART_SetConfig+0x44c>)
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d14:	e00d      	b.n	8006d32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d16:	f7fe f9ed 	bl	80050f4 <HAL_RCC_GetSysClockFreq>
 8006d1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d1c:	e009      	b.n	8006d32 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d24:	e005      	b.n	8006d32 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d30:	bf00      	nop
    }

    if (pclk != 0U)
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d021      	beq.n	8006d7c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8006da8 <UART_SetConfig+0x448>)
 8006d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	441a      	add	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	d909      	bls.n	8006d76 <UART_SetConfig+0x416>
 8006d62:	6a3b      	ldr	r3, [r7, #32]
 8006d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d68:	d205      	bcs.n	8006d76 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	e002      	b.n	8006d7c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3730      	adds	r7, #48	@ 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	0800e590 	.word	0x0800e590
 8006dac:	00f42400 	.word	0x00f42400

08006db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eae:	d10a      	bne.n	8006ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b098      	sub	sp, #96	@ 0x60
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f04:	f7fb fed0 	bl	8002ca8 <HAL_GetTick>
 8006f08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d12f      	bne.n	8006f78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f88e 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d022      	beq.n	8006f78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f46:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e063      	b.n	8007040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d149      	bne.n	800701a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f86:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f857 	bl	8007048 <UART_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d03c      	beq.n	800701a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	623b      	str	r3, [r7, #32]
   return(result);
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e6      	bne.n	8006fa0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f023 0301 	bic.w	r3, r3, #1
 8006fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ff2:	61fa      	str	r2, [r7, #28]
 8006ff4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e5      	bne.n	8006fd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e012      	b.n	8007040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3758      	adds	r7, #88	@ 0x58
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007058:	e04f      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007060:	d04b      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007062:	f7fb fe21 	bl	8002ca8 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	429a      	cmp	r2, r3
 8007070:	d302      	bcc.n	8007078 <UART_WaitOnFlagUntilTimeout+0x30>
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e04e      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0304 	and.w	r3, r3, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	d037      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b80      	cmp	r3, #128	@ 0x80
 800708e:	d034      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d031      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f003 0308 	and.w	r3, r3, #8
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d110      	bne.n	80070c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2208      	movs	r2, #8
 80070aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f838 	bl	8007122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2208      	movs	r2, #8
 80070b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e029      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d4:	d111      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f81e 	bl	8007122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e00f      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69da      	ldr	r2, [r3, #28]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	bf0c      	ite	eq
 800710a:	2301      	moveq	r3, #1
 800710c:	2300      	movne	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	429a      	cmp	r2, r3
 8007116:	d0a0      	beq.n	800705a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007122:	b480      	push	{r7}
 8007124:	b095      	sub	sp, #84	@ 0x54
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007132:	e853 3f00 	ldrex	r3, [r3]
 8007136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800713e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007148:	643b      	str	r3, [r7, #64]	@ 0x40
 800714a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800714e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007150:	e841 2300 	strex	r3, r2, [r1]
 8007154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1e6      	bne.n	800712a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3308      	adds	r3, #8
 8007162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	61fb      	str	r3, [r7, #28]
   return(result);
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e3      	bne.n	800715c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d118      	bne.n	80071ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 0310 	bic.w	r3, r3, #16
 80071b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6979      	ldr	r1, [r7, #20]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	613b      	str	r3, [r7, #16]
   return(result);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071e2:	bf00      	nop
 80071e4:	3754      	adds	r7, #84	@ 0x54
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UARTEx_DisableFifoMode+0x16>
 8007200:	2302      	movs	r3, #2
 8007202:	e027      	b.n	8007254 <HAL_UARTEx_DisableFifoMode+0x66>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2224      	movs	r2, #36	@ 0x24
 8007210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 0201 	bic.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007232:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e02d      	b.n	80072d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2224      	movs	r2, #36	@ 0x24
 8007284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f84f 	bl	8007358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d101      	bne.n	80072f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072f0:	2302      	movs	r3, #2
 80072f2:	e02d      	b.n	8007350 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	@ 0x24
 8007300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0201 	bic.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f811 	bl	8007358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007378:	e031      	b.n	80073de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800737a:	2308      	movs	r3, #8
 800737c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800737e:	2308      	movs	r3, #8
 8007380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	0e5b      	lsrs	r3, r3, #25
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	0f5b      	lsrs	r3, r3, #29
 800739a:	b2db      	uxtb	r3, r3
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	7b3a      	ldrb	r2, [r7, #12]
 80073a6:	4911      	ldr	r1, [pc, #68]	@ (80073ec <UARTEx_SetNbDataToProcess+0x94>)
 80073a8:	5c8a      	ldrb	r2, [r1, r2]
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ae:	7b3a      	ldrb	r2, [r7, #12]
 80073b0:	490f      	ldr	r1, [pc, #60]	@ (80073f0 <UARTEx_SetNbDataToProcess+0x98>)
 80073b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	7b7a      	ldrb	r2, [r7, #13]
 80073c4:	4909      	ldr	r1, [pc, #36]	@ (80073ec <UARTEx_SetNbDataToProcess+0x94>)
 80073c6:	5c8a      	ldrb	r2, [r1, r2]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073cc:	7b7a      	ldrb	r2, [r7, #13]
 80073ce:	4908      	ldr	r1, [pc, #32]	@ (80073f0 <UARTEx_SetNbDataToProcess+0x98>)
 80073d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073de:	bf00      	nop
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	0800e5a8 	.word	0x0800e5a8
 80073f0:	0800e5b0 	.word	0x0800e5b0

080073f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80073fc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007400:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	b29b      	uxth	r3, r3
 800740e:	43db      	mvns	r3, r3
 8007410:	b29b      	uxth	r3, r3
 8007412:	4013      	ands	r3, r2
 8007414:	b29a      	uxth	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	1d3b      	adds	r3, r7, #4
 8007434:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800746c:	4907      	ldr	r1, [pc, #28]	@ (800748c <MX_FATFS_Init+0x24>)
 800746e:	4808      	ldr	r0, [pc, #32]	@ (8007490 <MX_FATFS_Init+0x28>)
 8007470:	f002 fbb2 	bl	8009bd8 <FATFS_LinkDriver>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	e003      	b.n	8007488 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007480:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <MX_FATFS_Init+0x2c>)
 8007482:	2201      	movs	r2, #1
 8007484:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8007486:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8007488:	4618      	mov	r0, r3
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20002768 	.word	0x20002768
 8007490:	20000014 	.word	0x20000014
 8007494:	2000276c 	.word	0x2000276c

08007498 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800749c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800749e:	4618      	mov	r0, r3
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 ff27 	bl	8001308 <SD_disk_initialize>
 80074ba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status (pdrv);
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fa f805 	bl	80014e0 <SD_disk_status>
 80074d6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read (pdrv, buff, sector, count);
 80074f0:	7bf8      	ldrb	r0, [r7, #15]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	f7fa f808 	bl	800150c <SD_disk_read>
 80074fc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write (pdrv, buff, sector, count);
 8007516:	7bf8      	ldrb	r0, [r7, #15]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	f7fa f85f 	bl	80015e0 <SD_disk_write>
 8007522:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	603a      	str	r2, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
 8007538:	460b      	mov	r3, r1
 800753a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl (pdrv, cmd, buff);
 800753c:	79b9      	ldrb	r1, [r7, #6]
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f7fa f8d0 	bl	80016e8 <SD_disk_ioctl>
 8007548:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	4a08      	ldr	r2, [pc, #32]	@ (8007584 <disk_status+0x30>)
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	79fa      	ldrb	r2, [r7, #7]
 800756c:	4905      	ldr	r1, [pc, #20]	@ (8007584 <disk_status+0x30>)
 800756e:	440a      	add	r2, r1
 8007570:	7a12      	ldrb	r2, [r2, #8]
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
  return stat;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20002798 	.word	0x20002798

08007588 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	4a0e      	ldr	r2, [pc, #56]	@ (80075d4 <disk_initialize+0x4c>)
 800759a:	5cd3      	ldrb	r3, [r2, r3]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d114      	bne.n	80075ca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	4a0c      	ldr	r2, [pc, #48]	@ (80075d4 <disk_initialize+0x4c>)
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	79fa      	ldrb	r2, [r7, #7]
 80075ae:	4909      	ldr	r1, [pc, #36]	@ (80075d4 <disk_initialize+0x4c>)
 80075b0:	440a      	add	r2, r1
 80075b2:	7a12      	ldrb	r2, [r2, #8]
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	4a03      	ldr	r2, [pc, #12]	@ (80075d4 <disk_initialize+0x4c>)
 80075c6:	2101      	movs	r1, #1
 80075c8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20002798 	.word	0x20002798

080075d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
 80075e2:	603b      	str	r3, [r7, #0]
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007614 <disk_read+0x3c>)
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	689c      	ldr	r4, [r3, #8]
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	4a07      	ldr	r2, [pc, #28]	@ (8007614 <disk_read+0x3c>)
 80075f8:	4413      	add	r3, r2
 80075fa:	7a18      	ldrb	r0, [r3, #8]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	47a0      	blx	r4
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]
  return res;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
}
 800760a:	4618      	mov	r0, r3
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd90      	pop	{r4, r7, pc}
 8007612:	bf00      	nop
 8007614:	20002798 	.word	0x20002798

08007618 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007618:	b590      	push	{r4, r7, lr}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	4a0a      	ldr	r2, [pc, #40]	@ (8007654 <disk_write+0x3c>)
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68dc      	ldr	r4, [r3, #12]
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4a07      	ldr	r2, [pc, #28]	@ (8007654 <disk_write+0x3c>)
 8007638:	4413      	add	r3, r2
 800763a:	7a18      	ldrb	r0, [r3, #8]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	47a0      	blx	r4
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]
  return res;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd90      	pop	{r4, r7, pc}
 8007652:	bf00      	nop
 8007654:	20002798 	.word	0x20002798

08007658 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	603a      	str	r2, [r7, #0]
 8007662:	71fb      	strb	r3, [r7, #7]
 8007664:	460b      	mov	r3, r1
 8007666:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007668:	79fb      	ldrb	r3, [r7, #7]
 800766a:	4a09      	ldr	r2, [pc, #36]	@ (8007690 <disk_ioctl+0x38>)
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	79fa      	ldrb	r2, [r7, #7]
 8007676:	4906      	ldr	r1, [pc, #24]	@ (8007690 <disk_ioctl+0x38>)
 8007678:	440a      	add	r2, r1
 800767a:	7a10      	ldrb	r0, [r2, #8]
 800767c:	79b9      	ldrb	r1, [r7, #6]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	73fb      	strb	r3, [r7, #15]
  return res;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20002798 	.word	0x20002798

08007694 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3301      	adds	r3, #1
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	b21a      	sxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b21b      	sxth	r3, r3
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80076b6:	89fb      	ldrh	r3, [r7, #14]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3303      	adds	r3, #3
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	3202      	adds	r2, #2
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	3201      	adds	r2, #1
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80076fc:	68fb      	ldr	r3, [r7, #12]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	887a      	ldrh	r2, [r7, #2]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	887b      	ldrh	r3, [r7, #2]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	607a      	str	r2, [r7, #4]
 800772e:	887a      	ldrh	r2, [r7, #2]
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	0a1b      	lsrs	r3, r3, #8
 800775a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	607a      	str	r2, [r7, #4]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00d      	beq.n	80077ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	1c53      	adds	r3, r2, #1
 80077b6:	613b      	str	r3, [r7, #16]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1c59      	adds	r1, r3, #1
 80077bc:	6179      	str	r1, [r7, #20]
 80077be:	7812      	ldrb	r2, [r2, #0]
 80077c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	607b      	str	r3, [r7, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1f1      	bne.n	80077b2 <mem_cpy+0x1a>
	}
}
 80077ce:	bf00      	nop
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80077da:	b480      	push	{r7}
 80077dc:	b087      	sub	sp, #28
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	617a      	str	r2, [r7, #20]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f3      	bne.n	80077ea <mem_set+0x10>
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	371c      	adds	r7, #28
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007810:	b480      	push	{r7}
 8007812:	b089      	sub	sp, #36	@ 0x24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	61fb      	str	r3, [r7, #28]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	61fa      	str	r2, [r7, #28]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	4619      	mov	r1, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	61ba      	str	r2, [r7, #24]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	1acb      	subs	r3, r1, r3
 800783c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	3b01      	subs	r3, #1
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <mem_cmp+0x40>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0eb      	beq.n	8007828 <mem_cmp+0x18>

	return r;
 8007850:	697b      	ldr	r3, [r7, #20]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3724      	adds	r7, #36	@ 0x24
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007868:	e002      	b.n	8007870 <chk_chr+0x12>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3301      	adds	r3, #1
 800786e:	607b      	str	r3, [r7, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <chk_chr+0x26>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	461a      	mov	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	4293      	cmp	r3, r2
 8007882:	d1f2      	bne.n	800786a <chk_chr+0xc>
	return *str;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	781b      	ldrb	r3, [r3, #0]
}
 8007888:	4618      	mov	r0, r3
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e029      	b.n	80078fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80078a8:	4a27      	ldr	r2, [pc, #156]	@ (8007948 <chk_lock+0xb4>)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	4413      	add	r3, r2
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01d      	beq.n	80078f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078b6:	4a24      	ldr	r2, [pc, #144]	@ (8007948 <chk_lock+0xb4>)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	4413      	add	r3, r2
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d116      	bne.n	80078f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80078c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007948 <chk_lock+0xb4>)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	4413      	add	r3, r2
 80078d0:	3304      	adds	r3, #4
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80078d8:	429a      	cmp	r2, r3
 80078da:	d10c      	bne.n	80078f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007948 <chk_lock+0xb4>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	4413      	add	r3, r2
 80078e4:	3308      	adds	r3, #8
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d102      	bne.n	80078f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80078f0:	e007      	b.n	8007902 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d9d2      	bls.n	80078a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d109      	bne.n	800791c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <chk_lock+0x80>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d101      	bne.n	8007918 <chk_lock+0x84>
 8007914:	2300      	movs	r3, #0
 8007916:	e010      	b.n	800793a <chk_lock+0xa6>
 8007918:	2312      	movs	r3, #18
 800791a:	e00e      	b.n	800793a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <chk_lock+0xa0>
 8007922:	4a09      	ldr	r2, [pc, #36]	@ (8007948 <chk_lock+0xb4>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4413      	add	r3, r2
 800792a:	330c      	adds	r3, #12
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007932:	d101      	bne.n	8007938 <chk_lock+0xa4>
 8007934:	2310      	movs	r3, #16
 8007936:	e000      	b.n	800793a <chk_lock+0xa6>
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20002778 	.word	0x20002778

0800794c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007952:	2300      	movs	r3, #0
 8007954:	607b      	str	r3, [r7, #4]
 8007956:	e002      	b.n	800795e <enq_lock+0x12>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3301      	adds	r3, #1
 800795c:	607b      	str	r3, [r7, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d806      	bhi.n	8007972 <enq_lock+0x26>
 8007964:	4a09      	ldr	r2, [pc, #36]	@ (800798c <enq_lock+0x40>)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	4413      	add	r3, r2
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1f2      	bne.n	8007958 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2b02      	cmp	r3, #2
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20002778 	.word	0x20002778

08007990 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e01f      	b.n	80079e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80079a0:	4a41      	ldr	r2, [pc, #260]	@ (8007aa8 <inc_lock+0x118>)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4413      	add	r3, r2
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d113      	bne.n	80079da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80079b2:	4a3d      	ldr	r2, [pc, #244]	@ (8007aa8 <inc_lock+0x118>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d109      	bne.n	80079da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80079c6:	4a38      	ldr	r2, [pc, #224]	@ (8007aa8 <inc_lock+0x118>)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	4413      	add	r3, r2
 80079ce:	3308      	adds	r3, #8
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d006      	beq.n	80079e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d9dc      	bls.n	80079a0 <inc_lock+0x10>
 80079e6:	e000      	b.n	80079ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80079e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d132      	bne.n	8007a56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e002      	b.n	80079fc <inc_lock+0x6c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d806      	bhi.n	8007a10 <inc_lock+0x80>
 8007a02:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <inc_lock+0x118>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4413      	add	r3, r2
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1f2      	bne.n	80079f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d101      	bne.n	8007a1a <inc_lock+0x8a>
 8007a16:	2300      	movs	r3, #0
 8007a18:	e040      	b.n	8007a9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4922      	ldr	r1, [pc, #136]	@ (8007aa8 <inc_lock+0x118>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	440b      	add	r3, r1
 8007a26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	491e      	ldr	r1, [pc, #120]	@ (8007aa8 <inc_lock+0x118>)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	440b      	add	r3, r1
 8007a34:	3304      	adds	r3, #4
 8007a36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695a      	ldr	r2, [r3, #20]
 8007a3c:	491a      	ldr	r1, [pc, #104]	@ (8007aa8 <inc_lock+0x118>)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	440b      	add	r3, r1
 8007a44:	3308      	adds	r3, #8
 8007a46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007a48:	4a17      	ldr	r2, [pc, #92]	@ (8007aa8 <inc_lock+0x118>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	330c      	adds	r3, #12
 8007a52:	2200      	movs	r2, #0
 8007a54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d009      	beq.n	8007a70 <inc_lock+0xe0>
 8007a5c:	4a12      	ldr	r2, [pc, #72]	@ (8007aa8 <inc_lock+0x118>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	4413      	add	r3, r2
 8007a64:	330c      	adds	r3, #12
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <inc_lock+0xe0>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	e015      	b.n	8007a9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d108      	bne.n	8007a88 <inc_lock+0xf8>
 8007a76:	4a0c      	ldr	r2, [pc, #48]	@ (8007aa8 <inc_lock+0x118>)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	4413      	add	r3, r2
 8007a7e:	330c      	adds	r3, #12
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	e001      	b.n	8007a8c <inc_lock+0xfc>
 8007a88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a8c:	4906      	ldr	r1, [pc, #24]	@ (8007aa8 <inc_lock+0x118>)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	440b      	add	r3, r1
 8007a94:	330c      	adds	r3, #12
 8007a96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20002778 	.word	0x20002778

08007aac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d825      	bhi.n	8007b0c <dec_lock+0x60>
		n = Files[i].ctr;
 8007ac0:	4a17      	ldr	r2, [pc, #92]	@ (8007b20 <dec_lock+0x74>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	4413      	add	r3, r2
 8007ac8:	330c      	adds	r3, #12
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007ace:	89fb      	ldrh	r3, [r7, #14]
 8007ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad4:	d101      	bne.n	8007ada <dec_lock+0x2e>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007ada:	89fb      	ldrh	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <dec_lock+0x3a>
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b20 <dec_lock+0x74>)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	4413      	add	r3, r2
 8007aee:	330c      	adds	r3, #12
 8007af0:	89fa      	ldrh	r2, [r7, #14]
 8007af2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007af4:	89fb      	ldrh	r3, [r7, #14]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <dec_lock+0x5a>
 8007afa:	4a09      	ldr	r2, [pc, #36]	@ (8007b20 <dec_lock+0x74>)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4413      	add	r3, r2
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	737b      	strb	r3, [r7, #13]
 8007b0a:	e001      	b.n	8007b10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007b10:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	20002778 	.word	0x20002778

08007b24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e010      	b.n	8007b54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b32:	4a0d      	ldr	r2, [pc, #52]	@ (8007b68 <clear_lock+0x44>)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	4413      	add	r3, r2
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d105      	bne.n	8007b4e <clear_lock+0x2a>
 8007b42:	4a09      	ldr	r2, [pc, #36]	@ (8007b68 <clear_lock+0x44>)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d9eb      	bls.n	8007b32 <clear_lock+0xe>
	}
}
 8007b5a:	bf00      	nop
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	20002778 	.word	0x20002778

08007b6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	78db      	ldrb	r3, [r3, #3]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d034      	beq.n	8007bea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	7858      	ldrb	r0, [r3, #1]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007b90:	2301      	movs	r3, #1
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	f7ff fd40 	bl	8007618 <disk_write>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e022      	b.n	8007bea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d217      	bcs.n	8007bea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	e010      	b.n	8007be4 <sync_window+0x78>
					wsect += fs->fsize;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	4413      	add	r3, r2
 8007bca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7858      	ldrb	r0, [r3, #1]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	f7ff fd1d 	bl	8007618 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d8eb      	bhi.n	8007bc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d01b      	beq.n	8007c44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff ffad 	bl	8007b6c <sync_window>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d113      	bne.n	8007c44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7858      	ldrb	r0, [r3, #1]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007c26:	2301      	movs	r3, #1
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	f7ff fcd5 	bl	80075d8 <disk_read>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d004      	beq.n	8007c3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c34:	f04f 33ff 	mov.w	r3, #4294967295
 8007c38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff ff87 	bl	8007b6c <sync_window>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d159      	bne.n	8007d1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d149      	bne.n	8007d04 <sync_fs+0xb4>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	791b      	ldrb	r3, [r3, #4]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d145      	bne.n	8007d04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	899b      	ldrh	r3, [r3, #12]
 8007c82:	461a      	mov	r2, r3
 8007c84:	2100      	movs	r1, #0
 8007c86:	f7ff fda8 	bl	80077da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3334      	adds	r3, #52	@ 0x34
 8007c8e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007c92:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fd37 	bl	800770a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3334      	adds	r3, #52	@ 0x34
 8007ca0:	4921      	ldr	r1, [pc, #132]	@ (8007d28 <sync_fs+0xd8>)
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fd4c 	bl	8007740 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3334      	adds	r3, #52	@ 0x34
 8007cac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007cb0:	491e      	ldr	r1, [pc, #120]	@ (8007d2c <sync_fs+0xdc>)
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fd44 	bl	8007740 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3334      	adds	r3, #52	@ 0x34
 8007cbc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f7ff fd3a 	bl	8007740 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3334      	adds	r3, #52	@ 0x34
 8007cd0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7ff fd30 	bl	8007740 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7858      	ldrb	r0, [r3, #1]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f7ff fc8d 	bl	8007618 <disk_write>
			fs->fsi_flag = 0;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fca3 	bl	8007658 <disk_ioctl>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <sync_fs+0xcc>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	41615252 	.word	0x41615252
 8007d2c:	61417272 	.word	0x61417272

08007d30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	3b02      	subs	r3, #2
 8007d3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	3b02      	subs	r3, #2
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d301      	bcc.n	8007d50 <clust2sect+0x20>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e008      	b.n	8007d62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	895b      	ldrh	r3, [r3, #10]
 8007d54:	461a      	mov	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	fb03 f202 	mul.w	r2, r3, r2
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d60:	4413      	add	r3, r2
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d904      	bls.n	8007d8e <get_fat+0x20>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
 8007d92:	e0ba      	b.n	8007f0a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295
 8007d98:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	f000 8082 	beq.w	8007ea8 <get_fat+0x13a>
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	f300 80a6 	bgt.w	8007ef6 <get_fat+0x188>
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d002      	beq.n	8007db4 <get_fat+0x46>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d055      	beq.n	8007e5e <get_fat+0xf0>
 8007db2:	e0a0      	b.n	8007ef6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	899b      	ldrh	r3, [r3, #12]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f7ff ff0c 	bl	8007bf4 <move_window>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f040 808c 	bne.w	8007efc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	60fa      	str	r2, [r7, #12]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	8992      	ldrh	r2, [r2, #12]
 8007dee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007df2:	fb01 f202 	mul.w	r2, r1, r2
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e00:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	899b      	ldrh	r3, [r3, #12]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e12:	4413      	add	r3, r2
 8007e14:	4619      	mov	r1, r3
 8007e16:	6938      	ldr	r0, [r7, #16]
 8007e18:	f7ff feec 	bl	8007bf4 <move_window>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d16e      	bne.n	8007f00 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	899b      	ldrh	r3, [r3, #12]
 8007e26:	461a      	mov	r2, r3
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e2e:	fb01 f202 	mul.w	r2, r1, r2
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4413      	add	r3, r2
 8007e38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <get_fat+0xe6>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	e002      	b.n	8007e5a <get_fat+0xec>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e5a:	617b      	str	r3, [r7, #20]
			break;
 8007e5c:	e055      	b.n	8007f0a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	899b      	ldrh	r3, [r3, #12]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e72:	4413      	add	r3, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f7ff febc 	bl	8007bf4 <move_window>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d140      	bne.n	8007f04 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	005b      	lsls	r3, r3, #1
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	8992      	ldrh	r2, [r2, #12]
 8007e90:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e94:	fb00 f202 	mul.w	r2, r0, r2
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fbf9 	bl	8007694 <ld_word>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	617b      	str	r3, [r7, #20]
			break;
 8007ea6:	e030      	b.n	8007f0a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	899b      	ldrh	r3, [r3, #12]
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6938      	ldr	r0, [r7, #16]
 8007ec2:	f7ff fe97 	bl	8007bf4 <move_window>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d11d      	bne.n	8007f08 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	8992      	ldrh	r2, [r2, #12]
 8007eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ede:	fb00 f202 	mul.w	r2, r0, r2
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fbec 	bl	80076c4 <ld_dword>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ef2:	617b      	str	r3, [r7, #20]
			break;
 8007ef4:	e009      	b.n	8007f0a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	e006      	b.n	8007f0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007efc:	bf00      	nop
 8007efe:	e004      	b.n	8007f0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f00:	bf00      	nop
 8007f02:	e002      	b.n	8007f0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f04:	bf00      	nop
 8007f06:	e000      	b.n	8007f0a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f08:	bf00      	nop
		}
	}

	return val;
 8007f0a:	697b      	ldr	r3, [r7, #20]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3718      	adds	r7, #24
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b089      	sub	sp, #36	@ 0x24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f20:	2302      	movs	r3, #2
 8007f22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	f240 8109 	bls.w	800813e <put_fat+0x22a>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	f080 8103 	bcs.w	800813e <put_fat+0x22a>
		switch (fs->fs_type) {
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	f000 80b6 	beq.w	80080ae <put_fat+0x19a>
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	f300 80fb 	bgt.w	800813e <put_fat+0x22a>
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d003      	beq.n	8007f54 <put_fat+0x40>
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f000 8083 	beq.w	8008058 <put_fat+0x144>
 8007f52:	e0f4      	b.n	800813e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	085b      	lsrs	r3, r3, #1
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4413      	add	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	899b      	ldrh	r3, [r3, #12]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f72:	4413      	add	r3, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fe3c 	bl	8007bf4 <move_window>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 80d4 	bne.w	8008130 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	61ba      	str	r2, [r7, #24]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	8992      	ldrh	r2, [r2, #12]
 8007f98:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f9c:	fb00 f202 	mul.w	r2, r0, r2
 8007fa0:	1a9b      	subs	r3, r3, r2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00d      	beq.n	8007fcc <put_fat+0xb8>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	b25a      	sxtb	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b25b      	sxtb	r3, r3
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	e001      	b.n	8007fd0 <put_fat+0xbc>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	899b      	ldrh	r3, [r3, #12]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fea:	4413      	add	r3, r2
 8007fec:	4619      	mov	r1, r3
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff fe00 	bl	8007bf4 <move_window>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ff8:	7ffb      	ldrb	r3, [r7, #31]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f040 809a 	bne.w	8008134 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	899b      	ldrh	r3, [r3, #12]
 800800a:	461a      	mov	r2, r3
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008012:	fb00 f202 	mul.w	r2, r0, r2
 8008016:	1a9b      	subs	r3, r3, r2
 8008018:	440b      	add	r3, r1
 800801a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d003      	beq.n	800802e <put_fat+0x11a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	091b      	lsrs	r3, r3, #4
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e00e      	b.n	800804c <put_fat+0x138>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f023 030f 	bic.w	r3, r3, #15
 8008038:	b25a      	sxtb	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f003 030f 	and.w	r3, r3, #15
 8008044:	b25b      	sxtb	r3, r3
 8008046:	4313      	orrs	r3, r2
 8008048:	b25b      	sxtb	r3, r3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	70da      	strb	r2, [r3, #3]
			break;
 8008056:	e072      	b.n	800813e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	899b      	ldrh	r3, [r3, #12]
 8008060:	085b      	lsrs	r3, r3, #1
 8008062:	b29b      	uxth	r3, r3
 8008064:	4619      	mov	r1, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	fbb3 f3f1 	udiv	r3, r3, r1
 800806c:	4413      	add	r3, r2
 800806e:	4619      	mov	r1, r3
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fdbf 	bl	8007bf4 <move_window>
 8008076:	4603      	mov	r3, r0
 8008078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d15b      	bne.n	8008138 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	8992      	ldrh	r2, [r2, #12]
 800808e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008092:	fb00 f202 	mul.w	r2, r0, r2
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	440b      	add	r3, r1
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	b292      	uxth	r2, r2
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fb32 	bl	800770a <st_word>
			fs->wflag = 1;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	70da      	strb	r2, [r3, #3]
			break;
 80080ac:	e047      	b.n	800813e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	899b      	ldrh	r3, [r3, #12]
 80080b6:	089b      	lsrs	r3, r3, #2
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	fbb3 f3f1 	udiv	r3, r3, r1
 80080c2:	4413      	add	r3, r2
 80080c4:	4619      	mov	r1, r3
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7ff fd94 	bl	8007bf4 <move_window>
 80080cc:	4603      	mov	r3, r0
 80080ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080d0:	7ffb      	ldrb	r3, [r7, #31]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d132      	bne.n	800813c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	8992      	ldrh	r2, [r2, #12]
 80080ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80080ee:	fb00 f202 	mul.w	r2, r0, r2
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	440b      	add	r3, r1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff fae4 	bl	80076c4 <ld_dword>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008102:	4323      	orrs	r3, r4
 8008104:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	8992      	ldrh	r2, [r2, #12]
 8008114:	fbb3 f0f2 	udiv	r0, r3, r2
 8008118:	fb00 f202 	mul.w	r2, r0, r2
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	440b      	add	r3, r1
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff fb0c 	bl	8007740 <st_dword>
			fs->wflag = 1;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	70da      	strb	r2, [r3, #3]
			break;
 800812e:	e006      	b.n	800813e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008130:	bf00      	nop
 8008132:	e004      	b.n	800813e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008134:	bf00      	nop
 8008136:	e002      	b.n	800813e <put_fat+0x22a>
			if (res != FR_OK) break;
 8008138:	bf00      	nop
 800813a:	e000      	b.n	800813e <put_fat+0x22a>
			if (res != FR_OK) break;
 800813c:	bf00      	nop
		}
	}
	return res;
 800813e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3724      	adds	r7, #36	@ 0x24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd90      	pop	{r4, r7, pc}

08008148 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d904      	bls.n	800816e <remove_chain+0x26>
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	d301      	bcc.n	8008172 <remove_chain+0x2a>
 800816e:	2302      	movs	r3, #2
 8008170:	e04b      	b.n	800820a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00c      	beq.n	8008192 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	69b8      	ldr	r0, [r7, #24]
 8008180:	f7ff fec8 	bl	8007f14 <put_fat>
 8008184:	4603      	mov	r3, r0
 8008186:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008188:	7ffb      	ldrb	r3, [r7, #31]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <remove_chain+0x4a>
 800818e:	7ffb      	ldrb	r3, [r7, #31]
 8008190:	e03b      	b.n	800820a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff fdea 	bl	8007d6e <get_fat>
 800819a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d031      	beq.n	8008206 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <remove_chain+0x64>
 80081a8:	2302      	movs	r3, #2
 80081aa:	e02e      	b.n	800820a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b2:	d101      	bne.n	80081b8 <remove_chain+0x70>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e028      	b.n	800820a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80081b8:	2200      	movs	r2, #0
 80081ba:	68b9      	ldr	r1, [r7, #8]
 80081bc:	69b8      	ldr	r0, [r7, #24]
 80081be:	f7ff fea9 	bl	8007f14 <put_fat>
 80081c2:	4603      	mov	r3, r0
 80081c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081c6:	7ffb      	ldrb	r3, [r7, #31]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <remove_chain+0x88>
 80081cc:	7ffb      	ldrb	r3, [r7, #31]
 80081ce:	e01c      	b.n	800820a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	695a      	ldr	r2, [r3, #20]
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	3b02      	subs	r3, #2
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20b      	bcs.n	80081f6 <remove_chain+0xae>
			fs->free_clst++;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	791b      	ldrb	r3, [r3, #4]
 80081ec:	f043 0301 	orr.w	r3, r3, #1
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	d3c6      	bcc.n	8008192 <remove_chain+0x4a>
 8008204:	e000      	b.n	8008208 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008206:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3720      	adds	r7, #32
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b088      	sub	sp, #32
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10d      	bne.n	8008244 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d004      	beq.n	800823e <create_chain+0x2c>
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d31b      	bcc.n	8008276 <create_chain+0x64>
 800823e:	2301      	movs	r3, #1
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	e018      	b.n	8008276 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff fd91 	bl	8007d6e <get_fat>
 800824c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d801      	bhi.n	8008258 <create_chain+0x46>
 8008254:	2301      	movs	r3, #1
 8008256:	e070      	b.n	800833a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	d101      	bne.n	8008264 <create_chain+0x52>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	e06a      	b.n	800833a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	429a      	cmp	r2, r3
 800826c:	d201      	bcs.n	8008272 <create_chain+0x60>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e063      	b.n	800833a <create_chain+0x128>
		scl = clst;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	3301      	adds	r3, #1
 800827e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	69fa      	ldr	r2, [r7, #28]
 8008286:	429a      	cmp	r2, r3
 8008288:	d307      	bcc.n	800829a <create_chain+0x88>
				ncl = 2;
 800828a:	2302      	movs	r3, #2
 800828c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	429a      	cmp	r2, r3
 8008294:	d901      	bls.n	800829a <create_chain+0x88>
 8008296:	2300      	movs	r3, #0
 8008298:	e04f      	b.n	800833a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800829a:	69f9      	ldr	r1, [r7, #28]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff fd66 	bl	8007d6e <get_fat>
 80082a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00e      	beq.n	80082c8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d003      	beq.n	80082b8 <create_chain+0xa6>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b6:	d101      	bne.n	80082bc <create_chain+0xaa>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	e03e      	b.n	800833a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d1da      	bne.n	800827a <create_chain+0x68>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e038      	b.n	800833a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	69f9      	ldr	r1, [r7, #28]
 80082d0:	6938      	ldr	r0, [r7, #16]
 80082d2:	f7ff fe1f 	bl	8007f14 <put_fat>
 80082d6:	4603      	mov	r3, r0
 80082d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d109      	bne.n	80082f4 <create_chain+0xe2>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d006      	beq.n	80082f4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f7ff fe12 	bl	8007f14 <put_fat>
 80082f0:	4603      	mov	r3, r0
 80082f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d116      	bne.n	8008328 <create_chain+0x116>
		fs->last_clst = ncl;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	695a      	ldr	r2, [r3, #20]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	3b02      	subs	r3, #2
 800830a:	429a      	cmp	r2, r3
 800830c:	d804      	bhi.n	8008318 <create_chain+0x106>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	1e5a      	subs	r2, r3, #1
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	b2da      	uxtb	r2, r3
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	711a      	strb	r2, [r3, #4]
 8008326:	e007      	b.n	8008338 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d102      	bne.n	8008334 <create_chain+0x122>
 800832e:	f04f 33ff 	mov.w	r3, #4294967295
 8008332:	e000      	b.n	8008336 <create_chain+0x124>
 8008334:	2301      	movs	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008338:	69fb      	ldr	r3, [r7, #28]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008342:	b480      	push	{r7}
 8008344:	b087      	sub	sp, #28
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008356:	3304      	adds	r3, #4
 8008358:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	899b      	ldrh	r3, [r3, #12]
 800835e:	461a      	mov	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	fbb3 f3f2 	udiv	r3, r3, r2
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	8952      	ldrh	r2, [r2, #10]
 800836a:	fbb3 f3f2 	udiv	r3, r3, r2
 800836e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	613a      	str	r2, [r7, #16]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <clmt_clust+0x42>
 8008380:	2300      	movs	r3, #0
 8008382:	e010      	b.n	80083a6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	429a      	cmp	r2, r3
 800838a:	d307      	bcc.n	800839c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	3304      	adds	r3, #4
 8008398:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800839a:	e7e9      	b.n	8008370 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800839c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	4413      	add	r3, r2
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b086      	sub	sp, #24
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083c8:	d204      	bcs.n	80083d4 <dir_sdi+0x22>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	f003 031f 	and.w	r3, r3, #31
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80083d4:	2302      	movs	r3, #2
 80083d6:	e071      	b.n	80084bc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <dir_sdi+0x46>
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d902      	bls.n	80083f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10c      	bne.n	8008418 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	8912      	ldrh	r2, [r2, #8]
 8008406:	4293      	cmp	r3, r2
 8008408:	d301      	bcc.n	800840e <dir_sdi+0x5c>
 800840a:	2302      	movs	r3, #2
 800840c:	e056      	b.n	80084bc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	61da      	str	r2, [r3, #28]
 8008416:	e02d      	b.n	8008474 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	895b      	ldrh	r3, [r3, #10]
 800841c:	461a      	mov	r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	899b      	ldrh	r3, [r3, #12]
 8008422:	fb02 f303 	mul.w	r3, r2, r3
 8008426:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008428:	e019      	b.n	800845e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6979      	ldr	r1, [r7, #20]
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff fc9d 	bl	8007d6e <get_fat>
 8008434:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d101      	bne.n	8008442 <dir_sdi+0x90>
 800843e:	2301      	movs	r3, #1
 8008440:	e03c      	b.n	80084bc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d904      	bls.n	8008452 <dir_sdi+0xa0>
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	429a      	cmp	r2, r3
 8008450:	d301      	bcc.n	8008456 <dir_sdi+0xa4>
 8008452:	2302      	movs	r3, #2
 8008454:	e032      	b.n	80084bc <dir_sdi+0x10a>
			ofs -= csz;
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	429a      	cmp	r2, r3
 8008464:	d2e1      	bcs.n	800842a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008466:	6979      	ldr	r1, [r7, #20]
 8008468:	6938      	ldr	r0, [r7, #16]
 800846a:	f7ff fc61 	bl	8007d30 <clust2sect>
 800846e:	4602      	mov	r2, r0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <dir_sdi+0xd4>
 8008482:	2302      	movs	r3, #2
 8008484:	e01a      	b.n	80084bc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69da      	ldr	r2, [r3, #28]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	899b      	ldrh	r3, [r3, #12]
 800848e:	4619      	mov	r1, r3
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	fbb3 f3f1 	udiv	r3, r3, r1
 8008496:	441a      	add	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	899b      	ldrh	r3, [r3, #12]
 80084a6:	461a      	mov	r2, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80084ae:	fb00 f202 	mul.w	r2, r0, r2
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	18ca      	adds	r2, r1, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	3320      	adds	r3, #32
 80084da:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	69db      	ldr	r3, [r3, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <dir_next+0x28>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ea:	d301      	bcc.n	80084f0 <dir_next+0x2c>
 80084ec:	2304      	movs	r3, #4
 80084ee:	e0bb      	b.n	8008668 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	899b      	ldrh	r3, [r3, #12]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80084fc:	fb01 f202 	mul.w	r2, r1, r2
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	f040 809d 	bne.w	8008642 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	1c5a      	adds	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	8912      	ldrh	r2, [r2, #8]
 8008522:	4293      	cmp	r3, r2
 8008524:	f0c0 808d 	bcc.w	8008642 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	61da      	str	r2, [r3, #28]
 800852e:	2304      	movs	r3, #4
 8008530:	e09a      	b.n	8008668 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	899b      	ldrh	r3, [r3, #12]
 8008536:	461a      	mov	r2, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	fbb3 f3f2 	udiv	r3, r3, r2
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	8952      	ldrh	r2, [r2, #10]
 8008542:	3a01      	subs	r2, #1
 8008544:	4013      	ands	r3, r2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d17b      	bne.n	8008642 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	4619      	mov	r1, r3
 8008552:	4610      	mov	r0, r2
 8008554:	f7ff fc0b 	bl	8007d6e <get_fat>
 8008558:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d801      	bhi.n	8008564 <dir_next+0xa0>
 8008560:	2302      	movs	r3, #2
 8008562:	e081      	b.n	8008668 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856a:	d101      	bne.n	8008570 <dir_next+0xac>
 800856c:	2301      	movs	r3, #1
 800856e:	e07b      	b.n	8008668 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	429a      	cmp	r2, r3
 8008578:	d359      	bcc.n	800862e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	61da      	str	r2, [r3, #28]
 8008586:	2304      	movs	r3, #4
 8008588:	e06e      	b.n	8008668 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7ff fe3d 	bl	8008212 <create_chain>
 8008598:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <dir_next+0xe0>
 80085a0:	2307      	movs	r3, #7
 80085a2:	e061      	b.n	8008668 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <dir_next+0xea>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e05c      	b.n	8008668 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d101      	bne.n	80085ba <dir_next+0xf6>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e056      	b.n	8008668 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff fad6 	bl	8007b6c <sync_window>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <dir_next+0x106>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e04e      	b.n	8008668 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	899b      	ldrh	r3, [r3, #12]
 80085d4:	461a      	mov	r2, r3
 80085d6:	2100      	movs	r1, #0
 80085d8:	f7ff f8ff 	bl	80077da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
 80085e0:	6979      	ldr	r1, [r7, #20]
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fba4 	bl	8007d30 <clust2sect>
 80085e8:	4602      	mov	r2, r0
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80085ee:	e012      	b.n	8008616 <dir_next+0x152>
						fs->wflag = 1;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff fab8 	bl	8007b6c <sync_window>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <dir_next+0x142>
 8008602:	2301      	movs	r3, #1
 8008604:	e030      	b.n	8008668 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	3301      	adds	r3, #1
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008610:	1c5a      	adds	r2, r3, #1
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	631a      	str	r2, [r3, #48]	@ 0x30
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	895b      	ldrh	r3, [r3, #10]
 800861a:	461a      	mov	r2, r3
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4293      	cmp	r3, r2
 8008620:	d3e6      	bcc.n	80085f0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1ad2      	subs	r2, r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008634:	6979      	ldr	r1, [r7, #20]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7ff fb7a 	bl	8007d30 <clust2sect>
 800863c:	4602      	mov	r2, r0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	899b      	ldrh	r3, [r3, #12]
 8008652:	461a      	mov	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	fbb3 f0f2 	udiv	r0, r3, r2
 800865a:	fb00 f202 	mul.w	r2, r0, r2
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	18ca      	adds	r2, r1, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008680:	2100      	movs	r1, #0
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff fe95 	bl	80083b2 <dir_sdi>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d12b      	bne.n	80086ea <dir_alloc+0x7a>
		n = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff faa9 	bl	8007bf4 <move_window>
 80086a2:	4603      	mov	r3, r0
 80086a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11d      	bne.n	80086e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2be5      	cmp	r3, #229	@ 0xe5
 80086b4:	d004      	beq.n	80086c0 <dir_alloc+0x50>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d107      	bne.n	80086d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d102      	bne.n	80086d4 <dir_alloc+0x64>
 80086ce:	e00c      	b.n	80086ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80086d0:	2300      	movs	r3, #0
 80086d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086d4:	2101      	movs	r1, #1
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff fef4 	bl	80084c4 <dir_next>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0d7      	beq.n	8008696 <dir_alloc+0x26>
 80086e6:	e000      	b.n	80086ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d101      	bne.n	80086f4 <dir_alloc+0x84>
 80086f0:	2307      	movs	r3, #7
 80086f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	331a      	adds	r3, #26
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe ffc1 	bl	8007694 <ld_word>
 8008712:	4603      	mov	r3, r0
 8008714:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d109      	bne.n	8008732 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	3314      	adds	r3, #20
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ffb6 	bl	8007694 <ld_word>
 8008728:	4603      	mov	r3, r0
 800872a:	041b      	lsls	r3, r3, #16
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008732:	68fb      	ldr	r3, [r7, #12]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	331a      	adds	r3, #26
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	b292      	uxth	r2, r2
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe ffd9 	bl	800770a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d109      	bne.n	8008774 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f103 0214 	add.w	r2, r3, #20
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	0c1b      	lsrs	r3, r3, #16
 800876a:	b29b      	uxth	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f7fe ffcb 	bl	800770a <st_word>
	}
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff fe10 	bl	80083b2 <dir_sdi>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <dir_find+0x24>
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	e03e      	b.n	800881e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	4619      	mov	r1, r3
 80087a6:	6938      	ldr	r0, [r7, #16]
 80087a8:	f7ff fa24 	bl	8007bf4 <move_window>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d12f      	bne.n	8008816 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <dir_find+0x4e>
 80087c4:	2304      	movs	r3, #4
 80087c6:	75fb      	strb	r3, [r7, #23]
 80087c8:	e028      	b.n	800881c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	330b      	adds	r3, #11
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	330b      	adds	r3, #11
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10a      	bne.n	8008802 <dir_find+0x86>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a18      	ldr	r0, [r3, #32]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3324      	adds	r3, #36	@ 0x24
 80087f4:	220b      	movs	r2, #11
 80087f6:	4619      	mov	r1, r3
 80087f8:	f7ff f80a 	bl	8007810 <mem_cmp>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008802:	2100      	movs	r1, #0
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff fe5d 	bl	80084c4 <dir_next>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0c5      	beq.n	80087a0 <dir_find+0x24>
 8008814:	e002      	b.n	800881c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008816:	bf00      	nop
 8008818:	e000      	b.n	800881c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800881a:	bf00      	nop

	return res;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008834:	2101      	movs	r1, #1
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff ff1a 	bl	8008670 <dir_alloc>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d11c      	bne.n	8008880 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	4619      	mov	r1, r3
 800884c:	68b8      	ldr	r0, [r7, #8]
 800884e:	f7ff f9d1 	bl	8007bf4 <move_window>
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d111      	bne.n	8008880 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	2220      	movs	r2, #32
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe ffb8 	bl	80077da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a18      	ldr	r0, [r3, #32]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3324      	adds	r3, #36	@ 0x24
 8008872:	220b      	movs	r2, #11
 8008874:	4619      	mov	r1, r3
 8008876:	f7fe ff8f 	bl	8007798 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2201      	movs	r2, #1
 800887e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3324      	adds	r3, #36	@ 0x24
 80088a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80088a2:	220b      	movs	r2, #11
 80088a4:	2120      	movs	r1, #32
 80088a6:	68b8      	ldr	r0, [r7, #8]
 80088a8:	f7fe ff97 	bl	80077da <mem_set>
	si = i = 0; ni = 8;
 80088ac:	2300      	movs	r3, #0
 80088ae:	613b      	str	r3, [r7, #16]
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	2308      	movs	r3, #8
 80088b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	1c5a      	adds	r2, r3, #1
 80088bc:	61fa      	str	r2, [r7, #28]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80088c6:	7efb      	ldrb	r3, [r7, #27]
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d94e      	bls.n	800896a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80088cc:	7efb      	ldrb	r3, [r7, #27]
 80088ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80088d0:	d006      	beq.n	80088e0 <create_name+0x54>
 80088d2:	7efb      	ldrb	r3, [r7, #27]
 80088d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80088d6:	d110      	bne.n	80088fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80088d8:	e002      	b.n	80088e0 <create_name+0x54>
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	3301      	adds	r3, #1
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80088ea:	d0f6      	beq.n	80088da <create_name+0x4e>
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80088f6:	d0f0      	beq.n	80088da <create_name+0x4e>
			break;
 80088f8:	e038      	b.n	800896c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80088fa:	7efb      	ldrb	r3, [r7, #27]
 80088fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80088fe:	d003      	beq.n	8008908 <create_name+0x7c>
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	429a      	cmp	r2, r3
 8008906:	d30c      	bcc.n	8008922 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b0b      	cmp	r3, #11
 800890c:	d002      	beq.n	8008914 <create_name+0x88>
 800890e:	7efb      	ldrb	r3, [r7, #27]
 8008910:	2b2e      	cmp	r3, #46	@ 0x2e
 8008912:	d001      	beq.n	8008918 <create_name+0x8c>
 8008914:	2306      	movs	r3, #6
 8008916:	e044      	b.n	80089a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008918:	2308      	movs	r3, #8
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	230b      	movs	r3, #11
 800891e:	617b      	str	r3, [r7, #20]
			continue;
 8008920:	e022      	b.n	8008968 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008922:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008926:	2b00      	cmp	r3, #0
 8008928:	da04      	bge.n	8008934 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800892a:	7efb      	ldrb	r3, [r7, #27]
 800892c:	3b80      	subs	r3, #128	@ 0x80
 800892e:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <create_name+0x120>)
 8008930:	5cd3      	ldrb	r3, [r2, r3]
 8008932:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008934:	7efb      	ldrb	r3, [r7, #27]
 8008936:	4619      	mov	r1, r3
 8008938:	481d      	ldr	r0, [pc, #116]	@ (80089b0 <create_name+0x124>)
 800893a:	f7fe ff90 	bl	800785e <chk_chr>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <create_name+0xbc>
 8008944:	2306      	movs	r3, #6
 8008946:	e02c      	b.n	80089a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008948:	7efb      	ldrb	r3, [r7, #27]
 800894a:	2b60      	cmp	r3, #96	@ 0x60
 800894c:	d905      	bls.n	800895a <create_name+0xce>
 800894e:	7efb      	ldrb	r3, [r7, #27]
 8008950:	2b7a      	cmp	r3, #122	@ 0x7a
 8008952:	d802      	bhi.n	800895a <create_name+0xce>
 8008954:	7efb      	ldrb	r3, [r7, #27]
 8008956:	3b20      	subs	r3, #32
 8008958:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	613a      	str	r2, [r7, #16]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	4413      	add	r3, r2
 8008964:	7efa      	ldrb	r2, [r7, #27]
 8008966:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008968:	e7a6      	b.n	80088b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800896a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	441a      	add	r2, r3
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <create_name+0xf4>
 800897c:	2306      	movs	r3, #6
 800897e:	e010      	b.n	80089a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2be5      	cmp	r3, #229	@ 0xe5
 8008986:	d102      	bne.n	800898e <create_name+0x102>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2205      	movs	r2, #5
 800898c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800898e:	7efb      	ldrb	r3, [r7, #27]
 8008990:	2b20      	cmp	r3, #32
 8008992:	d801      	bhi.n	8008998 <create_name+0x10c>
 8008994:	2204      	movs	r2, #4
 8008996:	e000      	b.n	800899a <create_name+0x10e>
 8008998:	2200      	movs	r2, #0
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	330b      	adds	r3, #11
 800899e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80089a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	0800e5b8 	.word	0x0800e5b8
 80089b0:	0800e4ac 	.word	0x0800e4ac

080089b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80089c8:	e002      	b.n	80089d0 <follow_path+0x1c>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80089d6:	d0f8      	beq.n	80089ca <follow_path+0x16>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80089de:	d0f4      	beq.n	80089ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b1f      	cmp	r3, #31
 80089ec:	d80a      	bhi.n	8008a04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2280      	movs	r2, #128	@ 0x80
 80089f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80089f6:	2100      	movs	r1, #0
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff fcda 	bl	80083b2 <dir_sdi>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75fb      	strb	r3, [r7, #23]
 8008a02:	e048      	b.n	8008a96 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a04:	463b      	mov	r3, r7
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff3f 	bl	800888c <create_name>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d139      	bne.n	8008a8c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff feaf 	bl	800877c <dir_find>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d12c      	bne.n	8008a90 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d127      	bne.n	8008a90 <follow_path+0xdc>
 8008a40:	2305      	movs	r3, #5
 8008a42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a44:	e024      	b.n	8008a90 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d121      	bne.n	8008a94 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	799b      	ldrb	r3, [r3, #6]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a5c:	2305      	movs	r3, #5
 8008a5e:	75fb      	strb	r3, [r7, #23]
 8008a60:	e019      	b.n	8008a96 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	8992      	ldrh	r2, [r2, #12]
 8008a70:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a74:	fb00 f202 	mul.w	r2, r0, r2
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fe3d 	bl	80086fe <ld_clust>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a8a:	e7bb      	b.n	8008a04 <follow_path+0x50>
			if (res != FR_OK) break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <follow_path+0xe2>
				break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a94:	bf00      	nop
			}
		}
	}

	return res;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d031      	beq.n	8008b1a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	e002      	b.n	8008ac4 <get_ldnumber+0x24>
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d903      	bls.n	8008ad4 <get_ldnumber+0x34>
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ad2:	d1f4      	bne.n	8008abe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ada:	d11c      	bne.n	8008b16 <get_ldnumber+0x76>
			tp = *path;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	60fa      	str	r2, [r7, #12]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	3b30      	subs	r3, #48	@ 0x30
 8008aec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d80e      	bhi.n	8008b12 <get_ldnumber+0x72>
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d10a      	bne.n	8008b12 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d107      	bne.n	8008b12 <get_ldnumber+0x72>
					vol = (int)i;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	e002      	b.n	8008b1c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008b1a:	693b      	ldr	r3, [r7, #16]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	70da      	strb	r2, [r3, #3]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7ff f856 	bl	8007bf4 <move_window>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <check_fs+0x2a>
 8008b4e:	2304      	movs	r3, #4
 8008b50:	e038      	b.n	8008bc4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3334      	adds	r3, #52	@ 0x34
 8008b56:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fd9a 	bl	8007694 <ld_word>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d001      	beq.n	8008b70 <check_fs+0x48>
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e029      	b.n	8008bc4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b76:	2be9      	cmp	r3, #233	@ 0xe9
 8008b78:	d009      	beq.n	8008b8e <check_fs+0x66>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008b80:	2beb      	cmp	r3, #235	@ 0xeb
 8008b82:	d11e      	bne.n	8008bc2 <check_fs+0x9a>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008b8a:	2b90      	cmp	r3, #144	@ 0x90
 8008b8c:	d119      	bne.n	8008bc2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3334      	adds	r3, #52	@ 0x34
 8008b92:	3336      	adds	r3, #54	@ 0x36
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe fd95 	bl	80076c4 <ld_dword>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bcc <check_fs+0xa4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d101      	bne.n	8008baa <check_fs+0x82>
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e00c      	b.n	8008bc4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3334      	adds	r3, #52	@ 0x34
 8008bae:	3352      	adds	r3, #82	@ 0x52
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fd87 	bl	80076c4 <ld_dword>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4a05      	ldr	r2, [pc, #20]	@ (8008bd0 <check_fs+0xa8>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d101      	bne.n	8008bc2 <check_fs+0x9a>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e000      	b.n	8008bc4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008bc2:	2302      	movs	r3, #2
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	00544146 	.word	0x00544146
 8008bd0:	33544146 	.word	0x33544146

08008bd4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b096      	sub	sp, #88	@ 0x58
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff ff59 	bl	8008aa0 <get_ldnumber>
 8008bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	da01      	bge.n	8008bfa <find_volume+0x26>
 8008bf6:	230b      	movs	r3, #11
 8008bf8:	e262      	b.n	80090c0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008bfa:	4a9f      	ldr	r2, [pc, #636]	@ (8008e78 <find_volume+0x2a4>)
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <find_volume+0x3a>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	e258      	b.n	80090c0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d01a      	beq.n	8008c5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fc93 	bl	8007554 <disk_status>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10c      	bne.n	8008c5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <find_volume+0x82>
 8008c46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008c52:	230a      	movs	r3, #10
 8008c54:	e234      	b.n	80090c0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008c56:	2300      	movs	r3, #0
 8008c58:	e232      	b.n	80090c0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	785b      	ldrb	r3, [r3, #1]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fc8b 	bl	8007588 <disk_initialize>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c84:	2303      	movs	r3, #3
 8008c86:	e21b      	b.n	80090c0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <find_volume+0xca>
 8008c8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008c9a:	230a      	movs	r3, #10
 8008c9c:	e210      	b.n	80090c0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	7858      	ldrb	r0, [r3, #1]
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	2102      	movs	r1, #2
 8008caa:	f7fe fcd5 	bl	8007658 <disk_ioctl>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <find_volume+0xe4>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e203      	b.n	80090c0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	899b      	ldrh	r3, [r3, #12]
 8008cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc0:	d80d      	bhi.n	8008cde <find_volume+0x10a>
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	899b      	ldrh	r3, [r3, #12]
 8008cc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cca:	d308      	bcc.n	8008cde <find_volume+0x10a>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	899b      	ldrh	r3, [r3, #12]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	899b      	ldrh	r3, [r3, #12]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	4013      	ands	r3, r2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <find_volume+0x10e>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e1ee      	b.n	80090c0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ce6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ce8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cea:	f7ff ff1d 	bl	8008b28 <check_fs>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d149      	bne.n	8008d90 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d00:	e01e      	b.n	8008d40 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d0a:	011b      	lsls	r3, r3, #4
 8008d0c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008d10:	4413      	add	r3, r2
 8008d12:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d16:	3304      	adds	r3, #4
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d006      	beq.n	8008d2c <find_volume+0x158>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d20:	3308      	adds	r3, #8
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fcce 	bl	80076c4 <ld_dword>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	e000      	b.n	8008d2e <find_volume+0x15a>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	3358      	adds	r3, #88	@ 0x58
 8008d34:	443b      	add	r3, r7
 8008d36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d9dd      	bls.n	8008d02 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008d46:	2300      	movs	r3, #0
 8008d48:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d002      	beq.n	8008d56 <find_volume+0x182>
 8008d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d52:	3b01      	subs	r3, #1
 8008d54:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	3358      	adds	r3, #88	@ 0x58
 8008d5c:	443b      	add	r3, r7
 8008d5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d62:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <find_volume+0x1a2>
 8008d6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d6e:	f7ff fedb 	bl	8008b28 <check_fs>
 8008d72:	4603      	mov	r3, r0
 8008d74:	e000      	b.n	8008d78 <find_volume+0x1a4>
 8008d76:	2303      	movs	r3, #3
 8008d78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d905      	bls.n	8008d90 <find_volume+0x1bc>
 8008d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d86:	3301      	adds	r3, #1
 8008d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d9e2      	bls.n	8008d56 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d101      	bne.n	8008d9c <find_volume+0x1c8>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e191      	b.n	80090c0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d901      	bls.n	8008da8 <find_volume+0x1d4>
 8008da4:	230d      	movs	r3, #13
 8008da6:	e18b      	b.n	80090c0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	3334      	adds	r3, #52	@ 0x34
 8008dac:	330b      	adds	r3, #11
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fc70 	bl	8007694 <ld_word>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	899b      	ldrh	r3, [r3, #12]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d001      	beq.n	8008dc4 <find_volume+0x1f0>
 8008dc0:	230d      	movs	r3, #13
 8008dc2:	e17d      	b.n	80090c0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	3334      	adds	r3, #52	@ 0x34
 8008dc8:	3316      	adds	r3, #22
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fc62 	bl	8007694 <ld_word>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d106      	bne.n	8008de8 <find_volume+0x214>
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	3334      	adds	r3, #52	@ 0x34
 8008dde:	3324      	adds	r3, #36	@ 0x24
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fc6f 	bl	80076c4 <ld_dword>
 8008de6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	789b      	ldrb	r3, [r3, #2]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d005      	beq.n	8008e0c <find_volume+0x238>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	789b      	ldrb	r3, [r3, #2]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d001      	beq.n	8008e0c <find_volume+0x238>
 8008e08:	230d      	movs	r3, #13
 8008e0a:	e159      	b.n	80090c0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	789b      	ldrb	r3, [r3, #2]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e14:	fb02 f303 	mul.w	r3, r2, r3
 8008e18:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e20:	461a      	mov	r2, r3
 8008e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	895b      	ldrh	r3, [r3, #10]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d008      	beq.n	8008e40 <find_volume+0x26c>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e30:	895b      	ldrh	r3, [r3, #10]
 8008e32:	461a      	mov	r2, r3
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	895b      	ldrh	r3, [r3, #10]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <find_volume+0x270>
 8008e40:	230d      	movs	r3, #13
 8008e42:	e13d      	b.n	80090c0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	3334      	adds	r3, #52	@ 0x34
 8008e48:	3311      	adds	r3, #17
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fe fc22 	bl	8007694 <ld_word>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	891b      	ldrh	r3, [r3, #8]
 8008e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e5e:	8992      	ldrh	r2, [r2, #12]
 8008e60:	0952      	lsrs	r2, r2, #5
 8008e62:	b292      	uxth	r2, r2
 8008e64:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e68:	fb01 f202 	mul.w	r2, r1, r2
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <find_volume+0x2a8>
 8008e74:	230d      	movs	r3, #13
 8008e76:	e123      	b.n	80090c0 <find_volume+0x4ec>
 8008e78:	20002770 	.word	0x20002770

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7e:	3334      	adds	r3, #52	@ 0x34
 8008e80:	3313      	adds	r3, #19
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fc06 	bl	8007694 <ld_word>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <find_volume+0x2cc>
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	3334      	adds	r3, #52	@ 0x34
 8008e96:	3320      	adds	r3, #32
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fc13 	bl	80076c4 <ld_dword>
 8008e9e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	3334      	adds	r3, #52	@ 0x34
 8008ea4:	330e      	adds	r3, #14
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fbf4 	bl	8007694 <ld_word>
 8008eac:	4603      	mov	r3, r0
 8008eae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008eb0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <find_volume+0x2e6>
 8008eb6:	230d      	movs	r3, #13
 8008eb8:	e102      	b.n	80090c0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008eba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ebe:	4413      	add	r3, r2
 8008ec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ec2:	8911      	ldrh	r1, [r2, #8]
 8008ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ec6:	8992      	ldrh	r2, [r2, #12]
 8008ec8:	0952      	lsrs	r2, r2, #5
 8008eca:	b292      	uxth	r2, r2
 8008ecc:	fbb1 f2f2 	udiv	r2, r1, r2
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d201      	bcs.n	8008ee2 <find_volume+0x30e>
 8008ede:	230d      	movs	r3, #13
 8008ee0:	e0ee      	b.n	80090c0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eea:	8952      	ldrh	r2, [r2, #10]
 8008eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ef0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <find_volume+0x328>
 8008ef8:	230d      	movs	r3, #13
 8008efa:	e0e1      	b.n	80090c0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008efc:	2303      	movs	r3, #3
 8008efe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d802      	bhi.n	8008f12 <find_volume+0x33e>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d802      	bhi.n	8008f22 <find_volume+0x34e>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	1c9a      	adds	r2, r3, #2
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f2e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008f30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f34:	441a      	add	r2, r3
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008f3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3e:	441a      	add	r2, r3
 8008f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f42:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008f44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d11e      	bne.n	8008f8a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	3334      	adds	r3, #52	@ 0x34
 8008f50:	332a      	adds	r3, #42	@ 0x2a
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fb9e 	bl	8007694 <ld_word>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <find_volume+0x38e>
 8008f5e:	230d      	movs	r3, #13
 8008f60:	e0ae      	b.n	80090c0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f64:	891b      	ldrh	r3, [r3, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <find_volume+0x39a>
 8008f6a:	230d      	movs	r3, #13
 8008f6c:	e0a8      	b.n	80090c0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	3334      	adds	r3, #52	@ 0x34
 8008f72:	332c      	adds	r3, #44	@ 0x2c
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fe fba5 	bl	80076c4 <ld_dword>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f88:	e01f      	b.n	8008fca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	891b      	ldrh	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <find_volume+0x3c2>
 8008f92:	230d      	movs	r3, #13
 8008f94:	e094      	b.n	80090c0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9c:	441a      	add	r2, r3
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d103      	bne.n	8008fb2 <find_volume+0x3de>
 8008faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	e00a      	b.n	8008fc8 <find_volume+0x3f4>
 8008fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	4413      	add	r3, r2
 8008fbc:	085a      	lsrs	r2, r3, #1
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008fc8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	69da      	ldr	r2, [r3, #28]
 8008fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fd0:	899b      	ldrh	r3, [r3, #12]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008fdc:	8989      	ldrh	r1, [r1, #12]
 8008fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d201      	bcs.n	8008fea <find_volume+0x416>
 8008fe6:	230d      	movs	r3, #13
 8008fe8:	e06a      	b.n	80090c0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fec:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff0:	615a      	str	r2, [r3, #20]
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	695a      	ldr	r2, [r3, #20]
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2280      	movs	r2, #128	@ 0x80
 8008ffe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009000:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009004:	2b03      	cmp	r3, #3
 8009006:	d149      	bne.n	800909c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900a:	3334      	adds	r3, #52	@ 0x34
 800900c:	3330      	adds	r3, #48	@ 0x30
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fb40 	bl	8007694 <ld_word>
 8009014:	4603      	mov	r3, r0
 8009016:	2b01      	cmp	r3, #1
 8009018:	d140      	bne.n	800909c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800901a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800901c:	3301      	adds	r3, #1
 800901e:	4619      	mov	r1, r3
 8009020:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009022:	f7fe fde7 	bl	8007bf4 <move_window>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d137      	bne.n	800909c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	2200      	movs	r2, #0
 8009030:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009034:	3334      	adds	r3, #52	@ 0x34
 8009036:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fb2a 	bl	8007694 <ld_word>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009048:	429a      	cmp	r2, r3
 800904a:	d127      	bne.n	800909c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	3334      	adds	r3, #52	@ 0x34
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fb37 	bl	80076c4 <ld_dword>
 8009056:	4603      	mov	r3, r0
 8009058:	4a1b      	ldr	r2, [pc, #108]	@ (80090c8 <find_volume+0x4f4>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d11e      	bne.n	800909c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	3334      	adds	r3, #52	@ 0x34
 8009062:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fb2c 	bl	80076c4 <ld_dword>
 800906c:	4603      	mov	r3, r0
 800906e:	4a17      	ldr	r2, [pc, #92]	@ (80090cc <find_volume+0x4f8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d113      	bne.n	800909c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009076:	3334      	adds	r3, #52	@ 0x34
 8009078:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800907c:	4618      	mov	r0, r3
 800907e:	f7fe fb21 	bl	80076c4 <ld_dword>
 8009082:	4602      	mov	r2, r0
 8009084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009086:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	3334      	adds	r3, #52	@ 0x34
 800908c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fb17 	bl	80076c4 <ld_dword>
 8009096:	4602      	mov	r2, r0
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80090a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <find_volume+0x4fc>)
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	3301      	adds	r3, #1
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	4b08      	ldr	r3, [pc, #32]	@ (80090d0 <find_volume+0x4fc>)
 80090ae:	801a      	strh	r2, [r3, #0]
 80090b0:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <find_volume+0x4fc>)
 80090b2:	881a      	ldrh	r2, [r3, #0]
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80090b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090ba:	f7fe fd33 	bl	8007b24 <clear_lock>
#endif
	return FR_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3758      	adds	r7, #88	@ 0x58
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	41615252 	.word	0x41615252
 80090cc:	61417272 	.word	0x61417272
 80090d0:	20002774 	.word	0x20002774

080090d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80090de:	2309      	movs	r3, #9
 80090e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01c      	beq.n	8009122 <validate+0x4e>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d018      	beq.n	8009122 <validate+0x4e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d013      	beq.n	8009122 <validate+0x4e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	889a      	ldrh	r2, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	88db      	ldrh	r3, [r3, #6]
 8009104:	429a      	cmp	r2, r3
 8009106:	d10c      	bne.n	8009122 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	785b      	ldrb	r3, [r3, #1]
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fa20 	bl	8007554 <disk_status>
 8009114:	4603      	mov	r3, r0
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <validate+0x4e>
			res = FR_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <validate+0x5a>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	e000      	b.n	8009130 <validate+0x5c>
 800912e:	2300      	movs	r3, #0
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	6013      	str	r3, [r2, #0]
	return res;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009152:	f107 0310 	add.w	r3, r7, #16
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fca2 	bl	8008aa0 <get_ldnumber>
 800915c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	da01      	bge.n	8009168 <f_mount+0x28>
 8009164:	230b      	movs	r3, #11
 8009166:	e02b      	b.n	80091c0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009168:	4a17      	ldr	r2, [pc, #92]	@ (80091c8 <f_mount+0x88>)
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009170:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009178:	69b8      	ldr	r0, [r7, #24]
 800917a:	f7fe fcd3 	bl	8007b24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2200      	movs	r2, #0
 8009182:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d002      	beq.n	8009190 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	490d      	ldr	r1, [pc, #52]	@ (80091c8 <f_mount+0x88>)
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <f_mount+0x66>
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d001      	beq.n	80091aa <f_mount+0x6a>
 80091a6:	2300      	movs	r3, #0
 80091a8:	e00a      	b.n	80091c0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80091aa:	f107 010c 	add.w	r1, r7, #12
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	2200      	movs	r2, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff fd0d 	bl	8008bd4 <find_volume>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3720      	adds	r7, #32
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20002770 	.word	0x20002770

080091cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b098      	sub	sp, #96	@ 0x60
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <f_open+0x18>
 80091e0:	2309      	movs	r3, #9
 80091e2:	e1b7      	b.n	8009554 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091ea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80091ec:	79fa      	ldrb	r2, [r7, #7]
 80091ee:	f107 0110 	add.w	r1, r7, #16
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fcec 	bl	8008bd4 <find_volume>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009202:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009206:	2b00      	cmp	r3, #0
 8009208:	f040 819b 	bne.w	8009542 <f_open+0x376>
		dj.obj.fs = fs;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	f107 0314 	add.w	r3, r7, #20
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff fbcb 	bl	80089b4 <follow_path>
 800921e:	4603      	mov	r3, r0
 8009220:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009224:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009228:	2b00      	cmp	r3, #0
 800922a:	d118      	bne.n	800925e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800922c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009230:	b25b      	sxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	da03      	bge.n	800923e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009236:	2306      	movs	r3, #6
 8009238:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800923c:	e00f      	b.n	800925e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	2b01      	cmp	r3, #1
 8009242:	bf8c      	ite	hi
 8009244:	2301      	movhi	r3, #1
 8009246:	2300      	movls	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	f107 0314 	add.w	r3, r7, #20
 8009250:	4611      	mov	r1, r2
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fb1e 	bl	8007894 <chk_lock>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	f003 031c 	and.w	r3, r3, #28
 8009264:	2b00      	cmp	r3, #0
 8009266:	d07f      	beq.n	8009368 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009268:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800926c:	2b00      	cmp	r3, #0
 800926e:	d017      	beq.n	80092a0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009270:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009274:	2b04      	cmp	r3, #4
 8009276:	d10e      	bne.n	8009296 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009278:	f7fe fb68 	bl	800794c <enq_lock>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d006      	beq.n	8009290 <f_open+0xc4>
 8009282:	f107 0314 	add.w	r3, r7, #20
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff facd 	bl	8008826 <dir_register>
 800928c:	4603      	mov	r3, r0
 800928e:	e000      	b.n	8009292 <f_open+0xc6>
 8009290:	2312      	movs	r3, #18
 8009292:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	f043 0308 	orr.w	r3, r3, #8
 800929c:	71fb      	strb	r3, [r7, #7]
 800929e:	e010      	b.n	80092c2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80092a0:	7ebb      	ldrb	r3, [r7, #26]
 80092a2:	f003 0311 	and.w	r3, r3, #17
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <f_open+0xe6>
					res = FR_DENIED;
 80092aa:	2307      	movs	r3, #7
 80092ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80092b0:	e007      	b.n	80092c2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <f_open+0xf6>
 80092bc:	2308      	movs	r3, #8
 80092be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80092c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d168      	bne.n	800939c <f_open+0x1d0>
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	f003 0308 	and.w	r3, r3, #8
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d063      	beq.n	800939c <f_open+0x1d0>
				dw = GET_FATTIME();
 80092d4:	f7fe f8e0 	bl	8007498 <get_fattime>
 80092d8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	330e      	adds	r3, #14
 80092de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fa2d 	bl	8007740 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80092e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e8:	3316      	adds	r3, #22
 80092ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe fa27 	bl	8007740 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80092f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f4:	330b      	adds	r3, #11
 80092f6:	2220      	movs	r2, #32
 80092f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff f9fc 	bl	80086fe <ld_clust>
 8009306:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800930c:	2200      	movs	r2, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff fa14 	bl	800873c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009316:	331c      	adds	r3, #28
 8009318:	2100      	movs	r1, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fa10 	bl	8007740 <st_dword>
					fs->wflag = 1;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	2201      	movs	r2, #1
 8009324:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d037      	beq.n	800939c <f_open+0x1d0>
						dw = fs->winsect;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009330:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	2200      	movs	r2, #0
 8009338:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe ff04 	bl	8008148 <remove_chain>
 8009340:	4603      	mov	r3, r0
 8009342:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8009346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800934a:	2b00      	cmp	r3, #0
 800934c:	d126      	bne.n	800939c <f_open+0x1d0>
							res = move_window(fs, dw);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fc4e 	bl	8007bf4 <move_window>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009362:	3a01      	subs	r2, #1
 8009364:	611a      	str	r2, [r3, #16]
 8009366:	e019      	b.n	800939c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800936c:	2b00      	cmp	r3, #0
 800936e:	d115      	bne.n	800939c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009370:	7ebb      	ldrb	r3, [r7, #26]
 8009372:	f003 0310 	and.w	r3, r3, #16
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <f_open+0x1b6>
					res = FR_NO_FILE;
 800937a:	2304      	movs	r3, #4
 800937c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009380:	e00c      	b.n	800939c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <f_open+0x1d0>
 800938c:	7ebb      	ldrb	r3, [r7, #26]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <f_open+0x1d0>
						res = FR_DENIED;
 8009396:	2307      	movs	r3, #7
 8009398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800939c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d126      	bne.n	80093f2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	f003 0308 	and.w	r3, r3, #8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80093ae:	79fb      	ldrb	r3, [r7, #7]
 80093b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80093be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	bf8c      	ite	hi
 80093ca:	2301      	movhi	r3, #1
 80093cc:	2300      	movls	r3, #0
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	f107 0314 	add.w	r3, r7, #20
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fad9 	bl	8007990 <inc_lock>
 80093de:	4602      	mov	r2, r0
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <f_open+0x226>
 80093ec:	2302      	movs	r3, #2
 80093ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80093f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 80a3 	bne.w	8009542 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009400:	4611      	mov	r1, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff f97b 	bl	80086fe <ld_clust>
 8009408:	4602      	mov	r2, r0
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800940e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009410:	331c      	adds	r3, #28
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe f956 	bl	80076c4 <ld_dword>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	88da      	ldrh	r2, [r3, #6]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3330      	adds	r3, #48	@ 0x30
 800944e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe f9c0 	bl	80077da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	f003 0320 	and.w	r3, r3, #32
 8009460:	2b00      	cmp	r3, #0
 8009462:	d06e      	beq.n	8009542 <f_open+0x376>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d06a      	beq.n	8009542 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	895b      	ldrh	r3, [r3, #10]
 8009478:	461a      	mov	r2, r3
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	899b      	ldrh	r3, [r3, #12]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
 8009482:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009490:	e016      	b.n	80094c0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fc69 	bl	8007d6e <get_fat>
 800949c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800949e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d802      	bhi.n	80094aa <f_open+0x2de>
 80094a4:	2302      	movs	r3, #2
 80094a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80094aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d102      	bne.n	80094b8 <f_open+0x2ec>
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80094b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	657b      	str	r3, [r7, #84]	@ 0x54
 80094c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <f_open+0x304>
 80094c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d8e0      	bhi.n	8009492 <f_open+0x2c6>
				}
				fp->clust = clst;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80094d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d131      	bne.n	8009542 <f_open+0x376>
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	899b      	ldrh	r3, [r3, #12]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80094ea:	fb01 f202 	mul.w	r2, r1, r2
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d026      	beq.n	8009542 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fe fc19 	bl	8007d30 <clust2sect>
 80094fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8009500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <f_open+0x342>
						res = FR_INT_ERR;
 8009506:	2302      	movs	r3, #2
 8009508:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800950c:	e019      	b.n	8009542 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	899b      	ldrh	r3, [r3, #12]
 8009512:	461a      	mov	r2, r3
 8009514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009516:	fbb3 f2f2 	udiv	r2, r3, r2
 800951a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	7858      	ldrb	r0, [r3, #1]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a1a      	ldr	r2, [r3, #32]
 8009530:	2301      	movs	r3, #1
 8009532:	f7fe f851 	bl	80075d8 <disk_read>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <f_open+0x376>
 800953c:	2301      	movs	r3, #1
 800953e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009542:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <f_open+0x384>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009550:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009554:	4618      	mov	r0, r3
 8009556:	3760      	adds	r7, #96	@ 0x60
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08c      	sub	sp, #48	@ 0x30
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f107 0210 	add.w	r2, r7, #16
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fda9 	bl	80090d4 <validate>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009588:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <f_write+0x44>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	7d5b      	ldrb	r3, [r3, #21]
 8009594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009598:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <f_write+0x4a>
 80095a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095a4:	e16a      	b.n	800987c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <f_write+0x5a>
 80095b2:	2307      	movs	r3, #7
 80095b4:	e162      	b.n	800987c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	441a      	add	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f080 814c 	bcs.w	8009860 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80095d0:	e146      	b.n	8009860 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	8992      	ldrh	r2, [r2, #12]
 80095da:	fbb3 f1f2 	udiv	r1, r3, r2
 80095de:	fb01 f202 	mul.w	r2, r1, r2
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f040 80f1 	bne.w	80097cc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	8992      	ldrh	r2, [r2, #12]
 80095f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	8952      	ldrh	r2, [r2, #10]
 80095fa:	3a01      	subs	r2, #1
 80095fc:	4013      	ands	r3, r2
 80095fe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d143      	bne.n	800968e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d10c      	bne.n	8009628 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11a      	bne.n	8009650 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2100      	movs	r1, #0
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fdf7 	bl	8008212 <create_chain>
 8009624:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009626:	e013      	b.n	8009650 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	4619      	mov	r1, r3
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7fe fe83 	bl	8008342 <clmt_clust>
 800963c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800963e:	e007      	b.n	8009650 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7fe fde2 	bl	8008212 <create_chain>
 800964e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	f000 8109 	beq.w	800986a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965a:	2b01      	cmp	r3, #1
 800965c:	d104      	bne.n	8009668 <f_write+0x10c>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2202      	movs	r2, #2
 8009662:	755a      	strb	r2, [r3, #21]
 8009664:	2302      	movs	r3, #2
 8009666:	e109      	b.n	800987c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	d104      	bne.n	800967a <f_write+0x11e>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	755a      	strb	r2, [r3, #21]
 8009676:	2301      	movs	r3, #1
 8009678:	e100      	b.n	800987c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800967e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <f_write+0x132>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800968c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	7d1b      	ldrb	r3, [r3, #20]
 8009692:	b25b      	sxtb	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	da18      	bge.n	80096ca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	7858      	ldrb	r0, [r3, #1]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1a      	ldr	r2, [r3, #32]
 80096a6:	2301      	movs	r3, #1
 80096a8:	f7fd ffb6 	bl	8007618 <disk_write>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <f_write+0x160>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2201      	movs	r2, #1
 80096b6:	755a      	strb	r2, [r3, #21]
 80096b8:	2301      	movs	r3, #1
 80096ba:	e0df      	b.n	800987c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	7d1b      	ldrb	r3, [r3, #20]
 80096c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	4619      	mov	r1, r3
 80096d2:	4610      	mov	r0, r2
 80096d4:	f7fe fb2c 	bl	8007d30 <clust2sect>
 80096d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <f_write+0x18e>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2202      	movs	r2, #2
 80096e4:	755a      	strb	r2, [r3, #21]
 80096e6:	2302      	movs	r3, #2
 80096e8:	e0c8      	b.n	800987c <f_write+0x320>
			sect += csect;
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	4413      	add	r3, r2
 80096f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	899b      	ldrh	r3, [r3, #12]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80096fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d043      	beq.n	800978e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	4413      	add	r3, r2
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	8952      	ldrh	r2, [r2, #10]
 8009710:	4293      	cmp	r3, r2
 8009712:	d905      	bls.n	8009720 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	895b      	ldrh	r3, [r3, #10]
 8009718:	461a      	mov	r2, r3
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	7858      	ldrb	r0, [r3, #1]
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	69f9      	ldr	r1, [r7, #28]
 800972a:	f7fd ff75 	bl	8007618 <disk_write>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <f_write+0x1e2>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2201      	movs	r2, #1
 8009738:	755a      	strb	r2, [r3, #21]
 800973a:	2301      	movs	r3, #1
 800973c:	e09e      	b.n	800987c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	6a3a      	ldr	r2, [r7, #32]
 8009748:	429a      	cmp	r2, r3
 800974a:	d918      	bls.n	800977e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	8992      	ldrh	r2, [r2, #12]
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	18d1      	adds	r1, r2, r3
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	899b      	ldrh	r3, [r3, #12]
 800976a:	461a      	mov	r2, r3
 800976c:	f7fe f814 	bl	8007798 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7d1b      	ldrb	r3, [r3, #20]
 8009774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009778:	b2da      	uxtb	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	899b      	ldrh	r3, [r3, #12]
 8009782:	461a      	mov	r2, r3
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800978c:	e04b      	b.n	8009826 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	429a      	cmp	r2, r3
 8009796:	d016      	beq.n	80097c6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d210      	bcs.n	80097c6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	7858      	ldrb	r0, [r3, #1]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097ae:	2301      	movs	r3, #1
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	f7fd ff11 	bl	80075d8 <disk_read>
 80097b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	755a      	strb	r2, [r3, #21]
 80097c2:	2301      	movs	r3, #1
 80097c4:	e05a      	b.n	800987c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	899b      	ldrh	r3, [r3, #12]
 80097d0:	4618      	mov	r0, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	8992      	ldrh	r2, [r2, #12]
 80097da:	fbb3 f1f2 	udiv	r1, r3, r2
 80097de:	fb01 f202 	mul.w	r2, r1, r2
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	1ac3      	subs	r3, r0, r3
 80097e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d901      	bls.n	80097f4 <f_write+0x298>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	8992      	ldrh	r2, [r2, #12]
 8009802:	fbb3 f0f2 	udiv	r0, r3, r2
 8009806:	fb00 f202 	mul.w	r2, r0, r2
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	440b      	add	r3, r1
 800980e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009810:	69f9      	ldr	r1, [r7, #28]
 8009812:	4618      	mov	r0, r3
 8009814:	f7fd ffc0 	bl	8007798 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	7d1b      	ldrb	r3, [r3, #20]
 800981c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009820:	b2da      	uxtb	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982a:	4413      	add	r3, r2
 800982c:	61fb      	str	r3, [r7, #28]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009834:	441a      	add	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	619a      	str	r2, [r3, #24]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	429a      	cmp	r2, r3
 8009844:	bf38      	it	cc
 8009846:	461a      	movcc	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	441a      	add	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f aeb5 	bne.w	80095d2 <f_write+0x76>
 8009868:	e000      	b.n	800986c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800986a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	7d1b      	ldrb	r3, [r3, #20]
 8009870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3730      	adds	r7, #48	@ 0x30
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f107 0208 	add.w	r2, r7, #8
 8009892:	4611      	mov	r1, r2
 8009894:	4618      	mov	r0, r3
 8009896:	f7ff fc1d 	bl	80090d4 <validate>
 800989a:	4603      	mov	r3, r0
 800989c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d168      	bne.n	8009976 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	7d1b      	ldrb	r3, [r3, #20]
 80098a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d062      	beq.n	8009976 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	7d1b      	ldrb	r3, [r3, #20]
 80098b4:	b25b      	sxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da15      	bge.n	80098e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	7858      	ldrb	r0, [r3, #1]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1a      	ldr	r2, [r3, #32]
 80098c8:	2301      	movs	r3, #1
 80098ca:	f7fd fea5 	bl	8007618 <disk_write>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <f_sync+0x54>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e04f      	b.n	8009978 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7d1b      	ldrb	r3, [r3, #20]
 80098dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098e6:	f7fd fdd7 	bl	8007498 <get_fattime>
 80098ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f2:	4619      	mov	r1, r3
 80098f4:	4610      	mov	r0, r2
 80098f6:	f7fe f97d 	bl	8007bf4 <move_window>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d138      	bne.n	8009976 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009908:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	330b      	adds	r3, #11
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	330b      	adds	r3, #11
 8009914:	f042 0220 	orr.w	r2, r2, #32
 8009918:	b2d2      	uxtb	r2, r2
 800991a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	461a      	mov	r2, r3
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	f7fe ff08 	bl	800873c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f103 021c 	add.w	r2, r3, #28
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	4619      	mov	r1, r3
 8009938:	4610      	mov	r0, r2
 800993a:	f7fd ff01 	bl	8007740 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3316      	adds	r3, #22
 8009942:	6939      	ldr	r1, [r7, #16]
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd fefb 	bl	8007740 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3312      	adds	r3, #18
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f7fd feda 	bl	800770a <st_word>
					fs->wflag = 1;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2201      	movs	r2, #1
 800995a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe f976 	bl	8007c50 <sync_fs>
 8009964:	4603      	mov	r3, r0
 8009966:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7d1b      	ldrb	r3, [r3, #20]
 800996c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009970:	b2da      	uxtb	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff7b 	bl	8009884 <f_sync>
 800998e:	4603      	mov	r3, r0
 8009990:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d118      	bne.n	80099ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f107 0208 	add.w	r2, r7, #8
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fb97 	bl	80090d4 <validate>
 80099a6:	4603      	mov	r3, r0
 80099a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10c      	bne.n	80099ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fe f879 	bl	8007aac <dec_lock>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b092      	sub	sp, #72	@ 0x48
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80099e0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	2200      	movs	r2, #0
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff f8f2 	bl	8008bd4 <find_volume>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80099f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f040 8099 	bne.w	8009b32 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	695a      	ldr	r2, [r3, #20]
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	3b02      	subs	r3, #2
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d804      	bhi.n	8009a1e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	695a      	ldr	r2, [r3, #20]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	e089      	b.n	8009b32 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d128      	bne.n	8009a7c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009a32:	f107 0314 	add.w	r3, r7, #20
 8009a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fe f998 	bl	8007d6e <get_fat>
 8009a3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a46:	d103      	bne.n	8009a50 <f_getfree+0x7c>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a4e:	e063      	b.n	8009b18 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d103      	bne.n	8009a5e <f_getfree+0x8a>
 8009a56:	2302      	movs	r3, #2
 8009a58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009a5c:	e05c      	b.n	8009b18 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <f_getfree+0x96>
 8009a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a66:	3301      	adds	r3, #1
 8009a68:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d3db      	bcc.n	8009a32 <f_getfree+0x5e>
 8009a7a:	e04d      	b.n	8009b18 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a86:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d113      	bne.n	8009abe <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f7fe f8a8 	bl	8007bf4 <move_window>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009aaa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d131      	bne.n	8009b16 <f_getfree+0x142>
							p = fs->win;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab4:	3334      	adds	r3, #52	@ 0x34
 8009ab6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aba:	899b      	ldrh	r3, [r3, #12]
 8009abc:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d10f      	bne.n	8009ae6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009ac6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ac8:	f7fd fde4 	bl	8007694 <ld_word>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <f_getfree+0x104>
 8009ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	3302      	adds	r3, #2
 8009adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae0:	3b02      	subs	r3, #2
 8009ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae4:	e010      	b.n	8009b08 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009ae6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ae8:	f7fd fdec 	bl	80076c4 <ld_dword>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <f_getfree+0x128>
 8009af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af8:	3301      	adds	r3, #1
 8009afa:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afe:	3304      	adds	r3, #4
 8009b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b04:	3b04      	subs	r3, #4
 8009b06:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1bd      	bne.n	8009a90 <f_getfree+0xbc>
 8009b14:	e000      	b.n	8009b18 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009b16:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b1c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b26:	791a      	ldrb	r2, [r3, #4]
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	f042 0201 	orr.w	r2, r2, #1
 8009b2e:	b2d2      	uxtb	r2, r2
 8009b30:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009b32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3748      	adds	r7, #72	@ 0x48
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b56:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b58:	7a5b      	ldrb	r3, [r3, #9]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d131      	bne.n	8009bc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b60:	4b1c      	ldr	r3, [pc, #112]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b62:	7a5b      	ldrb	r3, [r3, #9]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b6e:	4b19      	ldr	r3, [pc, #100]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b70:	7a5b      	ldrb	r3, [r3, #9]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	4a17      	ldr	r2, [pc, #92]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b7e:	4b15      	ldr	r3, [pc, #84]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b80:	7a5b      	ldrb	r3, [r3, #9]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	4b13      	ldr	r3, [pc, #76]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b88:	4413      	add	r3, r2
 8009b8a:	79fa      	ldrb	r2, [r7, #7]
 8009b8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b8e:	4b11      	ldr	r3, [pc, #68]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b90:	7a5b      	ldrb	r3, [r3, #9]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	b2d1      	uxtb	r1, r2
 8009b98:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd4 <FATFS_LinkDriverEx+0x94>)
 8009b9a:	7251      	strb	r1, [r2, #9]
 8009b9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b9e:	7dbb      	ldrb	r3, [r7, #22]
 8009ba0:	3330      	adds	r3, #48	@ 0x30
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	3301      	adds	r3, #1
 8009bac:	223a      	movs	r2, #58	@ 0x3a
 8009bae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	3302      	adds	r3, #2
 8009bb4:	222f      	movs	r2, #47	@ 0x2f
 8009bb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	3303      	adds	r3, #3
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	371c      	adds	r7, #28
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	20002798 	.word	0x20002798

08009bd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009be2:	2200      	movs	r2, #0
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7ff ffaa 	bl	8009b40 <FATFS_LinkDriverEx>
 8009bec:	4603      	mov	r3, r0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <__cvt>:
 8009bf6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfa:	ec57 6b10 	vmov	r6, r7, d0
 8009bfe:	2f00      	cmp	r7, #0
 8009c00:	460c      	mov	r4, r1
 8009c02:	4619      	mov	r1, r3
 8009c04:	463b      	mov	r3, r7
 8009c06:	bfbb      	ittet	lt
 8009c08:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c0c:	461f      	movlt	r7, r3
 8009c0e:	2300      	movge	r3, #0
 8009c10:	232d      	movlt	r3, #45	@ 0x2d
 8009c12:	700b      	strb	r3, [r1, #0]
 8009c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c16:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c1a:	4691      	mov	r9, r2
 8009c1c:	f023 0820 	bic.w	r8, r3, #32
 8009c20:	bfbc      	itt	lt
 8009c22:	4632      	movlt	r2, r6
 8009c24:	4616      	movlt	r6, r2
 8009c26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c2a:	d005      	beq.n	8009c38 <__cvt+0x42>
 8009c2c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c30:	d100      	bne.n	8009c34 <__cvt+0x3e>
 8009c32:	3401      	adds	r4, #1
 8009c34:	2102      	movs	r1, #2
 8009c36:	e000      	b.n	8009c3a <__cvt+0x44>
 8009c38:	2103      	movs	r1, #3
 8009c3a:	ab03      	add	r3, sp, #12
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	ab02      	add	r3, sp, #8
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	ec47 6b10 	vmov	d0, r6, r7
 8009c46:	4653      	mov	r3, sl
 8009c48:	4622      	mov	r2, r4
 8009c4a:	f001 f8a9 	bl	800ada0 <_dtoa_r>
 8009c4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009c52:	4605      	mov	r5, r0
 8009c54:	d119      	bne.n	8009c8a <__cvt+0x94>
 8009c56:	f019 0f01 	tst.w	r9, #1
 8009c5a:	d00e      	beq.n	8009c7a <__cvt+0x84>
 8009c5c:	eb00 0904 	add.w	r9, r0, r4
 8009c60:	2200      	movs	r2, #0
 8009c62:	2300      	movs	r3, #0
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 ff06 	bl	8000a78 <__aeabi_dcmpeq>
 8009c6c:	b108      	cbz	r0, 8009c72 <__cvt+0x7c>
 8009c6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c72:	2230      	movs	r2, #48	@ 0x30
 8009c74:	9b03      	ldr	r3, [sp, #12]
 8009c76:	454b      	cmp	r3, r9
 8009c78:	d31e      	bcc.n	8009cb8 <__cvt+0xc2>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c7e:	1b5b      	subs	r3, r3, r5
 8009c80:	4628      	mov	r0, r5
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	b004      	add	sp, #16
 8009c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c8e:	eb00 0904 	add.w	r9, r0, r4
 8009c92:	d1e5      	bne.n	8009c60 <__cvt+0x6a>
 8009c94:	7803      	ldrb	r3, [r0, #0]
 8009c96:	2b30      	cmp	r3, #48	@ 0x30
 8009c98:	d10a      	bne.n	8009cb0 <__cvt+0xba>
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 fee9 	bl	8000a78 <__aeabi_dcmpeq>
 8009ca6:	b918      	cbnz	r0, 8009cb0 <__cvt+0xba>
 8009ca8:	f1c4 0401 	rsb	r4, r4, #1
 8009cac:	f8ca 4000 	str.w	r4, [sl]
 8009cb0:	f8da 3000 	ldr.w	r3, [sl]
 8009cb4:	4499      	add	r9, r3
 8009cb6:	e7d3      	b.n	8009c60 <__cvt+0x6a>
 8009cb8:	1c59      	adds	r1, r3, #1
 8009cba:	9103      	str	r1, [sp, #12]
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	e7d9      	b.n	8009c74 <__cvt+0x7e>

08009cc0 <__exponent>:
 8009cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	bfba      	itte	lt
 8009cc6:	4249      	neglt	r1, r1
 8009cc8:	232d      	movlt	r3, #45	@ 0x2d
 8009cca:	232b      	movge	r3, #43	@ 0x2b
 8009ccc:	2909      	cmp	r1, #9
 8009cce:	7002      	strb	r2, [r0, #0]
 8009cd0:	7043      	strb	r3, [r0, #1]
 8009cd2:	dd29      	ble.n	8009d28 <__exponent+0x68>
 8009cd4:	f10d 0307 	add.w	r3, sp, #7
 8009cd8:	461d      	mov	r5, r3
 8009cda:	270a      	movs	r7, #10
 8009cdc:	461a      	mov	r2, r3
 8009cde:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ce2:	fb07 1416 	mls	r4, r7, r6, r1
 8009ce6:	3430      	adds	r4, #48	@ 0x30
 8009ce8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009cec:	460c      	mov	r4, r1
 8009cee:	2c63      	cmp	r4, #99	@ 0x63
 8009cf0:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	dcf1      	bgt.n	8009cdc <__exponent+0x1c>
 8009cf8:	3130      	adds	r1, #48	@ 0x30
 8009cfa:	1e94      	subs	r4, r2, #2
 8009cfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d00:	1c41      	adds	r1, r0, #1
 8009d02:	4623      	mov	r3, r4
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	d30a      	bcc.n	8009d1e <__exponent+0x5e>
 8009d08:	f10d 0309 	add.w	r3, sp, #9
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	42ac      	cmp	r4, r5
 8009d10:	bf88      	it	hi
 8009d12:	2300      	movhi	r3, #0
 8009d14:	3302      	adds	r3, #2
 8009d16:	4403      	add	r3, r0
 8009d18:	1a18      	subs	r0, r3, r0
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d26:	e7ed      	b.n	8009d04 <__exponent+0x44>
 8009d28:	2330      	movs	r3, #48	@ 0x30
 8009d2a:	3130      	adds	r1, #48	@ 0x30
 8009d2c:	7083      	strb	r3, [r0, #2]
 8009d2e:	70c1      	strb	r1, [r0, #3]
 8009d30:	1d03      	adds	r3, r0, #4
 8009d32:	e7f1      	b.n	8009d18 <__exponent+0x58>

08009d34 <_printf_float>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	b08d      	sub	sp, #52	@ 0x34
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d40:	4616      	mov	r6, r2
 8009d42:	461f      	mov	r7, r3
 8009d44:	4605      	mov	r5, r0
 8009d46:	f000 ff23 	bl	800ab90 <_localeconv_r>
 8009d4a:	6803      	ldr	r3, [r0, #0]
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7f6 fa66 	bl	8000220 <strlen>
 8009d54:	2300      	movs	r3, #0
 8009d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d58:	f8d8 3000 	ldr.w	r3, [r8]
 8009d5c:	9005      	str	r0, [sp, #20]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	f103 0208 	add.w	r2, r3, #8
 8009d68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009d6c:	f8d4 b000 	ldr.w	fp, [r4]
 8009d70:	f8c8 2000 	str.w	r2, [r8]
 8009d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009d7c:	9307      	str	r3, [sp, #28]
 8009d7e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d8a:	4b9c      	ldr	r3, [pc, #624]	@ (8009ffc <_printf_float+0x2c8>)
 8009d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d90:	f7f6 fea4 	bl	8000adc <__aeabi_dcmpun>
 8009d94:	bb70      	cbnz	r0, 8009df4 <_printf_float+0xc0>
 8009d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d9a:	4b98      	ldr	r3, [pc, #608]	@ (8009ffc <_printf_float+0x2c8>)
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009da0:	f7f6 fe7e 	bl	8000aa0 <__aeabi_dcmple>
 8009da4:	bb30      	cbnz	r0, 8009df4 <_printf_float+0xc0>
 8009da6:	2200      	movs	r2, #0
 8009da8:	2300      	movs	r3, #0
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	f7f6 fe6d 	bl	8000a8c <__aeabi_dcmplt>
 8009db2:	b110      	cbz	r0, 8009dba <_printf_float+0x86>
 8009db4:	232d      	movs	r3, #45	@ 0x2d
 8009db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dba:	4a91      	ldr	r2, [pc, #580]	@ (800a000 <_printf_float+0x2cc>)
 8009dbc:	4b91      	ldr	r3, [pc, #580]	@ (800a004 <_printf_float+0x2d0>)
 8009dbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009dc2:	bf94      	ite	ls
 8009dc4:	4690      	movls	r8, r2
 8009dc6:	4698      	movhi	r8, r3
 8009dc8:	2303      	movs	r3, #3
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	f02b 0304 	bic.w	r3, fp, #4
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	f04f 0900 	mov.w	r9, #0
 8009dd6:	9700      	str	r7, [sp, #0]
 8009dd8:	4633      	mov	r3, r6
 8009dda:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f9d2 	bl	800a188 <_printf_common>
 8009de4:	3001      	adds	r0, #1
 8009de6:	f040 808d 	bne.w	8009f04 <_printf_float+0x1d0>
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	b00d      	add	sp, #52	@ 0x34
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	4642      	mov	r2, r8
 8009df6:	464b      	mov	r3, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	f7f6 fe6e 	bl	8000adc <__aeabi_dcmpun>
 8009e00:	b140      	cbz	r0, 8009e14 <_printf_float+0xe0>
 8009e02:	464b      	mov	r3, r9
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	bfbc      	itt	lt
 8009e08:	232d      	movlt	r3, #45	@ 0x2d
 8009e0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e0e:	4a7e      	ldr	r2, [pc, #504]	@ (800a008 <_printf_float+0x2d4>)
 8009e10:	4b7e      	ldr	r3, [pc, #504]	@ (800a00c <_printf_float+0x2d8>)
 8009e12:	e7d4      	b.n	8009dbe <_printf_float+0x8a>
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e1a:	9206      	str	r2, [sp, #24]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	d13b      	bne.n	8009e98 <_printf_float+0x164>
 8009e20:	2306      	movs	r3, #6
 8009e22:	6063      	str	r3, [r4, #4]
 8009e24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	9303      	str	r3, [sp, #12]
 8009e2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009e34:	ab09      	add	r3, sp, #36	@ 0x24
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	6861      	ldr	r1, [r4, #4]
 8009e3a:	ec49 8b10 	vmov	d0, r8, r9
 8009e3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e42:	4628      	mov	r0, r5
 8009e44:	f7ff fed7 	bl	8009bf6 <__cvt>
 8009e48:	9b06      	ldr	r3, [sp, #24]
 8009e4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e4c:	2b47      	cmp	r3, #71	@ 0x47
 8009e4e:	4680      	mov	r8, r0
 8009e50:	d129      	bne.n	8009ea6 <_printf_float+0x172>
 8009e52:	1cc8      	adds	r0, r1, #3
 8009e54:	db02      	blt.n	8009e5c <_printf_float+0x128>
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	dd41      	ble.n	8009ee0 <_printf_float+0x1ac>
 8009e5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009e60:	fa5f fa8a 	uxtb.w	sl, sl
 8009e64:	3901      	subs	r1, #1
 8009e66:	4652      	mov	r2, sl
 8009e68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009e6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e6e:	f7ff ff27 	bl	8009cc0 <__exponent>
 8009e72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e74:	1813      	adds	r3, r2, r0
 8009e76:	2a01      	cmp	r2, #1
 8009e78:	4681      	mov	r9, r0
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	dc02      	bgt.n	8009e84 <_printf_float+0x150>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	07d2      	lsls	r2, r2, #31
 8009e82:	d501      	bpl.n	8009e88 <_printf_float+0x154>
 8009e84:	3301      	adds	r3, #1
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0a2      	beq.n	8009dd6 <_printf_float+0xa2>
 8009e90:	232d      	movs	r3, #45	@ 0x2d
 8009e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e96:	e79e      	b.n	8009dd6 <_printf_float+0xa2>
 8009e98:	9a06      	ldr	r2, [sp, #24]
 8009e9a:	2a47      	cmp	r2, #71	@ 0x47
 8009e9c:	d1c2      	bne.n	8009e24 <_printf_float+0xf0>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1c0      	bne.n	8009e24 <_printf_float+0xf0>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e7bd      	b.n	8009e22 <_printf_float+0xee>
 8009ea6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009eaa:	d9db      	bls.n	8009e64 <_printf_float+0x130>
 8009eac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009eb0:	d118      	bne.n	8009ee4 <_printf_float+0x1b0>
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	dd0b      	ble.n	8009ed0 <_printf_float+0x19c>
 8009eb8:	6121      	str	r1, [r4, #16]
 8009eba:	b913      	cbnz	r3, 8009ec2 <_printf_float+0x18e>
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	07d0      	lsls	r0, r2, #31
 8009ec0:	d502      	bpl.n	8009ec8 <_printf_float+0x194>
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	440b      	add	r3, r1
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009eca:	f04f 0900 	mov.w	r9, #0
 8009ece:	e7db      	b.n	8009e88 <_printf_float+0x154>
 8009ed0:	b913      	cbnz	r3, 8009ed8 <_printf_float+0x1a4>
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	07d2      	lsls	r2, r2, #31
 8009ed6:	d501      	bpl.n	8009edc <_printf_float+0x1a8>
 8009ed8:	3302      	adds	r3, #2
 8009eda:	e7f4      	b.n	8009ec6 <_printf_float+0x192>
 8009edc:	2301      	movs	r3, #1
 8009ede:	e7f2      	b.n	8009ec6 <_printf_float+0x192>
 8009ee0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ee6:	4299      	cmp	r1, r3
 8009ee8:	db05      	blt.n	8009ef6 <_printf_float+0x1c2>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	6121      	str	r1, [r4, #16]
 8009eee:	07d8      	lsls	r0, r3, #31
 8009ef0:	d5ea      	bpl.n	8009ec8 <_printf_float+0x194>
 8009ef2:	1c4b      	adds	r3, r1, #1
 8009ef4:	e7e7      	b.n	8009ec6 <_printf_float+0x192>
 8009ef6:	2900      	cmp	r1, #0
 8009ef8:	bfd4      	ite	le
 8009efa:	f1c1 0202 	rsble	r2, r1, #2
 8009efe:	2201      	movgt	r2, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	e7e0      	b.n	8009ec6 <_printf_float+0x192>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	055a      	lsls	r2, r3, #21
 8009f08:	d407      	bmi.n	8009f1a <_printf_float+0x1e6>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	d12b      	bne.n	8009f70 <_printf_float+0x23c>
 8009f18:	e767      	b.n	8009dea <_printf_float+0xb6>
 8009f1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f1e:	f240 80dd 	bls.w	800a0dc <_printf_float+0x3a8>
 8009f22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f26:	2200      	movs	r2, #0
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f7f6 fda5 	bl	8000a78 <__aeabi_dcmpeq>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d033      	beq.n	8009f9a <_printf_float+0x266>
 8009f32:	4a37      	ldr	r2, [pc, #220]	@ (800a010 <_printf_float+0x2dc>)
 8009f34:	2301      	movs	r3, #1
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f43f af54 	beq.w	8009dea <_printf_float+0xb6>
 8009f42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f46:	4543      	cmp	r3, r8
 8009f48:	db02      	blt.n	8009f50 <_printf_float+0x21c>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	07d8      	lsls	r0, r3, #31
 8009f4e:	d50f      	bpl.n	8009f70 <_printf_float+0x23c>
 8009f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f af45 	beq.w	8009dea <_printf_float+0xb6>
 8009f60:	f04f 0900 	mov.w	r9, #0
 8009f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f68:	f104 0a1a 	add.w	sl, r4, #26
 8009f6c:	45c8      	cmp	r8, r9
 8009f6e:	dc09      	bgt.n	8009f84 <_printf_float+0x250>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	079b      	lsls	r3, r3, #30
 8009f74:	f100 8103 	bmi.w	800a17e <_printf_float+0x44a>
 8009f78:	68e0      	ldr	r0, [r4, #12]
 8009f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f7c:	4298      	cmp	r0, r3
 8009f7e:	bfb8      	it	lt
 8009f80:	4618      	movlt	r0, r3
 8009f82:	e734      	b.n	8009dee <_printf_float+0xba>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4652      	mov	r2, sl
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f af2b 	beq.w	8009dea <_printf_float+0xb6>
 8009f94:	f109 0901 	add.w	r9, r9, #1
 8009f98:	e7e8      	b.n	8009f6c <_printf_float+0x238>
 8009f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dc39      	bgt.n	800a014 <_printf_float+0x2e0>
 8009fa0:	4a1b      	ldr	r2, [pc, #108]	@ (800a010 <_printf_float+0x2dc>)
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	f43f af1d 	beq.w	8009dea <_printf_float+0xb6>
 8009fb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009fb4:	ea59 0303 	orrs.w	r3, r9, r3
 8009fb8:	d102      	bne.n	8009fc0 <_printf_float+0x28c>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	07d9      	lsls	r1, r3, #31
 8009fbe:	d5d7      	bpl.n	8009f70 <_printf_float+0x23c>
 8009fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47b8      	blx	r7
 8009fca:	3001      	adds	r0, #1
 8009fcc:	f43f af0d 	beq.w	8009dea <_printf_float+0xb6>
 8009fd0:	f04f 0a00 	mov.w	sl, #0
 8009fd4:	f104 0b1a 	add.w	fp, r4, #26
 8009fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fda:	425b      	negs	r3, r3
 8009fdc:	4553      	cmp	r3, sl
 8009fde:	dc01      	bgt.n	8009fe4 <_printf_float+0x2b0>
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	e793      	b.n	8009f0c <_printf_float+0x1d8>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	465a      	mov	r2, fp
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f aefb 	beq.w	8009dea <_printf_float+0xb6>
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	e7ee      	b.n	8009fd8 <_printf_float+0x2a4>
 8009ffa:	bf00      	nop
 8009ffc:	7fefffff 	.word	0x7fefffff
 800a000:	0800e638 	.word	0x0800e638
 800a004:	0800e63c 	.word	0x0800e63c
 800a008:	0800e640 	.word	0x0800e640
 800a00c:	0800e644 	.word	0x0800e644
 800a010:	0800e648 	.word	0x0800e648
 800a014:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a016:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a01a:	4553      	cmp	r3, sl
 800a01c:	bfa8      	it	ge
 800a01e:	4653      	movge	r3, sl
 800a020:	2b00      	cmp	r3, #0
 800a022:	4699      	mov	r9, r3
 800a024:	dc36      	bgt.n	800a094 <_printf_float+0x360>
 800a026:	f04f 0b00 	mov.w	fp, #0
 800a02a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a02e:	f104 021a 	add.w	r2, r4, #26
 800a032:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a034:	9306      	str	r3, [sp, #24]
 800a036:	eba3 0309 	sub.w	r3, r3, r9
 800a03a:	455b      	cmp	r3, fp
 800a03c:	dc31      	bgt.n	800a0a2 <_printf_float+0x36e>
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	459a      	cmp	sl, r3
 800a042:	dc3a      	bgt.n	800a0ba <_printf_float+0x386>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	07da      	lsls	r2, r3, #31
 800a048:	d437      	bmi.n	800a0ba <_printf_float+0x386>
 800a04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a04c:	ebaa 0903 	sub.w	r9, sl, r3
 800a050:	9b06      	ldr	r3, [sp, #24]
 800a052:	ebaa 0303 	sub.w	r3, sl, r3
 800a056:	4599      	cmp	r9, r3
 800a058:	bfa8      	it	ge
 800a05a:	4699      	movge	r9, r3
 800a05c:	f1b9 0f00 	cmp.w	r9, #0
 800a060:	dc33      	bgt.n	800a0ca <_printf_float+0x396>
 800a062:	f04f 0800 	mov.w	r8, #0
 800a066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a06a:	f104 0b1a 	add.w	fp, r4, #26
 800a06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a070:	ebaa 0303 	sub.w	r3, sl, r3
 800a074:	eba3 0309 	sub.w	r3, r3, r9
 800a078:	4543      	cmp	r3, r8
 800a07a:	f77f af79 	ble.w	8009f70 <_printf_float+0x23c>
 800a07e:	2301      	movs	r3, #1
 800a080:	465a      	mov	r2, fp
 800a082:	4631      	mov	r1, r6
 800a084:	4628      	mov	r0, r5
 800a086:	47b8      	blx	r7
 800a088:	3001      	adds	r0, #1
 800a08a:	f43f aeae 	beq.w	8009dea <_printf_float+0xb6>
 800a08e:	f108 0801 	add.w	r8, r8, #1
 800a092:	e7ec      	b.n	800a06e <_printf_float+0x33a>
 800a094:	4642      	mov	r2, r8
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	d1c2      	bne.n	800a026 <_printf_float+0x2f2>
 800a0a0:	e6a3      	b.n	8009dea <_printf_float+0xb6>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	9206      	str	r2, [sp, #24]
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f ae9c 	beq.w	8009dea <_printf_float+0xb6>
 800a0b2:	9a06      	ldr	r2, [sp, #24]
 800a0b4:	f10b 0b01 	add.w	fp, fp, #1
 800a0b8:	e7bb      	b.n	800a032 <_printf_float+0x2fe>
 800a0ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	d1c0      	bne.n	800a04a <_printf_float+0x316>
 800a0c8:	e68f      	b.n	8009dea <_printf_float+0xb6>
 800a0ca:	9a06      	ldr	r2, [sp, #24]
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	4442      	add	r2, r8
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	d1c3      	bne.n	800a062 <_printf_float+0x32e>
 800a0da:	e686      	b.n	8009dea <_printf_float+0xb6>
 800a0dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0e0:	f1ba 0f01 	cmp.w	sl, #1
 800a0e4:	dc01      	bgt.n	800a0ea <_printf_float+0x3b6>
 800a0e6:	07db      	lsls	r3, r3, #31
 800a0e8:	d536      	bpl.n	800a158 <_printf_float+0x424>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	4631      	mov	r1, r6
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b8      	blx	r7
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f43f ae78 	beq.w	8009dea <_printf_float+0xb6>
 800a0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f ae70 	beq.w	8009dea <_printf_float+0xb6>
 800a10a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a10e:	2200      	movs	r2, #0
 800a110:	2300      	movs	r3, #0
 800a112:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a116:	f7f6 fcaf 	bl	8000a78 <__aeabi_dcmpeq>
 800a11a:	b9c0      	cbnz	r0, 800a14e <_printf_float+0x41a>
 800a11c:	4653      	mov	r3, sl
 800a11e:	f108 0201 	add.w	r2, r8, #1
 800a122:	4631      	mov	r1, r6
 800a124:	4628      	mov	r0, r5
 800a126:	47b8      	blx	r7
 800a128:	3001      	adds	r0, #1
 800a12a:	d10c      	bne.n	800a146 <_printf_float+0x412>
 800a12c:	e65d      	b.n	8009dea <_printf_float+0xb6>
 800a12e:	2301      	movs	r3, #1
 800a130:	465a      	mov	r2, fp
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f ae56 	beq.w	8009dea <_printf_float+0xb6>
 800a13e:	f108 0801 	add.w	r8, r8, #1
 800a142:	45d0      	cmp	r8, sl
 800a144:	dbf3      	blt.n	800a12e <_printf_float+0x3fa>
 800a146:	464b      	mov	r3, r9
 800a148:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a14c:	e6df      	b.n	8009f0e <_printf_float+0x1da>
 800a14e:	f04f 0800 	mov.w	r8, #0
 800a152:	f104 0b1a 	add.w	fp, r4, #26
 800a156:	e7f4      	b.n	800a142 <_printf_float+0x40e>
 800a158:	2301      	movs	r3, #1
 800a15a:	4642      	mov	r2, r8
 800a15c:	e7e1      	b.n	800a122 <_printf_float+0x3ee>
 800a15e:	2301      	movs	r3, #1
 800a160:	464a      	mov	r2, r9
 800a162:	4631      	mov	r1, r6
 800a164:	4628      	mov	r0, r5
 800a166:	47b8      	blx	r7
 800a168:	3001      	adds	r0, #1
 800a16a:	f43f ae3e 	beq.w	8009dea <_printf_float+0xb6>
 800a16e:	f108 0801 	add.w	r8, r8, #1
 800a172:	68e3      	ldr	r3, [r4, #12]
 800a174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a176:	1a5b      	subs	r3, r3, r1
 800a178:	4543      	cmp	r3, r8
 800a17a:	dcf0      	bgt.n	800a15e <_printf_float+0x42a>
 800a17c:	e6fc      	b.n	8009f78 <_printf_float+0x244>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	f104 0919 	add.w	r9, r4, #25
 800a186:	e7f4      	b.n	800a172 <_printf_float+0x43e>

0800a188 <_printf_common>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	4616      	mov	r6, r2
 800a18e:	4698      	mov	r8, r3
 800a190:	688a      	ldr	r2, [r1, #8]
 800a192:	690b      	ldr	r3, [r1, #16]
 800a194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a198:	4293      	cmp	r3, r2
 800a19a:	bfb8      	it	lt
 800a19c:	4613      	movlt	r3, r2
 800a19e:	6033      	str	r3, [r6, #0]
 800a1a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	460c      	mov	r4, r1
 800a1a8:	b10a      	cbz	r2, 800a1ae <_printf_common+0x26>
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	6033      	str	r3, [r6, #0]
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	0699      	lsls	r1, r3, #26
 800a1b2:	bf42      	ittt	mi
 800a1b4:	6833      	ldrmi	r3, [r6, #0]
 800a1b6:	3302      	addmi	r3, #2
 800a1b8:	6033      	strmi	r3, [r6, #0]
 800a1ba:	6825      	ldr	r5, [r4, #0]
 800a1bc:	f015 0506 	ands.w	r5, r5, #6
 800a1c0:	d106      	bne.n	800a1d0 <_printf_common+0x48>
 800a1c2:	f104 0a19 	add.w	sl, r4, #25
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	6832      	ldr	r2, [r6, #0]
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dc26      	bgt.n	800a21e <_printf_common+0x96>
 800a1d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1d4:	6822      	ldr	r2, [r4, #0]
 800a1d6:	3b00      	subs	r3, #0
 800a1d8:	bf18      	it	ne
 800a1da:	2301      	movne	r3, #1
 800a1dc:	0692      	lsls	r2, r2, #26
 800a1de:	d42b      	bmi.n	800a238 <_printf_common+0xb0>
 800a1e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	47c8      	blx	r9
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d01e      	beq.n	800a22c <_printf_common+0xa4>
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	f003 0306 	and.w	r3, r3, #6
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	bf02      	ittt	eq
 800a1fa:	68e5      	ldreq	r5, [r4, #12]
 800a1fc:	6833      	ldreq	r3, [r6, #0]
 800a1fe:	1aed      	subeq	r5, r5, r3
 800a200:	68a3      	ldr	r3, [r4, #8]
 800a202:	bf0c      	ite	eq
 800a204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a208:	2500      	movne	r5, #0
 800a20a:	4293      	cmp	r3, r2
 800a20c:	bfc4      	itt	gt
 800a20e:	1a9b      	subgt	r3, r3, r2
 800a210:	18ed      	addgt	r5, r5, r3
 800a212:	2600      	movs	r6, #0
 800a214:	341a      	adds	r4, #26
 800a216:	42b5      	cmp	r5, r6
 800a218:	d11a      	bne.n	800a250 <_printf_common+0xc8>
 800a21a:	2000      	movs	r0, #0
 800a21c:	e008      	b.n	800a230 <_printf_common+0xa8>
 800a21e:	2301      	movs	r3, #1
 800a220:	4652      	mov	r2, sl
 800a222:	4641      	mov	r1, r8
 800a224:	4638      	mov	r0, r7
 800a226:	47c8      	blx	r9
 800a228:	3001      	adds	r0, #1
 800a22a:	d103      	bne.n	800a234 <_printf_common+0xac>
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	3501      	adds	r5, #1
 800a236:	e7c6      	b.n	800a1c6 <_printf_common+0x3e>
 800a238:	18e1      	adds	r1, r4, r3
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	2030      	movs	r0, #48	@ 0x30
 800a23e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a242:	4422      	add	r2, r4
 800a244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a24c:	3302      	adds	r3, #2
 800a24e:	e7c7      	b.n	800a1e0 <_printf_common+0x58>
 800a250:	2301      	movs	r3, #1
 800a252:	4622      	mov	r2, r4
 800a254:	4641      	mov	r1, r8
 800a256:	4638      	mov	r0, r7
 800a258:	47c8      	blx	r9
 800a25a:	3001      	adds	r0, #1
 800a25c:	d0e6      	beq.n	800a22c <_printf_common+0xa4>
 800a25e:	3601      	adds	r6, #1
 800a260:	e7d9      	b.n	800a216 <_printf_common+0x8e>
	...

0800a264 <_printf_i>:
 800a264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a268:	7e0f      	ldrb	r7, [r1, #24]
 800a26a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a26c:	2f78      	cmp	r7, #120	@ 0x78
 800a26e:	4691      	mov	r9, r2
 800a270:	4680      	mov	r8, r0
 800a272:	460c      	mov	r4, r1
 800a274:	469a      	mov	sl, r3
 800a276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a27a:	d807      	bhi.n	800a28c <_printf_i+0x28>
 800a27c:	2f62      	cmp	r7, #98	@ 0x62
 800a27e:	d80a      	bhi.n	800a296 <_printf_i+0x32>
 800a280:	2f00      	cmp	r7, #0
 800a282:	f000 80d2 	beq.w	800a42a <_printf_i+0x1c6>
 800a286:	2f58      	cmp	r7, #88	@ 0x58
 800a288:	f000 80b9 	beq.w	800a3fe <_printf_i+0x19a>
 800a28c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a294:	e03a      	b.n	800a30c <_printf_i+0xa8>
 800a296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a29a:	2b15      	cmp	r3, #21
 800a29c:	d8f6      	bhi.n	800a28c <_printf_i+0x28>
 800a29e:	a101      	add	r1, pc, #4	@ (adr r1, 800a2a4 <_printf_i+0x40>)
 800a2a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2a4:	0800a2fd 	.word	0x0800a2fd
 800a2a8:	0800a311 	.word	0x0800a311
 800a2ac:	0800a28d 	.word	0x0800a28d
 800a2b0:	0800a28d 	.word	0x0800a28d
 800a2b4:	0800a28d 	.word	0x0800a28d
 800a2b8:	0800a28d 	.word	0x0800a28d
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a28d 	.word	0x0800a28d
 800a2c4:	0800a28d 	.word	0x0800a28d
 800a2c8:	0800a28d 	.word	0x0800a28d
 800a2cc:	0800a28d 	.word	0x0800a28d
 800a2d0:	0800a411 	.word	0x0800a411
 800a2d4:	0800a33b 	.word	0x0800a33b
 800a2d8:	0800a3cb 	.word	0x0800a3cb
 800a2dc:	0800a28d 	.word	0x0800a28d
 800a2e0:	0800a28d 	.word	0x0800a28d
 800a2e4:	0800a433 	.word	0x0800a433
 800a2e8:	0800a28d 	.word	0x0800a28d
 800a2ec:	0800a33b 	.word	0x0800a33b
 800a2f0:	0800a28d 	.word	0x0800a28d
 800a2f4:	0800a28d 	.word	0x0800a28d
 800a2f8:	0800a3d3 	.word	0x0800a3d3
 800a2fc:	6833      	ldr	r3, [r6, #0]
 800a2fe:	1d1a      	adds	r2, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6032      	str	r2, [r6, #0]
 800a304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a30c:	2301      	movs	r3, #1
 800a30e:	e09d      	b.n	800a44c <_printf_i+0x1e8>
 800a310:	6833      	ldr	r3, [r6, #0]
 800a312:	6820      	ldr	r0, [r4, #0]
 800a314:	1d19      	adds	r1, r3, #4
 800a316:	6031      	str	r1, [r6, #0]
 800a318:	0606      	lsls	r6, r0, #24
 800a31a:	d501      	bpl.n	800a320 <_printf_i+0xbc>
 800a31c:	681d      	ldr	r5, [r3, #0]
 800a31e:	e003      	b.n	800a328 <_printf_i+0xc4>
 800a320:	0645      	lsls	r5, r0, #25
 800a322:	d5fb      	bpl.n	800a31c <_printf_i+0xb8>
 800a324:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a328:	2d00      	cmp	r5, #0
 800a32a:	da03      	bge.n	800a334 <_printf_i+0xd0>
 800a32c:	232d      	movs	r3, #45	@ 0x2d
 800a32e:	426d      	negs	r5, r5
 800a330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a334:	4859      	ldr	r0, [pc, #356]	@ (800a49c <_printf_i+0x238>)
 800a336:	230a      	movs	r3, #10
 800a338:	e011      	b.n	800a35e <_printf_i+0xfa>
 800a33a:	6821      	ldr	r1, [r4, #0]
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	0608      	lsls	r0, r1, #24
 800a340:	f853 5b04 	ldr.w	r5, [r3], #4
 800a344:	d402      	bmi.n	800a34c <_printf_i+0xe8>
 800a346:	0649      	lsls	r1, r1, #25
 800a348:	bf48      	it	mi
 800a34a:	b2ad      	uxthmi	r5, r5
 800a34c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a34e:	4853      	ldr	r0, [pc, #332]	@ (800a49c <_printf_i+0x238>)
 800a350:	6033      	str	r3, [r6, #0]
 800a352:	bf14      	ite	ne
 800a354:	230a      	movne	r3, #10
 800a356:	2308      	moveq	r3, #8
 800a358:	2100      	movs	r1, #0
 800a35a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a35e:	6866      	ldr	r6, [r4, #4]
 800a360:	60a6      	str	r6, [r4, #8]
 800a362:	2e00      	cmp	r6, #0
 800a364:	bfa2      	ittt	ge
 800a366:	6821      	ldrge	r1, [r4, #0]
 800a368:	f021 0104 	bicge.w	r1, r1, #4
 800a36c:	6021      	strge	r1, [r4, #0]
 800a36e:	b90d      	cbnz	r5, 800a374 <_printf_i+0x110>
 800a370:	2e00      	cmp	r6, #0
 800a372:	d04b      	beq.n	800a40c <_printf_i+0x1a8>
 800a374:	4616      	mov	r6, r2
 800a376:	fbb5 f1f3 	udiv	r1, r5, r3
 800a37a:	fb03 5711 	mls	r7, r3, r1, r5
 800a37e:	5dc7      	ldrb	r7, [r0, r7]
 800a380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a384:	462f      	mov	r7, r5
 800a386:	42bb      	cmp	r3, r7
 800a388:	460d      	mov	r5, r1
 800a38a:	d9f4      	bls.n	800a376 <_printf_i+0x112>
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d10b      	bne.n	800a3a8 <_printf_i+0x144>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	07df      	lsls	r7, r3, #31
 800a394:	d508      	bpl.n	800a3a8 <_printf_i+0x144>
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	6861      	ldr	r1, [r4, #4]
 800a39a:	4299      	cmp	r1, r3
 800a39c:	bfde      	ittt	le
 800a39e:	2330      	movle	r3, #48	@ 0x30
 800a3a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3a8:	1b92      	subs	r2, r2, r6
 800a3aa:	6122      	str	r2, [r4, #16]
 800a3ac:	f8cd a000 	str.w	sl, [sp]
 800a3b0:	464b      	mov	r3, r9
 800a3b2:	aa03      	add	r2, sp, #12
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	f7ff fee6 	bl	800a188 <_printf_common>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d14a      	bne.n	800a456 <_printf_i+0x1f2>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	b004      	add	sp, #16
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	f043 0320 	orr.w	r3, r3, #32
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	4833      	ldr	r0, [pc, #204]	@ (800a4a0 <_printf_i+0x23c>)
 800a3d4:	2778      	movs	r7, #120	@ 0x78
 800a3d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	6831      	ldr	r1, [r6, #0]
 800a3de:	061f      	lsls	r7, r3, #24
 800a3e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3e4:	d402      	bmi.n	800a3ec <_printf_i+0x188>
 800a3e6:	065f      	lsls	r7, r3, #25
 800a3e8:	bf48      	it	mi
 800a3ea:	b2ad      	uxthmi	r5, r5
 800a3ec:	6031      	str	r1, [r6, #0]
 800a3ee:	07d9      	lsls	r1, r3, #31
 800a3f0:	bf44      	itt	mi
 800a3f2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3f6:	6023      	strmi	r3, [r4, #0]
 800a3f8:	b11d      	cbz	r5, 800a402 <_printf_i+0x19e>
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	e7ac      	b.n	800a358 <_printf_i+0xf4>
 800a3fe:	4827      	ldr	r0, [pc, #156]	@ (800a49c <_printf_i+0x238>)
 800a400:	e7e9      	b.n	800a3d6 <_printf_i+0x172>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	f023 0320 	bic.w	r3, r3, #32
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	e7f6      	b.n	800a3fa <_printf_i+0x196>
 800a40c:	4616      	mov	r6, r2
 800a40e:	e7bd      	b.n	800a38c <_printf_i+0x128>
 800a410:	6833      	ldr	r3, [r6, #0]
 800a412:	6825      	ldr	r5, [r4, #0]
 800a414:	6961      	ldr	r1, [r4, #20]
 800a416:	1d18      	adds	r0, r3, #4
 800a418:	6030      	str	r0, [r6, #0]
 800a41a:	062e      	lsls	r6, r5, #24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	d501      	bpl.n	800a424 <_printf_i+0x1c0>
 800a420:	6019      	str	r1, [r3, #0]
 800a422:	e002      	b.n	800a42a <_printf_i+0x1c6>
 800a424:	0668      	lsls	r0, r5, #25
 800a426:	d5fb      	bpl.n	800a420 <_printf_i+0x1bc>
 800a428:	8019      	strh	r1, [r3, #0]
 800a42a:	2300      	movs	r3, #0
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	4616      	mov	r6, r2
 800a430:	e7bc      	b.n	800a3ac <_printf_i+0x148>
 800a432:	6833      	ldr	r3, [r6, #0]
 800a434:	1d1a      	adds	r2, r3, #4
 800a436:	6032      	str	r2, [r6, #0]
 800a438:	681e      	ldr	r6, [r3, #0]
 800a43a:	6862      	ldr	r2, [r4, #4]
 800a43c:	2100      	movs	r1, #0
 800a43e:	4630      	mov	r0, r6
 800a440:	f7f5 fe9e 	bl	8000180 <memchr>
 800a444:	b108      	cbz	r0, 800a44a <_printf_i+0x1e6>
 800a446:	1b80      	subs	r0, r0, r6
 800a448:	6060      	str	r0, [r4, #4]
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	2300      	movs	r3, #0
 800a450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a454:	e7aa      	b.n	800a3ac <_printf_i+0x148>
 800a456:	6923      	ldr	r3, [r4, #16]
 800a458:	4632      	mov	r2, r6
 800a45a:	4649      	mov	r1, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	47d0      	blx	sl
 800a460:	3001      	adds	r0, #1
 800a462:	d0ad      	beq.n	800a3c0 <_printf_i+0x15c>
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	079b      	lsls	r3, r3, #30
 800a468:	d413      	bmi.n	800a492 <_printf_i+0x22e>
 800a46a:	68e0      	ldr	r0, [r4, #12]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	4298      	cmp	r0, r3
 800a470:	bfb8      	it	lt
 800a472:	4618      	movlt	r0, r3
 800a474:	e7a6      	b.n	800a3c4 <_printf_i+0x160>
 800a476:	2301      	movs	r3, #1
 800a478:	4632      	mov	r2, r6
 800a47a:	4649      	mov	r1, r9
 800a47c:	4640      	mov	r0, r8
 800a47e:	47d0      	blx	sl
 800a480:	3001      	adds	r0, #1
 800a482:	d09d      	beq.n	800a3c0 <_printf_i+0x15c>
 800a484:	3501      	adds	r5, #1
 800a486:	68e3      	ldr	r3, [r4, #12]
 800a488:	9903      	ldr	r1, [sp, #12]
 800a48a:	1a5b      	subs	r3, r3, r1
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	dcf2      	bgt.n	800a476 <_printf_i+0x212>
 800a490:	e7eb      	b.n	800a46a <_printf_i+0x206>
 800a492:	2500      	movs	r5, #0
 800a494:	f104 0619 	add.w	r6, r4, #25
 800a498:	e7f5      	b.n	800a486 <_printf_i+0x222>
 800a49a:	bf00      	nop
 800a49c:	0800e64a 	.word	0x0800e64a
 800a4a0:	0800e65b 	.word	0x0800e65b

0800a4a4 <_scanf_float>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	b087      	sub	sp, #28
 800a4aa:	4617      	mov	r7, r2
 800a4ac:	9303      	str	r3, [sp, #12]
 800a4ae:	688b      	ldr	r3, [r1, #8]
 800a4b0:	1e5a      	subs	r2, r3, #1
 800a4b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a4b6:	bf81      	itttt	hi
 800a4b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a4bc:	eb03 0b05 	addhi.w	fp, r3, r5
 800a4c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a4c4:	608b      	strhi	r3, [r1, #8]
 800a4c6:	680b      	ldr	r3, [r1, #0]
 800a4c8:	460a      	mov	r2, r1
 800a4ca:	f04f 0500 	mov.w	r5, #0
 800a4ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a4d2:	f842 3b1c 	str.w	r3, [r2], #28
 800a4d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a4da:	4680      	mov	r8, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	bf98      	it	ls
 800a4e0:	f04f 0b00 	movls.w	fp, #0
 800a4e4:	9201      	str	r2, [sp, #4]
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	46aa      	mov	sl, r5
 800a4ea:	46a9      	mov	r9, r5
 800a4ec:	9502      	str	r5, [sp, #8]
 800a4ee:	68a2      	ldr	r2, [r4, #8]
 800a4f0:	b152      	cbz	r2, 800a508 <_scanf_float+0x64>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b4e      	cmp	r3, #78	@ 0x4e
 800a4f8:	d864      	bhi.n	800a5c4 <_scanf_float+0x120>
 800a4fa:	2b40      	cmp	r3, #64	@ 0x40
 800a4fc:	d83c      	bhi.n	800a578 <_scanf_float+0xd4>
 800a4fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a502:	b2c8      	uxtb	r0, r1
 800a504:	280e      	cmp	r0, #14
 800a506:	d93a      	bls.n	800a57e <_scanf_float+0xda>
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	d003      	beq.n	800a516 <_scanf_float+0x72>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a51a:	f1ba 0f01 	cmp.w	sl, #1
 800a51e:	f200 8117 	bhi.w	800a750 <_scanf_float+0x2ac>
 800a522:	9b01      	ldr	r3, [sp, #4]
 800a524:	429e      	cmp	r6, r3
 800a526:	f200 8108 	bhi.w	800a73a <_scanf_float+0x296>
 800a52a:	2001      	movs	r0, #1
 800a52c:	b007      	add	sp, #28
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a536:	2a0d      	cmp	r2, #13
 800a538:	d8e6      	bhi.n	800a508 <_scanf_float+0x64>
 800a53a:	a101      	add	r1, pc, #4	@ (adr r1, 800a540 <_scanf_float+0x9c>)
 800a53c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a540:	0800a687 	.word	0x0800a687
 800a544:	0800a509 	.word	0x0800a509
 800a548:	0800a509 	.word	0x0800a509
 800a54c:	0800a509 	.word	0x0800a509
 800a550:	0800a6e7 	.word	0x0800a6e7
 800a554:	0800a6bf 	.word	0x0800a6bf
 800a558:	0800a509 	.word	0x0800a509
 800a55c:	0800a509 	.word	0x0800a509
 800a560:	0800a695 	.word	0x0800a695
 800a564:	0800a509 	.word	0x0800a509
 800a568:	0800a509 	.word	0x0800a509
 800a56c:	0800a509 	.word	0x0800a509
 800a570:	0800a509 	.word	0x0800a509
 800a574:	0800a64d 	.word	0x0800a64d
 800a578:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a57c:	e7db      	b.n	800a536 <_scanf_float+0x92>
 800a57e:	290e      	cmp	r1, #14
 800a580:	d8c2      	bhi.n	800a508 <_scanf_float+0x64>
 800a582:	a001      	add	r0, pc, #4	@ (adr r0, 800a588 <_scanf_float+0xe4>)
 800a584:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a588:	0800a63d 	.word	0x0800a63d
 800a58c:	0800a509 	.word	0x0800a509
 800a590:	0800a63d 	.word	0x0800a63d
 800a594:	0800a6d3 	.word	0x0800a6d3
 800a598:	0800a509 	.word	0x0800a509
 800a59c:	0800a5e5 	.word	0x0800a5e5
 800a5a0:	0800a623 	.word	0x0800a623
 800a5a4:	0800a623 	.word	0x0800a623
 800a5a8:	0800a623 	.word	0x0800a623
 800a5ac:	0800a623 	.word	0x0800a623
 800a5b0:	0800a623 	.word	0x0800a623
 800a5b4:	0800a623 	.word	0x0800a623
 800a5b8:	0800a623 	.word	0x0800a623
 800a5bc:	0800a623 	.word	0x0800a623
 800a5c0:	0800a623 	.word	0x0800a623
 800a5c4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a5c6:	d809      	bhi.n	800a5dc <_scanf_float+0x138>
 800a5c8:	2b60      	cmp	r3, #96	@ 0x60
 800a5ca:	d8b2      	bhi.n	800a532 <_scanf_float+0x8e>
 800a5cc:	2b54      	cmp	r3, #84	@ 0x54
 800a5ce:	d07b      	beq.n	800a6c8 <_scanf_float+0x224>
 800a5d0:	2b59      	cmp	r3, #89	@ 0x59
 800a5d2:	d199      	bne.n	800a508 <_scanf_float+0x64>
 800a5d4:	2d07      	cmp	r5, #7
 800a5d6:	d197      	bne.n	800a508 <_scanf_float+0x64>
 800a5d8:	2508      	movs	r5, #8
 800a5da:	e02c      	b.n	800a636 <_scanf_float+0x192>
 800a5dc:	2b74      	cmp	r3, #116	@ 0x74
 800a5de:	d073      	beq.n	800a6c8 <_scanf_float+0x224>
 800a5e0:	2b79      	cmp	r3, #121	@ 0x79
 800a5e2:	e7f6      	b.n	800a5d2 <_scanf_float+0x12e>
 800a5e4:	6821      	ldr	r1, [r4, #0]
 800a5e6:	05c8      	lsls	r0, r1, #23
 800a5e8:	d51b      	bpl.n	800a622 <_scanf_float+0x17e>
 800a5ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a5ee:	6021      	str	r1, [r4, #0]
 800a5f0:	f109 0901 	add.w	r9, r9, #1
 800a5f4:	f1bb 0f00 	cmp.w	fp, #0
 800a5f8:	d003      	beq.n	800a602 <_scanf_float+0x15e>
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a600:	60a2      	str	r2, [r4, #8]
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	60a3      	str	r3, [r4, #8]
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	3301      	adds	r3, #1
 800a60c:	6123      	str	r3, [r4, #16]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
 800a616:	f340 8087 	ble.w	800a728 <_scanf_float+0x284>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	e765      	b.n	800a4ee <_scanf_float+0x4a>
 800a622:	eb1a 0105 	adds.w	r1, sl, r5
 800a626:	f47f af6f 	bne.w	800a508 <_scanf_float+0x64>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	460d      	mov	r5, r1
 800a634:	468a      	mov	sl, r1
 800a636:	f806 3b01 	strb.w	r3, [r6], #1
 800a63a:	e7e2      	b.n	800a602 <_scanf_float+0x15e>
 800a63c:	6822      	ldr	r2, [r4, #0]
 800a63e:	0610      	lsls	r0, r2, #24
 800a640:	f57f af62 	bpl.w	800a508 <_scanf_float+0x64>
 800a644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a648:	6022      	str	r2, [r4, #0]
 800a64a:	e7f4      	b.n	800a636 <_scanf_float+0x192>
 800a64c:	f1ba 0f00 	cmp.w	sl, #0
 800a650:	d10e      	bne.n	800a670 <_scanf_float+0x1cc>
 800a652:	f1b9 0f00 	cmp.w	r9, #0
 800a656:	d10e      	bne.n	800a676 <_scanf_float+0x1d2>
 800a658:	6822      	ldr	r2, [r4, #0]
 800a65a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a65e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a662:	d108      	bne.n	800a676 <_scanf_float+0x1d2>
 800a664:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a668:	6022      	str	r2, [r4, #0]
 800a66a:	f04f 0a01 	mov.w	sl, #1
 800a66e:	e7e2      	b.n	800a636 <_scanf_float+0x192>
 800a670:	f1ba 0f02 	cmp.w	sl, #2
 800a674:	d055      	beq.n	800a722 <_scanf_float+0x27e>
 800a676:	2d01      	cmp	r5, #1
 800a678:	d002      	beq.n	800a680 <_scanf_float+0x1dc>
 800a67a:	2d04      	cmp	r5, #4
 800a67c:	f47f af44 	bne.w	800a508 <_scanf_float+0x64>
 800a680:	3501      	adds	r5, #1
 800a682:	b2ed      	uxtb	r5, r5
 800a684:	e7d7      	b.n	800a636 <_scanf_float+0x192>
 800a686:	f1ba 0f01 	cmp.w	sl, #1
 800a68a:	f47f af3d 	bne.w	800a508 <_scanf_float+0x64>
 800a68e:	f04f 0a02 	mov.w	sl, #2
 800a692:	e7d0      	b.n	800a636 <_scanf_float+0x192>
 800a694:	b97d      	cbnz	r5, 800a6b6 <_scanf_float+0x212>
 800a696:	f1b9 0f00 	cmp.w	r9, #0
 800a69a:	f47f af38 	bne.w	800a50e <_scanf_float+0x6a>
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a6a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a6a8:	f040 8108 	bne.w	800a8bc <_scanf_float+0x418>
 800a6ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a6b0:	6022      	str	r2, [r4, #0]
 800a6b2:	2501      	movs	r5, #1
 800a6b4:	e7bf      	b.n	800a636 <_scanf_float+0x192>
 800a6b6:	2d03      	cmp	r5, #3
 800a6b8:	d0e2      	beq.n	800a680 <_scanf_float+0x1dc>
 800a6ba:	2d05      	cmp	r5, #5
 800a6bc:	e7de      	b.n	800a67c <_scanf_float+0x1d8>
 800a6be:	2d02      	cmp	r5, #2
 800a6c0:	f47f af22 	bne.w	800a508 <_scanf_float+0x64>
 800a6c4:	2503      	movs	r5, #3
 800a6c6:	e7b6      	b.n	800a636 <_scanf_float+0x192>
 800a6c8:	2d06      	cmp	r5, #6
 800a6ca:	f47f af1d 	bne.w	800a508 <_scanf_float+0x64>
 800a6ce:	2507      	movs	r5, #7
 800a6d0:	e7b1      	b.n	800a636 <_scanf_float+0x192>
 800a6d2:	6822      	ldr	r2, [r4, #0]
 800a6d4:	0591      	lsls	r1, r2, #22
 800a6d6:	f57f af17 	bpl.w	800a508 <_scanf_float+0x64>
 800a6da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a6de:	6022      	str	r2, [r4, #0]
 800a6e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a6e4:	e7a7      	b.n	800a636 <_scanf_float+0x192>
 800a6e6:	6822      	ldr	r2, [r4, #0]
 800a6e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a6ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a6f0:	d006      	beq.n	800a700 <_scanf_float+0x25c>
 800a6f2:	0550      	lsls	r0, r2, #21
 800a6f4:	f57f af08 	bpl.w	800a508 <_scanf_float+0x64>
 800a6f8:	f1b9 0f00 	cmp.w	r9, #0
 800a6fc:	f000 80de 	beq.w	800a8bc <_scanf_float+0x418>
 800a700:	0591      	lsls	r1, r2, #22
 800a702:	bf58      	it	pl
 800a704:	9902      	ldrpl	r1, [sp, #8]
 800a706:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a70a:	bf58      	it	pl
 800a70c:	eba9 0101 	subpl.w	r1, r9, r1
 800a710:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a714:	bf58      	it	pl
 800a716:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	f04f 0900 	mov.w	r9, #0
 800a720:	e789      	b.n	800a636 <_scanf_float+0x192>
 800a722:	f04f 0a03 	mov.w	sl, #3
 800a726:	e786      	b.n	800a636 <_scanf_float+0x192>
 800a728:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a72c:	4639      	mov	r1, r7
 800a72e:	4640      	mov	r0, r8
 800a730:	4798      	blx	r3
 800a732:	2800      	cmp	r0, #0
 800a734:	f43f aedb 	beq.w	800a4ee <_scanf_float+0x4a>
 800a738:	e6e6      	b.n	800a508 <_scanf_float+0x64>
 800a73a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a73e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a742:	463a      	mov	r2, r7
 800a744:	4640      	mov	r0, r8
 800a746:	4798      	blx	r3
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	e6e8      	b.n	800a522 <_scanf_float+0x7e>
 800a750:	1e6b      	subs	r3, r5, #1
 800a752:	2b06      	cmp	r3, #6
 800a754:	d824      	bhi.n	800a7a0 <_scanf_float+0x2fc>
 800a756:	2d02      	cmp	r5, #2
 800a758:	d836      	bhi.n	800a7c8 <_scanf_float+0x324>
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	429e      	cmp	r6, r3
 800a75e:	f67f aee4 	bls.w	800a52a <_scanf_float+0x86>
 800a762:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a76a:	463a      	mov	r2, r7
 800a76c:	4640      	mov	r0, r8
 800a76e:	4798      	blx	r3
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	3b01      	subs	r3, #1
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	e7f0      	b.n	800a75a <_scanf_float+0x2b6>
 800a778:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a77c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a780:	463a      	mov	r2, r7
 800a782:	4640      	mov	r0, r8
 800a784:	4798      	blx	r3
 800a786:	6923      	ldr	r3, [r4, #16]
 800a788:	3b01      	subs	r3, #1
 800a78a:	6123      	str	r3, [r4, #16]
 800a78c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a790:	fa5f fa8a 	uxtb.w	sl, sl
 800a794:	f1ba 0f02 	cmp.w	sl, #2
 800a798:	d1ee      	bne.n	800a778 <_scanf_float+0x2d4>
 800a79a:	3d03      	subs	r5, #3
 800a79c:	b2ed      	uxtb	r5, r5
 800a79e:	1b76      	subs	r6, r6, r5
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	05da      	lsls	r2, r3, #23
 800a7a4:	d530      	bpl.n	800a808 <_scanf_float+0x364>
 800a7a6:	055b      	lsls	r3, r3, #21
 800a7a8:	d511      	bpl.n	800a7ce <_scanf_float+0x32a>
 800a7aa:	9b01      	ldr	r3, [sp, #4]
 800a7ac:	429e      	cmp	r6, r3
 800a7ae:	f67f aebc 	bls.w	800a52a <_scanf_float+0x86>
 800a7b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a7ba:	463a      	mov	r2, r7
 800a7bc:	4640      	mov	r0, r8
 800a7be:	4798      	blx	r3
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	e7f0      	b.n	800a7aa <_scanf_float+0x306>
 800a7c8:	46aa      	mov	sl, r5
 800a7ca:	46b3      	mov	fp, r6
 800a7cc:	e7de      	b.n	800a78c <_scanf_float+0x2e8>
 800a7ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	2965      	cmp	r1, #101	@ 0x65
 800a7d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7da:	f106 35ff 	add.w	r5, r6, #4294967295
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	d00c      	beq.n	800a7fc <_scanf_float+0x358>
 800a7e2:	2945      	cmp	r1, #69	@ 0x45
 800a7e4:	d00a      	beq.n	800a7fc <_scanf_float+0x358>
 800a7e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	4798      	blx	r3
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	1eb5      	subs	r5, r6, #2
 800a7fa:	6123      	str	r3, [r4, #16]
 800a7fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a800:	463a      	mov	r2, r7
 800a802:	4640      	mov	r0, r8
 800a804:	4798      	blx	r3
 800a806:	462e      	mov	r6, r5
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	f012 0210 	ands.w	r2, r2, #16
 800a80e:	d001      	beq.n	800a814 <_scanf_float+0x370>
 800a810:	2000      	movs	r0, #0
 800a812:	e68b      	b.n	800a52c <_scanf_float+0x88>
 800a814:	7032      	strb	r2, [r6, #0]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a81c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a820:	d11c      	bne.n	800a85c <_scanf_float+0x3b8>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	454b      	cmp	r3, r9
 800a826:	eba3 0209 	sub.w	r2, r3, r9
 800a82a:	d123      	bne.n	800a874 <_scanf_float+0x3d0>
 800a82c:	9901      	ldr	r1, [sp, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	4640      	mov	r0, r8
 800a832:	f002 fc2d 	bl	800d090 <_strtod_r>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	6821      	ldr	r1, [r4, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f011 0f02 	tst.w	r1, #2
 800a840:	ec57 6b10 	vmov	r6, r7, d0
 800a844:	f103 0204 	add.w	r2, r3, #4
 800a848:	d01f      	beq.n	800a88a <_scanf_float+0x3e6>
 800a84a:	9903      	ldr	r1, [sp, #12]
 800a84c:	600a      	str	r2, [r1, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	e9c3 6700 	strd	r6, r7, [r3]
 800a854:	68e3      	ldr	r3, [r4, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60e3      	str	r3, [r4, #12]
 800a85a:	e7d9      	b.n	800a810 <_scanf_float+0x36c>
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0e4      	beq.n	800a82c <_scanf_float+0x388>
 800a862:	9905      	ldr	r1, [sp, #20]
 800a864:	230a      	movs	r3, #10
 800a866:	3101      	adds	r1, #1
 800a868:	4640      	mov	r0, r8
 800a86a:	f002 fc91 	bl	800d190 <_strtol_r>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	9e05      	ldr	r6, [sp, #20]
 800a872:	1ac2      	subs	r2, r0, r3
 800a874:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a878:	429e      	cmp	r6, r3
 800a87a:	bf28      	it	cs
 800a87c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a880:	4910      	ldr	r1, [pc, #64]	@ (800a8c4 <_scanf_float+0x420>)
 800a882:	4630      	mov	r0, r6
 800a884:	f000 f918 	bl	800aab8 <siprintf>
 800a888:	e7d0      	b.n	800a82c <_scanf_float+0x388>
 800a88a:	f011 0f04 	tst.w	r1, #4
 800a88e:	9903      	ldr	r1, [sp, #12]
 800a890:	600a      	str	r2, [r1, #0]
 800a892:	d1dc      	bne.n	800a84e <_scanf_float+0x3aa>
 800a894:	681d      	ldr	r5, [r3, #0]
 800a896:	4632      	mov	r2, r6
 800a898:	463b      	mov	r3, r7
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f6 f91d 	bl	8000adc <__aeabi_dcmpun>
 800a8a2:	b128      	cbz	r0, 800a8b0 <_scanf_float+0x40c>
 800a8a4:	4808      	ldr	r0, [pc, #32]	@ (800a8c8 <_scanf_float+0x424>)
 800a8a6:	f000 f9eb 	bl	800ac80 <nanf>
 800a8aa:	ed85 0a00 	vstr	s0, [r5]
 800a8ae:	e7d1      	b.n	800a854 <_scanf_float+0x3b0>
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f6 f970 	bl	8000b98 <__aeabi_d2f>
 800a8b8:	6028      	str	r0, [r5, #0]
 800a8ba:	e7cb      	b.n	800a854 <_scanf_float+0x3b0>
 800a8bc:	f04f 0900 	mov.w	r9, #0
 800a8c0:	e629      	b.n	800a516 <_scanf_float+0x72>
 800a8c2:	bf00      	nop
 800a8c4:	0800e66c 	.word	0x0800e66c
 800a8c8:	0800ea05 	.word	0x0800ea05

0800a8cc <std>:
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	b510      	push	{r4, lr}
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8da:	6083      	str	r3, [r0, #8]
 800a8dc:	8181      	strh	r1, [r0, #12]
 800a8de:	6643      	str	r3, [r0, #100]	@ 0x64
 800a8e0:	81c2      	strh	r2, [r0, #14]
 800a8e2:	6183      	str	r3, [r0, #24]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	2208      	movs	r2, #8
 800a8e8:	305c      	adds	r0, #92	@ 0x5c
 800a8ea:	f000 f948 	bl	800ab7e <memset>
 800a8ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a924 <std+0x58>)
 800a8f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a928 <std+0x5c>)
 800a8f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a92c <std+0x60>)
 800a8f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a930 <std+0x64>)
 800a8fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <std+0x68>)
 800a900:	6224      	str	r4, [r4, #32]
 800a902:	429c      	cmp	r4, r3
 800a904:	d006      	beq.n	800a914 <std+0x48>
 800a906:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a90a:	4294      	cmp	r4, r2
 800a90c:	d002      	beq.n	800a914 <std+0x48>
 800a90e:	33d0      	adds	r3, #208	@ 0xd0
 800a910:	429c      	cmp	r4, r3
 800a912:	d105      	bne.n	800a920 <std+0x54>
 800a914:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a91c:	f000 b9ac 	b.w	800ac78 <__retarget_lock_init_recursive>
 800a920:	bd10      	pop	{r4, pc}
 800a922:	bf00      	nop
 800a924:	0800aaf9 	.word	0x0800aaf9
 800a928:	0800ab1b 	.word	0x0800ab1b
 800a92c:	0800ab53 	.word	0x0800ab53
 800a930:	0800ab77 	.word	0x0800ab77
 800a934:	200027a4 	.word	0x200027a4

0800a938 <stdio_exit_handler>:
 800a938:	4a02      	ldr	r2, [pc, #8]	@ (800a944 <stdio_exit_handler+0xc>)
 800a93a:	4903      	ldr	r1, [pc, #12]	@ (800a948 <stdio_exit_handler+0x10>)
 800a93c:	4803      	ldr	r0, [pc, #12]	@ (800a94c <stdio_exit_handler+0x14>)
 800a93e:	f000 b869 	b.w	800aa14 <_fwalk_sglue>
 800a942:	bf00      	nop
 800a944:	20000028 	.word	0x20000028
 800a948:	0800d54d 	.word	0x0800d54d
 800a94c:	20000038 	.word	0x20000038

0800a950 <cleanup_stdio>:
 800a950:	6841      	ldr	r1, [r0, #4]
 800a952:	4b0c      	ldr	r3, [pc, #48]	@ (800a984 <cleanup_stdio+0x34>)
 800a954:	4299      	cmp	r1, r3
 800a956:	b510      	push	{r4, lr}
 800a958:	4604      	mov	r4, r0
 800a95a:	d001      	beq.n	800a960 <cleanup_stdio+0x10>
 800a95c:	f002 fdf6 	bl	800d54c <_fflush_r>
 800a960:	68a1      	ldr	r1, [r4, #8]
 800a962:	4b09      	ldr	r3, [pc, #36]	@ (800a988 <cleanup_stdio+0x38>)
 800a964:	4299      	cmp	r1, r3
 800a966:	d002      	beq.n	800a96e <cleanup_stdio+0x1e>
 800a968:	4620      	mov	r0, r4
 800a96a:	f002 fdef 	bl	800d54c <_fflush_r>
 800a96e:	68e1      	ldr	r1, [r4, #12]
 800a970:	4b06      	ldr	r3, [pc, #24]	@ (800a98c <cleanup_stdio+0x3c>)
 800a972:	4299      	cmp	r1, r3
 800a974:	d004      	beq.n	800a980 <cleanup_stdio+0x30>
 800a976:	4620      	mov	r0, r4
 800a978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a97c:	f002 bde6 	b.w	800d54c <_fflush_r>
 800a980:	bd10      	pop	{r4, pc}
 800a982:	bf00      	nop
 800a984:	200027a4 	.word	0x200027a4
 800a988:	2000280c 	.word	0x2000280c
 800a98c:	20002874 	.word	0x20002874

0800a990 <global_stdio_init.part.0>:
 800a990:	b510      	push	{r4, lr}
 800a992:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c0 <global_stdio_init.part.0+0x30>)
 800a994:	4c0b      	ldr	r4, [pc, #44]	@ (800a9c4 <global_stdio_init.part.0+0x34>)
 800a996:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c8 <global_stdio_init.part.0+0x38>)
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	4620      	mov	r0, r4
 800a99c:	2200      	movs	r2, #0
 800a99e:	2104      	movs	r1, #4
 800a9a0:	f7ff ff94 	bl	800a8cc <std>
 800a9a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	2109      	movs	r1, #9
 800a9ac:	f7ff ff8e 	bl	800a8cc <std>
 800a9b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ba:	2112      	movs	r1, #18
 800a9bc:	f7ff bf86 	b.w	800a8cc <std>
 800a9c0:	200028dc 	.word	0x200028dc
 800a9c4:	200027a4 	.word	0x200027a4
 800a9c8:	0800a939 	.word	0x0800a939

0800a9cc <__sfp_lock_acquire>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	@ (800a9d4 <__sfp_lock_acquire+0x8>)
 800a9ce:	f000 b954 	b.w	800ac7a <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	200028e5 	.word	0x200028e5

0800a9d8 <__sfp_lock_release>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	@ (800a9e0 <__sfp_lock_release+0x8>)
 800a9da:	f000 b94f 	b.w	800ac7c <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	200028e5 	.word	0x200028e5

0800a9e4 <__sinit>:
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	f7ff fff0 	bl	800a9cc <__sfp_lock_acquire>
 800a9ec:	6a23      	ldr	r3, [r4, #32]
 800a9ee:	b11b      	cbz	r3, 800a9f8 <__sinit+0x14>
 800a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f4:	f7ff bff0 	b.w	800a9d8 <__sfp_lock_release>
 800a9f8:	4b04      	ldr	r3, [pc, #16]	@ (800aa0c <__sinit+0x28>)
 800a9fa:	6223      	str	r3, [r4, #32]
 800a9fc:	4b04      	ldr	r3, [pc, #16]	@ (800aa10 <__sinit+0x2c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f5      	bne.n	800a9f0 <__sinit+0xc>
 800aa04:	f7ff ffc4 	bl	800a990 <global_stdio_init.part.0>
 800aa08:	e7f2      	b.n	800a9f0 <__sinit+0xc>
 800aa0a:	bf00      	nop
 800aa0c:	0800a951 	.word	0x0800a951
 800aa10:	200028dc 	.word	0x200028dc

0800aa14 <_fwalk_sglue>:
 800aa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	4607      	mov	r7, r0
 800aa1a:	4688      	mov	r8, r1
 800aa1c:	4614      	mov	r4, r2
 800aa1e:	2600      	movs	r6, #0
 800aa20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa24:	f1b9 0901 	subs.w	r9, r9, #1
 800aa28:	d505      	bpl.n	800aa36 <_fwalk_sglue+0x22>
 800aa2a:	6824      	ldr	r4, [r4, #0]
 800aa2c:	2c00      	cmp	r4, #0
 800aa2e:	d1f7      	bne.n	800aa20 <_fwalk_sglue+0xc>
 800aa30:	4630      	mov	r0, r6
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d907      	bls.n	800aa4c <_fwalk_sglue+0x38>
 800aa3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa40:	3301      	adds	r3, #1
 800aa42:	d003      	beq.n	800aa4c <_fwalk_sglue+0x38>
 800aa44:	4629      	mov	r1, r5
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c0      	blx	r8
 800aa4a:	4306      	orrs	r6, r0
 800aa4c:	3568      	adds	r5, #104	@ 0x68
 800aa4e:	e7e9      	b.n	800aa24 <_fwalk_sglue+0x10>

0800aa50 <sniprintf>:
 800aa50:	b40c      	push	{r2, r3}
 800aa52:	b530      	push	{r4, r5, lr}
 800aa54:	4b17      	ldr	r3, [pc, #92]	@ (800aab4 <sniprintf+0x64>)
 800aa56:	1e0c      	subs	r4, r1, #0
 800aa58:	681d      	ldr	r5, [r3, #0]
 800aa5a:	b09d      	sub	sp, #116	@ 0x74
 800aa5c:	da08      	bge.n	800aa70 <sniprintf+0x20>
 800aa5e:	238b      	movs	r3, #139	@ 0x8b
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	b01d      	add	sp, #116	@ 0x74
 800aa68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa6c:	b002      	add	sp, #8
 800aa6e:	4770      	bx	lr
 800aa70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800aa74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa78:	bf14      	ite	ne
 800aa7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa7e:	4623      	moveq	r3, r4
 800aa80:	9304      	str	r3, [sp, #16]
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa88:	9002      	str	r0, [sp, #8]
 800aa8a:	9006      	str	r0, [sp, #24]
 800aa8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aa92:	ab21      	add	r3, sp, #132	@ 0x84
 800aa94:	a902      	add	r1, sp, #8
 800aa96:	4628      	mov	r0, r5
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f002 fbd7 	bl	800d24c <_svfiprintf_r>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	bfbc      	itt	lt
 800aaa2:	238b      	movlt	r3, #139	@ 0x8b
 800aaa4:	602b      	strlt	r3, [r5, #0]
 800aaa6:	2c00      	cmp	r4, #0
 800aaa8:	d0dd      	beq.n	800aa66 <sniprintf+0x16>
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e7d9      	b.n	800aa66 <sniprintf+0x16>
 800aab2:	bf00      	nop
 800aab4:	20000034 	.word	0x20000034

0800aab8 <siprintf>:
 800aab8:	b40e      	push	{r1, r2, r3}
 800aaba:	b500      	push	{lr}
 800aabc:	b09c      	sub	sp, #112	@ 0x70
 800aabe:	ab1d      	add	r3, sp, #116	@ 0x74
 800aac0:	9002      	str	r0, [sp, #8]
 800aac2:	9006      	str	r0, [sp, #24]
 800aac4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aac8:	4809      	ldr	r0, [pc, #36]	@ (800aaf0 <siprintf+0x38>)
 800aaca:	9107      	str	r1, [sp, #28]
 800aacc:	9104      	str	r1, [sp, #16]
 800aace:	4909      	ldr	r1, [pc, #36]	@ (800aaf4 <siprintf+0x3c>)
 800aad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad4:	9105      	str	r1, [sp, #20]
 800aad6:	6800      	ldr	r0, [r0, #0]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	a902      	add	r1, sp, #8
 800aadc:	f002 fbb6 	bl	800d24c <_svfiprintf_r>
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	b01c      	add	sp, #112	@ 0x70
 800aae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaec:	b003      	add	sp, #12
 800aaee:	4770      	bx	lr
 800aaf0:	20000034 	.word	0x20000034
 800aaf4:	ffff0208 	.word	0xffff0208

0800aaf8 <__sread>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	460c      	mov	r4, r1
 800aafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab00:	f000 f86c 	bl	800abdc <_read_r>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	bfab      	itete	ge
 800ab08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ab0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab0c:	181b      	addge	r3, r3, r0
 800ab0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ab12:	bfac      	ite	ge
 800ab14:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ab16:	81a3      	strhlt	r3, [r4, #12]
 800ab18:	bd10      	pop	{r4, pc}

0800ab1a <__swrite>:
 800ab1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1e:	461f      	mov	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	05db      	lsls	r3, r3, #23
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	4616      	mov	r6, r2
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1e>
 800ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab30:	2302      	movs	r3, #2
 800ab32:	2200      	movs	r2, #0
 800ab34:	f000 f840 	bl	800abb8 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	4632      	mov	r2, r6
 800ab46:	463b      	mov	r3, r7
 800ab48:	4628      	mov	r0, r5
 800ab4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	f000 b857 	b.w	800ac00 <_write_r>

0800ab52 <__sseek>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 f82d 	bl	800abb8 <_lseek_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	bf15      	itete	ne
 800ab64:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab6e:	81a3      	strheq	r3, [r4, #12]
 800ab70:	bf18      	it	ne
 800ab72:	81a3      	strhne	r3, [r4, #12]
 800ab74:	bd10      	pop	{r4, pc}

0800ab76 <__sclose>:
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	f000 b80d 	b.w	800ab98 <_close_r>

0800ab7e <memset>:
 800ab7e:	4402      	add	r2, r0
 800ab80:	4603      	mov	r3, r0
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d100      	bne.n	800ab88 <memset+0xa>
 800ab86:	4770      	bx	lr
 800ab88:	f803 1b01 	strb.w	r1, [r3], #1
 800ab8c:	e7f9      	b.n	800ab82 <memset+0x4>
	...

0800ab90 <_localeconv_r>:
 800ab90:	4800      	ldr	r0, [pc, #0]	@ (800ab94 <_localeconv_r+0x4>)
 800ab92:	4770      	bx	lr
 800ab94:	20000174 	.word	0x20000174

0800ab98 <_close_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d06      	ldr	r5, [pc, #24]	@ (800abb4 <_close_r+0x1c>)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	602b      	str	r3, [r5, #0]
 800aba4:	f7f7 ff1e 	bl	80029e4 <_close>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	d102      	bne.n	800abb2 <_close_r+0x1a>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	b103      	cbz	r3, 800abb2 <_close_r+0x1a>
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	200028e0 	.word	0x200028e0

0800abb8 <_lseek_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d07      	ldr	r5, [pc, #28]	@ (800abd8 <_lseek_r+0x20>)
 800abbc:	4604      	mov	r4, r0
 800abbe:	4608      	mov	r0, r1
 800abc0:	4611      	mov	r1, r2
 800abc2:	2200      	movs	r2, #0
 800abc4:	602a      	str	r2, [r5, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	f7f7 ff33 	bl	8002a32 <_lseek>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_lseek_r+0x1e>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_lseek_r+0x1e>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	200028e0 	.word	0x200028e0

0800abdc <_read_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d07      	ldr	r5, [pc, #28]	@ (800abfc <_read_r+0x20>)
 800abe0:	4604      	mov	r4, r0
 800abe2:	4608      	mov	r0, r1
 800abe4:	4611      	mov	r1, r2
 800abe6:	2200      	movs	r2, #0
 800abe8:	602a      	str	r2, [r5, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	f7f7 fedd 	bl	80029aa <_read>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_read_r+0x1e>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_read_r+0x1e>
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	200028e0 	.word	0x200028e0

0800ac00 <_write_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	@ (800ac20 <_write_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f7 f877 	bl	8001d02 <_write>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_write_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_write_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	200028e0 	.word	0x200028e0

0800ac24 <__errno>:
 800ac24:	4b01      	ldr	r3, [pc, #4]	@ (800ac2c <__errno+0x8>)
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000034 	.word	0x20000034

0800ac30 <__libc_init_array>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4d0d      	ldr	r5, [pc, #52]	@ (800ac68 <__libc_init_array+0x38>)
 800ac34:	4c0d      	ldr	r4, [pc, #52]	@ (800ac6c <__libc_init_array+0x3c>)
 800ac36:	1b64      	subs	r4, r4, r5
 800ac38:	10a4      	asrs	r4, r4, #2
 800ac3a:	2600      	movs	r6, #0
 800ac3c:	42a6      	cmp	r6, r4
 800ac3e:	d109      	bne.n	800ac54 <__libc_init_array+0x24>
 800ac40:	4d0b      	ldr	r5, [pc, #44]	@ (800ac70 <__libc_init_array+0x40>)
 800ac42:	4c0c      	ldr	r4, [pc, #48]	@ (800ac74 <__libc_init_array+0x44>)
 800ac44:	f003 fb72 	bl	800e32c <_init>
 800ac48:	1b64      	subs	r4, r4, r5
 800ac4a:	10a4      	asrs	r4, r4, #2
 800ac4c:	2600      	movs	r6, #0
 800ac4e:	42a6      	cmp	r6, r4
 800ac50:	d105      	bne.n	800ac5e <__libc_init_array+0x2e>
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac58:	4798      	blx	r3
 800ac5a:	3601      	adds	r6, #1
 800ac5c:	e7ee      	b.n	800ac3c <__libc_init_array+0xc>
 800ac5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac62:	4798      	blx	r3
 800ac64:	3601      	adds	r6, #1
 800ac66:	e7f2      	b.n	800ac4e <__libc_init_array+0x1e>
 800ac68:	0800ea70 	.word	0x0800ea70
 800ac6c:	0800ea70 	.word	0x0800ea70
 800ac70:	0800ea70 	.word	0x0800ea70
 800ac74:	0800ea74 	.word	0x0800ea74

0800ac78 <__retarget_lock_init_recursive>:
 800ac78:	4770      	bx	lr

0800ac7a <__retarget_lock_acquire_recursive>:
 800ac7a:	4770      	bx	lr

0800ac7c <__retarget_lock_release_recursive>:
 800ac7c:	4770      	bx	lr
	...

0800ac80 <nanf>:
 800ac80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ac88 <nanf+0x8>
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	7fc00000 	.word	0x7fc00000

0800ac8c <quorem>:
 800ac8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	6903      	ldr	r3, [r0, #16]
 800ac92:	690c      	ldr	r4, [r1, #16]
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	4607      	mov	r7, r0
 800ac98:	db7e      	blt.n	800ad98 <quorem+0x10c>
 800ac9a:	3c01      	subs	r4, #1
 800ac9c:	f101 0814 	add.w	r8, r1, #20
 800aca0:	00a3      	lsls	r3, r4, #2
 800aca2:	f100 0514 	add.w	r5, r0, #20
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acb6:	3301      	adds	r3, #1
 800acb8:	429a      	cmp	r2, r3
 800acba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acbe:	fbb2 f6f3 	udiv	r6, r2, r3
 800acc2:	d32e      	bcc.n	800ad22 <quorem+0x96>
 800acc4:	f04f 0a00 	mov.w	sl, #0
 800acc8:	46c4      	mov	ip, r8
 800acca:	46ae      	mov	lr, r5
 800accc:	46d3      	mov	fp, sl
 800acce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800acd2:	b298      	uxth	r0, r3
 800acd4:	fb06 a000 	mla	r0, r6, r0, sl
 800acd8:	0c02      	lsrs	r2, r0, #16
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	fb06 2303 	mla	r3, r6, r3, r2
 800ace0:	f8de 2000 	ldr.w	r2, [lr]
 800ace4:	b280      	uxth	r0, r0
 800ace6:	b292      	uxth	r2, r2
 800ace8:	1a12      	subs	r2, r2, r0
 800acea:	445a      	add	r2, fp
 800acec:	f8de 0000 	ldr.w	r0, [lr]
 800acf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800acfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800acfe:	b292      	uxth	r2, r2
 800ad00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad04:	45e1      	cmp	r9, ip
 800ad06:	f84e 2b04 	str.w	r2, [lr], #4
 800ad0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad0e:	d2de      	bcs.n	800acce <quorem+0x42>
 800ad10:	9b00      	ldr	r3, [sp, #0]
 800ad12:	58eb      	ldr	r3, [r5, r3]
 800ad14:	b92b      	cbnz	r3, 800ad22 <quorem+0x96>
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	3b04      	subs	r3, #4
 800ad1a:	429d      	cmp	r5, r3
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	d32f      	bcc.n	800ad80 <quorem+0xf4>
 800ad20:	613c      	str	r4, [r7, #16]
 800ad22:	4638      	mov	r0, r7
 800ad24:	f001 f9c4 	bl	800c0b0 <__mcmp>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	db25      	blt.n	800ad78 <quorem+0xec>
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	2000      	movs	r0, #0
 800ad30:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad34:	f8d1 c000 	ldr.w	ip, [r1]
 800ad38:	fa1f fe82 	uxth.w	lr, r2
 800ad3c:	fa1f f38c 	uxth.w	r3, ip
 800ad40:	eba3 030e 	sub.w	r3, r3, lr
 800ad44:	4403      	add	r3, r0
 800ad46:	0c12      	lsrs	r2, r2, #16
 800ad48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad56:	45c1      	cmp	r9, r8
 800ad58:	f841 3b04 	str.w	r3, [r1], #4
 800ad5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad60:	d2e6      	bcs.n	800ad30 <quorem+0xa4>
 800ad62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad6a:	b922      	cbnz	r2, 800ad76 <quorem+0xea>
 800ad6c:	3b04      	subs	r3, #4
 800ad6e:	429d      	cmp	r5, r3
 800ad70:	461a      	mov	r2, r3
 800ad72:	d30b      	bcc.n	800ad8c <quorem+0x100>
 800ad74:	613c      	str	r4, [r7, #16]
 800ad76:	3601      	adds	r6, #1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	b003      	add	sp, #12
 800ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad80:	6812      	ldr	r2, [r2, #0]
 800ad82:	3b04      	subs	r3, #4
 800ad84:	2a00      	cmp	r2, #0
 800ad86:	d1cb      	bne.n	800ad20 <quorem+0x94>
 800ad88:	3c01      	subs	r4, #1
 800ad8a:	e7c6      	b.n	800ad1a <quorem+0x8e>
 800ad8c:	6812      	ldr	r2, [r2, #0]
 800ad8e:	3b04      	subs	r3, #4
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	d1ef      	bne.n	800ad74 <quorem+0xe8>
 800ad94:	3c01      	subs	r4, #1
 800ad96:	e7ea      	b.n	800ad6e <quorem+0xe2>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	e7ee      	b.n	800ad7a <quorem+0xee>
 800ad9c:	0000      	movs	r0, r0
	...

0800ada0 <_dtoa_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	69c7      	ldr	r7, [r0, #28]
 800ada6:	b099      	sub	sp, #100	@ 0x64
 800ada8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800adac:	ec55 4b10 	vmov	r4, r5, d0
 800adb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800adb2:	9109      	str	r1, [sp, #36]	@ 0x24
 800adb4:	4683      	mov	fp, r0
 800adb6:	920e      	str	r2, [sp, #56]	@ 0x38
 800adb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adba:	b97f      	cbnz	r7, 800addc <_dtoa_r+0x3c>
 800adbc:	2010      	movs	r0, #16
 800adbe:	f000 fdfd 	bl	800b9bc <malloc>
 800adc2:	4602      	mov	r2, r0
 800adc4:	f8cb 001c 	str.w	r0, [fp, #28]
 800adc8:	b920      	cbnz	r0, 800add4 <_dtoa_r+0x34>
 800adca:	4ba7      	ldr	r3, [pc, #668]	@ (800b068 <_dtoa_r+0x2c8>)
 800adcc:	21ef      	movs	r1, #239	@ 0xef
 800adce:	48a7      	ldr	r0, [pc, #668]	@ (800b06c <_dtoa_r+0x2cc>)
 800add0:	f002 fc36 	bl	800d640 <__assert_func>
 800add4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800add8:	6007      	str	r7, [r0, #0]
 800adda:	60c7      	str	r7, [r0, #12]
 800addc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ade0:	6819      	ldr	r1, [r3, #0]
 800ade2:	b159      	cbz	r1, 800adfc <_dtoa_r+0x5c>
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	604a      	str	r2, [r1, #4]
 800ade8:	2301      	movs	r3, #1
 800adea:	4093      	lsls	r3, r2
 800adec:	608b      	str	r3, [r1, #8]
 800adee:	4658      	mov	r0, fp
 800adf0:	f000 feda 	bl	800bba8 <_Bfree>
 800adf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
 800adfc:	1e2b      	subs	r3, r5, #0
 800adfe:	bfb9      	ittee	lt
 800ae00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae04:	9303      	strlt	r3, [sp, #12]
 800ae06:	2300      	movge	r3, #0
 800ae08:	6033      	strge	r3, [r6, #0]
 800ae0a:	9f03      	ldr	r7, [sp, #12]
 800ae0c:	4b98      	ldr	r3, [pc, #608]	@ (800b070 <_dtoa_r+0x2d0>)
 800ae0e:	bfbc      	itt	lt
 800ae10:	2201      	movlt	r2, #1
 800ae12:	6032      	strlt	r2, [r6, #0]
 800ae14:	43bb      	bics	r3, r7
 800ae16:	d112      	bne.n	800ae3e <_dtoa_r+0x9e>
 800ae18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae1e:	6013      	str	r3, [r2, #0]
 800ae20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae24:	4323      	orrs	r3, r4
 800ae26:	f000 854d 	beq.w	800b8c4 <_dtoa_r+0xb24>
 800ae2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b084 <_dtoa_r+0x2e4>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 854f 	beq.w	800b8d4 <_dtoa_r+0xb34>
 800ae36:	f10a 0303 	add.w	r3, sl, #3
 800ae3a:	f000 bd49 	b.w	800b8d0 <_dtoa_r+0xb30>
 800ae3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae42:	2200      	movs	r2, #0
 800ae44:	ec51 0b17 	vmov	r0, r1, d7
 800ae48:	2300      	movs	r3, #0
 800ae4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ae4e:	f7f5 fe13 	bl	8000a78 <__aeabi_dcmpeq>
 800ae52:	4680      	mov	r8, r0
 800ae54:	b158      	cbz	r0, 800ae6e <_dtoa_r+0xce>
 800ae56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae58:	2301      	movs	r3, #1
 800ae5a:	6013      	str	r3, [r2, #0]
 800ae5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae5e:	b113      	cbz	r3, 800ae66 <_dtoa_r+0xc6>
 800ae60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae62:	4b84      	ldr	r3, [pc, #528]	@ (800b074 <_dtoa_r+0x2d4>)
 800ae64:	6013      	str	r3, [r2, #0]
 800ae66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b088 <_dtoa_r+0x2e8>
 800ae6a:	f000 bd33 	b.w	800b8d4 <_dtoa_r+0xb34>
 800ae6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae72:	aa16      	add	r2, sp, #88	@ 0x58
 800ae74:	a917      	add	r1, sp, #92	@ 0x5c
 800ae76:	4658      	mov	r0, fp
 800ae78:	f001 fa3a 	bl	800c2f0 <__d2b>
 800ae7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ae80:	4681      	mov	r9, r0
 800ae82:	2e00      	cmp	r6, #0
 800ae84:	d077      	beq.n	800af76 <_dtoa_r+0x1d6>
 800ae86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ae8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aea0:	4619      	mov	r1, r3
 800aea2:	2200      	movs	r2, #0
 800aea4:	4b74      	ldr	r3, [pc, #464]	@ (800b078 <_dtoa_r+0x2d8>)
 800aea6:	f7f5 f9c7 	bl	8000238 <__aeabi_dsub>
 800aeaa:	a369      	add	r3, pc, #420	@ (adr r3, 800b050 <_dtoa_r+0x2b0>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	f7f5 fb7a 	bl	80005a8 <__aeabi_dmul>
 800aeb4:	a368      	add	r3, pc, #416	@ (adr r3, 800b058 <_dtoa_r+0x2b8>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 f9bf 	bl	800023c <__adddf3>
 800aebe:	4604      	mov	r4, r0
 800aec0:	4630      	mov	r0, r6
 800aec2:	460d      	mov	r5, r1
 800aec4:	f7f5 fb06 	bl	80004d4 <__aeabi_i2d>
 800aec8:	a365      	add	r3, pc, #404	@ (adr r3, 800b060 <_dtoa_r+0x2c0>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 fb6b 	bl	80005a8 <__aeabi_dmul>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4620      	mov	r0, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 f9af 	bl	800023c <__adddf3>
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	f7f5 fe11 	bl	8000b08 <__aeabi_d2iz>
 800aee6:	2200      	movs	r2, #0
 800aee8:	4607      	mov	r7, r0
 800aeea:	2300      	movs	r3, #0
 800aeec:	4620      	mov	r0, r4
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 fdcc 	bl	8000a8c <__aeabi_dcmplt>
 800aef4:	b140      	cbz	r0, 800af08 <_dtoa_r+0x168>
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7f5 faec 	bl	80004d4 <__aeabi_i2d>
 800aefc:	4622      	mov	r2, r4
 800aefe:	462b      	mov	r3, r5
 800af00:	f7f5 fdba 	bl	8000a78 <__aeabi_dcmpeq>
 800af04:	b900      	cbnz	r0, 800af08 <_dtoa_r+0x168>
 800af06:	3f01      	subs	r7, #1
 800af08:	2f16      	cmp	r7, #22
 800af0a:	d851      	bhi.n	800afb0 <_dtoa_r+0x210>
 800af0c:	4b5b      	ldr	r3, [pc, #364]	@ (800b07c <_dtoa_r+0x2dc>)
 800af0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af1a:	f7f5 fdb7 	bl	8000a8c <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d048      	beq.n	800afb4 <_dtoa_r+0x214>
 800af22:	3f01      	subs	r7, #1
 800af24:	2300      	movs	r3, #0
 800af26:	9312      	str	r3, [sp, #72]	@ 0x48
 800af28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800af2a:	1b9b      	subs	r3, r3, r6
 800af2c:	1e5a      	subs	r2, r3, #1
 800af2e:	bf44      	itt	mi
 800af30:	f1c3 0801 	rsbmi	r8, r3, #1
 800af34:	2300      	movmi	r3, #0
 800af36:	9208      	str	r2, [sp, #32]
 800af38:	bf54      	ite	pl
 800af3a:	f04f 0800 	movpl.w	r8, #0
 800af3e:	9308      	strmi	r3, [sp, #32]
 800af40:	2f00      	cmp	r7, #0
 800af42:	db39      	blt.n	800afb8 <_dtoa_r+0x218>
 800af44:	9b08      	ldr	r3, [sp, #32]
 800af46:	970f      	str	r7, [sp, #60]	@ 0x3c
 800af48:	443b      	add	r3, r7
 800af4a:	9308      	str	r3, [sp, #32]
 800af4c:	2300      	movs	r3, #0
 800af4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800af50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af52:	2b09      	cmp	r3, #9
 800af54:	d864      	bhi.n	800b020 <_dtoa_r+0x280>
 800af56:	2b05      	cmp	r3, #5
 800af58:	bfc4      	itt	gt
 800af5a:	3b04      	subgt	r3, #4
 800af5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800af5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af60:	f1a3 0302 	sub.w	r3, r3, #2
 800af64:	bfcc      	ite	gt
 800af66:	2400      	movgt	r4, #0
 800af68:	2401      	movle	r4, #1
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d863      	bhi.n	800b036 <_dtoa_r+0x296>
 800af6e:	e8df f003 	tbb	[pc, r3]
 800af72:	372a      	.short	0x372a
 800af74:	5535      	.short	0x5535
 800af76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800af7a:	441e      	add	r6, r3
 800af7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af80:	2b20      	cmp	r3, #32
 800af82:	bfc1      	itttt	gt
 800af84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af88:	409f      	lslgt	r7, r3
 800af8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af92:	bfd6      	itet	le
 800af94:	f1c3 0320 	rsble	r3, r3, #32
 800af98:	ea47 0003 	orrgt.w	r0, r7, r3
 800af9c:	fa04 f003 	lslle.w	r0, r4, r3
 800afa0:	f7f5 fa88 	bl	80004b4 <__aeabi_ui2d>
 800afa4:	2201      	movs	r2, #1
 800afa6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800afaa:	3e01      	subs	r6, #1
 800afac:	9214      	str	r2, [sp, #80]	@ 0x50
 800afae:	e777      	b.n	800aea0 <_dtoa_r+0x100>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e7b8      	b.n	800af26 <_dtoa_r+0x186>
 800afb4:	9012      	str	r0, [sp, #72]	@ 0x48
 800afb6:	e7b7      	b.n	800af28 <_dtoa_r+0x188>
 800afb8:	427b      	negs	r3, r7
 800afba:	930a      	str	r3, [sp, #40]	@ 0x28
 800afbc:	2300      	movs	r3, #0
 800afbe:	eba8 0807 	sub.w	r8, r8, r7
 800afc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afc4:	e7c4      	b.n	800af50 <_dtoa_r+0x1b0>
 800afc6:	2300      	movs	r3, #0
 800afc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc35      	bgt.n	800b03c <_dtoa_r+0x29c>
 800afd0:	2301      	movs	r3, #1
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	9307      	str	r3, [sp, #28]
 800afd6:	461a      	mov	r2, r3
 800afd8:	920e      	str	r2, [sp, #56]	@ 0x38
 800afda:	e00b      	b.n	800aff4 <_dtoa_r+0x254>
 800afdc:	2301      	movs	r3, #1
 800afde:	e7f3      	b.n	800afc8 <_dtoa_r+0x228>
 800afe0:	2300      	movs	r3, #0
 800afe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe6:	18fb      	adds	r3, r7, r3
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	2b01      	cmp	r3, #1
 800afee:	9307      	str	r3, [sp, #28]
 800aff0:	bfb8      	it	lt
 800aff2:	2301      	movlt	r3, #1
 800aff4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aff8:	2100      	movs	r1, #0
 800affa:	2204      	movs	r2, #4
 800affc:	f102 0514 	add.w	r5, r2, #20
 800b000:	429d      	cmp	r5, r3
 800b002:	d91f      	bls.n	800b044 <_dtoa_r+0x2a4>
 800b004:	6041      	str	r1, [r0, #4]
 800b006:	4658      	mov	r0, fp
 800b008:	f000 fd8e 	bl	800bb28 <_Balloc>
 800b00c:	4682      	mov	sl, r0
 800b00e:	2800      	cmp	r0, #0
 800b010:	d13c      	bne.n	800b08c <_dtoa_r+0x2ec>
 800b012:	4b1b      	ldr	r3, [pc, #108]	@ (800b080 <_dtoa_r+0x2e0>)
 800b014:	4602      	mov	r2, r0
 800b016:	f240 11af 	movw	r1, #431	@ 0x1af
 800b01a:	e6d8      	b.n	800adce <_dtoa_r+0x2e>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e7e0      	b.n	800afe2 <_dtoa_r+0x242>
 800b020:	2401      	movs	r4, #1
 800b022:	2300      	movs	r3, #0
 800b024:	9309      	str	r3, [sp, #36]	@ 0x24
 800b026:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b028:	f04f 33ff 	mov.w	r3, #4294967295
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	9307      	str	r3, [sp, #28]
 800b030:	2200      	movs	r2, #0
 800b032:	2312      	movs	r3, #18
 800b034:	e7d0      	b.n	800afd8 <_dtoa_r+0x238>
 800b036:	2301      	movs	r3, #1
 800b038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b03a:	e7f5      	b.n	800b028 <_dtoa_r+0x288>
 800b03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	9307      	str	r3, [sp, #28]
 800b042:	e7d7      	b.n	800aff4 <_dtoa_r+0x254>
 800b044:	3101      	adds	r1, #1
 800b046:	0052      	lsls	r2, r2, #1
 800b048:	e7d8      	b.n	800affc <_dtoa_r+0x25c>
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w
 800b050:	636f4361 	.word	0x636f4361
 800b054:	3fd287a7 	.word	0x3fd287a7
 800b058:	8b60c8b3 	.word	0x8b60c8b3
 800b05c:	3fc68a28 	.word	0x3fc68a28
 800b060:	509f79fb 	.word	0x509f79fb
 800b064:	3fd34413 	.word	0x3fd34413
 800b068:	0800e67e 	.word	0x0800e67e
 800b06c:	0800e695 	.word	0x0800e695
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	0800e649 	.word	0x0800e649
 800b078:	3ff80000 	.word	0x3ff80000
 800b07c:	0800e790 	.word	0x0800e790
 800b080:	0800e6ed 	.word	0x0800e6ed
 800b084:	0800e67a 	.word	0x0800e67a
 800b088:	0800e648 	.word	0x0800e648
 800b08c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b090:	6018      	str	r0, [r3, #0]
 800b092:	9b07      	ldr	r3, [sp, #28]
 800b094:	2b0e      	cmp	r3, #14
 800b096:	f200 80a4 	bhi.w	800b1e2 <_dtoa_r+0x442>
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	f000 80a1 	beq.w	800b1e2 <_dtoa_r+0x442>
 800b0a0:	2f00      	cmp	r7, #0
 800b0a2:	dd33      	ble.n	800b10c <_dtoa_r+0x36c>
 800b0a4:	4bad      	ldr	r3, [pc, #692]	@ (800b35c <_dtoa_r+0x5bc>)
 800b0a6:	f007 020f 	and.w	r2, r7, #15
 800b0aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ae:	ed93 7b00 	vldr	d7, [r3]
 800b0b2:	05f8      	lsls	r0, r7, #23
 800b0b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b0b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b0bc:	d516      	bpl.n	800b0ec <_dtoa_r+0x34c>
 800b0be:	4ba8      	ldr	r3, [pc, #672]	@ (800b360 <_dtoa_r+0x5c0>)
 800b0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0c8:	f7f5 fb98 	bl	80007fc <__aeabi_ddiv>
 800b0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d0:	f004 040f 	and.w	r4, r4, #15
 800b0d4:	2603      	movs	r6, #3
 800b0d6:	4da2      	ldr	r5, [pc, #648]	@ (800b360 <_dtoa_r+0x5c0>)
 800b0d8:	b954      	cbnz	r4, 800b0f0 <_dtoa_r+0x350>
 800b0da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e2:	f7f5 fb8b 	bl	80007fc <__aeabi_ddiv>
 800b0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ea:	e028      	b.n	800b13e <_dtoa_r+0x39e>
 800b0ec:	2602      	movs	r6, #2
 800b0ee:	e7f2      	b.n	800b0d6 <_dtoa_r+0x336>
 800b0f0:	07e1      	lsls	r1, r4, #31
 800b0f2:	d508      	bpl.n	800b106 <_dtoa_r+0x366>
 800b0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0fc:	f7f5 fa54 	bl	80005a8 <__aeabi_dmul>
 800b100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b104:	3601      	adds	r6, #1
 800b106:	1064      	asrs	r4, r4, #1
 800b108:	3508      	adds	r5, #8
 800b10a:	e7e5      	b.n	800b0d8 <_dtoa_r+0x338>
 800b10c:	f000 80d2 	beq.w	800b2b4 <_dtoa_r+0x514>
 800b110:	427c      	negs	r4, r7
 800b112:	4b92      	ldr	r3, [pc, #584]	@ (800b35c <_dtoa_r+0x5bc>)
 800b114:	4d92      	ldr	r5, [pc, #584]	@ (800b360 <_dtoa_r+0x5c0>)
 800b116:	f004 020f 	and.w	r2, r4, #15
 800b11a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b126:	f7f5 fa3f 	bl	80005a8 <__aeabi_dmul>
 800b12a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b12e:	1124      	asrs	r4, r4, #4
 800b130:	2300      	movs	r3, #0
 800b132:	2602      	movs	r6, #2
 800b134:	2c00      	cmp	r4, #0
 800b136:	f040 80b2 	bne.w	800b29e <_dtoa_r+0x4fe>
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1d3      	bne.n	800b0e6 <_dtoa_r+0x346>
 800b13e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b140:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80b7 	beq.w	800b2b8 <_dtoa_r+0x518>
 800b14a:	4b86      	ldr	r3, [pc, #536]	@ (800b364 <_dtoa_r+0x5c4>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fc9b 	bl	8000a8c <__aeabi_dcmplt>
 800b156:	2800      	cmp	r0, #0
 800b158:	f000 80ae 	beq.w	800b2b8 <_dtoa_r+0x518>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 80aa 	beq.w	800b2b8 <_dtoa_r+0x518>
 800b164:	9b00      	ldr	r3, [sp, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	dd37      	ble.n	800b1da <_dtoa_r+0x43a>
 800b16a:	1e7b      	subs	r3, r7, #1
 800b16c:	9304      	str	r3, [sp, #16]
 800b16e:	4620      	mov	r0, r4
 800b170:	4b7d      	ldr	r3, [pc, #500]	@ (800b368 <_dtoa_r+0x5c8>)
 800b172:	2200      	movs	r2, #0
 800b174:	4629      	mov	r1, r5
 800b176:	f7f5 fa17 	bl	80005a8 <__aeabi_dmul>
 800b17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b17e:	9c00      	ldr	r4, [sp, #0]
 800b180:	3601      	adds	r6, #1
 800b182:	4630      	mov	r0, r6
 800b184:	f7f5 f9a6 	bl	80004d4 <__aeabi_i2d>
 800b188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b18c:	f7f5 fa0c 	bl	80005a8 <__aeabi_dmul>
 800b190:	4b76      	ldr	r3, [pc, #472]	@ (800b36c <_dtoa_r+0x5cc>)
 800b192:	2200      	movs	r2, #0
 800b194:	f7f5 f852 	bl	800023c <__adddf3>
 800b198:	4605      	mov	r5, r0
 800b19a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b19e:	2c00      	cmp	r4, #0
 800b1a0:	f040 808d 	bne.w	800b2be <_dtoa_r+0x51e>
 800b1a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a8:	4b71      	ldr	r3, [pc, #452]	@ (800b370 <_dtoa_r+0x5d0>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f7f5 f844 	bl	8000238 <__aeabi_dsub>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4633      	mov	r3, r6
 800b1bc:	f7f5 fc84 	bl	8000ac8 <__aeabi_dcmpgt>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f040 828b 	bne.w	800b6dc <_dtoa_r+0x93c>
 800b1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ca:	462a      	mov	r2, r5
 800b1cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1d0:	f7f5 fc5c 	bl	8000a8c <__aeabi_dcmplt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	f040 8128 	bne.w	800b42a <_dtoa_r+0x68a>
 800b1da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b1de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b1e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f2c0 815a 	blt.w	800b49e <_dtoa_r+0x6fe>
 800b1ea:	2f0e      	cmp	r7, #14
 800b1ec:	f300 8157 	bgt.w	800b49e <_dtoa_r+0x6fe>
 800b1f0:	4b5a      	ldr	r3, [pc, #360]	@ (800b35c <_dtoa_r+0x5bc>)
 800b1f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1f6:	ed93 7b00 	vldr	d7, [r3]
 800b1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	ed8d 7b00 	vstr	d7, [sp]
 800b202:	da03      	bge.n	800b20c <_dtoa_r+0x46c>
 800b204:	9b07      	ldr	r3, [sp, #28]
 800b206:	2b00      	cmp	r3, #0
 800b208:	f340 8101 	ble.w	800b40e <_dtoa_r+0x66e>
 800b20c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b210:	4656      	mov	r6, sl
 800b212:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 faef 	bl	80007fc <__aeabi_ddiv>
 800b21e:	f7f5 fc73 	bl	8000b08 <__aeabi_d2iz>
 800b222:	4680      	mov	r8, r0
 800b224:	f7f5 f956 	bl	80004d4 <__aeabi_i2d>
 800b228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b22c:	f7f5 f9bc 	bl	80005a8 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4620      	mov	r0, r4
 800b236:	4629      	mov	r1, r5
 800b238:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b23c:	f7f4 fffc 	bl	8000238 <__aeabi_dsub>
 800b240:	f806 4b01 	strb.w	r4, [r6], #1
 800b244:	9d07      	ldr	r5, [sp, #28]
 800b246:	eba6 040a 	sub.w	r4, r6, sl
 800b24a:	42a5      	cmp	r5, r4
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	f040 8117 	bne.w	800b482 <_dtoa_r+0x6e2>
 800b254:	f7f4 fff2 	bl	800023c <__adddf3>
 800b258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b25c:	4604      	mov	r4, r0
 800b25e:	460d      	mov	r5, r1
 800b260:	f7f5 fc32 	bl	8000ac8 <__aeabi_dcmpgt>
 800b264:	2800      	cmp	r0, #0
 800b266:	f040 80f9 	bne.w	800b45c <_dtoa_r+0x6bc>
 800b26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 fc01 	bl	8000a78 <__aeabi_dcmpeq>
 800b276:	b118      	cbz	r0, 800b280 <_dtoa_r+0x4e0>
 800b278:	f018 0f01 	tst.w	r8, #1
 800b27c:	f040 80ee 	bne.w	800b45c <_dtoa_r+0x6bc>
 800b280:	4649      	mov	r1, r9
 800b282:	4658      	mov	r0, fp
 800b284:	f000 fc90 	bl	800bba8 <_Bfree>
 800b288:	2300      	movs	r3, #0
 800b28a:	7033      	strb	r3, [r6, #0]
 800b28c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b28e:	3701      	adds	r7, #1
 800b290:	601f      	str	r7, [r3, #0]
 800b292:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 831d 	beq.w	800b8d4 <_dtoa_r+0xb34>
 800b29a:	601e      	str	r6, [r3, #0]
 800b29c:	e31a      	b.n	800b8d4 <_dtoa_r+0xb34>
 800b29e:	07e2      	lsls	r2, r4, #31
 800b2a0:	d505      	bpl.n	800b2ae <_dtoa_r+0x50e>
 800b2a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2a6:	f7f5 f97f 	bl	80005a8 <__aeabi_dmul>
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	1064      	asrs	r4, r4, #1
 800b2b0:	3508      	adds	r5, #8
 800b2b2:	e73f      	b.n	800b134 <_dtoa_r+0x394>
 800b2b4:	2602      	movs	r6, #2
 800b2b6:	e742      	b.n	800b13e <_dtoa_r+0x39e>
 800b2b8:	9c07      	ldr	r4, [sp, #28]
 800b2ba:	9704      	str	r7, [sp, #16]
 800b2bc:	e761      	b.n	800b182 <_dtoa_r+0x3e2>
 800b2be:	4b27      	ldr	r3, [pc, #156]	@ (800b35c <_dtoa_r+0x5bc>)
 800b2c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2ca:	4454      	add	r4, sl
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	d053      	beq.n	800b378 <_dtoa_r+0x5d8>
 800b2d0:	4928      	ldr	r1, [pc, #160]	@ (800b374 <_dtoa_r+0x5d4>)
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	f7f5 fa92 	bl	80007fc <__aeabi_ddiv>
 800b2d8:	4633      	mov	r3, r6
 800b2da:	462a      	mov	r2, r5
 800b2dc:	f7f4 ffac 	bl	8000238 <__aeabi_dsub>
 800b2e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2e4:	4656      	mov	r6, sl
 800b2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ea:	f7f5 fc0d 	bl	8000b08 <__aeabi_d2iz>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	f7f5 f8f0 	bl	80004d4 <__aeabi_i2d>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2fc:	f7f4 ff9c 	bl	8000238 <__aeabi_dsub>
 800b300:	3530      	adds	r5, #48	@ 0x30
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b30a:	f806 5b01 	strb.w	r5, [r6], #1
 800b30e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b312:	f7f5 fbbb 	bl	8000a8c <__aeabi_dcmplt>
 800b316:	2800      	cmp	r0, #0
 800b318:	d171      	bne.n	800b3fe <_dtoa_r+0x65e>
 800b31a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b31e:	4911      	ldr	r1, [pc, #68]	@ (800b364 <_dtoa_r+0x5c4>)
 800b320:	2000      	movs	r0, #0
 800b322:	f7f4 ff89 	bl	8000238 <__aeabi_dsub>
 800b326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b32a:	f7f5 fbaf 	bl	8000a8c <__aeabi_dcmplt>
 800b32e:	2800      	cmp	r0, #0
 800b330:	f040 8095 	bne.w	800b45e <_dtoa_r+0x6be>
 800b334:	42a6      	cmp	r6, r4
 800b336:	f43f af50 	beq.w	800b1da <_dtoa_r+0x43a>
 800b33a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b33e:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <_dtoa_r+0x5c8>)
 800b340:	2200      	movs	r2, #0
 800b342:	f7f5 f931 	bl	80005a8 <__aeabi_dmul>
 800b346:	4b08      	ldr	r3, [pc, #32]	@ (800b368 <_dtoa_r+0x5c8>)
 800b348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b34c:	2200      	movs	r2, #0
 800b34e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b352:	f7f5 f929 	bl	80005a8 <__aeabi_dmul>
 800b356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35a:	e7c4      	b.n	800b2e6 <_dtoa_r+0x546>
 800b35c:	0800e790 	.word	0x0800e790
 800b360:	0800e768 	.word	0x0800e768
 800b364:	3ff00000 	.word	0x3ff00000
 800b368:	40240000 	.word	0x40240000
 800b36c:	401c0000 	.word	0x401c0000
 800b370:	40140000 	.word	0x40140000
 800b374:	3fe00000 	.word	0x3fe00000
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	f7f5 f914 	bl	80005a8 <__aeabi_dmul>
 800b380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b384:	9415      	str	r4, [sp, #84]	@ 0x54
 800b386:	4656      	mov	r6, sl
 800b388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b38c:	f7f5 fbbc 	bl	8000b08 <__aeabi_d2iz>
 800b390:	4605      	mov	r5, r0
 800b392:	f7f5 f89f 	bl	80004d4 <__aeabi_i2d>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b39e:	f7f4 ff4b 	bl	8000238 <__aeabi_dsub>
 800b3a2:	3530      	adds	r5, #48	@ 0x30
 800b3a4:	f806 5b01 	strb.w	r5, [r6], #1
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3b2:	f04f 0200 	mov.w	r2, #0
 800b3b6:	d124      	bne.n	800b402 <_dtoa_r+0x662>
 800b3b8:	4bac      	ldr	r3, [pc, #688]	@ (800b66c <_dtoa_r+0x8cc>)
 800b3ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3be:	f7f4 ff3d 	bl	800023c <__adddf3>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ca:	f7f5 fb7d 	bl	8000ac8 <__aeabi_dcmpgt>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d145      	bne.n	800b45e <_dtoa_r+0x6be>
 800b3d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3d6:	49a5      	ldr	r1, [pc, #660]	@ (800b66c <_dtoa_r+0x8cc>)
 800b3d8:	2000      	movs	r0, #0
 800b3da:	f7f4 ff2d 	bl	8000238 <__aeabi_dsub>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e6:	f7f5 fb51 	bl	8000a8c <__aeabi_dcmplt>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f aef5 	beq.w	800b1da <_dtoa_r+0x43a>
 800b3f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b3f2:	1e73      	subs	r3, r6, #1
 800b3f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b3f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3fa:	2b30      	cmp	r3, #48	@ 0x30
 800b3fc:	d0f8      	beq.n	800b3f0 <_dtoa_r+0x650>
 800b3fe:	9f04      	ldr	r7, [sp, #16]
 800b400:	e73e      	b.n	800b280 <_dtoa_r+0x4e0>
 800b402:	4b9b      	ldr	r3, [pc, #620]	@ (800b670 <_dtoa_r+0x8d0>)
 800b404:	f7f5 f8d0 	bl	80005a8 <__aeabi_dmul>
 800b408:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40c:	e7bc      	b.n	800b388 <_dtoa_r+0x5e8>
 800b40e:	d10c      	bne.n	800b42a <_dtoa_r+0x68a>
 800b410:	4b98      	ldr	r3, [pc, #608]	@ (800b674 <_dtoa_r+0x8d4>)
 800b412:	2200      	movs	r2, #0
 800b414:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b418:	f7f5 f8c6 	bl	80005a8 <__aeabi_dmul>
 800b41c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b420:	f7f5 fb48 	bl	8000ab4 <__aeabi_dcmpge>
 800b424:	2800      	cmp	r0, #0
 800b426:	f000 8157 	beq.w	800b6d8 <_dtoa_r+0x938>
 800b42a:	2400      	movs	r4, #0
 800b42c:	4625      	mov	r5, r4
 800b42e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b430:	43db      	mvns	r3, r3
 800b432:	9304      	str	r3, [sp, #16]
 800b434:	4656      	mov	r6, sl
 800b436:	2700      	movs	r7, #0
 800b438:	4621      	mov	r1, r4
 800b43a:	4658      	mov	r0, fp
 800b43c:	f000 fbb4 	bl	800bba8 <_Bfree>
 800b440:	2d00      	cmp	r5, #0
 800b442:	d0dc      	beq.n	800b3fe <_dtoa_r+0x65e>
 800b444:	b12f      	cbz	r7, 800b452 <_dtoa_r+0x6b2>
 800b446:	42af      	cmp	r7, r5
 800b448:	d003      	beq.n	800b452 <_dtoa_r+0x6b2>
 800b44a:	4639      	mov	r1, r7
 800b44c:	4658      	mov	r0, fp
 800b44e:	f000 fbab 	bl	800bba8 <_Bfree>
 800b452:	4629      	mov	r1, r5
 800b454:	4658      	mov	r0, fp
 800b456:	f000 fba7 	bl	800bba8 <_Bfree>
 800b45a:	e7d0      	b.n	800b3fe <_dtoa_r+0x65e>
 800b45c:	9704      	str	r7, [sp, #16]
 800b45e:	4633      	mov	r3, r6
 800b460:	461e      	mov	r6, r3
 800b462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b466:	2a39      	cmp	r2, #57	@ 0x39
 800b468:	d107      	bne.n	800b47a <_dtoa_r+0x6da>
 800b46a:	459a      	cmp	sl, r3
 800b46c:	d1f8      	bne.n	800b460 <_dtoa_r+0x6c0>
 800b46e:	9a04      	ldr	r2, [sp, #16]
 800b470:	3201      	adds	r2, #1
 800b472:	9204      	str	r2, [sp, #16]
 800b474:	2230      	movs	r2, #48	@ 0x30
 800b476:	f88a 2000 	strb.w	r2, [sl]
 800b47a:	781a      	ldrb	r2, [r3, #0]
 800b47c:	3201      	adds	r2, #1
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	e7bd      	b.n	800b3fe <_dtoa_r+0x65e>
 800b482:	4b7b      	ldr	r3, [pc, #492]	@ (800b670 <_dtoa_r+0x8d0>)
 800b484:	2200      	movs	r2, #0
 800b486:	f7f5 f88f 	bl	80005a8 <__aeabi_dmul>
 800b48a:	2200      	movs	r2, #0
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	f7f5 faf1 	bl	8000a78 <__aeabi_dcmpeq>
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f aebb 	beq.w	800b212 <_dtoa_r+0x472>
 800b49c:	e6f0      	b.n	800b280 <_dtoa_r+0x4e0>
 800b49e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	f000 80db 	beq.w	800b65c <_dtoa_r+0x8bc>
 800b4a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4a8:	2a01      	cmp	r2, #1
 800b4aa:	f300 80bf 	bgt.w	800b62c <_dtoa_r+0x88c>
 800b4ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	f000 80b7 	beq.w	800b624 <_dtoa_r+0x884>
 800b4b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b4ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b4bc:	4646      	mov	r6, r8
 800b4be:	9a08      	ldr	r2, [sp, #32]
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	441a      	add	r2, r3
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	4498      	add	r8, r3
 800b4c8:	9208      	str	r2, [sp, #32]
 800b4ca:	f000 fc6b 	bl	800bda4 <__i2b>
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	b15e      	cbz	r6, 800b4ea <_dtoa_r+0x74a>
 800b4d2:	9b08      	ldr	r3, [sp, #32]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	dd08      	ble.n	800b4ea <_dtoa_r+0x74a>
 800b4d8:	42b3      	cmp	r3, r6
 800b4da:	9a08      	ldr	r2, [sp, #32]
 800b4dc:	bfa8      	it	ge
 800b4de:	4633      	movge	r3, r6
 800b4e0:	eba8 0803 	sub.w	r8, r8, r3
 800b4e4:	1af6      	subs	r6, r6, r3
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	9308      	str	r3, [sp, #32]
 800b4ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ec:	b1f3      	cbz	r3, 800b52c <_dtoa_r+0x78c>
 800b4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80b7 	beq.w	800b664 <_dtoa_r+0x8c4>
 800b4f6:	b18c      	cbz	r4, 800b51c <_dtoa_r+0x77c>
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	4658      	mov	r0, fp
 800b4fe:	f000 fd11 	bl	800bf24 <__pow5mult>
 800b502:	464a      	mov	r2, r9
 800b504:	4601      	mov	r1, r0
 800b506:	4605      	mov	r5, r0
 800b508:	4658      	mov	r0, fp
 800b50a:	f000 fc61 	bl	800bdd0 <__multiply>
 800b50e:	4649      	mov	r1, r9
 800b510:	9004      	str	r0, [sp, #16]
 800b512:	4658      	mov	r0, fp
 800b514:	f000 fb48 	bl	800bba8 <_Bfree>
 800b518:	9b04      	ldr	r3, [sp, #16]
 800b51a:	4699      	mov	r9, r3
 800b51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b51e:	1b1a      	subs	r2, r3, r4
 800b520:	d004      	beq.n	800b52c <_dtoa_r+0x78c>
 800b522:	4649      	mov	r1, r9
 800b524:	4658      	mov	r0, fp
 800b526:	f000 fcfd 	bl	800bf24 <__pow5mult>
 800b52a:	4681      	mov	r9, r0
 800b52c:	2101      	movs	r1, #1
 800b52e:	4658      	mov	r0, fp
 800b530:	f000 fc38 	bl	800bda4 <__i2b>
 800b534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b536:	4604      	mov	r4, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 81cf 	beq.w	800b8dc <_dtoa_r+0xb3c>
 800b53e:	461a      	mov	r2, r3
 800b540:	4601      	mov	r1, r0
 800b542:	4658      	mov	r0, fp
 800b544:	f000 fcee 	bl	800bf24 <__pow5mult>
 800b548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	4604      	mov	r4, r0
 800b54e:	f300 8095 	bgt.w	800b67c <_dtoa_r+0x8dc>
 800b552:	9b02      	ldr	r3, [sp, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	f040 8087 	bne.w	800b668 <_dtoa_r+0x8c8>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b560:	2b00      	cmp	r3, #0
 800b562:	f040 8089 	bne.w	800b678 <_dtoa_r+0x8d8>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b56c:	0d1b      	lsrs	r3, r3, #20
 800b56e:	051b      	lsls	r3, r3, #20
 800b570:	b12b      	cbz	r3, 800b57e <_dtoa_r+0x7de>
 800b572:	9b08      	ldr	r3, [sp, #32]
 800b574:	3301      	adds	r3, #1
 800b576:	9308      	str	r3, [sp, #32]
 800b578:	f108 0801 	add.w	r8, r8, #1
 800b57c:	2301      	movs	r3, #1
 800b57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b582:	2b00      	cmp	r3, #0
 800b584:	f000 81b0 	beq.w	800b8e8 <_dtoa_r+0xb48>
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b58e:	6918      	ldr	r0, [r3, #16]
 800b590:	f000 fbbc 	bl	800bd0c <__hi0bits>
 800b594:	f1c0 0020 	rsb	r0, r0, #32
 800b598:	9b08      	ldr	r3, [sp, #32]
 800b59a:	4418      	add	r0, r3
 800b59c:	f010 001f 	ands.w	r0, r0, #31
 800b5a0:	d077      	beq.n	800b692 <_dtoa_r+0x8f2>
 800b5a2:	f1c0 0320 	rsb	r3, r0, #32
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	dd6b      	ble.n	800b682 <_dtoa_r+0x8e2>
 800b5aa:	9b08      	ldr	r3, [sp, #32]
 800b5ac:	f1c0 001c 	rsb	r0, r0, #28
 800b5b0:	4403      	add	r3, r0
 800b5b2:	4480      	add	r8, r0
 800b5b4:	4406      	add	r6, r0
 800b5b6:	9308      	str	r3, [sp, #32]
 800b5b8:	f1b8 0f00 	cmp.w	r8, #0
 800b5bc:	dd05      	ble.n	800b5ca <_dtoa_r+0x82a>
 800b5be:	4649      	mov	r1, r9
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	4658      	mov	r0, fp
 800b5c4:	f000 fd08 	bl	800bfd8 <__lshift>
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	9b08      	ldr	r3, [sp, #32]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dd05      	ble.n	800b5dc <_dtoa_r+0x83c>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4658      	mov	r0, fp
 800b5d6:	f000 fcff 	bl	800bfd8 <__lshift>
 800b5da:	4604      	mov	r4, r0
 800b5dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d059      	beq.n	800b696 <_dtoa_r+0x8f6>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4648      	mov	r0, r9
 800b5e6:	f000 fd63 	bl	800c0b0 <__mcmp>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	da53      	bge.n	800b696 <_dtoa_r+0x8f6>
 800b5ee:	1e7b      	subs	r3, r7, #1
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	4658      	mov	r0, fp
 800b5fa:	f000 faf7 	bl	800bbec <__multadd>
 800b5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b600:	4681      	mov	r9, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 8172 	beq.w	800b8ec <_dtoa_r+0xb4c>
 800b608:	2300      	movs	r3, #0
 800b60a:	4629      	mov	r1, r5
 800b60c:	220a      	movs	r2, #10
 800b60e:	4658      	mov	r0, fp
 800b610:	f000 faec 	bl	800bbec <__multadd>
 800b614:	9b00      	ldr	r3, [sp, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	4605      	mov	r5, r0
 800b61a:	dc67      	bgt.n	800b6ec <_dtoa_r+0x94c>
 800b61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61e:	2b02      	cmp	r3, #2
 800b620:	dc41      	bgt.n	800b6a6 <_dtoa_r+0x906>
 800b622:	e063      	b.n	800b6ec <_dtoa_r+0x94c>
 800b624:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b626:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b62a:	e746      	b.n	800b4ba <_dtoa_r+0x71a>
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	1e5c      	subs	r4, r3, #1
 800b630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b632:	42a3      	cmp	r3, r4
 800b634:	bfbf      	itttt	lt
 800b636:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b638:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b63a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b63c:	1ae3      	sublt	r3, r4, r3
 800b63e:	bfb4      	ite	lt
 800b640:	18d2      	addlt	r2, r2, r3
 800b642:	1b1c      	subge	r4, r3, r4
 800b644:	9b07      	ldr	r3, [sp, #28]
 800b646:	bfbc      	itt	lt
 800b648:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b64a:	2400      	movlt	r4, #0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bfb5      	itete	lt
 800b650:	eba8 0603 	sublt.w	r6, r8, r3
 800b654:	9b07      	ldrge	r3, [sp, #28]
 800b656:	2300      	movlt	r3, #0
 800b658:	4646      	movge	r6, r8
 800b65a:	e730      	b.n	800b4be <_dtoa_r+0x71e>
 800b65c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b65e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b660:	4646      	mov	r6, r8
 800b662:	e735      	b.n	800b4d0 <_dtoa_r+0x730>
 800b664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b666:	e75c      	b.n	800b522 <_dtoa_r+0x782>
 800b668:	2300      	movs	r3, #0
 800b66a:	e788      	b.n	800b57e <_dtoa_r+0x7de>
 800b66c:	3fe00000 	.word	0x3fe00000
 800b670:	40240000 	.word	0x40240000
 800b674:	40140000 	.word	0x40140000
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	e780      	b.n	800b57e <_dtoa_r+0x7de>
 800b67c:	2300      	movs	r3, #0
 800b67e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b680:	e782      	b.n	800b588 <_dtoa_r+0x7e8>
 800b682:	d099      	beq.n	800b5b8 <_dtoa_r+0x818>
 800b684:	9a08      	ldr	r2, [sp, #32]
 800b686:	331c      	adds	r3, #28
 800b688:	441a      	add	r2, r3
 800b68a:	4498      	add	r8, r3
 800b68c:	441e      	add	r6, r3
 800b68e:	9208      	str	r2, [sp, #32]
 800b690:	e792      	b.n	800b5b8 <_dtoa_r+0x818>
 800b692:	4603      	mov	r3, r0
 800b694:	e7f6      	b.n	800b684 <_dtoa_r+0x8e4>
 800b696:	9b07      	ldr	r3, [sp, #28]
 800b698:	9704      	str	r7, [sp, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dc20      	bgt.n	800b6e0 <_dtoa_r+0x940>
 800b69e:	9300      	str	r3, [sp, #0]
 800b6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	dd1e      	ble.n	800b6e4 <_dtoa_r+0x944>
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f47f aec0 	bne.w	800b42e <_dtoa_r+0x68e>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	2205      	movs	r2, #5
 800b6b2:	4658      	mov	r0, fp
 800b6b4:	f000 fa9a 	bl	800bbec <__multadd>
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4648      	mov	r0, r9
 800b6be:	f000 fcf7 	bl	800c0b0 <__mcmp>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	f77f aeb3 	ble.w	800b42e <_dtoa_r+0x68e>
 800b6c8:	4656      	mov	r6, sl
 800b6ca:	2331      	movs	r3, #49	@ 0x31
 800b6cc:	f806 3b01 	strb.w	r3, [r6], #1
 800b6d0:	9b04      	ldr	r3, [sp, #16]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	9304      	str	r3, [sp, #16]
 800b6d6:	e6ae      	b.n	800b436 <_dtoa_r+0x696>
 800b6d8:	9c07      	ldr	r4, [sp, #28]
 800b6da:	9704      	str	r7, [sp, #16]
 800b6dc:	4625      	mov	r5, r4
 800b6de:	e7f3      	b.n	800b6c8 <_dtoa_r+0x928>
 800b6e0:	9b07      	ldr	r3, [sp, #28]
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 8104 	beq.w	800b8f4 <_dtoa_r+0xb54>
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	dd05      	ble.n	800b6fc <_dtoa_r+0x95c>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4632      	mov	r2, r6
 800b6f4:	4658      	mov	r0, fp
 800b6f6:	f000 fc6f 	bl	800bfd8 <__lshift>
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d05a      	beq.n	800b7b8 <_dtoa_r+0xa18>
 800b702:	6869      	ldr	r1, [r5, #4]
 800b704:	4658      	mov	r0, fp
 800b706:	f000 fa0f 	bl	800bb28 <_Balloc>
 800b70a:	4606      	mov	r6, r0
 800b70c:	b928      	cbnz	r0, 800b71a <_dtoa_r+0x97a>
 800b70e:	4b84      	ldr	r3, [pc, #528]	@ (800b920 <_dtoa_r+0xb80>)
 800b710:	4602      	mov	r2, r0
 800b712:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b716:	f7ff bb5a 	b.w	800adce <_dtoa_r+0x2e>
 800b71a:	692a      	ldr	r2, [r5, #16]
 800b71c:	3202      	adds	r2, #2
 800b71e:	0092      	lsls	r2, r2, #2
 800b720:	f105 010c 	add.w	r1, r5, #12
 800b724:	300c      	adds	r0, #12
 800b726:	f001 ff75 	bl	800d614 <memcpy>
 800b72a:	2201      	movs	r2, #1
 800b72c:	4631      	mov	r1, r6
 800b72e:	4658      	mov	r0, fp
 800b730:	f000 fc52 	bl	800bfd8 <__lshift>
 800b734:	f10a 0301 	add.w	r3, sl, #1
 800b738:	9307      	str	r3, [sp, #28]
 800b73a:	9b00      	ldr	r3, [sp, #0]
 800b73c:	4453      	add	r3, sl
 800b73e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b740:	9b02      	ldr	r3, [sp, #8]
 800b742:	f003 0301 	and.w	r3, r3, #1
 800b746:	462f      	mov	r7, r5
 800b748:	930a      	str	r3, [sp, #40]	@ 0x28
 800b74a:	4605      	mov	r5, r0
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	4621      	mov	r1, r4
 800b750:	3b01      	subs	r3, #1
 800b752:	4648      	mov	r0, r9
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	f7ff fa99 	bl	800ac8c <quorem>
 800b75a:	4639      	mov	r1, r7
 800b75c:	9002      	str	r0, [sp, #8]
 800b75e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b762:	4648      	mov	r0, r9
 800b764:	f000 fca4 	bl	800c0b0 <__mcmp>
 800b768:	462a      	mov	r2, r5
 800b76a:	9008      	str	r0, [sp, #32]
 800b76c:	4621      	mov	r1, r4
 800b76e:	4658      	mov	r0, fp
 800b770:	f000 fcba 	bl	800c0e8 <__mdiff>
 800b774:	68c2      	ldr	r2, [r0, #12]
 800b776:	4606      	mov	r6, r0
 800b778:	bb02      	cbnz	r2, 800b7bc <_dtoa_r+0xa1c>
 800b77a:	4601      	mov	r1, r0
 800b77c:	4648      	mov	r0, r9
 800b77e:	f000 fc97 	bl	800c0b0 <__mcmp>
 800b782:	4602      	mov	r2, r0
 800b784:	4631      	mov	r1, r6
 800b786:	4658      	mov	r0, fp
 800b788:	920e      	str	r2, [sp, #56]	@ 0x38
 800b78a:	f000 fa0d 	bl	800bba8 <_Bfree>
 800b78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b792:	9e07      	ldr	r6, [sp, #28]
 800b794:	ea43 0102 	orr.w	r1, r3, r2
 800b798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b79a:	4319      	orrs	r1, r3
 800b79c:	d110      	bne.n	800b7c0 <_dtoa_r+0xa20>
 800b79e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7a2:	d029      	beq.n	800b7f8 <_dtoa_r+0xa58>
 800b7a4:	9b08      	ldr	r3, [sp, #32]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	dd02      	ble.n	800b7b0 <_dtoa_r+0xa10>
 800b7aa:	9b02      	ldr	r3, [sp, #8]
 800b7ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b7b0:	9b00      	ldr	r3, [sp, #0]
 800b7b2:	f883 8000 	strb.w	r8, [r3]
 800b7b6:	e63f      	b.n	800b438 <_dtoa_r+0x698>
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	e7bb      	b.n	800b734 <_dtoa_r+0x994>
 800b7bc:	2201      	movs	r2, #1
 800b7be:	e7e1      	b.n	800b784 <_dtoa_r+0x9e4>
 800b7c0:	9b08      	ldr	r3, [sp, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	db04      	blt.n	800b7d0 <_dtoa_r+0xa30>
 800b7c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7c8:	430b      	orrs	r3, r1
 800b7ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7cc:	430b      	orrs	r3, r1
 800b7ce:	d120      	bne.n	800b812 <_dtoa_r+0xa72>
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	dded      	ble.n	800b7b0 <_dtoa_r+0xa10>
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	4658      	mov	r0, fp
 800b7da:	f000 fbfd 	bl	800bfd8 <__lshift>
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4681      	mov	r9, r0
 800b7e2:	f000 fc65 	bl	800c0b0 <__mcmp>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	dc03      	bgt.n	800b7f2 <_dtoa_r+0xa52>
 800b7ea:	d1e1      	bne.n	800b7b0 <_dtoa_r+0xa10>
 800b7ec:	f018 0f01 	tst.w	r8, #1
 800b7f0:	d0de      	beq.n	800b7b0 <_dtoa_r+0xa10>
 800b7f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7f6:	d1d8      	bne.n	800b7aa <_dtoa_r+0xa0a>
 800b7f8:	9a00      	ldr	r2, [sp, #0]
 800b7fa:	2339      	movs	r3, #57	@ 0x39
 800b7fc:	7013      	strb	r3, [r2, #0]
 800b7fe:	4633      	mov	r3, r6
 800b800:	461e      	mov	r6, r3
 800b802:	3b01      	subs	r3, #1
 800b804:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b808:	2a39      	cmp	r2, #57	@ 0x39
 800b80a:	d052      	beq.n	800b8b2 <_dtoa_r+0xb12>
 800b80c:	3201      	adds	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e612      	b.n	800b438 <_dtoa_r+0x698>
 800b812:	2a00      	cmp	r2, #0
 800b814:	dd07      	ble.n	800b826 <_dtoa_r+0xa86>
 800b816:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b81a:	d0ed      	beq.n	800b7f8 <_dtoa_r+0xa58>
 800b81c:	9a00      	ldr	r2, [sp, #0]
 800b81e:	f108 0301 	add.w	r3, r8, #1
 800b822:	7013      	strb	r3, [r2, #0]
 800b824:	e608      	b.n	800b438 <_dtoa_r+0x698>
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	9a07      	ldr	r2, [sp, #28]
 800b82a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b830:	4293      	cmp	r3, r2
 800b832:	d028      	beq.n	800b886 <_dtoa_r+0xae6>
 800b834:	4649      	mov	r1, r9
 800b836:	2300      	movs	r3, #0
 800b838:	220a      	movs	r2, #10
 800b83a:	4658      	mov	r0, fp
 800b83c:	f000 f9d6 	bl	800bbec <__multadd>
 800b840:	42af      	cmp	r7, r5
 800b842:	4681      	mov	r9, r0
 800b844:	f04f 0300 	mov.w	r3, #0
 800b848:	f04f 020a 	mov.w	r2, #10
 800b84c:	4639      	mov	r1, r7
 800b84e:	4658      	mov	r0, fp
 800b850:	d107      	bne.n	800b862 <_dtoa_r+0xac2>
 800b852:	f000 f9cb 	bl	800bbec <__multadd>
 800b856:	4607      	mov	r7, r0
 800b858:	4605      	mov	r5, r0
 800b85a:	9b07      	ldr	r3, [sp, #28]
 800b85c:	3301      	adds	r3, #1
 800b85e:	9307      	str	r3, [sp, #28]
 800b860:	e774      	b.n	800b74c <_dtoa_r+0x9ac>
 800b862:	f000 f9c3 	bl	800bbec <__multadd>
 800b866:	4629      	mov	r1, r5
 800b868:	4607      	mov	r7, r0
 800b86a:	2300      	movs	r3, #0
 800b86c:	220a      	movs	r2, #10
 800b86e:	4658      	mov	r0, fp
 800b870:	f000 f9bc 	bl	800bbec <__multadd>
 800b874:	4605      	mov	r5, r0
 800b876:	e7f0      	b.n	800b85a <_dtoa_r+0xaba>
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfcc      	ite	gt
 800b87e:	461e      	movgt	r6, r3
 800b880:	2601      	movle	r6, #1
 800b882:	4456      	add	r6, sl
 800b884:	2700      	movs	r7, #0
 800b886:	4649      	mov	r1, r9
 800b888:	2201      	movs	r2, #1
 800b88a:	4658      	mov	r0, fp
 800b88c:	f000 fba4 	bl	800bfd8 <__lshift>
 800b890:	4621      	mov	r1, r4
 800b892:	4681      	mov	r9, r0
 800b894:	f000 fc0c 	bl	800c0b0 <__mcmp>
 800b898:	2800      	cmp	r0, #0
 800b89a:	dcb0      	bgt.n	800b7fe <_dtoa_r+0xa5e>
 800b89c:	d102      	bne.n	800b8a4 <_dtoa_r+0xb04>
 800b89e:	f018 0f01 	tst.w	r8, #1
 800b8a2:	d1ac      	bne.n	800b7fe <_dtoa_r+0xa5e>
 800b8a4:	4633      	mov	r3, r6
 800b8a6:	461e      	mov	r6, r3
 800b8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8ac:	2a30      	cmp	r2, #48	@ 0x30
 800b8ae:	d0fa      	beq.n	800b8a6 <_dtoa_r+0xb06>
 800b8b0:	e5c2      	b.n	800b438 <_dtoa_r+0x698>
 800b8b2:	459a      	cmp	sl, r3
 800b8b4:	d1a4      	bne.n	800b800 <_dtoa_r+0xa60>
 800b8b6:	9b04      	ldr	r3, [sp, #16]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	2331      	movs	r3, #49	@ 0x31
 800b8be:	f88a 3000 	strb.w	r3, [sl]
 800b8c2:	e5b9      	b.n	800b438 <_dtoa_r+0x698>
 800b8c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b924 <_dtoa_r+0xb84>
 800b8ca:	b11b      	cbz	r3, 800b8d4 <_dtoa_r+0xb34>
 800b8cc:	f10a 0308 	add.w	r3, sl, #8
 800b8d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	b019      	add	sp, #100	@ 0x64
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	f77f ae37 	ble.w	800b552 <_dtoa_r+0x7b2>
 800b8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	e655      	b.n	800b598 <_dtoa_r+0x7f8>
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f77f aed6 	ble.w	800b6a0 <_dtoa_r+0x900>
 800b8f4:	4656      	mov	r6, sl
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4648      	mov	r0, r9
 800b8fa:	f7ff f9c7 	bl	800ac8c <quorem>
 800b8fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b902:	f806 8b01 	strb.w	r8, [r6], #1
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	eba6 020a 	sub.w	r2, r6, sl
 800b90c:	4293      	cmp	r3, r2
 800b90e:	ddb3      	ble.n	800b878 <_dtoa_r+0xad8>
 800b910:	4649      	mov	r1, r9
 800b912:	2300      	movs	r3, #0
 800b914:	220a      	movs	r2, #10
 800b916:	4658      	mov	r0, fp
 800b918:	f000 f968 	bl	800bbec <__multadd>
 800b91c:	4681      	mov	r9, r0
 800b91e:	e7ea      	b.n	800b8f6 <_dtoa_r+0xb56>
 800b920:	0800e6ed 	.word	0x0800e6ed
 800b924:	0800e671 	.word	0x0800e671

0800b928 <_free_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4605      	mov	r5, r0
 800b92c:	2900      	cmp	r1, #0
 800b92e:	d041      	beq.n	800b9b4 <_free_r+0x8c>
 800b930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b934:	1f0c      	subs	r4, r1, #4
 800b936:	2b00      	cmp	r3, #0
 800b938:	bfb8      	it	lt
 800b93a:	18e4      	addlt	r4, r4, r3
 800b93c:	f000 f8e8 	bl	800bb10 <__malloc_lock>
 800b940:	4a1d      	ldr	r2, [pc, #116]	@ (800b9b8 <_free_r+0x90>)
 800b942:	6813      	ldr	r3, [r2, #0]
 800b944:	b933      	cbnz	r3, 800b954 <_free_r+0x2c>
 800b946:	6063      	str	r3, [r4, #4]
 800b948:	6014      	str	r4, [r2, #0]
 800b94a:	4628      	mov	r0, r5
 800b94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b950:	f000 b8e4 	b.w	800bb1c <__malloc_unlock>
 800b954:	42a3      	cmp	r3, r4
 800b956:	d908      	bls.n	800b96a <_free_r+0x42>
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	1821      	adds	r1, r4, r0
 800b95c:	428b      	cmp	r3, r1
 800b95e:	bf01      	itttt	eq
 800b960:	6819      	ldreq	r1, [r3, #0]
 800b962:	685b      	ldreq	r3, [r3, #4]
 800b964:	1809      	addeq	r1, r1, r0
 800b966:	6021      	streq	r1, [r4, #0]
 800b968:	e7ed      	b.n	800b946 <_free_r+0x1e>
 800b96a:	461a      	mov	r2, r3
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	b10b      	cbz	r3, 800b974 <_free_r+0x4c>
 800b970:	42a3      	cmp	r3, r4
 800b972:	d9fa      	bls.n	800b96a <_free_r+0x42>
 800b974:	6811      	ldr	r1, [r2, #0]
 800b976:	1850      	adds	r0, r2, r1
 800b978:	42a0      	cmp	r0, r4
 800b97a:	d10b      	bne.n	800b994 <_free_r+0x6c>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	4401      	add	r1, r0
 800b980:	1850      	adds	r0, r2, r1
 800b982:	4283      	cmp	r3, r0
 800b984:	6011      	str	r1, [r2, #0]
 800b986:	d1e0      	bne.n	800b94a <_free_r+0x22>
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	6053      	str	r3, [r2, #4]
 800b98e:	4408      	add	r0, r1
 800b990:	6010      	str	r0, [r2, #0]
 800b992:	e7da      	b.n	800b94a <_free_r+0x22>
 800b994:	d902      	bls.n	800b99c <_free_r+0x74>
 800b996:	230c      	movs	r3, #12
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	e7d6      	b.n	800b94a <_free_r+0x22>
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	1821      	adds	r1, r4, r0
 800b9a0:	428b      	cmp	r3, r1
 800b9a2:	bf04      	itt	eq
 800b9a4:	6819      	ldreq	r1, [r3, #0]
 800b9a6:	685b      	ldreq	r3, [r3, #4]
 800b9a8:	6063      	str	r3, [r4, #4]
 800b9aa:	bf04      	itt	eq
 800b9ac:	1809      	addeq	r1, r1, r0
 800b9ae:	6021      	streq	r1, [r4, #0]
 800b9b0:	6054      	str	r4, [r2, #4]
 800b9b2:	e7ca      	b.n	800b94a <_free_r+0x22>
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	200028ec 	.word	0x200028ec

0800b9bc <malloc>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	@ (800b9c8 <malloc+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f000 b825 	b.w	800ba10 <_malloc_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000034 	.word	0x20000034

0800b9cc <sbrk_aligned>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	4e0f      	ldr	r6, [pc, #60]	@ (800ba0c <sbrk_aligned+0x40>)
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	6831      	ldr	r1, [r6, #0]
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	b911      	cbnz	r1, 800b9de <sbrk_aligned+0x12>
 800b9d8:	f001 fe0c 	bl	800d5f4 <_sbrk_r>
 800b9dc:	6030      	str	r0, [r6, #0]
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	f001 fe07 	bl	800d5f4 <_sbrk_r>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	d103      	bne.n	800b9f2 <sbrk_aligned+0x26>
 800b9ea:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	1cc4      	adds	r4, r0, #3
 800b9f4:	f024 0403 	bic.w	r4, r4, #3
 800b9f8:	42a0      	cmp	r0, r4
 800b9fa:	d0f8      	beq.n	800b9ee <sbrk_aligned+0x22>
 800b9fc:	1a21      	subs	r1, r4, r0
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f001 fdf8 	bl	800d5f4 <_sbrk_r>
 800ba04:	3001      	adds	r0, #1
 800ba06:	d1f2      	bne.n	800b9ee <sbrk_aligned+0x22>
 800ba08:	e7ef      	b.n	800b9ea <sbrk_aligned+0x1e>
 800ba0a:	bf00      	nop
 800ba0c:	200028e8 	.word	0x200028e8

0800ba10 <_malloc_r>:
 800ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba14:	1ccd      	adds	r5, r1, #3
 800ba16:	f025 0503 	bic.w	r5, r5, #3
 800ba1a:	3508      	adds	r5, #8
 800ba1c:	2d0c      	cmp	r5, #12
 800ba1e:	bf38      	it	cc
 800ba20:	250c      	movcc	r5, #12
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	4606      	mov	r6, r0
 800ba26:	db01      	blt.n	800ba2c <_malloc_r+0x1c>
 800ba28:	42a9      	cmp	r1, r5
 800ba2a:	d904      	bls.n	800ba36 <_malloc_r+0x26>
 800ba2c:	230c      	movs	r3, #12
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	2000      	movs	r0, #0
 800ba32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb0c <_malloc_r+0xfc>
 800ba3a:	f000 f869 	bl	800bb10 <__malloc_lock>
 800ba3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba42:	461c      	mov	r4, r3
 800ba44:	bb44      	cbnz	r4, 800ba98 <_malloc_r+0x88>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4630      	mov	r0, r6
 800ba4a:	f7ff ffbf 	bl	800b9cc <sbrk_aligned>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	4604      	mov	r4, r0
 800ba52:	d158      	bne.n	800bb06 <_malloc_r+0xf6>
 800ba54:	f8d8 4000 	ldr.w	r4, [r8]
 800ba58:	4627      	mov	r7, r4
 800ba5a:	2f00      	cmp	r7, #0
 800ba5c:	d143      	bne.n	800bae6 <_malloc_r+0xd6>
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	d04b      	beq.n	800bafa <_malloc_r+0xea>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	4639      	mov	r1, r7
 800ba66:	4630      	mov	r0, r6
 800ba68:	eb04 0903 	add.w	r9, r4, r3
 800ba6c:	f001 fdc2 	bl	800d5f4 <_sbrk_r>
 800ba70:	4581      	cmp	r9, r0
 800ba72:	d142      	bne.n	800bafa <_malloc_r+0xea>
 800ba74:	6821      	ldr	r1, [r4, #0]
 800ba76:	1a6d      	subs	r5, r5, r1
 800ba78:	4629      	mov	r1, r5
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	f7ff ffa6 	bl	800b9cc <sbrk_aligned>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d03a      	beq.n	800bafa <_malloc_r+0xea>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	442b      	add	r3, r5
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	bb62      	cbnz	r2, 800baec <_malloc_r+0xdc>
 800ba92:	f8c8 7000 	str.w	r7, [r8]
 800ba96:	e00f      	b.n	800bab8 <_malloc_r+0xa8>
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	1b52      	subs	r2, r2, r5
 800ba9c:	d420      	bmi.n	800bae0 <_malloc_r+0xd0>
 800ba9e:	2a0b      	cmp	r2, #11
 800baa0:	d917      	bls.n	800bad2 <_malloc_r+0xc2>
 800baa2:	1961      	adds	r1, r4, r5
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	6025      	str	r5, [r4, #0]
 800baa8:	bf18      	it	ne
 800baaa:	6059      	strne	r1, [r3, #4]
 800baac:	6863      	ldr	r3, [r4, #4]
 800baae:	bf08      	it	eq
 800bab0:	f8c8 1000 	streq.w	r1, [r8]
 800bab4:	5162      	str	r2, [r4, r5]
 800bab6:	604b      	str	r3, [r1, #4]
 800bab8:	4630      	mov	r0, r6
 800baba:	f000 f82f 	bl	800bb1c <__malloc_unlock>
 800babe:	f104 000b 	add.w	r0, r4, #11
 800bac2:	1d23      	adds	r3, r4, #4
 800bac4:	f020 0007 	bic.w	r0, r0, #7
 800bac8:	1ac2      	subs	r2, r0, r3
 800baca:	bf1c      	itt	ne
 800bacc:	1a1b      	subne	r3, r3, r0
 800bace:	50a3      	strne	r3, [r4, r2]
 800bad0:	e7af      	b.n	800ba32 <_malloc_r+0x22>
 800bad2:	6862      	ldr	r2, [r4, #4]
 800bad4:	42a3      	cmp	r3, r4
 800bad6:	bf0c      	ite	eq
 800bad8:	f8c8 2000 	streq.w	r2, [r8]
 800badc:	605a      	strne	r2, [r3, #4]
 800bade:	e7eb      	b.n	800bab8 <_malloc_r+0xa8>
 800bae0:	4623      	mov	r3, r4
 800bae2:	6864      	ldr	r4, [r4, #4]
 800bae4:	e7ae      	b.n	800ba44 <_malloc_r+0x34>
 800bae6:	463c      	mov	r4, r7
 800bae8:	687f      	ldr	r7, [r7, #4]
 800baea:	e7b6      	b.n	800ba5a <_malloc_r+0x4a>
 800baec:	461a      	mov	r2, r3
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	42a3      	cmp	r3, r4
 800baf2:	d1fb      	bne.n	800baec <_malloc_r+0xdc>
 800baf4:	2300      	movs	r3, #0
 800baf6:	6053      	str	r3, [r2, #4]
 800baf8:	e7de      	b.n	800bab8 <_malloc_r+0xa8>
 800bafa:	230c      	movs	r3, #12
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	4630      	mov	r0, r6
 800bb00:	f000 f80c 	bl	800bb1c <__malloc_unlock>
 800bb04:	e794      	b.n	800ba30 <_malloc_r+0x20>
 800bb06:	6005      	str	r5, [r0, #0]
 800bb08:	e7d6      	b.n	800bab8 <_malloc_r+0xa8>
 800bb0a:	bf00      	nop
 800bb0c:	200028ec 	.word	0x200028ec

0800bb10 <__malloc_lock>:
 800bb10:	4801      	ldr	r0, [pc, #4]	@ (800bb18 <__malloc_lock+0x8>)
 800bb12:	f7ff b8b2 	b.w	800ac7a <__retarget_lock_acquire_recursive>
 800bb16:	bf00      	nop
 800bb18:	200028e4 	.word	0x200028e4

0800bb1c <__malloc_unlock>:
 800bb1c:	4801      	ldr	r0, [pc, #4]	@ (800bb24 <__malloc_unlock+0x8>)
 800bb1e:	f7ff b8ad 	b.w	800ac7c <__retarget_lock_release_recursive>
 800bb22:	bf00      	nop
 800bb24:	200028e4 	.word	0x200028e4

0800bb28 <_Balloc>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	69c6      	ldr	r6, [r0, #28]
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	460d      	mov	r5, r1
 800bb30:	b976      	cbnz	r6, 800bb50 <_Balloc+0x28>
 800bb32:	2010      	movs	r0, #16
 800bb34:	f7ff ff42 	bl	800b9bc <malloc>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	61e0      	str	r0, [r4, #28]
 800bb3c:	b920      	cbnz	r0, 800bb48 <_Balloc+0x20>
 800bb3e:	4b18      	ldr	r3, [pc, #96]	@ (800bba0 <_Balloc+0x78>)
 800bb40:	4818      	ldr	r0, [pc, #96]	@ (800bba4 <_Balloc+0x7c>)
 800bb42:	216b      	movs	r1, #107	@ 0x6b
 800bb44:	f001 fd7c 	bl	800d640 <__assert_func>
 800bb48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb4c:	6006      	str	r6, [r0, #0]
 800bb4e:	60c6      	str	r6, [r0, #12]
 800bb50:	69e6      	ldr	r6, [r4, #28]
 800bb52:	68f3      	ldr	r3, [r6, #12]
 800bb54:	b183      	cbz	r3, 800bb78 <_Balloc+0x50>
 800bb56:	69e3      	ldr	r3, [r4, #28]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb5e:	b9b8      	cbnz	r0, 800bb90 <_Balloc+0x68>
 800bb60:	2101      	movs	r1, #1
 800bb62:	fa01 f605 	lsl.w	r6, r1, r5
 800bb66:	1d72      	adds	r2, r6, #5
 800bb68:	0092      	lsls	r2, r2, #2
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f001 fd86 	bl	800d67c <_calloc_r>
 800bb70:	b160      	cbz	r0, 800bb8c <_Balloc+0x64>
 800bb72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb76:	e00e      	b.n	800bb96 <_Balloc+0x6e>
 800bb78:	2221      	movs	r2, #33	@ 0x21
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 fd7d 	bl	800d67c <_calloc_r>
 800bb82:	69e3      	ldr	r3, [r4, #28]
 800bb84:	60f0      	str	r0, [r6, #12]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e4      	bne.n	800bb56 <_Balloc+0x2e>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	6802      	ldr	r2, [r0, #0]
 800bb92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb96:	2300      	movs	r3, #0
 800bb98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb9c:	e7f7      	b.n	800bb8e <_Balloc+0x66>
 800bb9e:	bf00      	nop
 800bba0:	0800e67e 	.word	0x0800e67e
 800bba4:	0800e6fe 	.word	0x0800e6fe

0800bba8 <_Bfree>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	69c6      	ldr	r6, [r0, #28]
 800bbac:	4605      	mov	r5, r0
 800bbae:	460c      	mov	r4, r1
 800bbb0:	b976      	cbnz	r6, 800bbd0 <_Bfree+0x28>
 800bbb2:	2010      	movs	r0, #16
 800bbb4:	f7ff ff02 	bl	800b9bc <malloc>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	61e8      	str	r0, [r5, #28]
 800bbbc:	b920      	cbnz	r0, 800bbc8 <_Bfree+0x20>
 800bbbe:	4b09      	ldr	r3, [pc, #36]	@ (800bbe4 <_Bfree+0x3c>)
 800bbc0:	4809      	ldr	r0, [pc, #36]	@ (800bbe8 <_Bfree+0x40>)
 800bbc2:	218f      	movs	r1, #143	@ 0x8f
 800bbc4:	f001 fd3c 	bl	800d640 <__assert_func>
 800bbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbcc:	6006      	str	r6, [r0, #0]
 800bbce:	60c6      	str	r6, [r0, #12]
 800bbd0:	b13c      	cbz	r4, 800bbe2 <_Bfree+0x3a>
 800bbd2:	69eb      	ldr	r3, [r5, #28]
 800bbd4:	6862      	ldr	r2, [r4, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbdc:	6021      	str	r1, [r4, #0]
 800bbde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
 800bbe4:	0800e67e 	.word	0x0800e67e
 800bbe8:	0800e6fe 	.word	0x0800e6fe

0800bbec <__multadd>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	690d      	ldr	r5, [r1, #16]
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	461e      	mov	r6, r3
 800bbf8:	f101 0c14 	add.w	ip, r1, #20
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f8dc 3000 	ldr.w	r3, [ip]
 800bc02:	b299      	uxth	r1, r3
 800bc04:	fb02 6101 	mla	r1, r2, r1, r6
 800bc08:	0c1e      	lsrs	r6, r3, #16
 800bc0a:	0c0b      	lsrs	r3, r1, #16
 800bc0c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc10:	b289      	uxth	r1, r1
 800bc12:	3001      	adds	r0, #1
 800bc14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc18:	4285      	cmp	r5, r0
 800bc1a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc22:	dcec      	bgt.n	800bbfe <__multadd+0x12>
 800bc24:	b30e      	cbz	r6, 800bc6a <__multadd+0x7e>
 800bc26:	68a3      	ldr	r3, [r4, #8]
 800bc28:	42ab      	cmp	r3, r5
 800bc2a:	dc19      	bgt.n	800bc60 <__multadd+0x74>
 800bc2c:	6861      	ldr	r1, [r4, #4]
 800bc2e:	4638      	mov	r0, r7
 800bc30:	3101      	adds	r1, #1
 800bc32:	f7ff ff79 	bl	800bb28 <_Balloc>
 800bc36:	4680      	mov	r8, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <__multadd+0x5a>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc70 <__multadd+0x84>)
 800bc3e:	480d      	ldr	r0, [pc, #52]	@ (800bc74 <__multadd+0x88>)
 800bc40:	21ba      	movs	r1, #186	@ 0xba
 800bc42:	f001 fcfd 	bl	800d640 <__assert_func>
 800bc46:	6922      	ldr	r2, [r4, #16]
 800bc48:	3202      	adds	r2, #2
 800bc4a:	f104 010c 	add.w	r1, r4, #12
 800bc4e:	0092      	lsls	r2, r2, #2
 800bc50:	300c      	adds	r0, #12
 800bc52:	f001 fcdf 	bl	800d614 <memcpy>
 800bc56:	4621      	mov	r1, r4
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ffa5 	bl	800bba8 <_Bfree>
 800bc5e:	4644      	mov	r4, r8
 800bc60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc64:	3501      	adds	r5, #1
 800bc66:	615e      	str	r6, [r3, #20]
 800bc68:	6125      	str	r5, [r4, #16]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc70:	0800e6ed 	.word	0x0800e6ed
 800bc74:	0800e6fe 	.word	0x0800e6fe

0800bc78 <__s2b>:
 800bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	4615      	mov	r5, r2
 800bc80:	461f      	mov	r7, r3
 800bc82:	2209      	movs	r2, #9
 800bc84:	3308      	adds	r3, #8
 800bc86:	4606      	mov	r6, r0
 800bc88:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	2201      	movs	r2, #1
 800bc90:	429a      	cmp	r2, r3
 800bc92:	db09      	blt.n	800bca8 <__s2b+0x30>
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ff47 	bl	800bb28 <_Balloc>
 800bc9a:	b940      	cbnz	r0, 800bcae <__s2b+0x36>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	4b19      	ldr	r3, [pc, #100]	@ (800bd04 <__s2b+0x8c>)
 800bca0:	4819      	ldr	r0, [pc, #100]	@ (800bd08 <__s2b+0x90>)
 800bca2:	21d3      	movs	r1, #211	@ 0xd3
 800bca4:	f001 fccc 	bl	800d640 <__assert_func>
 800bca8:	0052      	lsls	r2, r2, #1
 800bcaa:	3101      	adds	r1, #1
 800bcac:	e7f0      	b.n	800bc90 <__s2b+0x18>
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	6143      	str	r3, [r0, #20]
 800bcb2:	2d09      	cmp	r5, #9
 800bcb4:	f04f 0301 	mov.w	r3, #1
 800bcb8:	6103      	str	r3, [r0, #16]
 800bcba:	dd16      	ble.n	800bcea <__s2b+0x72>
 800bcbc:	f104 0909 	add.w	r9, r4, #9
 800bcc0:	46c8      	mov	r8, r9
 800bcc2:	442c      	add	r4, r5
 800bcc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcc8:	4601      	mov	r1, r0
 800bcca:	3b30      	subs	r3, #48	@ 0x30
 800bccc:	220a      	movs	r2, #10
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7ff ff8c 	bl	800bbec <__multadd>
 800bcd4:	45a0      	cmp	r8, r4
 800bcd6:	d1f5      	bne.n	800bcc4 <__s2b+0x4c>
 800bcd8:	f1a5 0408 	sub.w	r4, r5, #8
 800bcdc:	444c      	add	r4, r9
 800bcde:	1b2d      	subs	r5, r5, r4
 800bce0:	1963      	adds	r3, r4, r5
 800bce2:	42bb      	cmp	r3, r7
 800bce4:	db04      	blt.n	800bcf0 <__s2b+0x78>
 800bce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcea:	340a      	adds	r4, #10
 800bcec:	2509      	movs	r5, #9
 800bcee:	e7f6      	b.n	800bcde <__s2b+0x66>
 800bcf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	3b30      	subs	r3, #48	@ 0x30
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ff76 	bl	800bbec <__multadd>
 800bd00:	e7ee      	b.n	800bce0 <__s2b+0x68>
 800bd02:	bf00      	nop
 800bd04:	0800e6ed 	.word	0x0800e6ed
 800bd08:	0800e6fe 	.word	0x0800e6fe

0800bd0c <__hi0bits>:
 800bd0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd10:	4603      	mov	r3, r0
 800bd12:	bf36      	itet	cc
 800bd14:	0403      	lslcc	r3, r0, #16
 800bd16:	2000      	movcs	r0, #0
 800bd18:	2010      	movcc	r0, #16
 800bd1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd1e:	bf3c      	itt	cc
 800bd20:	021b      	lslcc	r3, r3, #8
 800bd22:	3008      	addcc	r0, #8
 800bd24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd28:	bf3c      	itt	cc
 800bd2a:	011b      	lslcc	r3, r3, #4
 800bd2c:	3004      	addcc	r0, #4
 800bd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd32:	bf3c      	itt	cc
 800bd34:	009b      	lslcc	r3, r3, #2
 800bd36:	3002      	addcc	r0, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	db05      	blt.n	800bd48 <__hi0bits+0x3c>
 800bd3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd40:	f100 0001 	add.w	r0, r0, #1
 800bd44:	bf08      	it	eq
 800bd46:	2020      	moveq	r0, #32
 800bd48:	4770      	bx	lr

0800bd4a <__lo0bits>:
 800bd4a:	6803      	ldr	r3, [r0, #0]
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	f013 0007 	ands.w	r0, r3, #7
 800bd52:	d00b      	beq.n	800bd6c <__lo0bits+0x22>
 800bd54:	07d9      	lsls	r1, r3, #31
 800bd56:	d421      	bmi.n	800bd9c <__lo0bits+0x52>
 800bd58:	0798      	lsls	r0, r3, #30
 800bd5a:	bf49      	itett	mi
 800bd5c:	085b      	lsrmi	r3, r3, #1
 800bd5e:	089b      	lsrpl	r3, r3, #2
 800bd60:	2001      	movmi	r0, #1
 800bd62:	6013      	strmi	r3, [r2, #0]
 800bd64:	bf5c      	itt	pl
 800bd66:	6013      	strpl	r3, [r2, #0]
 800bd68:	2002      	movpl	r0, #2
 800bd6a:	4770      	bx	lr
 800bd6c:	b299      	uxth	r1, r3
 800bd6e:	b909      	cbnz	r1, 800bd74 <__lo0bits+0x2a>
 800bd70:	0c1b      	lsrs	r3, r3, #16
 800bd72:	2010      	movs	r0, #16
 800bd74:	b2d9      	uxtb	r1, r3
 800bd76:	b909      	cbnz	r1, 800bd7c <__lo0bits+0x32>
 800bd78:	3008      	adds	r0, #8
 800bd7a:	0a1b      	lsrs	r3, r3, #8
 800bd7c:	0719      	lsls	r1, r3, #28
 800bd7e:	bf04      	itt	eq
 800bd80:	091b      	lsreq	r3, r3, #4
 800bd82:	3004      	addeq	r0, #4
 800bd84:	0799      	lsls	r1, r3, #30
 800bd86:	bf04      	itt	eq
 800bd88:	089b      	lsreq	r3, r3, #2
 800bd8a:	3002      	addeq	r0, #2
 800bd8c:	07d9      	lsls	r1, r3, #31
 800bd8e:	d403      	bmi.n	800bd98 <__lo0bits+0x4e>
 800bd90:	085b      	lsrs	r3, r3, #1
 800bd92:	f100 0001 	add.w	r0, r0, #1
 800bd96:	d003      	beq.n	800bda0 <__lo0bits+0x56>
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	4770      	bx	lr
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	4770      	bx	lr
 800bda0:	2020      	movs	r0, #32
 800bda2:	4770      	bx	lr

0800bda4 <__i2b>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	460c      	mov	r4, r1
 800bda8:	2101      	movs	r1, #1
 800bdaa:	f7ff febd 	bl	800bb28 <_Balloc>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	b928      	cbnz	r0, 800bdbe <__i2b+0x1a>
 800bdb2:	4b05      	ldr	r3, [pc, #20]	@ (800bdc8 <__i2b+0x24>)
 800bdb4:	4805      	ldr	r0, [pc, #20]	@ (800bdcc <__i2b+0x28>)
 800bdb6:	f240 1145 	movw	r1, #325	@ 0x145
 800bdba:	f001 fc41 	bl	800d640 <__assert_func>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	6144      	str	r4, [r0, #20]
 800bdc2:	6103      	str	r3, [r0, #16]
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800e6ed 	.word	0x0800e6ed
 800bdcc:	0800e6fe 	.word	0x0800e6fe

0800bdd0 <__multiply>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	690a      	ldr	r2, [r1, #16]
 800bdd8:	6923      	ldr	r3, [r4, #16]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	bfa8      	it	ge
 800bdde:	4623      	movge	r3, r4
 800bde0:	460f      	mov	r7, r1
 800bde2:	bfa4      	itt	ge
 800bde4:	460c      	movge	r4, r1
 800bde6:	461f      	movge	r7, r3
 800bde8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bdf0:	68a3      	ldr	r3, [r4, #8]
 800bdf2:	6861      	ldr	r1, [r4, #4]
 800bdf4:	eb0a 0609 	add.w	r6, sl, r9
 800bdf8:	42b3      	cmp	r3, r6
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	bfb8      	it	lt
 800bdfe:	3101      	addlt	r1, #1
 800be00:	f7ff fe92 	bl	800bb28 <_Balloc>
 800be04:	b930      	cbnz	r0, 800be14 <__multiply+0x44>
 800be06:	4602      	mov	r2, r0
 800be08:	4b44      	ldr	r3, [pc, #272]	@ (800bf1c <__multiply+0x14c>)
 800be0a:	4845      	ldr	r0, [pc, #276]	@ (800bf20 <__multiply+0x150>)
 800be0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be10:	f001 fc16 	bl	800d640 <__assert_func>
 800be14:	f100 0514 	add.w	r5, r0, #20
 800be18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be1c:	462b      	mov	r3, r5
 800be1e:	2200      	movs	r2, #0
 800be20:	4543      	cmp	r3, r8
 800be22:	d321      	bcc.n	800be68 <__multiply+0x98>
 800be24:	f107 0114 	add.w	r1, r7, #20
 800be28:	f104 0214 	add.w	r2, r4, #20
 800be2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be34:	9302      	str	r3, [sp, #8]
 800be36:	1b13      	subs	r3, r2, r4
 800be38:	3b15      	subs	r3, #21
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	3304      	adds	r3, #4
 800be40:	f104 0715 	add.w	r7, r4, #21
 800be44:	42ba      	cmp	r2, r7
 800be46:	bf38      	it	cc
 800be48:	2304      	movcc	r3, #4
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	9b02      	ldr	r3, [sp, #8]
 800be4e:	9103      	str	r1, [sp, #12]
 800be50:	428b      	cmp	r3, r1
 800be52:	d80c      	bhi.n	800be6e <__multiply+0x9e>
 800be54:	2e00      	cmp	r6, #0
 800be56:	dd03      	ble.n	800be60 <__multiply+0x90>
 800be58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d05b      	beq.n	800bf18 <__multiply+0x148>
 800be60:	6106      	str	r6, [r0, #16]
 800be62:	b005      	add	sp, #20
 800be64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be68:	f843 2b04 	str.w	r2, [r3], #4
 800be6c:	e7d8      	b.n	800be20 <__multiply+0x50>
 800be6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800be72:	f1ba 0f00 	cmp.w	sl, #0
 800be76:	d024      	beq.n	800bec2 <__multiply+0xf2>
 800be78:	f104 0e14 	add.w	lr, r4, #20
 800be7c:	46a9      	mov	r9, r5
 800be7e:	f04f 0c00 	mov.w	ip, #0
 800be82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be86:	f8d9 3000 	ldr.w	r3, [r9]
 800be8a:	fa1f fb87 	uxth.w	fp, r7
 800be8e:	b29b      	uxth	r3, r3
 800be90:	fb0a 330b 	mla	r3, sl, fp, r3
 800be94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800be98:	f8d9 7000 	ldr.w	r7, [r9]
 800be9c:	4463      	add	r3, ip
 800be9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bea2:	fb0a c70b 	mla	r7, sl, fp, ip
 800bea6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800beaa:	b29b      	uxth	r3, r3
 800beac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800beb0:	4572      	cmp	r2, lr
 800beb2:	f849 3b04 	str.w	r3, [r9], #4
 800beb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800beba:	d8e2      	bhi.n	800be82 <__multiply+0xb2>
 800bebc:	9b01      	ldr	r3, [sp, #4]
 800bebe:	f845 c003 	str.w	ip, [r5, r3]
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bec8:	3104      	adds	r1, #4
 800beca:	f1b9 0f00 	cmp.w	r9, #0
 800bece:	d021      	beq.n	800bf14 <__multiply+0x144>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	f104 0c14 	add.w	ip, r4, #20
 800bed6:	46ae      	mov	lr, r5
 800bed8:	f04f 0a00 	mov.w	sl, #0
 800bedc:	f8bc b000 	ldrh.w	fp, [ip]
 800bee0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bee4:	fb09 770b 	mla	r7, r9, fp, r7
 800bee8:	4457      	add	r7, sl
 800beea:	b29b      	uxth	r3, r3
 800beec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bef0:	f84e 3b04 	str.w	r3, [lr], #4
 800bef4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800befc:	f8be 3000 	ldrh.w	r3, [lr]
 800bf00:	fb09 330a 	mla	r3, r9, sl, r3
 800bf04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf08:	4562      	cmp	r2, ip
 800bf0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf0e:	d8e5      	bhi.n	800bedc <__multiply+0x10c>
 800bf10:	9f01      	ldr	r7, [sp, #4]
 800bf12:	51eb      	str	r3, [r5, r7]
 800bf14:	3504      	adds	r5, #4
 800bf16:	e799      	b.n	800be4c <__multiply+0x7c>
 800bf18:	3e01      	subs	r6, #1
 800bf1a:	e79b      	b.n	800be54 <__multiply+0x84>
 800bf1c:	0800e6ed 	.word	0x0800e6ed
 800bf20:	0800e6fe 	.word	0x0800e6fe

0800bf24 <__pow5mult>:
 800bf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf28:	4615      	mov	r5, r2
 800bf2a:	f012 0203 	ands.w	r2, r2, #3
 800bf2e:	4607      	mov	r7, r0
 800bf30:	460e      	mov	r6, r1
 800bf32:	d007      	beq.n	800bf44 <__pow5mult+0x20>
 800bf34:	4c25      	ldr	r4, [pc, #148]	@ (800bfcc <__pow5mult+0xa8>)
 800bf36:	3a01      	subs	r2, #1
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf3e:	f7ff fe55 	bl	800bbec <__multadd>
 800bf42:	4606      	mov	r6, r0
 800bf44:	10ad      	asrs	r5, r5, #2
 800bf46:	d03d      	beq.n	800bfc4 <__pow5mult+0xa0>
 800bf48:	69fc      	ldr	r4, [r7, #28]
 800bf4a:	b97c      	cbnz	r4, 800bf6c <__pow5mult+0x48>
 800bf4c:	2010      	movs	r0, #16
 800bf4e:	f7ff fd35 	bl	800b9bc <malloc>
 800bf52:	4602      	mov	r2, r0
 800bf54:	61f8      	str	r0, [r7, #28]
 800bf56:	b928      	cbnz	r0, 800bf64 <__pow5mult+0x40>
 800bf58:	4b1d      	ldr	r3, [pc, #116]	@ (800bfd0 <__pow5mult+0xac>)
 800bf5a:	481e      	ldr	r0, [pc, #120]	@ (800bfd4 <__pow5mult+0xb0>)
 800bf5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf60:	f001 fb6e 	bl	800d640 <__assert_func>
 800bf64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf68:	6004      	str	r4, [r0, #0]
 800bf6a:	60c4      	str	r4, [r0, #12]
 800bf6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bf70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf74:	b94c      	cbnz	r4, 800bf8a <__pow5mult+0x66>
 800bf76:	f240 2171 	movw	r1, #625	@ 0x271
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f7ff ff12 	bl	800bda4 <__i2b>
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf86:	4604      	mov	r4, r0
 800bf88:	6003      	str	r3, [r0, #0]
 800bf8a:	f04f 0900 	mov.w	r9, #0
 800bf8e:	07eb      	lsls	r3, r5, #31
 800bf90:	d50a      	bpl.n	800bfa8 <__pow5mult+0x84>
 800bf92:	4631      	mov	r1, r6
 800bf94:	4622      	mov	r2, r4
 800bf96:	4638      	mov	r0, r7
 800bf98:	f7ff ff1a 	bl	800bdd0 <__multiply>
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7ff fe01 	bl	800bba8 <_Bfree>
 800bfa6:	4646      	mov	r6, r8
 800bfa8:	106d      	asrs	r5, r5, #1
 800bfaa:	d00b      	beq.n	800bfc4 <__pow5mult+0xa0>
 800bfac:	6820      	ldr	r0, [r4, #0]
 800bfae:	b938      	cbnz	r0, 800bfc0 <__pow5mult+0x9c>
 800bfb0:	4622      	mov	r2, r4
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	f7ff ff0b 	bl	800bdd0 <__multiply>
 800bfba:	6020      	str	r0, [r4, #0]
 800bfbc:	f8c0 9000 	str.w	r9, [r0]
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	e7e4      	b.n	800bf8e <__pow5mult+0x6a>
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfca:	bf00      	nop
 800bfcc:	0800e758 	.word	0x0800e758
 800bfd0:	0800e67e 	.word	0x0800e67e
 800bfd4:	0800e6fe 	.word	0x0800e6fe

0800bfd8 <__lshift>:
 800bfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	6849      	ldr	r1, [r1, #4]
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	4607      	mov	r7, r0
 800bfea:	4691      	mov	r9, r2
 800bfec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bff0:	f108 0601 	add.w	r6, r8, #1
 800bff4:	42b3      	cmp	r3, r6
 800bff6:	db0b      	blt.n	800c010 <__lshift+0x38>
 800bff8:	4638      	mov	r0, r7
 800bffa:	f7ff fd95 	bl	800bb28 <_Balloc>
 800bffe:	4605      	mov	r5, r0
 800c000:	b948      	cbnz	r0, 800c016 <__lshift+0x3e>
 800c002:	4602      	mov	r2, r0
 800c004:	4b28      	ldr	r3, [pc, #160]	@ (800c0a8 <__lshift+0xd0>)
 800c006:	4829      	ldr	r0, [pc, #164]	@ (800c0ac <__lshift+0xd4>)
 800c008:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c00c:	f001 fb18 	bl	800d640 <__assert_func>
 800c010:	3101      	adds	r1, #1
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	e7ee      	b.n	800bff4 <__lshift+0x1c>
 800c016:	2300      	movs	r3, #0
 800c018:	f100 0114 	add.w	r1, r0, #20
 800c01c:	f100 0210 	add.w	r2, r0, #16
 800c020:	4618      	mov	r0, r3
 800c022:	4553      	cmp	r3, sl
 800c024:	db33      	blt.n	800c08e <__lshift+0xb6>
 800c026:	6920      	ldr	r0, [r4, #16]
 800c028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c02c:	f104 0314 	add.w	r3, r4, #20
 800c030:	f019 091f 	ands.w	r9, r9, #31
 800c034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c03c:	d02b      	beq.n	800c096 <__lshift+0xbe>
 800c03e:	f1c9 0e20 	rsb	lr, r9, #32
 800c042:	468a      	mov	sl, r1
 800c044:	2200      	movs	r2, #0
 800c046:	6818      	ldr	r0, [r3, #0]
 800c048:	fa00 f009 	lsl.w	r0, r0, r9
 800c04c:	4310      	orrs	r0, r2
 800c04e:	f84a 0b04 	str.w	r0, [sl], #4
 800c052:	f853 2b04 	ldr.w	r2, [r3], #4
 800c056:	459c      	cmp	ip, r3
 800c058:	fa22 f20e 	lsr.w	r2, r2, lr
 800c05c:	d8f3      	bhi.n	800c046 <__lshift+0x6e>
 800c05e:	ebac 0304 	sub.w	r3, ip, r4
 800c062:	3b15      	subs	r3, #21
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	3304      	adds	r3, #4
 800c06a:	f104 0015 	add.w	r0, r4, #21
 800c06e:	4584      	cmp	ip, r0
 800c070:	bf38      	it	cc
 800c072:	2304      	movcc	r3, #4
 800c074:	50ca      	str	r2, [r1, r3]
 800c076:	b10a      	cbz	r2, 800c07c <__lshift+0xa4>
 800c078:	f108 0602 	add.w	r6, r8, #2
 800c07c:	3e01      	subs	r6, #1
 800c07e:	4638      	mov	r0, r7
 800c080:	612e      	str	r6, [r5, #16]
 800c082:	4621      	mov	r1, r4
 800c084:	f7ff fd90 	bl	800bba8 <_Bfree>
 800c088:	4628      	mov	r0, r5
 800c08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c092:	3301      	adds	r3, #1
 800c094:	e7c5      	b.n	800c022 <__lshift+0x4a>
 800c096:	3904      	subs	r1, #4
 800c098:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0a0:	459c      	cmp	ip, r3
 800c0a2:	d8f9      	bhi.n	800c098 <__lshift+0xc0>
 800c0a4:	e7ea      	b.n	800c07c <__lshift+0xa4>
 800c0a6:	bf00      	nop
 800c0a8:	0800e6ed 	.word	0x0800e6ed
 800c0ac:	0800e6fe 	.word	0x0800e6fe

0800c0b0 <__mcmp>:
 800c0b0:	690a      	ldr	r2, [r1, #16]
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	6900      	ldr	r0, [r0, #16]
 800c0b6:	1a80      	subs	r0, r0, r2
 800c0b8:	b530      	push	{r4, r5, lr}
 800c0ba:	d10e      	bne.n	800c0da <__mcmp+0x2a>
 800c0bc:	3314      	adds	r3, #20
 800c0be:	3114      	adds	r1, #20
 800c0c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c0d0:	4295      	cmp	r5, r2
 800c0d2:	d003      	beq.n	800c0dc <__mcmp+0x2c>
 800c0d4:	d205      	bcs.n	800c0e2 <__mcmp+0x32>
 800c0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0da:	bd30      	pop	{r4, r5, pc}
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	d3f3      	bcc.n	800c0c8 <__mcmp+0x18>
 800c0e0:	e7fb      	b.n	800c0da <__mcmp+0x2a>
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7f9      	b.n	800c0da <__mcmp+0x2a>
	...

0800c0e8 <__mdiff>:
 800c0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4689      	mov	r9, r1
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	4611      	mov	r1, r2
 800c0f2:	4648      	mov	r0, r9
 800c0f4:	4614      	mov	r4, r2
 800c0f6:	f7ff ffdb 	bl	800c0b0 <__mcmp>
 800c0fa:	1e05      	subs	r5, r0, #0
 800c0fc:	d112      	bne.n	800c124 <__mdiff+0x3c>
 800c0fe:	4629      	mov	r1, r5
 800c100:	4630      	mov	r0, r6
 800c102:	f7ff fd11 	bl	800bb28 <_Balloc>
 800c106:	4602      	mov	r2, r0
 800c108:	b928      	cbnz	r0, 800c116 <__mdiff+0x2e>
 800c10a:	4b3f      	ldr	r3, [pc, #252]	@ (800c208 <__mdiff+0x120>)
 800c10c:	f240 2137 	movw	r1, #567	@ 0x237
 800c110:	483e      	ldr	r0, [pc, #248]	@ (800c20c <__mdiff+0x124>)
 800c112:	f001 fa95 	bl	800d640 <__assert_func>
 800c116:	2301      	movs	r3, #1
 800c118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c11c:	4610      	mov	r0, r2
 800c11e:	b003      	add	sp, #12
 800c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c124:	bfbc      	itt	lt
 800c126:	464b      	movlt	r3, r9
 800c128:	46a1      	movlt	r9, r4
 800c12a:	4630      	mov	r0, r6
 800c12c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c130:	bfba      	itte	lt
 800c132:	461c      	movlt	r4, r3
 800c134:	2501      	movlt	r5, #1
 800c136:	2500      	movge	r5, #0
 800c138:	f7ff fcf6 	bl	800bb28 <_Balloc>
 800c13c:	4602      	mov	r2, r0
 800c13e:	b918      	cbnz	r0, 800c148 <__mdiff+0x60>
 800c140:	4b31      	ldr	r3, [pc, #196]	@ (800c208 <__mdiff+0x120>)
 800c142:	f240 2145 	movw	r1, #581	@ 0x245
 800c146:	e7e3      	b.n	800c110 <__mdiff+0x28>
 800c148:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c14c:	6926      	ldr	r6, [r4, #16]
 800c14e:	60c5      	str	r5, [r0, #12]
 800c150:	f109 0310 	add.w	r3, r9, #16
 800c154:	f109 0514 	add.w	r5, r9, #20
 800c158:	f104 0e14 	add.w	lr, r4, #20
 800c15c:	f100 0b14 	add.w	fp, r0, #20
 800c160:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c164:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	46d9      	mov	r9, fp
 800c16c:	f04f 0c00 	mov.w	ip, #0
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c176:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c17a:	9301      	str	r3, [sp, #4]
 800c17c:	fa1f f38a 	uxth.w	r3, sl
 800c180:	4619      	mov	r1, r3
 800c182:	b283      	uxth	r3, r0
 800c184:	1acb      	subs	r3, r1, r3
 800c186:	0c00      	lsrs	r0, r0, #16
 800c188:	4463      	add	r3, ip
 800c18a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c18e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c192:	b29b      	uxth	r3, r3
 800c194:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c198:	4576      	cmp	r6, lr
 800c19a:	f849 3b04 	str.w	r3, [r9], #4
 800c19e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1a2:	d8e5      	bhi.n	800c170 <__mdiff+0x88>
 800c1a4:	1b33      	subs	r3, r6, r4
 800c1a6:	3b15      	subs	r3, #21
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	3415      	adds	r4, #21
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	42a6      	cmp	r6, r4
 800c1b2:	bf38      	it	cc
 800c1b4:	2304      	movcc	r3, #4
 800c1b6:	441d      	add	r5, r3
 800c1b8:	445b      	add	r3, fp
 800c1ba:	461e      	mov	r6, r3
 800c1bc:	462c      	mov	r4, r5
 800c1be:	4544      	cmp	r4, r8
 800c1c0:	d30e      	bcc.n	800c1e0 <__mdiff+0xf8>
 800c1c2:	f108 0103 	add.w	r1, r8, #3
 800c1c6:	1b49      	subs	r1, r1, r5
 800c1c8:	f021 0103 	bic.w	r1, r1, #3
 800c1cc:	3d03      	subs	r5, #3
 800c1ce:	45a8      	cmp	r8, r5
 800c1d0:	bf38      	it	cc
 800c1d2:	2100      	movcc	r1, #0
 800c1d4:	440b      	add	r3, r1
 800c1d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1da:	b191      	cbz	r1, 800c202 <__mdiff+0x11a>
 800c1dc:	6117      	str	r7, [r2, #16]
 800c1de:	e79d      	b.n	800c11c <__mdiff+0x34>
 800c1e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c1e4:	46e6      	mov	lr, ip
 800c1e6:	0c08      	lsrs	r0, r1, #16
 800c1e8:	fa1c fc81 	uxtah	ip, ip, r1
 800c1ec:	4471      	add	r1, lr
 800c1ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1f2:	b289      	uxth	r1, r1
 800c1f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1f8:	f846 1b04 	str.w	r1, [r6], #4
 800c1fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c200:	e7dd      	b.n	800c1be <__mdiff+0xd6>
 800c202:	3f01      	subs	r7, #1
 800c204:	e7e7      	b.n	800c1d6 <__mdiff+0xee>
 800c206:	bf00      	nop
 800c208:	0800e6ed 	.word	0x0800e6ed
 800c20c:	0800e6fe 	.word	0x0800e6fe

0800c210 <__ulp>:
 800c210:	b082      	sub	sp, #8
 800c212:	ed8d 0b00 	vstr	d0, [sp]
 800c216:	9a01      	ldr	r2, [sp, #4]
 800c218:	4b0f      	ldr	r3, [pc, #60]	@ (800c258 <__ulp+0x48>)
 800c21a:	4013      	ands	r3, r2
 800c21c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c220:	2b00      	cmp	r3, #0
 800c222:	dc08      	bgt.n	800c236 <__ulp+0x26>
 800c224:	425b      	negs	r3, r3
 800c226:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c22a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c22e:	da04      	bge.n	800c23a <__ulp+0x2a>
 800c230:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c234:	4113      	asrs	r3, r2
 800c236:	2200      	movs	r2, #0
 800c238:	e008      	b.n	800c24c <__ulp+0x3c>
 800c23a:	f1a2 0314 	sub.w	r3, r2, #20
 800c23e:	2b1e      	cmp	r3, #30
 800c240:	bfda      	itte	le
 800c242:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c246:	40da      	lsrle	r2, r3
 800c248:	2201      	movgt	r2, #1
 800c24a:	2300      	movs	r3, #0
 800c24c:	4619      	mov	r1, r3
 800c24e:	4610      	mov	r0, r2
 800c250:	ec41 0b10 	vmov	d0, r0, r1
 800c254:	b002      	add	sp, #8
 800c256:	4770      	bx	lr
 800c258:	7ff00000 	.word	0x7ff00000

0800c25c <__b2d>:
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	6906      	ldr	r6, [r0, #16]
 800c262:	f100 0814 	add.w	r8, r0, #20
 800c266:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c26a:	1f37      	subs	r7, r6, #4
 800c26c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c270:	4610      	mov	r0, r2
 800c272:	f7ff fd4b 	bl	800bd0c <__hi0bits>
 800c276:	f1c0 0320 	rsb	r3, r0, #32
 800c27a:	280a      	cmp	r0, #10
 800c27c:	600b      	str	r3, [r1, #0]
 800c27e:	491b      	ldr	r1, [pc, #108]	@ (800c2ec <__b2d+0x90>)
 800c280:	dc15      	bgt.n	800c2ae <__b2d+0x52>
 800c282:	f1c0 0c0b 	rsb	ip, r0, #11
 800c286:	fa22 f30c 	lsr.w	r3, r2, ip
 800c28a:	45b8      	cmp	r8, r7
 800c28c:	ea43 0501 	orr.w	r5, r3, r1
 800c290:	bf34      	ite	cc
 800c292:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c296:	2300      	movcs	r3, #0
 800c298:	3015      	adds	r0, #21
 800c29a:	fa02 f000 	lsl.w	r0, r2, r0
 800c29e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c2a2:	4303      	orrs	r3, r0
 800c2a4:	461c      	mov	r4, r3
 800c2a6:	ec45 4b10 	vmov	d0, r4, r5
 800c2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ae:	45b8      	cmp	r8, r7
 800c2b0:	bf3a      	itte	cc
 800c2b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c2b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c2ba:	2300      	movcs	r3, #0
 800c2bc:	380b      	subs	r0, #11
 800c2be:	d012      	beq.n	800c2e6 <__b2d+0x8a>
 800c2c0:	f1c0 0120 	rsb	r1, r0, #32
 800c2c4:	fa23 f401 	lsr.w	r4, r3, r1
 800c2c8:	4082      	lsls	r2, r0
 800c2ca:	4322      	orrs	r2, r4
 800c2cc:	4547      	cmp	r7, r8
 800c2ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c2d2:	bf8c      	ite	hi
 800c2d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c2d8:	2200      	movls	r2, #0
 800c2da:	4083      	lsls	r3, r0
 800c2dc:	40ca      	lsrs	r2, r1
 800c2de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	e7de      	b.n	800c2a4 <__b2d+0x48>
 800c2e6:	ea42 0501 	orr.w	r5, r2, r1
 800c2ea:	e7db      	b.n	800c2a4 <__b2d+0x48>
 800c2ec:	3ff00000 	.word	0x3ff00000

0800c2f0 <__d2b>:
 800c2f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	ec59 8b10 	vmov	r8, r9, d0
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	f7ff fc13 	bl	800bb28 <_Balloc>
 800c302:	4604      	mov	r4, r0
 800c304:	b930      	cbnz	r0, 800c314 <__d2b+0x24>
 800c306:	4602      	mov	r2, r0
 800c308:	4b23      	ldr	r3, [pc, #140]	@ (800c398 <__d2b+0xa8>)
 800c30a:	4824      	ldr	r0, [pc, #144]	@ (800c39c <__d2b+0xac>)
 800c30c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c310:	f001 f996 	bl	800d640 <__assert_func>
 800c314:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c31c:	b10d      	cbz	r5, 800c322 <__d2b+0x32>
 800c31e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	f1b8 0300 	subs.w	r3, r8, #0
 800c328:	d023      	beq.n	800c372 <__d2b+0x82>
 800c32a:	4668      	mov	r0, sp
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	f7ff fd0c 	bl	800bd4a <__lo0bits>
 800c332:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c336:	b1d0      	cbz	r0, 800c36e <__d2b+0x7e>
 800c338:	f1c0 0320 	rsb	r3, r0, #32
 800c33c:	fa02 f303 	lsl.w	r3, r2, r3
 800c340:	430b      	orrs	r3, r1
 800c342:	40c2      	lsrs	r2, r0
 800c344:	6163      	str	r3, [r4, #20]
 800c346:	9201      	str	r2, [sp, #4]
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	61a3      	str	r3, [r4, #24]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bf0c      	ite	eq
 800c350:	2201      	moveq	r2, #1
 800c352:	2202      	movne	r2, #2
 800c354:	6122      	str	r2, [r4, #16]
 800c356:	b1a5      	cbz	r5, 800c382 <__d2b+0x92>
 800c358:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c35c:	4405      	add	r5, r0
 800c35e:	603d      	str	r5, [r7, #0]
 800c360:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c364:	6030      	str	r0, [r6, #0]
 800c366:	4620      	mov	r0, r4
 800c368:	b003      	add	sp, #12
 800c36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c36e:	6161      	str	r1, [r4, #20]
 800c370:	e7ea      	b.n	800c348 <__d2b+0x58>
 800c372:	a801      	add	r0, sp, #4
 800c374:	f7ff fce9 	bl	800bd4a <__lo0bits>
 800c378:	9b01      	ldr	r3, [sp, #4]
 800c37a:	6163      	str	r3, [r4, #20]
 800c37c:	3020      	adds	r0, #32
 800c37e:	2201      	movs	r2, #1
 800c380:	e7e8      	b.n	800c354 <__d2b+0x64>
 800c382:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c386:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c38a:	6038      	str	r0, [r7, #0]
 800c38c:	6918      	ldr	r0, [r3, #16]
 800c38e:	f7ff fcbd 	bl	800bd0c <__hi0bits>
 800c392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c396:	e7e5      	b.n	800c364 <__d2b+0x74>
 800c398:	0800e6ed 	.word	0x0800e6ed
 800c39c:	0800e6fe 	.word	0x0800e6fe

0800c3a0 <__ratio>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	b085      	sub	sp, #20
 800c3a6:	e9cd 1000 	strd	r1, r0, [sp]
 800c3aa:	a902      	add	r1, sp, #8
 800c3ac:	f7ff ff56 	bl	800c25c <__b2d>
 800c3b0:	9800      	ldr	r0, [sp, #0]
 800c3b2:	a903      	add	r1, sp, #12
 800c3b4:	ec55 4b10 	vmov	r4, r5, d0
 800c3b8:	f7ff ff50 	bl	800c25c <__b2d>
 800c3bc:	9b01      	ldr	r3, [sp, #4]
 800c3be:	6919      	ldr	r1, [r3, #16]
 800c3c0:	9b00      	ldr	r3, [sp, #0]
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	1ac9      	subs	r1, r1, r3
 800c3c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	ec5b ab10 	vmov	sl, fp, d0
 800c3d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	bfce      	itee	gt
 800c3d8:	462a      	movgt	r2, r5
 800c3da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c3de:	465a      	movle	r2, fp
 800c3e0:	462f      	mov	r7, r5
 800c3e2:	46d9      	mov	r9, fp
 800c3e4:	bfcc      	ite	gt
 800c3e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c3ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	4652      	mov	r2, sl
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	f7f4 fa01 	bl	80007fc <__aeabi_ddiv>
 800c3fa:	ec41 0b10 	vmov	d0, r0, r1
 800c3fe:	b005      	add	sp, #20
 800c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c404 <__copybits>:
 800c404:	3901      	subs	r1, #1
 800c406:	b570      	push	{r4, r5, r6, lr}
 800c408:	1149      	asrs	r1, r1, #5
 800c40a:	6914      	ldr	r4, [r2, #16]
 800c40c:	3101      	adds	r1, #1
 800c40e:	f102 0314 	add.w	r3, r2, #20
 800c412:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c416:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c41a:	1f05      	subs	r5, r0, #4
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	d30c      	bcc.n	800c43a <__copybits+0x36>
 800c420:	1aa3      	subs	r3, r4, r2
 800c422:	3b11      	subs	r3, #17
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	3211      	adds	r2, #17
 800c42a:	42a2      	cmp	r2, r4
 800c42c:	bf88      	it	hi
 800c42e:	2300      	movhi	r3, #0
 800c430:	4418      	add	r0, r3
 800c432:	2300      	movs	r3, #0
 800c434:	4288      	cmp	r0, r1
 800c436:	d305      	bcc.n	800c444 <__copybits+0x40>
 800c438:	bd70      	pop	{r4, r5, r6, pc}
 800c43a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c43e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c442:	e7eb      	b.n	800c41c <__copybits+0x18>
 800c444:	f840 3b04 	str.w	r3, [r0], #4
 800c448:	e7f4      	b.n	800c434 <__copybits+0x30>

0800c44a <__any_on>:
 800c44a:	f100 0214 	add.w	r2, r0, #20
 800c44e:	6900      	ldr	r0, [r0, #16]
 800c450:	114b      	asrs	r3, r1, #5
 800c452:	4298      	cmp	r0, r3
 800c454:	b510      	push	{r4, lr}
 800c456:	db11      	blt.n	800c47c <__any_on+0x32>
 800c458:	dd0a      	ble.n	800c470 <__any_on+0x26>
 800c45a:	f011 011f 	ands.w	r1, r1, #31
 800c45e:	d007      	beq.n	800c470 <__any_on+0x26>
 800c460:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c464:	fa24 f001 	lsr.w	r0, r4, r1
 800c468:	fa00 f101 	lsl.w	r1, r0, r1
 800c46c:	428c      	cmp	r4, r1
 800c46e:	d10b      	bne.n	800c488 <__any_on+0x3e>
 800c470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c474:	4293      	cmp	r3, r2
 800c476:	d803      	bhi.n	800c480 <__any_on+0x36>
 800c478:	2000      	movs	r0, #0
 800c47a:	bd10      	pop	{r4, pc}
 800c47c:	4603      	mov	r3, r0
 800c47e:	e7f7      	b.n	800c470 <__any_on+0x26>
 800c480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c484:	2900      	cmp	r1, #0
 800c486:	d0f5      	beq.n	800c474 <__any_on+0x2a>
 800c488:	2001      	movs	r0, #1
 800c48a:	e7f6      	b.n	800c47a <__any_on+0x30>

0800c48c <sulp>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	460d      	mov	r5, r1
 800c492:	ec45 4b10 	vmov	d0, r4, r5
 800c496:	4616      	mov	r6, r2
 800c498:	f7ff feba 	bl	800c210 <__ulp>
 800c49c:	ec51 0b10 	vmov	r0, r1, d0
 800c4a0:	b17e      	cbz	r6, 800c4c2 <sulp+0x36>
 800c4a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dd09      	ble.n	800c4c2 <sulp+0x36>
 800c4ae:	051b      	lsls	r3, r3, #20
 800c4b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c4b4:	2400      	movs	r4, #0
 800c4b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	462b      	mov	r3, r5
 800c4be:	f7f4 f873 	bl	80005a8 <__aeabi_dmul>
 800c4c2:	ec41 0b10 	vmov	d0, r0, r1
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}

0800c4c8 <_strtod_l>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	b09f      	sub	sp, #124	@ 0x7c
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800c4d6:	9005      	str	r0, [sp, #20]
 800c4d8:	f04f 0a00 	mov.w	sl, #0
 800c4dc:	f04f 0b00 	mov.w	fp, #0
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c4e4:	7811      	ldrb	r1, [r2, #0]
 800c4e6:	292b      	cmp	r1, #43	@ 0x2b
 800c4e8:	d04a      	beq.n	800c580 <_strtod_l+0xb8>
 800c4ea:	d838      	bhi.n	800c55e <_strtod_l+0x96>
 800c4ec:	290d      	cmp	r1, #13
 800c4ee:	d832      	bhi.n	800c556 <_strtod_l+0x8e>
 800c4f0:	2908      	cmp	r1, #8
 800c4f2:	d832      	bhi.n	800c55a <_strtod_l+0x92>
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	d03b      	beq.n	800c570 <_strtod_l+0xa8>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c4fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c4fe:	782a      	ldrb	r2, [r5, #0]
 800c500:	2a30      	cmp	r2, #48	@ 0x30
 800c502:	f040 80b3 	bne.w	800c66c <_strtod_l+0x1a4>
 800c506:	786a      	ldrb	r2, [r5, #1]
 800c508:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c50c:	2a58      	cmp	r2, #88	@ 0x58
 800c50e:	d16e      	bne.n	800c5ee <_strtod_l+0x126>
 800c510:	9302      	str	r3, [sp, #8]
 800c512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	ab1a      	add	r3, sp, #104	@ 0x68
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	4a8e      	ldr	r2, [pc, #568]	@ (800c754 <_strtod_l+0x28c>)
 800c51c:	9805      	ldr	r0, [sp, #20]
 800c51e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c520:	a919      	add	r1, sp, #100	@ 0x64
 800c522:	f001 f927 	bl	800d774 <__gethex>
 800c526:	f010 060f 	ands.w	r6, r0, #15
 800c52a:	4604      	mov	r4, r0
 800c52c:	d005      	beq.n	800c53a <_strtod_l+0x72>
 800c52e:	2e06      	cmp	r6, #6
 800c530:	d128      	bne.n	800c584 <_strtod_l+0xbc>
 800c532:	3501      	adds	r5, #1
 800c534:	2300      	movs	r3, #0
 800c536:	9519      	str	r5, [sp, #100]	@ 0x64
 800c538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c53a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f040 858e 	bne.w	800d05e <_strtod_l+0xb96>
 800c542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c544:	b1cb      	cbz	r3, 800c57a <_strtod_l+0xb2>
 800c546:	4652      	mov	r2, sl
 800c548:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c54c:	ec43 2b10 	vmov	d0, r2, r3
 800c550:	b01f      	add	sp, #124	@ 0x7c
 800c552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c556:	2920      	cmp	r1, #32
 800c558:	d1ce      	bne.n	800c4f8 <_strtod_l+0x30>
 800c55a:	3201      	adds	r2, #1
 800c55c:	e7c1      	b.n	800c4e2 <_strtod_l+0x1a>
 800c55e:	292d      	cmp	r1, #45	@ 0x2d
 800c560:	d1ca      	bne.n	800c4f8 <_strtod_l+0x30>
 800c562:	2101      	movs	r1, #1
 800c564:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c566:	1c51      	adds	r1, r2, #1
 800c568:	9119      	str	r1, [sp, #100]	@ 0x64
 800c56a:	7852      	ldrb	r2, [r2, #1]
 800c56c:	2a00      	cmp	r2, #0
 800c56e:	d1c5      	bne.n	800c4fc <_strtod_l+0x34>
 800c570:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c572:	9419      	str	r4, [sp, #100]	@ 0x64
 800c574:	2b00      	cmp	r3, #0
 800c576:	f040 8570 	bne.w	800d05a <_strtod_l+0xb92>
 800c57a:	4652      	mov	r2, sl
 800c57c:	465b      	mov	r3, fp
 800c57e:	e7e5      	b.n	800c54c <_strtod_l+0x84>
 800c580:	2100      	movs	r1, #0
 800c582:	e7ef      	b.n	800c564 <_strtod_l+0x9c>
 800c584:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c586:	b13a      	cbz	r2, 800c598 <_strtod_l+0xd0>
 800c588:	2135      	movs	r1, #53	@ 0x35
 800c58a:	a81c      	add	r0, sp, #112	@ 0x70
 800c58c:	f7ff ff3a 	bl	800c404 <__copybits>
 800c590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c592:	9805      	ldr	r0, [sp, #20]
 800c594:	f7ff fb08 	bl	800bba8 <_Bfree>
 800c598:	3e01      	subs	r6, #1
 800c59a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c59c:	2e04      	cmp	r6, #4
 800c59e:	d806      	bhi.n	800c5ae <_strtod_l+0xe6>
 800c5a0:	e8df f006 	tbb	[pc, r6]
 800c5a4:	201d0314 	.word	0x201d0314
 800c5a8:	14          	.byte	0x14
 800c5a9:	00          	.byte	0x00
 800c5aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c5ae:	05e1      	lsls	r1, r4, #23
 800c5b0:	bf48      	it	mi
 800c5b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c5b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c5ba:	0d1b      	lsrs	r3, r3, #20
 800c5bc:	051b      	lsls	r3, r3, #20
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1bb      	bne.n	800c53a <_strtod_l+0x72>
 800c5c2:	f7fe fb2f 	bl	800ac24 <__errno>
 800c5c6:	2322      	movs	r3, #34	@ 0x22
 800c5c8:	6003      	str	r3, [r0, #0]
 800c5ca:	e7b6      	b.n	800c53a <_strtod_l+0x72>
 800c5cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c5d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c5d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c5d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c5dc:	e7e7      	b.n	800c5ae <_strtod_l+0xe6>
 800c5de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c75c <_strtod_l+0x294>
 800c5e2:	e7e4      	b.n	800c5ae <_strtod_l+0xe6>
 800c5e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c5e8:	f04f 3aff 	mov.w	sl, #4294967295
 800c5ec:	e7df      	b.n	800c5ae <_strtod_l+0xe6>
 800c5ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	2b30      	cmp	r3, #48	@ 0x30
 800c5f8:	d0f9      	beq.n	800c5ee <_strtod_l+0x126>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d09d      	beq.n	800c53a <_strtod_l+0x72>
 800c5fe:	2301      	movs	r3, #1
 800c600:	9309      	str	r3, [sp, #36]	@ 0x24
 800c602:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c604:	930c      	str	r3, [sp, #48]	@ 0x30
 800c606:	2300      	movs	r3, #0
 800c608:	9308      	str	r3, [sp, #32]
 800c60a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c60c:	461f      	mov	r7, r3
 800c60e:	220a      	movs	r2, #10
 800c610:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c612:	7805      	ldrb	r5, [r0, #0]
 800c614:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c618:	b2d9      	uxtb	r1, r3
 800c61a:	2909      	cmp	r1, #9
 800c61c:	d928      	bls.n	800c670 <_strtod_l+0x1a8>
 800c61e:	494e      	ldr	r1, [pc, #312]	@ (800c758 <_strtod_l+0x290>)
 800c620:	2201      	movs	r2, #1
 800c622:	f000 ffd5 	bl	800d5d0 <strncmp>
 800c626:	2800      	cmp	r0, #0
 800c628:	d032      	beq.n	800c690 <_strtod_l+0x1c8>
 800c62a:	2000      	movs	r0, #0
 800c62c:	462a      	mov	r2, r5
 800c62e:	4681      	mov	r9, r0
 800c630:	463d      	mov	r5, r7
 800c632:	4603      	mov	r3, r0
 800c634:	2a65      	cmp	r2, #101	@ 0x65
 800c636:	d001      	beq.n	800c63c <_strtod_l+0x174>
 800c638:	2a45      	cmp	r2, #69	@ 0x45
 800c63a:	d114      	bne.n	800c666 <_strtod_l+0x19e>
 800c63c:	b91d      	cbnz	r5, 800c646 <_strtod_l+0x17e>
 800c63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c640:	4302      	orrs	r2, r0
 800c642:	d095      	beq.n	800c570 <_strtod_l+0xa8>
 800c644:	2500      	movs	r5, #0
 800c646:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c648:	1c62      	adds	r2, r4, #1
 800c64a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c64c:	7862      	ldrb	r2, [r4, #1]
 800c64e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c650:	d077      	beq.n	800c742 <_strtod_l+0x27a>
 800c652:	2a2d      	cmp	r2, #45	@ 0x2d
 800c654:	d07b      	beq.n	800c74e <_strtod_l+0x286>
 800c656:	f04f 0c00 	mov.w	ip, #0
 800c65a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c65e:	2909      	cmp	r1, #9
 800c660:	f240 8082 	bls.w	800c768 <_strtod_l+0x2a0>
 800c664:	9419      	str	r4, [sp, #100]	@ 0x64
 800c666:	f04f 0800 	mov.w	r8, #0
 800c66a:	e0a2      	b.n	800c7b2 <_strtod_l+0x2ea>
 800c66c:	2300      	movs	r3, #0
 800c66e:	e7c7      	b.n	800c600 <_strtod_l+0x138>
 800c670:	2f08      	cmp	r7, #8
 800c672:	bfd5      	itete	le
 800c674:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c676:	9908      	ldrgt	r1, [sp, #32]
 800c678:	fb02 3301 	mlale	r3, r2, r1, r3
 800c67c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c680:	f100 0001 	add.w	r0, r0, #1
 800c684:	bfd4      	ite	le
 800c686:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c688:	9308      	strgt	r3, [sp, #32]
 800c68a:	3701      	adds	r7, #1
 800c68c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c68e:	e7bf      	b.n	800c610 <_strtod_l+0x148>
 800c690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c692:	1c5a      	adds	r2, r3, #1
 800c694:	9219      	str	r2, [sp, #100]	@ 0x64
 800c696:	785a      	ldrb	r2, [r3, #1]
 800c698:	b37f      	cbz	r7, 800c6fa <_strtod_l+0x232>
 800c69a:	4681      	mov	r9, r0
 800c69c:	463d      	mov	r5, r7
 800c69e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c6a2:	2b09      	cmp	r3, #9
 800c6a4:	d912      	bls.n	800c6cc <_strtod_l+0x204>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e7c4      	b.n	800c634 <_strtod_l+0x16c>
 800c6aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6b0:	785a      	ldrb	r2, [r3, #1]
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	2a30      	cmp	r2, #48	@ 0x30
 800c6b6:	d0f8      	beq.n	800c6aa <_strtod_l+0x1e2>
 800c6b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	f200 84d3 	bhi.w	800d068 <_strtod_l+0xba0>
 800c6c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	3a30      	subs	r2, #48	@ 0x30
 800c6ce:	f100 0301 	add.w	r3, r0, #1
 800c6d2:	d02a      	beq.n	800c72a <_strtod_l+0x262>
 800c6d4:	4499      	add	r9, r3
 800c6d6:	eb00 0c05 	add.w	ip, r0, r5
 800c6da:	462b      	mov	r3, r5
 800c6dc:	210a      	movs	r1, #10
 800c6de:	4563      	cmp	r3, ip
 800c6e0:	d10d      	bne.n	800c6fe <_strtod_l+0x236>
 800c6e2:	1c69      	adds	r1, r5, #1
 800c6e4:	4401      	add	r1, r0
 800c6e6:	4428      	add	r0, r5
 800c6e8:	2808      	cmp	r0, #8
 800c6ea:	dc16      	bgt.n	800c71a <_strtod_l+0x252>
 800c6ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c6ee:	230a      	movs	r3, #10
 800c6f0:	fb03 2300 	mla	r3, r3, r0, r2
 800c6f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e018      	b.n	800c72c <_strtod_l+0x264>
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	e7da      	b.n	800c6b4 <_strtod_l+0x1ec>
 800c6fe:	2b08      	cmp	r3, #8
 800c700:	f103 0301 	add.w	r3, r3, #1
 800c704:	dc03      	bgt.n	800c70e <_strtod_l+0x246>
 800c706:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c708:	434e      	muls	r6, r1
 800c70a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c70c:	e7e7      	b.n	800c6de <_strtod_l+0x216>
 800c70e:	2b10      	cmp	r3, #16
 800c710:	bfde      	ittt	le
 800c712:	9e08      	ldrle	r6, [sp, #32]
 800c714:	434e      	mulle	r6, r1
 800c716:	9608      	strle	r6, [sp, #32]
 800c718:	e7e1      	b.n	800c6de <_strtod_l+0x216>
 800c71a:	280f      	cmp	r0, #15
 800c71c:	dceb      	bgt.n	800c6f6 <_strtod_l+0x22e>
 800c71e:	9808      	ldr	r0, [sp, #32]
 800c720:	230a      	movs	r3, #10
 800c722:	fb03 2300 	mla	r3, r3, r0, r2
 800c726:	9308      	str	r3, [sp, #32]
 800c728:	e7e5      	b.n	800c6f6 <_strtod_l+0x22e>
 800c72a:	4629      	mov	r1, r5
 800c72c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c72e:	1c50      	adds	r0, r2, #1
 800c730:	9019      	str	r0, [sp, #100]	@ 0x64
 800c732:	7852      	ldrb	r2, [r2, #1]
 800c734:	4618      	mov	r0, r3
 800c736:	460d      	mov	r5, r1
 800c738:	e7b1      	b.n	800c69e <_strtod_l+0x1d6>
 800c73a:	f04f 0900 	mov.w	r9, #0
 800c73e:	2301      	movs	r3, #1
 800c740:	e77d      	b.n	800c63e <_strtod_l+0x176>
 800c742:	f04f 0c00 	mov.w	ip, #0
 800c746:	1ca2      	adds	r2, r4, #2
 800c748:	9219      	str	r2, [sp, #100]	@ 0x64
 800c74a:	78a2      	ldrb	r2, [r4, #2]
 800c74c:	e785      	b.n	800c65a <_strtod_l+0x192>
 800c74e:	f04f 0c01 	mov.w	ip, #1
 800c752:	e7f8      	b.n	800c746 <_strtod_l+0x27e>
 800c754:	0800e870 	.word	0x0800e870
 800c758:	0800e858 	.word	0x0800e858
 800c75c:	7ff00000 	.word	0x7ff00000
 800c760:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c762:	1c51      	adds	r1, r2, #1
 800c764:	9119      	str	r1, [sp, #100]	@ 0x64
 800c766:	7852      	ldrb	r2, [r2, #1]
 800c768:	2a30      	cmp	r2, #48	@ 0x30
 800c76a:	d0f9      	beq.n	800c760 <_strtod_l+0x298>
 800c76c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c770:	2908      	cmp	r1, #8
 800c772:	f63f af78 	bhi.w	800c666 <_strtod_l+0x19e>
 800c776:	3a30      	subs	r2, #48	@ 0x30
 800c778:	920e      	str	r2, [sp, #56]	@ 0x38
 800c77a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c77c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c77e:	f04f 080a 	mov.w	r8, #10
 800c782:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c784:	1c56      	adds	r6, r2, #1
 800c786:	9619      	str	r6, [sp, #100]	@ 0x64
 800c788:	7852      	ldrb	r2, [r2, #1]
 800c78a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c78e:	f1be 0f09 	cmp.w	lr, #9
 800c792:	d939      	bls.n	800c808 <_strtod_l+0x340>
 800c794:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c796:	1a76      	subs	r6, r6, r1
 800c798:	2e08      	cmp	r6, #8
 800c79a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c79e:	dc03      	bgt.n	800c7a8 <_strtod_l+0x2e0>
 800c7a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c7a2:	4588      	cmp	r8, r1
 800c7a4:	bfa8      	it	ge
 800c7a6:	4688      	movge	r8, r1
 800c7a8:	f1bc 0f00 	cmp.w	ip, #0
 800c7ac:	d001      	beq.n	800c7b2 <_strtod_l+0x2ea>
 800c7ae:	f1c8 0800 	rsb	r8, r8, #0
 800c7b2:	2d00      	cmp	r5, #0
 800c7b4:	d14e      	bne.n	800c854 <_strtod_l+0x38c>
 800c7b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7b8:	4308      	orrs	r0, r1
 800c7ba:	f47f aebe 	bne.w	800c53a <_strtod_l+0x72>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f47f aed6 	bne.w	800c570 <_strtod_l+0xa8>
 800c7c4:	2a69      	cmp	r2, #105	@ 0x69
 800c7c6:	d028      	beq.n	800c81a <_strtod_l+0x352>
 800c7c8:	dc25      	bgt.n	800c816 <_strtod_l+0x34e>
 800c7ca:	2a49      	cmp	r2, #73	@ 0x49
 800c7cc:	d025      	beq.n	800c81a <_strtod_l+0x352>
 800c7ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800c7d0:	f47f aece 	bne.w	800c570 <_strtod_l+0xa8>
 800c7d4:	499b      	ldr	r1, [pc, #620]	@ (800ca44 <_strtod_l+0x57c>)
 800c7d6:	a819      	add	r0, sp, #100	@ 0x64
 800c7d8:	f001 f9ee 	bl	800dbb8 <__match>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f43f aec7 	beq.w	800c570 <_strtod_l+0xa8>
 800c7e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b28      	cmp	r3, #40	@ 0x28
 800c7e8:	d12e      	bne.n	800c848 <_strtod_l+0x380>
 800c7ea:	4997      	ldr	r1, [pc, #604]	@ (800ca48 <_strtod_l+0x580>)
 800c7ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800c7ee:	a819      	add	r0, sp, #100	@ 0x64
 800c7f0:	f001 f9f6 	bl	800dbe0 <__hexnan>
 800c7f4:	2805      	cmp	r0, #5
 800c7f6:	d127      	bne.n	800c848 <_strtod_l+0x380>
 800c7f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c7fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c7fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c802:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c806:	e698      	b.n	800c53a <_strtod_l+0x72>
 800c808:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c80a:	fb08 2101 	mla	r1, r8, r1, r2
 800c80e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c812:	920e      	str	r2, [sp, #56]	@ 0x38
 800c814:	e7b5      	b.n	800c782 <_strtod_l+0x2ba>
 800c816:	2a6e      	cmp	r2, #110	@ 0x6e
 800c818:	e7da      	b.n	800c7d0 <_strtod_l+0x308>
 800c81a:	498c      	ldr	r1, [pc, #560]	@ (800ca4c <_strtod_l+0x584>)
 800c81c:	a819      	add	r0, sp, #100	@ 0x64
 800c81e:	f001 f9cb 	bl	800dbb8 <__match>
 800c822:	2800      	cmp	r0, #0
 800c824:	f43f aea4 	beq.w	800c570 <_strtod_l+0xa8>
 800c828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c82a:	4989      	ldr	r1, [pc, #548]	@ (800ca50 <_strtod_l+0x588>)
 800c82c:	3b01      	subs	r3, #1
 800c82e:	a819      	add	r0, sp, #100	@ 0x64
 800c830:	9319      	str	r3, [sp, #100]	@ 0x64
 800c832:	f001 f9c1 	bl	800dbb8 <__match>
 800c836:	b910      	cbnz	r0, 800c83e <_strtod_l+0x376>
 800c838:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c83a:	3301      	adds	r3, #1
 800c83c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c83e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ca60 <_strtod_l+0x598>
 800c842:	f04f 0a00 	mov.w	sl, #0
 800c846:	e678      	b.n	800c53a <_strtod_l+0x72>
 800c848:	4882      	ldr	r0, [pc, #520]	@ (800ca54 <_strtod_l+0x58c>)
 800c84a:	f000 fef1 	bl	800d630 <nan>
 800c84e:	ec5b ab10 	vmov	sl, fp, d0
 800c852:	e672      	b.n	800c53a <_strtod_l+0x72>
 800c854:	eba8 0309 	sub.w	r3, r8, r9
 800c858:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c85a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85c:	2f00      	cmp	r7, #0
 800c85e:	bf08      	it	eq
 800c860:	462f      	moveq	r7, r5
 800c862:	2d10      	cmp	r5, #16
 800c864:	462c      	mov	r4, r5
 800c866:	bfa8      	it	ge
 800c868:	2410      	movge	r4, #16
 800c86a:	f7f3 fe23 	bl	80004b4 <__aeabi_ui2d>
 800c86e:	2d09      	cmp	r5, #9
 800c870:	4682      	mov	sl, r0
 800c872:	468b      	mov	fp, r1
 800c874:	dc13      	bgt.n	800c89e <_strtod_l+0x3d6>
 800c876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f43f ae5e 	beq.w	800c53a <_strtod_l+0x72>
 800c87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c880:	dd78      	ble.n	800c974 <_strtod_l+0x4ac>
 800c882:	2b16      	cmp	r3, #22
 800c884:	dc5f      	bgt.n	800c946 <_strtod_l+0x47e>
 800c886:	4974      	ldr	r1, [pc, #464]	@ (800ca58 <_strtod_l+0x590>)
 800c888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c890:	4652      	mov	r2, sl
 800c892:	465b      	mov	r3, fp
 800c894:	f7f3 fe88 	bl	80005a8 <__aeabi_dmul>
 800c898:	4682      	mov	sl, r0
 800c89a:	468b      	mov	fp, r1
 800c89c:	e64d      	b.n	800c53a <_strtod_l+0x72>
 800c89e:	4b6e      	ldr	r3, [pc, #440]	@ (800ca58 <_strtod_l+0x590>)
 800c8a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c8a8:	f7f3 fe7e 	bl	80005a8 <__aeabi_dmul>
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	9808      	ldr	r0, [sp, #32]
 800c8b0:	468b      	mov	fp, r1
 800c8b2:	f7f3 fdff 	bl	80004b4 <__aeabi_ui2d>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	4659      	mov	r1, fp
 800c8be:	f7f3 fcbd 	bl	800023c <__adddf3>
 800c8c2:	2d0f      	cmp	r5, #15
 800c8c4:	4682      	mov	sl, r0
 800c8c6:	468b      	mov	fp, r1
 800c8c8:	ddd5      	ble.n	800c876 <_strtod_l+0x3ae>
 800c8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8cc:	1b2c      	subs	r4, r5, r4
 800c8ce:	441c      	add	r4, r3
 800c8d0:	2c00      	cmp	r4, #0
 800c8d2:	f340 8096 	ble.w	800ca02 <_strtod_l+0x53a>
 800c8d6:	f014 030f 	ands.w	r3, r4, #15
 800c8da:	d00a      	beq.n	800c8f2 <_strtod_l+0x42a>
 800c8dc:	495e      	ldr	r1, [pc, #376]	@ (800ca58 <_strtod_l+0x590>)
 800c8de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c8e2:	4652      	mov	r2, sl
 800c8e4:	465b      	mov	r3, fp
 800c8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ea:	f7f3 fe5d 	bl	80005a8 <__aeabi_dmul>
 800c8ee:	4682      	mov	sl, r0
 800c8f0:	468b      	mov	fp, r1
 800c8f2:	f034 040f 	bics.w	r4, r4, #15
 800c8f6:	d073      	beq.n	800c9e0 <_strtod_l+0x518>
 800c8f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c8fc:	dd48      	ble.n	800c990 <_strtod_l+0x4c8>
 800c8fe:	2400      	movs	r4, #0
 800c900:	46a0      	mov	r8, r4
 800c902:	940a      	str	r4, [sp, #40]	@ 0x28
 800c904:	46a1      	mov	r9, r4
 800c906:	9a05      	ldr	r2, [sp, #20]
 800c908:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ca60 <_strtod_l+0x598>
 800c90c:	2322      	movs	r3, #34	@ 0x22
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	f04f 0a00 	mov.w	sl, #0
 800c914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c916:	2b00      	cmp	r3, #0
 800c918:	f43f ae0f 	beq.w	800c53a <_strtod_l+0x72>
 800c91c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c91e:	9805      	ldr	r0, [sp, #20]
 800c920:	f7ff f942 	bl	800bba8 <_Bfree>
 800c924:	9805      	ldr	r0, [sp, #20]
 800c926:	4649      	mov	r1, r9
 800c928:	f7ff f93e 	bl	800bba8 <_Bfree>
 800c92c:	9805      	ldr	r0, [sp, #20]
 800c92e:	4641      	mov	r1, r8
 800c930:	f7ff f93a 	bl	800bba8 <_Bfree>
 800c934:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c936:	9805      	ldr	r0, [sp, #20]
 800c938:	f7ff f936 	bl	800bba8 <_Bfree>
 800c93c:	9805      	ldr	r0, [sp, #20]
 800c93e:	4621      	mov	r1, r4
 800c940:	f7ff f932 	bl	800bba8 <_Bfree>
 800c944:	e5f9      	b.n	800c53a <_strtod_l+0x72>
 800c946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c948:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c94c:	4293      	cmp	r3, r2
 800c94e:	dbbc      	blt.n	800c8ca <_strtod_l+0x402>
 800c950:	4c41      	ldr	r4, [pc, #260]	@ (800ca58 <_strtod_l+0x590>)
 800c952:	f1c5 050f 	rsb	r5, r5, #15
 800c956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c95a:	4652      	mov	r2, sl
 800c95c:	465b      	mov	r3, fp
 800c95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c962:	f7f3 fe21 	bl	80005a8 <__aeabi_dmul>
 800c966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c968:	1b5d      	subs	r5, r3, r5
 800c96a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c96e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c972:	e78f      	b.n	800c894 <_strtod_l+0x3cc>
 800c974:	3316      	adds	r3, #22
 800c976:	dba8      	blt.n	800c8ca <_strtod_l+0x402>
 800c978:	4b37      	ldr	r3, [pc, #220]	@ (800ca58 <_strtod_l+0x590>)
 800c97a:	eba9 0808 	sub.w	r8, r9, r8
 800c97e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c982:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c986:	4650      	mov	r0, sl
 800c988:	4659      	mov	r1, fp
 800c98a:	f7f3 ff37 	bl	80007fc <__aeabi_ddiv>
 800c98e:	e783      	b.n	800c898 <_strtod_l+0x3d0>
 800c990:	4b32      	ldr	r3, [pc, #200]	@ (800ca5c <_strtod_l+0x594>)
 800c992:	9308      	str	r3, [sp, #32]
 800c994:	2300      	movs	r3, #0
 800c996:	1124      	asrs	r4, r4, #4
 800c998:	4650      	mov	r0, sl
 800c99a:	4659      	mov	r1, fp
 800c99c:	461e      	mov	r6, r3
 800c99e:	2c01      	cmp	r4, #1
 800c9a0:	dc21      	bgt.n	800c9e6 <_strtod_l+0x51e>
 800c9a2:	b10b      	cbz	r3, 800c9a8 <_strtod_l+0x4e0>
 800c9a4:	4682      	mov	sl, r0
 800c9a6:	468b      	mov	fp, r1
 800c9a8:	492c      	ldr	r1, [pc, #176]	@ (800ca5c <_strtod_l+0x594>)
 800c9aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c9ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c9b2:	4652      	mov	r2, sl
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ba:	f7f3 fdf5 	bl	80005a8 <__aeabi_dmul>
 800c9be:	4b28      	ldr	r3, [pc, #160]	@ (800ca60 <_strtod_l+0x598>)
 800c9c0:	460a      	mov	r2, r1
 800c9c2:	400b      	ands	r3, r1
 800c9c4:	4927      	ldr	r1, [pc, #156]	@ (800ca64 <_strtod_l+0x59c>)
 800c9c6:	428b      	cmp	r3, r1
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	d898      	bhi.n	800c8fe <_strtod_l+0x436>
 800c9cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	bf86      	itte	hi
 800c9d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ca68 <_strtod_l+0x5a0>
 800c9d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800c9dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	9308      	str	r3, [sp, #32]
 800c9e4:	e07a      	b.n	800cadc <_strtod_l+0x614>
 800c9e6:	07e2      	lsls	r2, r4, #31
 800c9e8:	d505      	bpl.n	800c9f6 <_strtod_l+0x52e>
 800c9ea:	9b08      	ldr	r3, [sp, #32]
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fdda 	bl	80005a8 <__aeabi_dmul>
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	9a08      	ldr	r2, [sp, #32]
 800c9f8:	3208      	adds	r2, #8
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	1064      	asrs	r4, r4, #1
 800c9fe:	9208      	str	r2, [sp, #32]
 800ca00:	e7cd      	b.n	800c99e <_strtod_l+0x4d6>
 800ca02:	d0ed      	beq.n	800c9e0 <_strtod_l+0x518>
 800ca04:	4264      	negs	r4, r4
 800ca06:	f014 020f 	ands.w	r2, r4, #15
 800ca0a:	d00a      	beq.n	800ca22 <_strtod_l+0x55a>
 800ca0c:	4b12      	ldr	r3, [pc, #72]	@ (800ca58 <_strtod_l+0x590>)
 800ca0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca12:	4650      	mov	r0, sl
 800ca14:	4659      	mov	r1, fp
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f7f3 feef 	bl	80007fc <__aeabi_ddiv>
 800ca1e:	4682      	mov	sl, r0
 800ca20:	468b      	mov	fp, r1
 800ca22:	1124      	asrs	r4, r4, #4
 800ca24:	d0dc      	beq.n	800c9e0 <_strtod_l+0x518>
 800ca26:	2c1f      	cmp	r4, #31
 800ca28:	dd20      	ble.n	800ca6c <_strtod_l+0x5a4>
 800ca2a:	2400      	movs	r4, #0
 800ca2c:	46a0      	mov	r8, r4
 800ca2e:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca30:	46a1      	mov	r9, r4
 800ca32:	9a05      	ldr	r2, [sp, #20]
 800ca34:	2322      	movs	r3, #34	@ 0x22
 800ca36:	f04f 0a00 	mov.w	sl, #0
 800ca3a:	f04f 0b00 	mov.w	fp, #0
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	e768      	b.n	800c914 <_strtod_l+0x44c>
 800ca42:	bf00      	nop
 800ca44:	0800e645 	.word	0x0800e645
 800ca48:	0800e85c 	.word	0x0800e85c
 800ca4c:	0800e63d 	.word	0x0800e63d
 800ca50:	0800e674 	.word	0x0800e674
 800ca54:	0800ea05 	.word	0x0800ea05
 800ca58:	0800e790 	.word	0x0800e790
 800ca5c:	0800e768 	.word	0x0800e768
 800ca60:	7ff00000 	.word	0x7ff00000
 800ca64:	7ca00000 	.word	0x7ca00000
 800ca68:	7fefffff 	.word	0x7fefffff
 800ca6c:	f014 0310 	ands.w	r3, r4, #16
 800ca70:	bf18      	it	ne
 800ca72:	236a      	movne	r3, #106	@ 0x6a
 800ca74:	4ea9      	ldr	r6, [pc, #676]	@ (800cd1c <_strtod_l+0x854>)
 800ca76:	9308      	str	r3, [sp, #32]
 800ca78:	4650      	mov	r0, sl
 800ca7a:	4659      	mov	r1, fp
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	07e2      	lsls	r2, r4, #31
 800ca80:	d504      	bpl.n	800ca8c <_strtod_l+0x5c4>
 800ca82:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca86:	f7f3 fd8f 	bl	80005a8 <__aeabi_dmul>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	1064      	asrs	r4, r4, #1
 800ca8e:	f106 0608 	add.w	r6, r6, #8
 800ca92:	d1f4      	bne.n	800ca7e <_strtod_l+0x5b6>
 800ca94:	b10b      	cbz	r3, 800ca9a <_strtod_l+0x5d2>
 800ca96:	4682      	mov	sl, r0
 800ca98:	468b      	mov	fp, r1
 800ca9a:	9b08      	ldr	r3, [sp, #32]
 800ca9c:	b1b3      	cbz	r3, 800cacc <_strtod_l+0x604>
 800ca9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800caa2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	4659      	mov	r1, fp
 800caaa:	dd0f      	ble.n	800cacc <_strtod_l+0x604>
 800caac:	2b1f      	cmp	r3, #31
 800caae:	dd55      	ble.n	800cb5c <_strtod_l+0x694>
 800cab0:	2b34      	cmp	r3, #52	@ 0x34
 800cab2:	bfde      	ittt	le
 800cab4:	f04f 33ff 	movle.w	r3, #4294967295
 800cab8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cabc:	4093      	lslle	r3, r2
 800cabe:	f04f 0a00 	mov.w	sl, #0
 800cac2:	bfcc      	ite	gt
 800cac4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cac8:	ea03 0b01 	andle.w	fp, r3, r1
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	4650      	mov	r0, sl
 800cad2:	4659      	mov	r1, fp
 800cad4:	f7f3 ffd0 	bl	8000a78 <__aeabi_dcmpeq>
 800cad8:	2800      	cmp	r0, #0
 800cada:	d1a6      	bne.n	800ca2a <_strtod_l+0x562>
 800cadc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cae2:	9805      	ldr	r0, [sp, #20]
 800cae4:	462b      	mov	r3, r5
 800cae6:	463a      	mov	r2, r7
 800cae8:	f7ff f8c6 	bl	800bc78 <__s2b>
 800caec:	900a      	str	r0, [sp, #40]	@ 0x28
 800caee:	2800      	cmp	r0, #0
 800caf0:	f43f af05 	beq.w	800c8fe <_strtod_l+0x436>
 800caf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caf6:	2a00      	cmp	r2, #0
 800caf8:	eba9 0308 	sub.w	r3, r9, r8
 800cafc:	bfa8      	it	ge
 800cafe:	2300      	movge	r3, #0
 800cb00:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb02:	2400      	movs	r4, #0
 800cb04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb08:	9316      	str	r3, [sp, #88]	@ 0x58
 800cb0a:	46a0      	mov	r8, r4
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb0e:	9805      	ldr	r0, [sp, #20]
 800cb10:	6859      	ldr	r1, [r3, #4]
 800cb12:	f7ff f809 	bl	800bb28 <_Balloc>
 800cb16:	4681      	mov	r9, r0
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	f43f aef4 	beq.w	800c906 <_strtod_l+0x43e>
 800cb1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb20:	691a      	ldr	r2, [r3, #16]
 800cb22:	3202      	adds	r2, #2
 800cb24:	f103 010c 	add.w	r1, r3, #12
 800cb28:	0092      	lsls	r2, r2, #2
 800cb2a:	300c      	adds	r0, #12
 800cb2c:	f000 fd72 	bl	800d614 <memcpy>
 800cb30:	ec4b ab10 	vmov	d0, sl, fp
 800cb34:	9805      	ldr	r0, [sp, #20]
 800cb36:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb38:	a91b      	add	r1, sp, #108	@ 0x6c
 800cb3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cb3e:	f7ff fbd7 	bl	800c2f0 <__d2b>
 800cb42:	901a      	str	r0, [sp, #104]	@ 0x68
 800cb44:	2800      	cmp	r0, #0
 800cb46:	f43f aede 	beq.w	800c906 <_strtod_l+0x43e>
 800cb4a:	9805      	ldr	r0, [sp, #20]
 800cb4c:	2101      	movs	r1, #1
 800cb4e:	f7ff f929 	bl	800bda4 <__i2b>
 800cb52:	4680      	mov	r8, r0
 800cb54:	b948      	cbnz	r0, 800cb6a <_strtod_l+0x6a2>
 800cb56:	f04f 0800 	mov.w	r8, #0
 800cb5a:	e6d4      	b.n	800c906 <_strtod_l+0x43e>
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb60:	fa02 f303 	lsl.w	r3, r2, r3
 800cb64:	ea03 0a0a 	and.w	sl, r3, sl
 800cb68:	e7b0      	b.n	800cacc <_strtod_l+0x604>
 800cb6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cb6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	bfab      	itete	ge
 800cb72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cb74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cb76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cb78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cb7a:	bfac      	ite	ge
 800cb7c:	18ef      	addge	r7, r5, r3
 800cb7e:	1b5e      	sublt	r6, r3, r5
 800cb80:	9b08      	ldr	r3, [sp, #32]
 800cb82:	1aed      	subs	r5, r5, r3
 800cb84:	4415      	add	r5, r2
 800cb86:	4b66      	ldr	r3, [pc, #408]	@ (800cd20 <_strtod_l+0x858>)
 800cb88:	3d01      	subs	r5, #1
 800cb8a:	429d      	cmp	r5, r3
 800cb8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cb90:	da50      	bge.n	800cc34 <_strtod_l+0x76c>
 800cb92:	1b5b      	subs	r3, r3, r5
 800cb94:	2b1f      	cmp	r3, #31
 800cb96:	eba2 0203 	sub.w	r2, r2, r3
 800cb9a:	f04f 0101 	mov.w	r1, #1
 800cb9e:	dc3d      	bgt.n	800cc1c <_strtod_l+0x754>
 800cba0:	fa01 f303 	lsl.w	r3, r1, r3
 800cba4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cba6:	2300      	movs	r3, #0
 800cba8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cbaa:	18bd      	adds	r5, r7, r2
 800cbac:	9b08      	ldr	r3, [sp, #32]
 800cbae:	42af      	cmp	r7, r5
 800cbb0:	4416      	add	r6, r2
 800cbb2:	441e      	add	r6, r3
 800cbb4:	463b      	mov	r3, r7
 800cbb6:	bfa8      	it	ge
 800cbb8:	462b      	movge	r3, r5
 800cbba:	42b3      	cmp	r3, r6
 800cbbc:	bfa8      	it	ge
 800cbbe:	4633      	movge	r3, r6
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bfc2      	ittt	gt
 800cbc4:	1aed      	subgt	r5, r5, r3
 800cbc6:	1af6      	subgt	r6, r6, r3
 800cbc8:	1aff      	subgt	r7, r7, r3
 800cbca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	dd16      	ble.n	800cbfe <_strtod_l+0x736>
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	9805      	ldr	r0, [sp, #20]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	f7ff f9a5 	bl	800bf24 <__pow5mult>
 800cbda:	4680      	mov	r8, r0
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d0ba      	beq.n	800cb56 <_strtod_l+0x68e>
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbe4:	9805      	ldr	r0, [sp, #20]
 800cbe6:	f7ff f8f3 	bl	800bdd0 <__multiply>
 800cbea:	900e      	str	r0, [sp, #56]	@ 0x38
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f43f ae8a 	beq.w	800c906 <_strtod_l+0x43e>
 800cbf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbf4:	9805      	ldr	r0, [sp, #20]
 800cbf6:	f7fe ffd7 	bl	800bba8 <_Bfree>
 800cbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	dc1d      	bgt.n	800cc3e <_strtod_l+0x776>
 800cc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dd23      	ble.n	800cc50 <_strtod_l+0x788>
 800cc08:	4649      	mov	r1, r9
 800cc0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cc0c:	9805      	ldr	r0, [sp, #20]
 800cc0e:	f7ff f989 	bl	800bf24 <__pow5mult>
 800cc12:	4681      	mov	r9, r0
 800cc14:	b9e0      	cbnz	r0, 800cc50 <_strtod_l+0x788>
 800cc16:	f04f 0900 	mov.w	r9, #0
 800cc1a:	e674      	b.n	800c906 <_strtod_l+0x43e>
 800cc1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cc20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cc24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cc28:	35e2      	adds	r5, #226	@ 0xe2
 800cc2a:	fa01 f305 	lsl.w	r3, r1, r5
 800cc2e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc30:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cc32:	e7ba      	b.n	800cbaa <_strtod_l+0x6e2>
 800cc34:	2300      	movs	r3, #0
 800cc36:	9310      	str	r3, [sp, #64]	@ 0x40
 800cc38:	2301      	movs	r3, #1
 800cc3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc3c:	e7b5      	b.n	800cbaa <_strtod_l+0x6e2>
 800cc3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc40:	9805      	ldr	r0, [sp, #20]
 800cc42:	462a      	mov	r2, r5
 800cc44:	f7ff f9c8 	bl	800bfd8 <__lshift>
 800cc48:	901a      	str	r0, [sp, #104]	@ 0x68
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d1d9      	bne.n	800cc02 <_strtod_l+0x73a>
 800cc4e:	e65a      	b.n	800c906 <_strtod_l+0x43e>
 800cc50:	2e00      	cmp	r6, #0
 800cc52:	dd07      	ble.n	800cc64 <_strtod_l+0x79c>
 800cc54:	4649      	mov	r1, r9
 800cc56:	9805      	ldr	r0, [sp, #20]
 800cc58:	4632      	mov	r2, r6
 800cc5a:	f7ff f9bd 	bl	800bfd8 <__lshift>
 800cc5e:	4681      	mov	r9, r0
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d0d8      	beq.n	800cc16 <_strtod_l+0x74e>
 800cc64:	2f00      	cmp	r7, #0
 800cc66:	dd08      	ble.n	800cc7a <_strtod_l+0x7b2>
 800cc68:	4641      	mov	r1, r8
 800cc6a:	9805      	ldr	r0, [sp, #20]
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	f7ff f9b3 	bl	800bfd8 <__lshift>
 800cc72:	4680      	mov	r8, r0
 800cc74:	2800      	cmp	r0, #0
 800cc76:	f43f ae46 	beq.w	800c906 <_strtod_l+0x43e>
 800cc7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc7c:	9805      	ldr	r0, [sp, #20]
 800cc7e:	464a      	mov	r2, r9
 800cc80:	f7ff fa32 	bl	800c0e8 <__mdiff>
 800cc84:	4604      	mov	r4, r0
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f ae3d 	beq.w	800c906 <_strtod_l+0x43e>
 800cc8c:	68c3      	ldr	r3, [r0, #12]
 800cc8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc90:	2300      	movs	r3, #0
 800cc92:	60c3      	str	r3, [r0, #12]
 800cc94:	4641      	mov	r1, r8
 800cc96:	f7ff fa0b 	bl	800c0b0 <__mcmp>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	da46      	bge.n	800cd2c <_strtod_l+0x864>
 800cc9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cca0:	ea53 030a 	orrs.w	r3, r3, sl
 800cca4:	d16c      	bne.n	800cd80 <_strtod_l+0x8b8>
 800cca6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d168      	bne.n	800cd80 <_strtod_l+0x8b8>
 800ccae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccb2:	0d1b      	lsrs	r3, r3, #20
 800ccb4:	051b      	lsls	r3, r3, #20
 800ccb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccba:	d961      	bls.n	800cd80 <_strtod_l+0x8b8>
 800ccbc:	6963      	ldr	r3, [r4, #20]
 800ccbe:	b913      	cbnz	r3, 800ccc6 <_strtod_l+0x7fe>
 800ccc0:	6923      	ldr	r3, [r4, #16]
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	dd5c      	ble.n	800cd80 <_strtod_l+0x8b8>
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	2201      	movs	r2, #1
 800ccca:	9805      	ldr	r0, [sp, #20]
 800cccc:	f7ff f984 	bl	800bfd8 <__lshift>
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	f7ff f9ec 	bl	800c0b0 <__mcmp>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	dd51      	ble.n	800cd80 <_strtod_l+0x8b8>
 800ccdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cce0:	9a08      	ldr	r2, [sp, #32]
 800cce2:	0d1b      	lsrs	r3, r3, #20
 800cce4:	051b      	lsls	r3, r3, #20
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d06b      	beq.n	800cdc2 <_strtod_l+0x8fa>
 800ccea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ccee:	d868      	bhi.n	800cdc2 <_strtod_l+0x8fa>
 800ccf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ccf4:	f67f ae9d 	bls.w	800ca32 <_strtod_l+0x56a>
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd24 <_strtod_l+0x85c>)
 800ccfa:	4650      	mov	r0, sl
 800ccfc:	4659      	mov	r1, fp
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f7f3 fc52 	bl	80005a8 <__aeabi_dmul>
 800cd04:	4b08      	ldr	r3, [pc, #32]	@ (800cd28 <_strtod_l+0x860>)
 800cd06:	400b      	ands	r3, r1
 800cd08:	4682      	mov	sl, r0
 800cd0a:	468b      	mov	fp, r1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f47f ae05 	bne.w	800c91c <_strtod_l+0x454>
 800cd12:	9a05      	ldr	r2, [sp, #20]
 800cd14:	2322      	movs	r3, #34	@ 0x22
 800cd16:	6013      	str	r3, [r2, #0]
 800cd18:	e600      	b.n	800c91c <_strtod_l+0x454>
 800cd1a:	bf00      	nop
 800cd1c:	0800e888 	.word	0x0800e888
 800cd20:	fffffc02 	.word	0xfffffc02
 800cd24:	39500000 	.word	0x39500000
 800cd28:	7ff00000 	.word	0x7ff00000
 800cd2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cd30:	d165      	bne.n	800cdfe <_strtod_l+0x936>
 800cd32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cd34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd38:	b35a      	cbz	r2, 800cd92 <_strtod_l+0x8ca>
 800cd3a:	4a9f      	ldr	r2, [pc, #636]	@ (800cfb8 <_strtod_l+0xaf0>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d12b      	bne.n	800cd98 <_strtod_l+0x8d0>
 800cd40:	9b08      	ldr	r3, [sp, #32]
 800cd42:	4651      	mov	r1, sl
 800cd44:	b303      	cbz	r3, 800cd88 <_strtod_l+0x8c0>
 800cd46:	4b9d      	ldr	r3, [pc, #628]	@ (800cfbc <_strtod_l+0xaf4>)
 800cd48:	465a      	mov	r2, fp
 800cd4a:	4013      	ands	r3, r2
 800cd4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cd50:	f04f 32ff 	mov.w	r2, #4294967295
 800cd54:	d81b      	bhi.n	800cd8e <_strtod_l+0x8c6>
 800cd56:	0d1b      	lsrs	r3, r3, #20
 800cd58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd60:	4299      	cmp	r1, r3
 800cd62:	d119      	bne.n	800cd98 <_strtod_l+0x8d0>
 800cd64:	4b96      	ldr	r3, [pc, #600]	@ (800cfc0 <_strtod_l+0xaf8>)
 800cd66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d102      	bne.n	800cd72 <_strtod_l+0x8aa>
 800cd6c:	3101      	adds	r1, #1
 800cd6e:	f43f adca 	beq.w	800c906 <_strtod_l+0x43e>
 800cd72:	4b92      	ldr	r3, [pc, #584]	@ (800cfbc <_strtod_l+0xaf4>)
 800cd74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd76:	401a      	ands	r2, r3
 800cd78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cd7c:	f04f 0a00 	mov.w	sl, #0
 800cd80:	9b08      	ldr	r3, [sp, #32]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1b8      	bne.n	800ccf8 <_strtod_l+0x830>
 800cd86:	e5c9      	b.n	800c91c <_strtod_l+0x454>
 800cd88:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8c:	e7e8      	b.n	800cd60 <_strtod_l+0x898>
 800cd8e:	4613      	mov	r3, r2
 800cd90:	e7e6      	b.n	800cd60 <_strtod_l+0x898>
 800cd92:	ea53 030a 	orrs.w	r3, r3, sl
 800cd96:	d0a1      	beq.n	800ccdc <_strtod_l+0x814>
 800cd98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd9a:	b1db      	cbz	r3, 800cdd4 <_strtod_l+0x90c>
 800cd9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd9e:	4213      	tst	r3, r2
 800cda0:	d0ee      	beq.n	800cd80 <_strtod_l+0x8b8>
 800cda2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cda4:	9a08      	ldr	r2, [sp, #32]
 800cda6:	4650      	mov	r0, sl
 800cda8:	4659      	mov	r1, fp
 800cdaa:	b1bb      	cbz	r3, 800cddc <_strtod_l+0x914>
 800cdac:	f7ff fb6e 	bl	800c48c <sulp>
 800cdb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdb4:	ec53 2b10 	vmov	r2, r3, d0
 800cdb8:	f7f3 fa40 	bl	800023c <__adddf3>
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	468b      	mov	fp, r1
 800cdc0:	e7de      	b.n	800cd80 <_strtod_l+0x8b8>
 800cdc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cdc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdce:	f04f 3aff 	mov.w	sl, #4294967295
 800cdd2:	e7d5      	b.n	800cd80 <_strtod_l+0x8b8>
 800cdd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cdd6:	ea13 0f0a 	tst.w	r3, sl
 800cdda:	e7e1      	b.n	800cda0 <_strtod_l+0x8d8>
 800cddc:	f7ff fb56 	bl	800c48c <sulp>
 800cde0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cde4:	ec53 2b10 	vmov	r2, r3, d0
 800cde8:	f7f3 fa26 	bl	8000238 <__aeabi_dsub>
 800cdec:	2200      	movs	r2, #0
 800cdee:	2300      	movs	r3, #0
 800cdf0:	4682      	mov	sl, r0
 800cdf2:	468b      	mov	fp, r1
 800cdf4:	f7f3 fe40 	bl	8000a78 <__aeabi_dcmpeq>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0c1      	beq.n	800cd80 <_strtod_l+0x8b8>
 800cdfc:	e619      	b.n	800ca32 <_strtod_l+0x56a>
 800cdfe:	4641      	mov	r1, r8
 800ce00:	4620      	mov	r0, r4
 800ce02:	f7ff facd 	bl	800c3a0 <__ratio>
 800ce06:	ec57 6b10 	vmov	r6, r7, d0
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce10:	4630      	mov	r0, r6
 800ce12:	4639      	mov	r1, r7
 800ce14:	f7f3 fe44 	bl	8000aa0 <__aeabi_dcmple>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d06f      	beq.n	800cefc <_strtod_l+0xa34>
 800ce1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d17a      	bne.n	800cf18 <_strtod_l+0xa50>
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	d158      	bne.n	800ceda <_strtod_l+0xa12>
 800ce28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d15a      	bne.n	800cee8 <_strtod_l+0xa20>
 800ce32:	4b64      	ldr	r3, [pc, #400]	@ (800cfc4 <_strtod_l+0xafc>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	4630      	mov	r0, r6
 800ce38:	4639      	mov	r1, r7
 800ce3a:	f7f3 fe27 	bl	8000a8c <__aeabi_dcmplt>
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d159      	bne.n	800cef6 <_strtod_l+0xa2e>
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	4b60      	ldr	r3, [pc, #384]	@ (800cfc8 <_strtod_l+0xb00>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f7f3 fbad 	bl	80005a8 <__aeabi_dmul>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460f      	mov	r7, r1
 800ce52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ce56:	9606      	str	r6, [sp, #24]
 800ce58:	9307      	str	r3, [sp, #28]
 800ce5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce5e:	4d57      	ldr	r5, [pc, #348]	@ (800cfbc <_strtod_l+0xaf4>)
 800ce60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ce64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce66:	401d      	ands	r5, r3
 800ce68:	4b58      	ldr	r3, [pc, #352]	@ (800cfcc <_strtod_l+0xb04>)
 800ce6a:	429d      	cmp	r5, r3
 800ce6c:	f040 80b2 	bne.w	800cfd4 <_strtod_l+0xb0c>
 800ce70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ce76:	ec4b ab10 	vmov	d0, sl, fp
 800ce7a:	f7ff f9c9 	bl	800c210 <__ulp>
 800ce7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce82:	ec51 0b10 	vmov	r0, r1, d0
 800ce86:	f7f3 fb8f 	bl	80005a8 <__aeabi_dmul>
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	465b      	mov	r3, fp
 800ce8e:	f7f3 f9d5 	bl	800023c <__adddf3>
 800ce92:	460b      	mov	r3, r1
 800ce94:	4949      	ldr	r1, [pc, #292]	@ (800cfbc <_strtod_l+0xaf4>)
 800ce96:	4a4e      	ldr	r2, [pc, #312]	@ (800cfd0 <_strtod_l+0xb08>)
 800ce98:	4019      	ands	r1, r3
 800ce9a:	4291      	cmp	r1, r2
 800ce9c:	4682      	mov	sl, r0
 800ce9e:	d942      	bls.n	800cf26 <_strtod_l+0xa5e>
 800cea0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cea2:	4b47      	ldr	r3, [pc, #284]	@ (800cfc0 <_strtod_l+0xaf8>)
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d103      	bne.n	800ceb0 <_strtod_l+0x9e8>
 800cea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ceaa:	3301      	adds	r3, #1
 800ceac:	f43f ad2b 	beq.w	800c906 <_strtod_l+0x43e>
 800ceb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cfc0 <_strtod_l+0xaf8>
 800ceb4:	f04f 3aff 	mov.w	sl, #4294967295
 800ceb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	f7fe fe74 	bl	800bba8 <_Bfree>
 800cec0:	9805      	ldr	r0, [sp, #20]
 800cec2:	4649      	mov	r1, r9
 800cec4:	f7fe fe70 	bl	800bba8 <_Bfree>
 800cec8:	9805      	ldr	r0, [sp, #20]
 800ceca:	4641      	mov	r1, r8
 800cecc:	f7fe fe6c 	bl	800bba8 <_Bfree>
 800ced0:	9805      	ldr	r0, [sp, #20]
 800ced2:	4621      	mov	r1, r4
 800ced4:	f7fe fe68 	bl	800bba8 <_Bfree>
 800ced8:	e618      	b.n	800cb0c <_strtod_l+0x644>
 800ceda:	f1ba 0f01 	cmp.w	sl, #1
 800cede:	d103      	bne.n	800cee8 <_strtod_l+0xa20>
 800cee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f43f ada5 	beq.w	800ca32 <_strtod_l+0x56a>
 800cee8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cf98 <_strtod_l+0xad0>
 800ceec:	4f35      	ldr	r7, [pc, #212]	@ (800cfc4 <_strtod_l+0xafc>)
 800ceee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cef2:	2600      	movs	r6, #0
 800cef4:	e7b1      	b.n	800ce5a <_strtod_l+0x992>
 800cef6:	4f34      	ldr	r7, [pc, #208]	@ (800cfc8 <_strtod_l+0xb00>)
 800cef8:	2600      	movs	r6, #0
 800cefa:	e7aa      	b.n	800ce52 <_strtod_l+0x98a>
 800cefc:	4b32      	ldr	r3, [pc, #200]	@ (800cfc8 <_strtod_l+0xb00>)
 800cefe:	4630      	mov	r0, r6
 800cf00:	4639      	mov	r1, r7
 800cf02:	2200      	movs	r2, #0
 800cf04:	f7f3 fb50 	bl	80005a8 <__aeabi_dmul>
 800cf08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	460f      	mov	r7, r1
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d09f      	beq.n	800ce52 <_strtod_l+0x98a>
 800cf12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cf16:	e7a0      	b.n	800ce5a <_strtod_l+0x992>
 800cf18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cfa0 <_strtod_l+0xad8>
 800cf1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf20:	ec57 6b17 	vmov	r6, r7, d7
 800cf24:	e799      	b.n	800ce5a <_strtod_l+0x992>
 800cf26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cf2a:	9b08      	ldr	r3, [sp, #32]
 800cf2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1c1      	bne.n	800ceb8 <_strtod_l+0x9f0>
 800cf34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf38:	0d1b      	lsrs	r3, r3, #20
 800cf3a:	051b      	lsls	r3, r3, #20
 800cf3c:	429d      	cmp	r5, r3
 800cf3e:	d1bb      	bne.n	800ceb8 <_strtod_l+0x9f0>
 800cf40:	4630      	mov	r0, r6
 800cf42:	4639      	mov	r1, r7
 800cf44:	f7f3 fe90 	bl	8000c68 <__aeabi_d2lz>
 800cf48:	f7f3 fb00 	bl	800054c <__aeabi_l2d>
 800cf4c:	4602      	mov	r2, r0
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4630      	mov	r0, r6
 800cf52:	4639      	mov	r1, r7
 800cf54:	f7f3 f970 	bl	8000238 <__aeabi_dsub>
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cf60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf66:	ea46 060a 	orr.w	r6, r6, sl
 800cf6a:	431e      	orrs	r6, r3
 800cf6c:	d06f      	beq.n	800d04e <_strtod_l+0xb86>
 800cf6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cfa8 <_strtod_l+0xae0>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 fd8a 	bl	8000a8c <__aeabi_dcmplt>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	f47f accf 	bne.w	800c91c <_strtod_l+0x454>
 800cf7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800cfb0 <_strtod_l+0xae8>)
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf88:	f7f3 fd9e 	bl	8000ac8 <__aeabi_dcmpgt>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d093      	beq.n	800ceb8 <_strtod_l+0x9f0>
 800cf90:	e4c4      	b.n	800c91c <_strtod_l+0x454>
 800cf92:	bf00      	nop
 800cf94:	f3af 8000 	nop.w
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	bff00000 	.word	0xbff00000
 800cfa0:	00000000 	.word	0x00000000
 800cfa4:	3ff00000 	.word	0x3ff00000
 800cfa8:	94a03595 	.word	0x94a03595
 800cfac:	3fdfffff 	.word	0x3fdfffff
 800cfb0:	35afe535 	.word	0x35afe535
 800cfb4:	3fe00000 	.word	0x3fe00000
 800cfb8:	000fffff 	.word	0x000fffff
 800cfbc:	7ff00000 	.word	0x7ff00000
 800cfc0:	7fefffff 	.word	0x7fefffff
 800cfc4:	3ff00000 	.word	0x3ff00000
 800cfc8:	3fe00000 	.word	0x3fe00000
 800cfcc:	7fe00000 	.word	0x7fe00000
 800cfd0:	7c9fffff 	.word	0x7c9fffff
 800cfd4:	9b08      	ldr	r3, [sp, #32]
 800cfd6:	b323      	cbz	r3, 800d022 <_strtod_l+0xb5a>
 800cfd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cfdc:	d821      	bhi.n	800d022 <_strtod_l+0xb5a>
 800cfde:	a328      	add	r3, pc, #160	@ (adr r3, 800d080 <_strtod_l+0xbb8>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f7f3 fd5a 	bl	8000aa0 <__aeabi_dcmple>
 800cfec:	b1a0      	cbz	r0, 800d018 <_strtod_l+0xb50>
 800cfee:	4639      	mov	r1, r7
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7f3 fdb1 	bl	8000b58 <__aeabi_d2uiz>
 800cff6:	2801      	cmp	r0, #1
 800cff8:	bf38      	it	cc
 800cffa:	2001      	movcc	r0, #1
 800cffc:	f7f3 fa5a 	bl	80004b4 <__aeabi_ui2d>
 800d000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d002:	4606      	mov	r6, r0
 800d004:	460f      	mov	r7, r1
 800d006:	b9fb      	cbnz	r3, 800d048 <_strtod_l+0xb80>
 800d008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d00c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d00e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d010:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d014:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d01a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d01e:	1b5b      	subs	r3, r3, r5
 800d020:	9311      	str	r3, [sp, #68]	@ 0x44
 800d022:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d026:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d02a:	f7ff f8f1 	bl	800c210 <__ulp>
 800d02e:	4650      	mov	r0, sl
 800d030:	ec53 2b10 	vmov	r2, r3, d0
 800d034:	4659      	mov	r1, fp
 800d036:	f7f3 fab7 	bl	80005a8 <__aeabi_dmul>
 800d03a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d03e:	f7f3 f8fd 	bl	800023c <__adddf3>
 800d042:	4682      	mov	sl, r0
 800d044:	468b      	mov	fp, r1
 800d046:	e770      	b.n	800cf2a <_strtod_l+0xa62>
 800d048:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d04c:	e7e0      	b.n	800d010 <_strtod_l+0xb48>
 800d04e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d088 <_strtod_l+0xbc0>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	f7f3 fd1a 	bl	8000a8c <__aeabi_dcmplt>
 800d058:	e798      	b.n	800cf8c <_strtod_l+0xac4>
 800d05a:	2300      	movs	r3, #0
 800d05c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d05e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	f7ff ba6d 	b.w	800c542 <_strtod_l+0x7a>
 800d068:	2a65      	cmp	r2, #101	@ 0x65
 800d06a:	f43f ab66 	beq.w	800c73a <_strtod_l+0x272>
 800d06e:	2a45      	cmp	r2, #69	@ 0x45
 800d070:	f43f ab63 	beq.w	800c73a <_strtod_l+0x272>
 800d074:	2301      	movs	r3, #1
 800d076:	f7ff bb9e 	b.w	800c7b6 <_strtod_l+0x2ee>
 800d07a:	bf00      	nop
 800d07c:	f3af 8000 	nop.w
 800d080:	ffc00000 	.word	0xffc00000
 800d084:	41dfffff 	.word	0x41dfffff
 800d088:	94a03595 	.word	0x94a03595
 800d08c:	3fcfffff 	.word	0x3fcfffff

0800d090 <_strtod_r>:
 800d090:	4b01      	ldr	r3, [pc, #4]	@ (800d098 <_strtod_r+0x8>)
 800d092:	f7ff ba19 	b.w	800c4c8 <_strtod_l>
 800d096:	bf00      	nop
 800d098:	20000084 	.word	0x20000084

0800d09c <_strtol_l.constprop.0>:
 800d09c:	2b24      	cmp	r3, #36	@ 0x24
 800d09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a2:	4686      	mov	lr, r0
 800d0a4:	4690      	mov	r8, r2
 800d0a6:	d801      	bhi.n	800d0ac <_strtol_l.constprop.0+0x10>
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d106      	bne.n	800d0ba <_strtol_l.constprop.0+0x1e>
 800d0ac:	f7fd fdba 	bl	800ac24 <__errno>
 800d0b0:	2316      	movs	r3, #22
 800d0b2:	6003      	str	r3, [r0, #0]
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ba:	4834      	ldr	r0, [pc, #208]	@ (800d18c <_strtol_l.constprop.0+0xf0>)
 800d0bc:	460d      	mov	r5, r1
 800d0be:	462a      	mov	r2, r5
 800d0c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0c4:	5d06      	ldrb	r6, [r0, r4]
 800d0c6:	f016 0608 	ands.w	r6, r6, #8
 800d0ca:	d1f8      	bne.n	800d0be <_strtol_l.constprop.0+0x22>
 800d0cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d0ce:	d12d      	bne.n	800d12c <_strtol_l.constprop.0+0x90>
 800d0d0:	782c      	ldrb	r4, [r5, #0]
 800d0d2:	2601      	movs	r6, #1
 800d0d4:	1c95      	adds	r5, r2, #2
 800d0d6:	f033 0210 	bics.w	r2, r3, #16
 800d0da:	d109      	bne.n	800d0f0 <_strtol_l.constprop.0+0x54>
 800d0dc:	2c30      	cmp	r4, #48	@ 0x30
 800d0de:	d12a      	bne.n	800d136 <_strtol_l.constprop.0+0x9a>
 800d0e0:	782a      	ldrb	r2, [r5, #0]
 800d0e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d0e6:	2a58      	cmp	r2, #88	@ 0x58
 800d0e8:	d125      	bne.n	800d136 <_strtol_l.constprop.0+0x9a>
 800d0ea:	786c      	ldrb	r4, [r5, #1]
 800d0ec:	2310      	movs	r3, #16
 800d0ee:	3502      	adds	r5, #2
 800d0f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d0f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	fbbc f9f3 	udiv	r9, ip, r3
 800d0fe:	4610      	mov	r0, r2
 800d100:	fb03 ca19 	mls	sl, r3, r9, ip
 800d104:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d108:	2f09      	cmp	r7, #9
 800d10a:	d81b      	bhi.n	800d144 <_strtol_l.constprop.0+0xa8>
 800d10c:	463c      	mov	r4, r7
 800d10e:	42a3      	cmp	r3, r4
 800d110:	dd27      	ble.n	800d162 <_strtol_l.constprop.0+0xc6>
 800d112:	1c57      	adds	r7, r2, #1
 800d114:	d007      	beq.n	800d126 <_strtol_l.constprop.0+0x8a>
 800d116:	4581      	cmp	r9, r0
 800d118:	d320      	bcc.n	800d15c <_strtol_l.constprop.0+0xc0>
 800d11a:	d101      	bne.n	800d120 <_strtol_l.constprop.0+0x84>
 800d11c:	45a2      	cmp	sl, r4
 800d11e:	db1d      	blt.n	800d15c <_strtol_l.constprop.0+0xc0>
 800d120:	fb00 4003 	mla	r0, r0, r3, r4
 800d124:	2201      	movs	r2, #1
 800d126:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d12a:	e7eb      	b.n	800d104 <_strtol_l.constprop.0+0x68>
 800d12c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d12e:	bf04      	itt	eq
 800d130:	782c      	ldrbeq	r4, [r5, #0]
 800d132:	1c95      	addeq	r5, r2, #2
 800d134:	e7cf      	b.n	800d0d6 <_strtol_l.constprop.0+0x3a>
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1da      	bne.n	800d0f0 <_strtol_l.constprop.0+0x54>
 800d13a:	2c30      	cmp	r4, #48	@ 0x30
 800d13c:	bf0c      	ite	eq
 800d13e:	2308      	moveq	r3, #8
 800d140:	230a      	movne	r3, #10
 800d142:	e7d5      	b.n	800d0f0 <_strtol_l.constprop.0+0x54>
 800d144:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d148:	2f19      	cmp	r7, #25
 800d14a:	d801      	bhi.n	800d150 <_strtol_l.constprop.0+0xb4>
 800d14c:	3c37      	subs	r4, #55	@ 0x37
 800d14e:	e7de      	b.n	800d10e <_strtol_l.constprop.0+0x72>
 800d150:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d154:	2f19      	cmp	r7, #25
 800d156:	d804      	bhi.n	800d162 <_strtol_l.constprop.0+0xc6>
 800d158:	3c57      	subs	r4, #87	@ 0x57
 800d15a:	e7d8      	b.n	800d10e <_strtol_l.constprop.0+0x72>
 800d15c:	f04f 32ff 	mov.w	r2, #4294967295
 800d160:	e7e1      	b.n	800d126 <_strtol_l.constprop.0+0x8a>
 800d162:	1c53      	adds	r3, r2, #1
 800d164:	d108      	bne.n	800d178 <_strtol_l.constprop.0+0xdc>
 800d166:	2322      	movs	r3, #34	@ 0x22
 800d168:	f8ce 3000 	str.w	r3, [lr]
 800d16c:	4660      	mov	r0, ip
 800d16e:	f1b8 0f00 	cmp.w	r8, #0
 800d172:	d0a0      	beq.n	800d0b6 <_strtol_l.constprop.0+0x1a>
 800d174:	1e69      	subs	r1, r5, #1
 800d176:	e006      	b.n	800d186 <_strtol_l.constprop.0+0xea>
 800d178:	b106      	cbz	r6, 800d17c <_strtol_l.constprop.0+0xe0>
 800d17a:	4240      	negs	r0, r0
 800d17c:	f1b8 0f00 	cmp.w	r8, #0
 800d180:	d099      	beq.n	800d0b6 <_strtol_l.constprop.0+0x1a>
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1f6      	bne.n	800d174 <_strtol_l.constprop.0+0xd8>
 800d186:	f8c8 1000 	str.w	r1, [r8]
 800d18a:	e794      	b.n	800d0b6 <_strtol_l.constprop.0+0x1a>
 800d18c:	0800e8b1 	.word	0x0800e8b1

0800d190 <_strtol_r>:
 800d190:	f7ff bf84 	b.w	800d09c <_strtol_l.constprop.0>

0800d194 <__ssputs_r>:
 800d194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	688e      	ldr	r6, [r1, #8]
 800d19a:	461f      	mov	r7, r3
 800d19c:	42be      	cmp	r6, r7
 800d19e:	680b      	ldr	r3, [r1, #0]
 800d1a0:	4682      	mov	sl, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	4690      	mov	r8, r2
 800d1a6:	d82d      	bhi.n	800d204 <__ssputs_r+0x70>
 800d1a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1b0:	d026      	beq.n	800d200 <__ssputs_r+0x6c>
 800d1b2:	6965      	ldr	r5, [r4, #20]
 800d1b4:	6909      	ldr	r1, [r1, #16]
 800d1b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ba:	eba3 0901 	sub.w	r9, r3, r1
 800d1be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1c2:	1c7b      	adds	r3, r7, #1
 800d1c4:	444b      	add	r3, r9
 800d1c6:	106d      	asrs	r5, r5, #1
 800d1c8:	429d      	cmp	r5, r3
 800d1ca:	bf38      	it	cc
 800d1cc:	461d      	movcc	r5, r3
 800d1ce:	0553      	lsls	r3, r2, #21
 800d1d0:	d527      	bpl.n	800d222 <__ssputs_r+0x8e>
 800d1d2:	4629      	mov	r1, r5
 800d1d4:	f7fe fc1c 	bl	800ba10 <_malloc_r>
 800d1d8:	4606      	mov	r6, r0
 800d1da:	b360      	cbz	r0, 800d236 <__ssputs_r+0xa2>
 800d1dc:	6921      	ldr	r1, [r4, #16]
 800d1de:	464a      	mov	r2, r9
 800d1e0:	f000 fa18 	bl	800d614 <memcpy>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	6126      	str	r6, [r4, #16]
 800d1f2:	6165      	str	r5, [r4, #20]
 800d1f4:	444e      	add	r6, r9
 800d1f6:	eba5 0509 	sub.w	r5, r5, r9
 800d1fa:	6026      	str	r6, [r4, #0]
 800d1fc:	60a5      	str	r5, [r4, #8]
 800d1fe:	463e      	mov	r6, r7
 800d200:	42be      	cmp	r6, r7
 800d202:	d900      	bls.n	800d206 <__ssputs_r+0x72>
 800d204:	463e      	mov	r6, r7
 800d206:	6820      	ldr	r0, [r4, #0]
 800d208:	4632      	mov	r2, r6
 800d20a:	4641      	mov	r1, r8
 800d20c:	f000 f9c6 	bl	800d59c <memmove>
 800d210:	68a3      	ldr	r3, [r4, #8]
 800d212:	1b9b      	subs	r3, r3, r6
 800d214:	60a3      	str	r3, [r4, #8]
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	4433      	add	r3, r6
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	2000      	movs	r0, #0
 800d21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d222:	462a      	mov	r2, r5
 800d224:	f000 fd89 	bl	800dd3a <_realloc_r>
 800d228:	4606      	mov	r6, r0
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d1e0      	bne.n	800d1f0 <__ssputs_r+0x5c>
 800d22e:	6921      	ldr	r1, [r4, #16]
 800d230:	4650      	mov	r0, sl
 800d232:	f7fe fb79 	bl	800b928 <_free_r>
 800d236:	230c      	movs	r3, #12
 800d238:	f8ca 3000 	str.w	r3, [sl]
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295
 800d248:	e7e9      	b.n	800d21e <__ssputs_r+0x8a>
	...

0800d24c <_svfiprintf_r>:
 800d24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d250:	4698      	mov	r8, r3
 800d252:	898b      	ldrh	r3, [r1, #12]
 800d254:	061b      	lsls	r3, r3, #24
 800d256:	b09d      	sub	sp, #116	@ 0x74
 800d258:	4607      	mov	r7, r0
 800d25a:	460d      	mov	r5, r1
 800d25c:	4614      	mov	r4, r2
 800d25e:	d510      	bpl.n	800d282 <_svfiprintf_r+0x36>
 800d260:	690b      	ldr	r3, [r1, #16]
 800d262:	b973      	cbnz	r3, 800d282 <_svfiprintf_r+0x36>
 800d264:	2140      	movs	r1, #64	@ 0x40
 800d266:	f7fe fbd3 	bl	800ba10 <_malloc_r>
 800d26a:	6028      	str	r0, [r5, #0]
 800d26c:	6128      	str	r0, [r5, #16]
 800d26e:	b930      	cbnz	r0, 800d27e <_svfiprintf_r+0x32>
 800d270:	230c      	movs	r3, #12
 800d272:	603b      	str	r3, [r7, #0]
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	b01d      	add	sp, #116	@ 0x74
 800d27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27e:	2340      	movs	r3, #64	@ 0x40
 800d280:	616b      	str	r3, [r5, #20]
 800d282:	2300      	movs	r3, #0
 800d284:	9309      	str	r3, [sp, #36]	@ 0x24
 800d286:	2320      	movs	r3, #32
 800d288:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d290:	2330      	movs	r3, #48	@ 0x30
 800d292:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d430 <_svfiprintf_r+0x1e4>
 800d296:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d29a:	f04f 0901 	mov.w	r9, #1
 800d29e:	4623      	mov	r3, r4
 800d2a0:	469a      	mov	sl, r3
 800d2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2a6:	b10a      	cbz	r2, 800d2ac <_svfiprintf_r+0x60>
 800d2a8:	2a25      	cmp	r2, #37	@ 0x25
 800d2aa:	d1f9      	bne.n	800d2a0 <_svfiprintf_r+0x54>
 800d2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800d2b0:	d00b      	beq.n	800d2ca <_svfiprintf_r+0x7e>
 800d2b2:	465b      	mov	r3, fp
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff ff6b 	bl	800d194 <__ssputs_r>
 800d2be:	3001      	adds	r0, #1
 800d2c0:	f000 80a7 	beq.w	800d412 <_svfiprintf_r+0x1c6>
 800d2c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2c6:	445a      	add	r2, fp
 800d2c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f000 809f 	beq.w	800d412 <_svfiprintf_r+0x1c6>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2de:	f10a 0a01 	add.w	sl, sl, #1
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	9307      	str	r3, [sp, #28]
 800d2e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2ec:	4654      	mov	r4, sl
 800d2ee:	2205      	movs	r2, #5
 800d2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f4:	484e      	ldr	r0, [pc, #312]	@ (800d430 <_svfiprintf_r+0x1e4>)
 800d2f6:	f7f2 ff43 	bl	8000180 <memchr>
 800d2fa:	9a04      	ldr	r2, [sp, #16]
 800d2fc:	b9d8      	cbnz	r0, 800d336 <_svfiprintf_r+0xea>
 800d2fe:	06d0      	lsls	r0, r2, #27
 800d300:	bf44      	itt	mi
 800d302:	2320      	movmi	r3, #32
 800d304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d308:	0711      	lsls	r1, r2, #28
 800d30a:	bf44      	itt	mi
 800d30c:	232b      	movmi	r3, #43	@ 0x2b
 800d30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d312:	f89a 3000 	ldrb.w	r3, [sl]
 800d316:	2b2a      	cmp	r3, #42	@ 0x2a
 800d318:	d015      	beq.n	800d346 <_svfiprintf_r+0xfa>
 800d31a:	9a07      	ldr	r2, [sp, #28]
 800d31c:	4654      	mov	r4, sl
 800d31e:	2000      	movs	r0, #0
 800d320:	f04f 0c0a 	mov.w	ip, #10
 800d324:	4621      	mov	r1, r4
 800d326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d32a:	3b30      	subs	r3, #48	@ 0x30
 800d32c:	2b09      	cmp	r3, #9
 800d32e:	d94b      	bls.n	800d3c8 <_svfiprintf_r+0x17c>
 800d330:	b1b0      	cbz	r0, 800d360 <_svfiprintf_r+0x114>
 800d332:	9207      	str	r2, [sp, #28]
 800d334:	e014      	b.n	800d360 <_svfiprintf_r+0x114>
 800d336:	eba0 0308 	sub.w	r3, r0, r8
 800d33a:	fa09 f303 	lsl.w	r3, r9, r3
 800d33e:	4313      	orrs	r3, r2
 800d340:	9304      	str	r3, [sp, #16]
 800d342:	46a2      	mov	sl, r4
 800d344:	e7d2      	b.n	800d2ec <_svfiprintf_r+0xa0>
 800d346:	9b03      	ldr	r3, [sp, #12]
 800d348:	1d19      	adds	r1, r3, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	9103      	str	r1, [sp, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	bfbb      	ittet	lt
 800d352:	425b      	neglt	r3, r3
 800d354:	f042 0202 	orrlt.w	r2, r2, #2
 800d358:	9307      	strge	r3, [sp, #28]
 800d35a:	9307      	strlt	r3, [sp, #28]
 800d35c:	bfb8      	it	lt
 800d35e:	9204      	strlt	r2, [sp, #16]
 800d360:	7823      	ldrb	r3, [r4, #0]
 800d362:	2b2e      	cmp	r3, #46	@ 0x2e
 800d364:	d10a      	bne.n	800d37c <_svfiprintf_r+0x130>
 800d366:	7863      	ldrb	r3, [r4, #1]
 800d368:	2b2a      	cmp	r3, #42	@ 0x2a
 800d36a:	d132      	bne.n	800d3d2 <_svfiprintf_r+0x186>
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	1d1a      	adds	r2, r3, #4
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	9203      	str	r2, [sp, #12]
 800d374:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d378:	3402      	adds	r4, #2
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d440 <_svfiprintf_r+0x1f4>
 800d380:	7821      	ldrb	r1, [r4, #0]
 800d382:	2203      	movs	r2, #3
 800d384:	4650      	mov	r0, sl
 800d386:	f7f2 fefb 	bl	8000180 <memchr>
 800d38a:	b138      	cbz	r0, 800d39c <_svfiprintf_r+0x150>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	eba0 000a 	sub.w	r0, r0, sl
 800d392:	2240      	movs	r2, #64	@ 0x40
 800d394:	4082      	lsls	r2, r0
 800d396:	4313      	orrs	r3, r2
 800d398:	3401      	adds	r4, #1
 800d39a:	9304      	str	r3, [sp, #16]
 800d39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3a0:	4824      	ldr	r0, [pc, #144]	@ (800d434 <_svfiprintf_r+0x1e8>)
 800d3a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3a6:	2206      	movs	r2, #6
 800d3a8:	f7f2 feea 	bl	8000180 <memchr>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d036      	beq.n	800d41e <_svfiprintf_r+0x1d2>
 800d3b0:	4b21      	ldr	r3, [pc, #132]	@ (800d438 <_svfiprintf_r+0x1ec>)
 800d3b2:	bb1b      	cbnz	r3, 800d3fc <_svfiprintf_r+0x1b0>
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	3307      	adds	r3, #7
 800d3b8:	f023 0307 	bic.w	r3, r3, #7
 800d3bc:	3308      	adds	r3, #8
 800d3be:	9303      	str	r3, [sp, #12]
 800d3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c2:	4433      	add	r3, r6
 800d3c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c6:	e76a      	b.n	800d29e <_svfiprintf_r+0x52>
 800d3c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3cc:	460c      	mov	r4, r1
 800d3ce:	2001      	movs	r0, #1
 800d3d0:	e7a8      	b.n	800d324 <_svfiprintf_r+0xd8>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	3401      	adds	r4, #1
 800d3d6:	9305      	str	r3, [sp, #20]
 800d3d8:	4619      	mov	r1, r3
 800d3da:	f04f 0c0a 	mov.w	ip, #10
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e4:	3a30      	subs	r2, #48	@ 0x30
 800d3e6:	2a09      	cmp	r2, #9
 800d3e8:	d903      	bls.n	800d3f2 <_svfiprintf_r+0x1a6>
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d0c6      	beq.n	800d37c <_svfiprintf_r+0x130>
 800d3ee:	9105      	str	r1, [sp, #20]
 800d3f0:	e7c4      	b.n	800d37c <_svfiprintf_r+0x130>
 800d3f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	e7f0      	b.n	800d3de <_svfiprintf_r+0x192>
 800d3fc:	ab03      	add	r3, sp, #12
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	462a      	mov	r2, r5
 800d402:	4b0e      	ldr	r3, [pc, #56]	@ (800d43c <_svfiprintf_r+0x1f0>)
 800d404:	a904      	add	r1, sp, #16
 800d406:	4638      	mov	r0, r7
 800d408:	f7fc fc94 	bl	8009d34 <_printf_float>
 800d40c:	1c42      	adds	r2, r0, #1
 800d40e:	4606      	mov	r6, r0
 800d410:	d1d6      	bne.n	800d3c0 <_svfiprintf_r+0x174>
 800d412:	89ab      	ldrh	r3, [r5, #12]
 800d414:	065b      	lsls	r3, r3, #25
 800d416:	f53f af2d 	bmi.w	800d274 <_svfiprintf_r+0x28>
 800d41a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d41c:	e72c      	b.n	800d278 <_svfiprintf_r+0x2c>
 800d41e:	ab03      	add	r3, sp, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	462a      	mov	r2, r5
 800d424:	4b05      	ldr	r3, [pc, #20]	@ (800d43c <_svfiprintf_r+0x1f0>)
 800d426:	a904      	add	r1, sp, #16
 800d428:	4638      	mov	r0, r7
 800d42a:	f7fc ff1b 	bl	800a264 <_printf_i>
 800d42e:	e7ed      	b.n	800d40c <_svfiprintf_r+0x1c0>
 800d430:	0800e9b1 	.word	0x0800e9b1
 800d434:	0800e9bb 	.word	0x0800e9bb
 800d438:	08009d35 	.word	0x08009d35
 800d43c:	0800d195 	.word	0x0800d195
 800d440:	0800e9b7 	.word	0x0800e9b7

0800d444 <__sflush_r>:
 800d444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	0716      	lsls	r6, r2, #28
 800d44e:	4605      	mov	r5, r0
 800d450:	460c      	mov	r4, r1
 800d452:	d454      	bmi.n	800d4fe <__sflush_r+0xba>
 800d454:	684b      	ldr	r3, [r1, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	dc02      	bgt.n	800d460 <__sflush_r+0x1c>
 800d45a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	dd48      	ble.n	800d4f2 <__sflush_r+0xae>
 800d460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d462:	2e00      	cmp	r6, #0
 800d464:	d045      	beq.n	800d4f2 <__sflush_r+0xae>
 800d466:	2300      	movs	r3, #0
 800d468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d46c:	682f      	ldr	r7, [r5, #0]
 800d46e:	6a21      	ldr	r1, [r4, #32]
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	d030      	beq.n	800d4d6 <__sflush_r+0x92>
 800d474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	0759      	lsls	r1, r3, #29
 800d47a:	d505      	bpl.n	800d488 <__sflush_r+0x44>
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	1ad2      	subs	r2, r2, r3
 800d480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d482:	b10b      	cbz	r3, 800d488 <__sflush_r+0x44>
 800d484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d486:	1ad2      	subs	r2, r2, r3
 800d488:	2300      	movs	r3, #0
 800d48a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d48c:	6a21      	ldr	r1, [r4, #32]
 800d48e:	4628      	mov	r0, r5
 800d490:	47b0      	blx	r6
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	89a3      	ldrh	r3, [r4, #12]
 800d496:	d106      	bne.n	800d4a6 <__sflush_r+0x62>
 800d498:	6829      	ldr	r1, [r5, #0]
 800d49a:	291d      	cmp	r1, #29
 800d49c:	d82b      	bhi.n	800d4f6 <__sflush_r+0xb2>
 800d49e:	4a2a      	ldr	r2, [pc, #168]	@ (800d548 <__sflush_r+0x104>)
 800d4a0:	410a      	asrs	r2, r1
 800d4a2:	07d6      	lsls	r6, r2, #31
 800d4a4:	d427      	bmi.n	800d4f6 <__sflush_r+0xb2>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	6062      	str	r2, [r4, #4]
 800d4aa:	04d9      	lsls	r1, r3, #19
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	6022      	str	r2, [r4, #0]
 800d4b0:	d504      	bpl.n	800d4bc <__sflush_r+0x78>
 800d4b2:	1c42      	adds	r2, r0, #1
 800d4b4:	d101      	bne.n	800d4ba <__sflush_r+0x76>
 800d4b6:	682b      	ldr	r3, [r5, #0]
 800d4b8:	b903      	cbnz	r3, 800d4bc <__sflush_r+0x78>
 800d4ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4be:	602f      	str	r7, [r5, #0]
 800d4c0:	b1b9      	cbz	r1, 800d4f2 <__sflush_r+0xae>
 800d4c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4c6:	4299      	cmp	r1, r3
 800d4c8:	d002      	beq.n	800d4d0 <__sflush_r+0x8c>
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f7fe fa2c 	bl	800b928 <_free_r>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4d4:	e00d      	b.n	800d4f2 <__sflush_r+0xae>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	4628      	mov	r0, r5
 800d4da:	47b0      	blx	r6
 800d4dc:	4602      	mov	r2, r0
 800d4de:	1c50      	adds	r0, r2, #1
 800d4e0:	d1c9      	bne.n	800d476 <__sflush_r+0x32>
 800d4e2:	682b      	ldr	r3, [r5, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0c6      	beq.n	800d476 <__sflush_r+0x32>
 800d4e8:	2b1d      	cmp	r3, #29
 800d4ea:	d001      	beq.n	800d4f0 <__sflush_r+0xac>
 800d4ec:	2b16      	cmp	r3, #22
 800d4ee:	d11e      	bne.n	800d52e <__sflush_r+0xea>
 800d4f0:	602f      	str	r7, [r5, #0]
 800d4f2:	2000      	movs	r0, #0
 800d4f4:	e022      	b.n	800d53c <__sflush_r+0xf8>
 800d4f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4fa:	b21b      	sxth	r3, r3
 800d4fc:	e01b      	b.n	800d536 <__sflush_r+0xf2>
 800d4fe:	690f      	ldr	r7, [r1, #16]
 800d500:	2f00      	cmp	r7, #0
 800d502:	d0f6      	beq.n	800d4f2 <__sflush_r+0xae>
 800d504:	0793      	lsls	r3, r2, #30
 800d506:	680e      	ldr	r6, [r1, #0]
 800d508:	bf08      	it	eq
 800d50a:	694b      	ldreq	r3, [r1, #20]
 800d50c:	600f      	str	r7, [r1, #0]
 800d50e:	bf18      	it	ne
 800d510:	2300      	movne	r3, #0
 800d512:	eba6 0807 	sub.w	r8, r6, r7
 800d516:	608b      	str	r3, [r1, #8]
 800d518:	f1b8 0f00 	cmp.w	r8, #0
 800d51c:	dde9      	ble.n	800d4f2 <__sflush_r+0xae>
 800d51e:	6a21      	ldr	r1, [r4, #32]
 800d520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d522:	4643      	mov	r3, r8
 800d524:	463a      	mov	r2, r7
 800d526:	4628      	mov	r0, r5
 800d528:	47b0      	blx	r6
 800d52a:	2800      	cmp	r0, #0
 800d52c:	dc08      	bgt.n	800d540 <__sflush_r+0xfc>
 800d52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d540:	4407      	add	r7, r0
 800d542:	eba8 0800 	sub.w	r8, r8, r0
 800d546:	e7e7      	b.n	800d518 <__sflush_r+0xd4>
 800d548:	dfbffffe 	.word	0xdfbffffe

0800d54c <_fflush_r>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	690b      	ldr	r3, [r1, #16]
 800d550:	4605      	mov	r5, r0
 800d552:	460c      	mov	r4, r1
 800d554:	b913      	cbnz	r3, 800d55c <_fflush_r+0x10>
 800d556:	2500      	movs	r5, #0
 800d558:	4628      	mov	r0, r5
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	b118      	cbz	r0, 800d566 <_fflush_r+0x1a>
 800d55e:	6a03      	ldr	r3, [r0, #32]
 800d560:	b90b      	cbnz	r3, 800d566 <_fflush_r+0x1a>
 800d562:	f7fd fa3f 	bl	800a9e4 <__sinit>
 800d566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0f3      	beq.n	800d556 <_fflush_r+0xa>
 800d56e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d570:	07d0      	lsls	r0, r2, #31
 800d572:	d404      	bmi.n	800d57e <_fflush_r+0x32>
 800d574:	0599      	lsls	r1, r3, #22
 800d576:	d402      	bmi.n	800d57e <_fflush_r+0x32>
 800d578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d57a:	f7fd fb7e 	bl	800ac7a <__retarget_lock_acquire_recursive>
 800d57e:	4628      	mov	r0, r5
 800d580:	4621      	mov	r1, r4
 800d582:	f7ff ff5f 	bl	800d444 <__sflush_r>
 800d586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d588:	07da      	lsls	r2, r3, #31
 800d58a:	4605      	mov	r5, r0
 800d58c:	d4e4      	bmi.n	800d558 <_fflush_r+0xc>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	059b      	lsls	r3, r3, #22
 800d592:	d4e1      	bmi.n	800d558 <_fflush_r+0xc>
 800d594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d596:	f7fd fb71 	bl	800ac7c <__retarget_lock_release_recursive>
 800d59a:	e7dd      	b.n	800d558 <_fflush_r+0xc>

0800d59c <memmove>:
 800d59c:	4288      	cmp	r0, r1
 800d59e:	b510      	push	{r4, lr}
 800d5a0:	eb01 0402 	add.w	r4, r1, r2
 800d5a4:	d902      	bls.n	800d5ac <memmove+0x10>
 800d5a6:	4284      	cmp	r4, r0
 800d5a8:	4623      	mov	r3, r4
 800d5aa:	d807      	bhi.n	800d5bc <memmove+0x20>
 800d5ac:	1e43      	subs	r3, r0, #1
 800d5ae:	42a1      	cmp	r1, r4
 800d5b0:	d008      	beq.n	800d5c4 <memmove+0x28>
 800d5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5ba:	e7f8      	b.n	800d5ae <memmove+0x12>
 800d5bc:	4402      	add	r2, r0
 800d5be:	4601      	mov	r1, r0
 800d5c0:	428a      	cmp	r2, r1
 800d5c2:	d100      	bne.n	800d5c6 <memmove+0x2a>
 800d5c4:	bd10      	pop	{r4, pc}
 800d5c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5ce:	e7f7      	b.n	800d5c0 <memmove+0x24>

0800d5d0 <strncmp>:
 800d5d0:	b510      	push	{r4, lr}
 800d5d2:	b16a      	cbz	r2, 800d5f0 <strncmp+0x20>
 800d5d4:	3901      	subs	r1, #1
 800d5d6:	1884      	adds	r4, r0, r2
 800d5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	d103      	bne.n	800d5ec <strncmp+0x1c>
 800d5e4:	42a0      	cmp	r0, r4
 800d5e6:	d001      	beq.n	800d5ec <strncmp+0x1c>
 800d5e8:	2a00      	cmp	r2, #0
 800d5ea:	d1f5      	bne.n	800d5d8 <strncmp+0x8>
 800d5ec:	1ad0      	subs	r0, r2, r3
 800d5ee:	bd10      	pop	{r4, pc}
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	e7fc      	b.n	800d5ee <strncmp+0x1e>

0800d5f4 <_sbrk_r>:
 800d5f4:	b538      	push	{r3, r4, r5, lr}
 800d5f6:	4d06      	ldr	r5, [pc, #24]	@ (800d610 <_sbrk_r+0x1c>)
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	f7f5 fa24 	bl	8002a4c <_sbrk>
 800d604:	1c43      	adds	r3, r0, #1
 800d606:	d102      	bne.n	800d60e <_sbrk_r+0x1a>
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	b103      	cbz	r3, 800d60e <_sbrk_r+0x1a>
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	200028e0 	.word	0x200028e0

0800d614 <memcpy>:
 800d614:	440a      	add	r2, r1
 800d616:	4291      	cmp	r1, r2
 800d618:	f100 33ff 	add.w	r3, r0, #4294967295
 800d61c:	d100      	bne.n	800d620 <memcpy+0xc>
 800d61e:	4770      	bx	lr
 800d620:	b510      	push	{r4, lr}
 800d622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d62a:	4291      	cmp	r1, r2
 800d62c:	d1f9      	bne.n	800d622 <memcpy+0xe>
 800d62e:	bd10      	pop	{r4, pc}

0800d630 <nan>:
 800d630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d638 <nan+0x8>
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	00000000 	.word	0x00000000
 800d63c:	7ff80000 	.word	0x7ff80000

0800d640 <__assert_func>:
 800d640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d642:	4614      	mov	r4, r2
 800d644:	461a      	mov	r2, r3
 800d646:	4b09      	ldr	r3, [pc, #36]	@ (800d66c <__assert_func+0x2c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4605      	mov	r5, r0
 800d64c:	68d8      	ldr	r0, [r3, #12]
 800d64e:	b954      	cbnz	r4, 800d666 <__assert_func+0x26>
 800d650:	4b07      	ldr	r3, [pc, #28]	@ (800d670 <__assert_func+0x30>)
 800d652:	461c      	mov	r4, r3
 800d654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d658:	9100      	str	r1, [sp, #0]
 800d65a:	462b      	mov	r3, r5
 800d65c:	4905      	ldr	r1, [pc, #20]	@ (800d674 <__assert_func+0x34>)
 800d65e:	f000 fba7 	bl	800ddb0 <fiprintf>
 800d662:	f000 fbb7 	bl	800ddd4 <abort>
 800d666:	4b04      	ldr	r3, [pc, #16]	@ (800d678 <__assert_func+0x38>)
 800d668:	e7f4      	b.n	800d654 <__assert_func+0x14>
 800d66a:	bf00      	nop
 800d66c:	20000034 	.word	0x20000034
 800d670:	0800ea05 	.word	0x0800ea05
 800d674:	0800e9d7 	.word	0x0800e9d7
 800d678:	0800e9ca 	.word	0x0800e9ca

0800d67c <_calloc_r>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	fba1 5402 	umull	r5, r4, r1, r2
 800d682:	b93c      	cbnz	r4, 800d694 <_calloc_r+0x18>
 800d684:	4629      	mov	r1, r5
 800d686:	f7fe f9c3 	bl	800ba10 <_malloc_r>
 800d68a:	4606      	mov	r6, r0
 800d68c:	b928      	cbnz	r0, 800d69a <_calloc_r+0x1e>
 800d68e:	2600      	movs	r6, #0
 800d690:	4630      	mov	r0, r6
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	220c      	movs	r2, #12
 800d696:	6002      	str	r2, [r0, #0]
 800d698:	e7f9      	b.n	800d68e <_calloc_r+0x12>
 800d69a:	462a      	mov	r2, r5
 800d69c:	4621      	mov	r1, r4
 800d69e:	f7fd fa6e 	bl	800ab7e <memset>
 800d6a2:	e7f5      	b.n	800d690 <_calloc_r+0x14>

0800d6a4 <rshift>:
 800d6a4:	6903      	ldr	r3, [r0, #16]
 800d6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d6b2:	f100 0414 	add.w	r4, r0, #20
 800d6b6:	dd45      	ble.n	800d744 <rshift+0xa0>
 800d6b8:	f011 011f 	ands.w	r1, r1, #31
 800d6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d6c4:	d10c      	bne.n	800d6e0 <rshift+0x3c>
 800d6c6:	f100 0710 	add.w	r7, r0, #16
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	42b1      	cmp	r1, r6
 800d6ce:	d334      	bcc.n	800d73a <rshift+0x96>
 800d6d0:	1a9b      	subs	r3, r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	1eea      	subs	r2, r5, #3
 800d6d6:	4296      	cmp	r6, r2
 800d6d8:	bf38      	it	cc
 800d6da:	2300      	movcc	r3, #0
 800d6dc:	4423      	add	r3, r4
 800d6de:	e015      	b.n	800d70c <rshift+0x68>
 800d6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d6e4:	f1c1 0820 	rsb	r8, r1, #32
 800d6e8:	40cf      	lsrs	r7, r1
 800d6ea:	f105 0e04 	add.w	lr, r5, #4
 800d6ee:	46a1      	mov	r9, r4
 800d6f0:	4576      	cmp	r6, lr
 800d6f2:	46f4      	mov	ip, lr
 800d6f4:	d815      	bhi.n	800d722 <rshift+0x7e>
 800d6f6:	1a9a      	subs	r2, r3, r2
 800d6f8:	0092      	lsls	r2, r2, #2
 800d6fa:	3a04      	subs	r2, #4
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	42ae      	cmp	r6, r5
 800d700:	bf38      	it	cc
 800d702:	2200      	movcc	r2, #0
 800d704:	18a3      	adds	r3, r4, r2
 800d706:	50a7      	str	r7, [r4, r2]
 800d708:	b107      	cbz	r7, 800d70c <rshift+0x68>
 800d70a:	3304      	adds	r3, #4
 800d70c:	1b1a      	subs	r2, r3, r4
 800d70e:	42a3      	cmp	r3, r4
 800d710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d714:	bf08      	it	eq
 800d716:	2300      	moveq	r3, #0
 800d718:	6102      	str	r2, [r0, #16]
 800d71a:	bf08      	it	eq
 800d71c:	6143      	streq	r3, [r0, #20]
 800d71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d722:	f8dc c000 	ldr.w	ip, [ip]
 800d726:	fa0c fc08 	lsl.w	ip, ip, r8
 800d72a:	ea4c 0707 	orr.w	r7, ip, r7
 800d72e:	f849 7b04 	str.w	r7, [r9], #4
 800d732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d736:	40cf      	lsrs	r7, r1
 800d738:	e7da      	b.n	800d6f0 <rshift+0x4c>
 800d73a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d73e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d742:	e7c3      	b.n	800d6cc <rshift+0x28>
 800d744:	4623      	mov	r3, r4
 800d746:	e7e1      	b.n	800d70c <rshift+0x68>

0800d748 <__hexdig_fun>:
 800d748:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d74c:	2b09      	cmp	r3, #9
 800d74e:	d802      	bhi.n	800d756 <__hexdig_fun+0xe>
 800d750:	3820      	subs	r0, #32
 800d752:	b2c0      	uxtb	r0, r0
 800d754:	4770      	bx	lr
 800d756:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d75a:	2b05      	cmp	r3, #5
 800d75c:	d801      	bhi.n	800d762 <__hexdig_fun+0x1a>
 800d75e:	3847      	subs	r0, #71	@ 0x47
 800d760:	e7f7      	b.n	800d752 <__hexdig_fun+0xa>
 800d762:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d766:	2b05      	cmp	r3, #5
 800d768:	d801      	bhi.n	800d76e <__hexdig_fun+0x26>
 800d76a:	3827      	subs	r0, #39	@ 0x27
 800d76c:	e7f1      	b.n	800d752 <__hexdig_fun+0xa>
 800d76e:	2000      	movs	r0, #0
 800d770:	4770      	bx	lr
	...

0800d774 <__gethex>:
 800d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	b085      	sub	sp, #20
 800d77a:	468a      	mov	sl, r1
 800d77c:	9302      	str	r3, [sp, #8]
 800d77e:	680b      	ldr	r3, [r1, #0]
 800d780:	9001      	str	r0, [sp, #4]
 800d782:	4690      	mov	r8, r2
 800d784:	1c9c      	adds	r4, r3, #2
 800d786:	46a1      	mov	r9, r4
 800d788:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d78c:	2830      	cmp	r0, #48	@ 0x30
 800d78e:	d0fa      	beq.n	800d786 <__gethex+0x12>
 800d790:	eba9 0303 	sub.w	r3, r9, r3
 800d794:	f1a3 0b02 	sub.w	fp, r3, #2
 800d798:	f7ff ffd6 	bl	800d748 <__hexdig_fun>
 800d79c:	4605      	mov	r5, r0
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d168      	bne.n	800d874 <__gethex+0x100>
 800d7a2:	49a0      	ldr	r1, [pc, #640]	@ (800da24 <__gethex+0x2b0>)
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	4648      	mov	r0, r9
 800d7a8:	f7ff ff12 	bl	800d5d0 <strncmp>
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d167      	bne.n	800d882 <__gethex+0x10e>
 800d7b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d7b6:	4626      	mov	r6, r4
 800d7b8:	f7ff ffc6 	bl	800d748 <__hexdig_fun>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d062      	beq.n	800d886 <__gethex+0x112>
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	7818      	ldrb	r0, [r3, #0]
 800d7c4:	2830      	cmp	r0, #48	@ 0x30
 800d7c6:	4699      	mov	r9, r3
 800d7c8:	f103 0301 	add.w	r3, r3, #1
 800d7cc:	d0f9      	beq.n	800d7c2 <__gethex+0x4e>
 800d7ce:	f7ff ffbb 	bl	800d748 <__hexdig_fun>
 800d7d2:	fab0 f580 	clz	r5, r0
 800d7d6:	096d      	lsrs	r5, r5, #5
 800d7d8:	f04f 0b01 	mov.w	fp, #1
 800d7dc:	464a      	mov	r2, r9
 800d7de:	4616      	mov	r6, r2
 800d7e0:	3201      	adds	r2, #1
 800d7e2:	7830      	ldrb	r0, [r6, #0]
 800d7e4:	f7ff ffb0 	bl	800d748 <__hexdig_fun>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d1f8      	bne.n	800d7de <__gethex+0x6a>
 800d7ec:	498d      	ldr	r1, [pc, #564]	@ (800da24 <__gethex+0x2b0>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7ff feed 	bl	800d5d0 <strncmp>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d13f      	bne.n	800d87a <__gethex+0x106>
 800d7fa:	b944      	cbnz	r4, 800d80e <__gethex+0x9a>
 800d7fc:	1c74      	adds	r4, r6, #1
 800d7fe:	4622      	mov	r2, r4
 800d800:	4616      	mov	r6, r2
 800d802:	3201      	adds	r2, #1
 800d804:	7830      	ldrb	r0, [r6, #0]
 800d806:	f7ff ff9f 	bl	800d748 <__hexdig_fun>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d1f8      	bne.n	800d800 <__gethex+0x8c>
 800d80e:	1ba4      	subs	r4, r4, r6
 800d810:	00a7      	lsls	r7, r4, #2
 800d812:	7833      	ldrb	r3, [r6, #0]
 800d814:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d818:	2b50      	cmp	r3, #80	@ 0x50
 800d81a:	d13e      	bne.n	800d89a <__gethex+0x126>
 800d81c:	7873      	ldrb	r3, [r6, #1]
 800d81e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d820:	d033      	beq.n	800d88a <__gethex+0x116>
 800d822:	2b2d      	cmp	r3, #45	@ 0x2d
 800d824:	d034      	beq.n	800d890 <__gethex+0x11c>
 800d826:	1c71      	adds	r1, r6, #1
 800d828:	2400      	movs	r4, #0
 800d82a:	7808      	ldrb	r0, [r1, #0]
 800d82c:	f7ff ff8c 	bl	800d748 <__hexdig_fun>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b18      	cmp	r3, #24
 800d836:	d830      	bhi.n	800d89a <__gethex+0x126>
 800d838:	f1a0 0210 	sub.w	r2, r0, #16
 800d83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d840:	f7ff ff82 	bl	800d748 <__hexdig_fun>
 800d844:	f100 3cff 	add.w	ip, r0, #4294967295
 800d848:	fa5f fc8c 	uxtb.w	ip, ip
 800d84c:	f1bc 0f18 	cmp.w	ip, #24
 800d850:	f04f 030a 	mov.w	r3, #10
 800d854:	d91e      	bls.n	800d894 <__gethex+0x120>
 800d856:	b104      	cbz	r4, 800d85a <__gethex+0xe6>
 800d858:	4252      	negs	r2, r2
 800d85a:	4417      	add	r7, r2
 800d85c:	f8ca 1000 	str.w	r1, [sl]
 800d860:	b1ed      	cbz	r5, 800d89e <__gethex+0x12a>
 800d862:	f1bb 0f00 	cmp.w	fp, #0
 800d866:	bf0c      	ite	eq
 800d868:	2506      	moveq	r5, #6
 800d86a:	2500      	movne	r5, #0
 800d86c:	4628      	mov	r0, r5
 800d86e:	b005      	add	sp, #20
 800d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d874:	2500      	movs	r5, #0
 800d876:	462c      	mov	r4, r5
 800d878:	e7b0      	b.n	800d7dc <__gethex+0x68>
 800d87a:	2c00      	cmp	r4, #0
 800d87c:	d1c7      	bne.n	800d80e <__gethex+0x9a>
 800d87e:	4627      	mov	r7, r4
 800d880:	e7c7      	b.n	800d812 <__gethex+0x9e>
 800d882:	464e      	mov	r6, r9
 800d884:	462f      	mov	r7, r5
 800d886:	2501      	movs	r5, #1
 800d888:	e7c3      	b.n	800d812 <__gethex+0x9e>
 800d88a:	2400      	movs	r4, #0
 800d88c:	1cb1      	adds	r1, r6, #2
 800d88e:	e7cc      	b.n	800d82a <__gethex+0xb6>
 800d890:	2401      	movs	r4, #1
 800d892:	e7fb      	b.n	800d88c <__gethex+0x118>
 800d894:	fb03 0002 	mla	r0, r3, r2, r0
 800d898:	e7ce      	b.n	800d838 <__gethex+0xc4>
 800d89a:	4631      	mov	r1, r6
 800d89c:	e7de      	b.n	800d85c <__gethex+0xe8>
 800d89e:	eba6 0309 	sub.w	r3, r6, r9
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	2b07      	cmp	r3, #7
 800d8a8:	dc0a      	bgt.n	800d8c0 <__gethex+0x14c>
 800d8aa:	9801      	ldr	r0, [sp, #4]
 800d8ac:	f7fe f93c 	bl	800bb28 <_Balloc>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	b940      	cbnz	r0, 800d8c6 <__gethex+0x152>
 800d8b4:	4b5c      	ldr	r3, [pc, #368]	@ (800da28 <__gethex+0x2b4>)
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	21e4      	movs	r1, #228	@ 0xe4
 800d8ba:	485c      	ldr	r0, [pc, #368]	@ (800da2c <__gethex+0x2b8>)
 800d8bc:	f7ff fec0 	bl	800d640 <__assert_func>
 800d8c0:	3101      	adds	r1, #1
 800d8c2:	105b      	asrs	r3, r3, #1
 800d8c4:	e7ef      	b.n	800d8a6 <__gethex+0x132>
 800d8c6:	f100 0a14 	add.w	sl, r0, #20
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4655      	mov	r5, sl
 800d8ce:	469b      	mov	fp, r3
 800d8d0:	45b1      	cmp	r9, r6
 800d8d2:	d337      	bcc.n	800d944 <__gethex+0x1d0>
 800d8d4:	f845 bb04 	str.w	fp, [r5], #4
 800d8d8:	eba5 050a 	sub.w	r5, r5, sl
 800d8dc:	10ad      	asrs	r5, r5, #2
 800d8de:	6125      	str	r5, [r4, #16]
 800d8e0:	4658      	mov	r0, fp
 800d8e2:	f7fe fa13 	bl	800bd0c <__hi0bits>
 800d8e6:	016d      	lsls	r5, r5, #5
 800d8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d8ec:	1a2d      	subs	r5, r5, r0
 800d8ee:	42b5      	cmp	r5, r6
 800d8f0:	dd54      	ble.n	800d99c <__gethex+0x228>
 800d8f2:	1bad      	subs	r5, r5, r6
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f7fe fda7 	bl	800c44a <__any_on>
 800d8fc:	4681      	mov	r9, r0
 800d8fe:	b178      	cbz	r0, 800d920 <__gethex+0x1ac>
 800d900:	1e6b      	subs	r3, r5, #1
 800d902:	1159      	asrs	r1, r3, #5
 800d904:	f003 021f 	and.w	r2, r3, #31
 800d908:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d90c:	f04f 0901 	mov.w	r9, #1
 800d910:	fa09 f202 	lsl.w	r2, r9, r2
 800d914:	420a      	tst	r2, r1
 800d916:	d003      	beq.n	800d920 <__gethex+0x1ac>
 800d918:	454b      	cmp	r3, r9
 800d91a:	dc36      	bgt.n	800d98a <__gethex+0x216>
 800d91c:	f04f 0902 	mov.w	r9, #2
 800d920:	4629      	mov	r1, r5
 800d922:	4620      	mov	r0, r4
 800d924:	f7ff febe 	bl	800d6a4 <rshift>
 800d928:	442f      	add	r7, r5
 800d92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d92e:	42bb      	cmp	r3, r7
 800d930:	da42      	bge.n	800d9b8 <__gethex+0x244>
 800d932:	9801      	ldr	r0, [sp, #4]
 800d934:	4621      	mov	r1, r4
 800d936:	f7fe f937 	bl	800bba8 <_Bfree>
 800d93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d93c:	2300      	movs	r3, #0
 800d93e:	6013      	str	r3, [r2, #0]
 800d940:	25a3      	movs	r5, #163	@ 0xa3
 800d942:	e793      	b.n	800d86c <__gethex+0xf8>
 800d944:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d948:	2a2e      	cmp	r2, #46	@ 0x2e
 800d94a:	d012      	beq.n	800d972 <__gethex+0x1fe>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	d104      	bne.n	800d95a <__gethex+0x1e6>
 800d950:	f845 bb04 	str.w	fp, [r5], #4
 800d954:	f04f 0b00 	mov.w	fp, #0
 800d958:	465b      	mov	r3, fp
 800d95a:	7830      	ldrb	r0, [r6, #0]
 800d95c:	9303      	str	r3, [sp, #12]
 800d95e:	f7ff fef3 	bl	800d748 <__hexdig_fun>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	f000 000f 	and.w	r0, r0, #15
 800d968:	4098      	lsls	r0, r3
 800d96a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d96e:	3304      	adds	r3, #4
 800d970:	e7ae      	b.n	800d8d0 <__gethex+0x15c>
 800d972:	45b1      	cmp	r9, r6
 800d974:	d8ea      	bhi.n	800d94c <__gethex+0x1d8>
 800d976:	492b      	ldr	r1, [pc, #172]	@ (800da24 <__gethex+0x2b0>)
 800d978:	9303      	str	r3, [sp, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	4630      	mov	r0, r6
 800d97e:	f7ff fe27 	bl	800d5d0 <strncmp>
 800d982:	9b03      	ldr	r3, [sp, #12]
 800d984:	2800      	cmp	r0, #0
 800d986:	d1e1      	bne.n	800d94c <__gethex+0x1d8>
 800d988:	e7a2      	b.n	800d8d0 <__gethex+0x15c>
 800d98a:	1ea9      	subs	r1, r5, #2
 800d98c:	4620      	mov	r0, r4
 800d98e:	f7fe fd5c 	bl	800c44a <__any_on>
 800d992:	2800      	cmp	r0, #0
 800d994:	d0c2      	beq.n	800d91c <__gethex+0x1a8>
 800d996:	f04f 0903 	mov.w	r9, #3
 800d99a:	e7c1      	b.n	800d920 <__gethex+0x1ac>
 800d99c:	da09      	bge.n	800d9b2 <__gethex+0x23e>
 800d99e:	1b75      	subs	r5, r6, r5
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	9801      	ldr	r0, [sp, #4]
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	f7fe fb17 	bl	800bfd8 <__lshift>
 800d9aa:	1b7f      	subs	r7, r7, r5
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	f100 0a14 	add.w	sl, r0, #20
 800d9b2:	f04f 0900 	mov.w	r9, #0
 800d9b6:	e7b8      	b.n	800d92a <__gethex+0x1b6>
 800d9b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9bc:	42bd      	cmp	r5, r7
 800d9be:	dd6f      	ble.n	800daa0 <__gethex+0x32c>
 800d9c0:	1bed      	subs	r5, r5, r7
 800d9c2:	42ae      	cmp	r6, r5
 800d9c4:	dc34      	bgt.n	800da30 <__gethex+0x2bc>
 800d9c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d022      	beq.n	800da14 <__gethex+0x2a0>
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d024      	beq.n	800da1c <__gethex+0x2a8>
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	d115      	bne.n	800da02 <__gethex+0x28e>
 800d9d6:	42ae      	cmp	r6, r5
 800d9d8:	d113      	bne.n	800da02 <__gethex+0x28e>
 800d9da:	2e01      	cmp	r6, #1
 800d9dc:	d10b      	bne.n	800d9f6 <__gethex+0x282>
 800d9de:	9a02      	ldr	r2, [sp, #8]
 800d9e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d9e4:	6013      	str	r3, [r2, #0]
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	6123      	str	r3, [r4, #16]
 800d9ea:	f8ca 3000 	str.w	r3, [sl]
 800d9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f0:	2562      	movs	r5, #98	@ 0x62
 800d9f2:	601c      	str	r4, [r3, #0]
 800d9f4:	e73a      	b.n	800d86c <__gethex+0xf8>
 800d9f6:	1e71      	subs	r1, r6, #1
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7fe fd26 	bl	800c44a <__any_on>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d1ed      	bne.n	800d9de <__gethex+0x26a>
 800da02:	9801      	ldr	r0, [sp, #4]
 800da04:	4621      	mov	r1, r4
 800da06:	f7fe f8cf 	bl	800bba8 <_Bfree>
 800da0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da0c:	2300      	movs	r3, #0
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	2550      	movs	r5, #80	@ 0x50
 800da12:	e72b      	b.n	800d86c <__gethex+0xf8>
 800da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f3      	bne.n	800da02 <__gethex+0x28e>
 800da1a:	e7e0      	b.n	800d9de <__gethex+0x26a>
 800da1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1dd      	bne.n	800d9de <__gethex+0x26a>
 800da22:	e7ee      	b.n	800da02 <__gethex+0x28e>
 800da24:	0800e858 	.word	0x0800e858
 800da28:	0800e6ed 	.word	0x0800e6ed
 800da2c:	0800ea06 	.word	0x0800ea06
 800da30:	1e6f      	subs	r7, r5, #1
 800da32:	f1b9 0f00 	cmp.w	r9, #0
 800da36:	d130      	bne.n	800da9a <__gethex+0x326>
 800da38:	b127      	cbz	r7, 800da44 <__gethex+0x2d0>
 800da3a:	4639      	mov	r1, r7
 800da3c:	4620      	mov	r0, r4
 800da3e:	f7fe fd04 	bl	800c44a <__any_on>
 800da42:	4681      	mov	r9, r0
 800da44:	117a      	asrs	r2, r7, #5
 800da46:	2301      	movs	r3, #1
 800da48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800da4c:	f007 071f 	and.w	r7, r7, #31
 800da50:	40bb      	lsls	r3, r7
 800da52:	4213      	tst	r3, r2
 800da54:	4629      	mov	r1, r5
 800da56:	4620      	mov	r0, r4
 800da58:	bf18      	it	ne
 800da5a:	f049 0902 	orrne.w	r9, r9, #2
 800da5e:	f7ff fe21 	bl	800d6a4 <rshift>
 800da62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800da66:	1b76      	subs	r6, r6, r5
 800da68:	2502      	movs	r5, #2
 800da6a:	f1b9 0f00 	cmp.w	r9, #0
 800da6e:	d047      	beq.n	800db00 <__gethex+0x38c>
 800da70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da74:	2b02      	cmp	r3, #2
 800da76:	d015      	beq.n	800daa4 <__gethex+0x330>
 800da78:	2b03      	cmp	r3, #3
 800da7a:	d017      	beq.n	800daac <__gethex+0x338>
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d109      	bne.n	800da94 <__gethex+0x320>
 800da80:	f019 0f02 	tst.w	r9, #2
 800da84:	d006      	beq.n	800da94 <__gethex+0x320>
 800da86:	f8da 3000 	ldr.w	r3, [sl]
 800da8a:	ea49 0903 	orr.w	r9, r9, r3
 800da8e:	f019 0f01 	tst.w	r9, #1
 800da92:	d10e      	bne.n	800dab2 <__gethex+0x33e>
 800da94:	f045 0510 	orr.w	r5, r5, #16
 800da98:	e032      	b.n	800db00 <__gethex+0x38c>
 800da9a:	f04f 0901 	mov.w	r9, #1
 800da9e:	e7d1      	b.n	800da44 <__gethex+0x2d0>
 800daa0:	2501      	movs	r5, #1
 800daa2:	e7e2      	b.n	800da6a <__gethex+0x2f6>
 800daa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daa6:	f1c3 0301 	rsb	r3, r3, #1
 800daaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d0f0      	beq.n	800da94 <__gethex+0x320>
 800dab2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dab6:	f104 0314 	add.w	r3, r4, #20
 800daba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dabe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dac2:	f04f 0c00 	mov.w	ip, #0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dacc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dad0:	d01b      	beq.n	800db0a <__gethex+0x396>
 800dad2:	3201      	adds	r2, #1
 800dad4:	6002      	str	r2, [r0, #0]
 800dad6:	2d02      	cmp	r5, #2
 800dad8:	f104 0314 	add.w	r3, r4, #20
 800dadc:	d13c      	bne.n	800db58 <__gethex+0x3e4>
 800dade:	f8d8 2000 	ldr.w	r2, [r8]
 800dae2:	3a01      	subs	r2, #1
 800dae4:	42b2      	cmp	r2, r6
 800dae6:	d109      	bne.n	800dafc <__gethex+0x388>
 800dae8:	1171      	asrs	r1, r6, #5
 800daea:	2201      	movs	r2, #1
 800daec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf0:	f006 061f 	and.w	r6, r6, #31
 800daf4:	fa02 f606 	lsl.w	r6, r2, r6
 800daf8:	421e      	tst	r6, r3
 800dafa:	d13a      	bne.n	800db72 <__gethex+0x3fe>
 800dafc:	f045 0520 	orr.w	r5, r5, #32
 800db00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db02:	601c      	str	r4, [r3, #0]
 800db04:	9b02      	ldr	r3, [sp, #8]
 800db06:	601f      	str	r7, [r3, #0]
 800db08:	e6b0      	b.n	800d86c <__gethex+0xf8>
 800db0a:	4299      	cmp	r1, r3
 800db0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800db10:	d8d9      	bhi.n	800dac6 <__gethex+0x352>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	459b      	cmp	fp, r3
 800db16:	db17      	blt.n	800db48 <__gethex+0x3d4>
 800db18:	6861      	ldr	r1, [r4, #4]
 800db1a:	9801      	ldr	r0, [sp, #4]
 800db1c:	3101      	adds	r1, #1
 800db1e:	f7fe f803 	bl	800bb28 <_Balloc>
 800db22:	4681      	mov	r9, r0
 800db24:	b918      	cbnz	r0, 800db2e <__gethex+0x3ba>
 800db26:	4b1a      	ldr	r3, [pc, #104]	@ (800db90 <__gethex+0x41c>)
 800db28:	4602      	mov	r2, r0
 800db2a:	2184      	movs	r1, #132	@ 0x84
 800db2c:	e6c5      	b.n	800d8ba <__gethex+0x146>
 800db2e:	6922      	ldr	r2, [r4, #16]
 800db30:	3202      	adds	r2, #2
 800db32:	f104 010c 	add.w	r1, r4, #12
 800db36:	0092      	lsls	r2, r2, #2
 800db38:	300c      	adds	r0, #12
 800db3a:	f7ff fd6b 	bl	800d614 <memcpy>
 800db3e:	4621      	mov	r1, r4
 800db40:	9801      	ldr	r0, [sp, #4]
 800db42:	f7fe f831 	bl	800bba8 <_Bfree>
 800db46:	464c      	mov	r4, r9
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db50:	6122      	str	r2, [r4, #16]
 800db52:	2201      	movs	r2, #1
 800db54:	615a      	str	r2, [r3, #20]
 800db56:	e7be      	b.n	800dad6 <__gethex+0x362>
 800db58:	6922      	ldr	r2, [r4, #16]
 800db5a:	455a      	cmp	r2, fp
 800db5c:	dd0b      	ble.n	800db76 <__gethex+0x402>
 800db5e:	2101      	movs	r1, #1
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff fd9f 	bl	800d6a4 <rshift>
 800db66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db6a:	3701      	adds	r7, #1
 800db6c:	42bb      	cmp	r3, r7
 800db6e:	f6ff aee0 	blt.w	800d932 <__gethex+0x1be>
 800db72:	2501      	movs	r5, #1
 800db74:	e7c2      	b.n	800dafc <__gethex+0x388>
 800db76:	f016 061f 	ands.w	r6, r6, #31
 800db7a:	d0fa      	beq.n	800db72 <__gethex+0x3fe>
 800db7c:	4453      	add	r3, sl
 800db7e:	f1c6 0620 	rsb	r6, r6, #32
 800db82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800db86:	f7fe f8c1 	bl	800bd0c <__hi0bits>
 800db8a:	42b0      	cmp	r0, r6
 800db8c:	dbe7      	blt.n	800db5e <__gethex+0x3ea>
 800db8e:	e7f0      	b.n	800db72 <__gethex+0x3fe>
 800db90:	0800e6ed 	.word	0x0800e6ed

0800db94 <L_shift>:
 800db94:	f1c2 0208 	rsb	r2, r2, #8
 800db98:	0092      	lsls	r2, r2, #2
 800db9a:	b570      	push	{r4, r5, r6, lr}
 800db9c:	f1c2 0620 	rsb	r6, r2, #32
 800dba0:	6843      	ldr	r3, [r0, #4]
 800dba2:	6804      	ldr	r4, [r0, #0]
 800dba4:	fa03 f506 	lsl.w	r5, r3, r6
 800dba8:	432c      	orrs	r4, r5
 800dbaa:	40d3      	lsrs	r3, r2
 800dbac:	6004      	str	r4, [r0, #0]
 800dbae:	f840 3f04 	str.w	r3, [r0, #4]!
 800dbb2:	4288      	cmp	r0, r1
 800dbb4:	d3f4      	bcc.n	800dba0 <L_shift+0xc>
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}

0800dbb8 <__match>:
 800dbb8:	b530      	push	{r4, r5, lr}
 800dbba:	6803      	ldr	r3, [r0, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbc2:	b914      	cbnz	r4, 800dbca <__match+0x12>
 800dbc4:	6003      	str	r3, [r0, #0]
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	bd30      	pop	{r4, r5, pc}
 800dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dbd2:	2d19      	cmp	r5, #25
 800dbd4:	bf98      	it	ls
 800dbd6:	3220      	addls	r2, #32
 800dbd8:	42a2      	cmp	r2, r4
 800dbda:	d0f0      	beq.n	800dbbe <__match+0x6>
 800dbdc:	2000      	movs	r0, #0
 800dbde:	e7f3      	b.n	800dbc8 <__match+0x10>

0800dbe0 <__hexnan>:
 800dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbe4:	680b      	ldr	r3, [r1, #0]
 800dbe6:	6801      	ldr	r1, [r0, #0]
 800dbe8:	115e      	asrs	r6, r3, #5
 800dbea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dbee:	f013 031f 	ands.w	r3, r3, #31
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	bf18      	it	ne
 800dbf6:	3604      	addne	r6, #4
 800dbf8:	2500      	movs	r5, #0
 800dbfa:	1f37      	subs	r7, r6, #4
 800dbfc:	4682      	mov	sl, r0
 800dbfe:	4690      	mov	r8, r2
 800dc00:	9301      	str	r3, [sp, #4]
 800dc02:	f846 5c04 	str.w	r5, [r6, #-4]
 800dc06:	46b9      	mov	r9, r7
 800dc08:	463c      	mov	r4, r7
 800dc0a:	9502      	str	r5, [sp, #8]
 800dc0c:	46ab      	mov	fp, r5
 800dc0e:	784a      	ldrb	r2, [r1, #1]
 800dc10:	1c4b      	adds	r3, r1, #1
 800dc12:	9303      	str	r3, [sp, #12]
 800dc14:	b342      	cbz	r2, 800dc68 <__hexnan+0x88>
 800dc16:	4610      	mov	r0, r2
 800dc18:	9105      	str	r1, [sp, #20]
 800dc1a:	9204      	str	r2, [sp, #16]
 800dc1c:	f7ff fd94 	bl	800d748 <__hexdig_fun>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d151      	bne.n	800dcc8 <__hexnan+0xe8>
 800dc24:	9a04      	ldr	r2, [sp, #16]
 800dc26:	9905      	ldr	r1, [sp, #20]
 800dc28:	2a20      	cmp	r2, #32
 800dc2a:	d818      	bhi.n	800dc5e <__hexnan+0x7e>
 800dc2c:	9b02      	ldr	r3, [sp, #8]
 800dc2e:	459b      	cmp	fp, r3
 800dc30:	dd13      	ble.n	800dc5a <__hexnan+0x7a>
 800dc32:	454c      	cmp	r4, r9
 800dc34:	d206      	bcs.n	800dc44 <__hexnan+0x64>
 800dc36:	2d07      	cmp	r5, #7
 800dc38:	dc04      	bgt.n	800dc44 <__hexnan+0x64>
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	4649      	mov	r1, r9
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f7ff ffa8 	bl	800db94 <L_shift>
 800dc44:	4544      	cmp	r4, r8
 800dc46:	d952      	bls.n	800dcee <__hexnan+0x10e>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f1a4 0904 	sub.w	r9, r4, #4
 800dc4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc52:	f8cd b008 	str.w	fp, [sp, #8]
 800dc56:	464c      	mov	r4, r9
 800dc58:	461d      	mov	r5, r3
 800dc5a:	9903      	ldr	r1, [sp, #12]
 800dc5c:	e7d7      	b.n	800dc0e <__hexnan+0x2e>
 800dc5e:	2a29      	cmp	r2, #41	@ 0x29
 800dc60:	d157      	bne.n	800dd12 <__hexnan+0x132>
 800dc62:	3102      	adds	r1, #2
 800dc64:	f8ca 1000 	str.w	r1, [sl]
 800dc68:	f1bb 0f00 	cmp.w	fp, #0
 800dc6c:	d051      	beq.n	800dd12 <__hexnan+0x132>
 800dc6e:	454c      	cmp	r4, r9
 800dc70:	d206      	bcs.n	800dc80 <__hexnan+0xa0>
 800dc72:	2d07      	cmp	r5, #7
 800dc74:	dc04      	bgt.n	800dc80 <__hexnan+0xa0>
 800dc76:	462a      	mov	r2, r5
 800dc78:	4649      	mov	r1, r9
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f7ff ff8a 	bl	800db94 <L_shift>
 800dc80:	4544      	cmp	r4, r8
 800dc82:	d936      	bls.n	800dcf2 <__hexnan+0x112>
 800dc84:	f1a8 0204 	sub.w	r2, r8, #4
 800dc88:	4623      	mov	r3, r4
 800dc8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc92:	429f      	cmp	r7, r3
 800dc94:	d2f9      	bcs.n	800dc8a <__hexnan+0xaa>
 800dc96:	1b3b      	subs	r3, r7, r4
 800dc98:	f023 0303 	bic.w	r3, r3, #3
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	3401      	adds	r4, #1
 800dca0:	3e03      	subs	r6, #3
 800dca2:	42b4      	cmp	r4, r6
 800dca4:	bf88      	it	hi
 800dca6:	2304      	movhi	r3, #4
 800dca8:	4443      	add	r3, r8
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f843 2b04 	str.w	r2, [r3], #4
 800dcb0:	429f      	cmp	r7, r3
 800dcb2:	d2fb      	bcs.n	800dcac <__hexnan+0xcc>
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	b91b      	cbnz	r3, 800dcc0 <__hexnan+0xe0>
 800dcb8:	4547      	cmp	r7, r8
 800dcba:	d128      	bne.n	800dd0e <__hexnan+0x12e>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	2005      	movs	r0, #5
 800dcc2:	b007      	add	sp, #28
 800dcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc8:	3501      	adds	r5, #1
 800dcca:	2d08      	cmp	r5, #8
 800dccc:	f10b 0b01 	add.w	fp, fp, #1
 800dcd0:	dd06      	ble.n	800dce0 <__hexnan+0x100>
 800dcd2:	4544      	cmp	r4, r8
 800dcd4:	d9c1      	bls.n	800dc5a <__hexnan+0x7a>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcdc:	2501      	movs	r5, #1
 800dcde:	3c04      	subs	r4, #4
 800dce0:	6822      	ldr	r2, [r4, #0]
 800dce2:	f000 000f 	and.w	r0, r0, #15
 800dce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dcea:	6020      	str	r0, [r4, #0]
 800dcec:	e7b5      	b.n	800dc5a <__hexnan+0x7a>
 800dcee:	2508      	movs	r5, #8
 800dcf0:	e7b3      	b.n	800dc5a <__hexnan+0x7a>
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d0dd      	beq.n	800dcb4 <__hexnan+0xd4>
 800dcf8:	f1c3 0320 	rsb	r3, r3, #32
 800dcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800dd00:	40da      	lsrs	r2, r3
 800dd02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dd06:	4013      	ands	r3, r2
 800dd08:	f846 3c04 	str.w	r3, [r6, #-4]
 800dd0c:	e7d2      	b.n	800dcb4 <__hexnan+0xd4>
 800dd0e:	3f04      	subs	r7, #4
 800dd10:	e7d0      	b.n	800dcb4 <__hexnan+0xd4>
 800dd12:	2004      	movs	r0, #4
 800dd14:	e7d5      	b.n	800dcc2 <__hexnan+0xe2>

0800dd16 <__ascii_mbtowc>:
 800dd16:	b082      	sub	sp, #8
 800dd18:	b901      	cbnz	r1, 800dd1c <__ascii_mbtowc+0x6>
 800dd1a:	a901      	add	r1, sp, #4
 800dd1c:	b142      	cbz	r2, 800dd30 <__ascii_mbtowc+0x1a>
 800dd1e:	b14b      	cbz	r3, 800dd34 <__ascii_mbtowc+0x1e>
 800dd20:	7813      	ldrb	r3, [r2, #0]
 800dd22:	600b      	str	r3, [r1, #0]
 800dd24:	7812      	ldrb	r2, [r2, #0]
 800dd26:	1e10      	subs	r0, r2, #0
 800dd28:	bf18      	it	ne
 800dd2a:	2001      	movne	r0, #1
 800dd2c:	b002      	add	sp, #8
 800dd2e:	4770      	bx	lr
 800dd30:	4610      	mov	r0, r2
 800dd32:	e7fb      	b.n	800dd2c <__ascii_mbtowc+0x16>
 800dd34:	f06f 0001 	mvn.w	r0, #1
 800dd38:	e7f8      	b.n	800dd2c <__ascii_mbtowc+0x16>

0800dd3a <_realloc_r>:
 800dd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3e:	4680      	mov	r8, r0
 800dd40:	4615      	mov	r5, r2
 800dd42:	460c      	mov	r4, r1
 800dd44:	b921      	cbnz	r1, 800dd50 <_realloc_r+0x16>
 800dd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	f7fd be60 	b.w	800ba10 <_malloc_r>
 800dd50:	b92a      	cbnz	r2, 800dd5e <_realloc_r+0x24>
 800dd52:	f7fd fde9 	bl	800b928 <_free_r>
 800dd56:	2400      	movs	r4, #0
 800dd58:	4620      	mov	r0, r4
 800dd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd5e:	f000 f840 	bl	800dde2 <_malloc_usable_size_r>
 800dd62:	4285      	cmp	r5, r0
 800dd64:	4606      	mov	r6, r0
 800dd66:	d802      	bhi.n	800dd6e <_realloc_r+0x34>
 800dd68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd6c:	d8f4      	bhi.n	800dd58 <_realloc_r+0x1e>
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4640      	mov	r0, r8
 800dd72:	f7fd fe4d 	bl	800ba10 <_malloc_r>
 800dd76:	4607      	mov	r7, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d0ec      	beq.n	800dd56 <_realloc_r+0x1c>
 800dd7c:	42b5      	cmp	r5, r6
 800dd7e:	462a      	mov	r2, r5
 800dd80:	4621      	mov	r1, r4
 800dd82:	bf28      	it	cs
 800dd84:	4632      	movcs	r2, r6
 800dd86:	f7ff fc45 	bl	800d614 <memcpy>
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	f7fd fdcb 	bl	800b928 <_free_r>
 800dd92:	463c      	mov	r4, r7
 800dd94:	e7e0      	b.n	800dd58 <_realloc_r+0x1e>

0800dd96 <__ascii_wctomb>:
 800dd96:	4603      	mov	r3, r0
 800dd98:	4608      	mov	r0, r1
 800dd9a:	b141      	cbz	r1, 800ddae <__ascii_wctomb+0x18>
 800dd9c:	2aff      	cmp	r2, #255	@ 0xff
 800dd9e:	d904      	bls.n	800ddaa <__ascii_wctomb+0x14>
 800dda0:	228a      	movs	r2, #138	@ 0x8a
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	4770      	bx	lr
 800ddaa:	700a      	strb	r2, [r1, #0]
 800ddac:	2001      	movs	r0, #1
 800ddae:	4770      	bx	lr

0800ddb0 <fiprintf>:
 800ddb0:	b40e      	push	{r1, r2, r3}
 800ddb2:	b503      	push	{r0, r1, lr}
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	ab03      	add	r3, sp, #12
 800ddb8:	4805      	ldr	r0, [pc, #20]	@ (800ddd0 <fiprintf+0x20>)
 800ddba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddbe:	6800      	ldr	r0, [r0, #0]
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	f000 f83f 	bl	800de44 <_vfiprintf_r>
 800ddc6:	b002      	add	sp, #8
 800ddc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddcc:	b003      	add	sp, #12
 800ddce:	4770      	bx	lr
 800ddd0:	20000034 	.word	0x20000034

0800ddd4 <abort>:
 800ddd4:	b508      	push	{r3, lr}
 800ddd6:	2006      	movs	r0, #6
 800ddd8:	f000 fa08 	bl	800e1ec <raise>
 800dddc:	2001      	movs	r0, #1
 800ddde:	f7f4 fdd9 	bl	8002994 <_exit>

0800dde2 <_malloc_usable_size_r>:
 800dde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde6:	1f18      	subs	r0, r3, #4
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	bfbc      	itt	lt
 800ddec:	580b      	ldrlt	r3, [r1, r0]
 800ddee:	18c0      	addlt	r0, r0, r3
 800ddf0:	4770      	bx	lr

0800ddf2 <__sfputc_r>:
 800ddf2:	6893      	ldr	r3, [r2, #8]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	b410      	push	{r4}
 800ddfa:	6093      	str	r3, [r2, #8]
 800ddfc:	da08      	bge.n	800de10 <__sfputc_r+0x1e>
 800ddfe:	6994      	ldr	r4, [r2, #24]
 800de00:	42a3      	cmp	r3, r4
 800de02:	db01      	blt.n	800de08 <__sfputc_r+0x16>
 800de04:	290a      	cmp	r1, #10
 800de06:	d103      	bne.n	800de10 <__sfputc_r+0x1e>
 800de08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de0c:	f000 b932 	b.w	800e074 <__swbuf_r>
 800de10:	6813      	ldr	r3, [r2, #0]
 800de12:	1c58      	adds	r0, r3, #1
 800de14:	6010      	str	r0, [r2, #0]
 800de16:	7019      	strb	r1, [r3, #0]
 800de18:	4608      	mov	r0, r1
 800de1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <__sfputs_r>:
 800de20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de22:	4606      	mov	r6, r0
 800de24:	460f      	mov	r7, r1
 800de26:	4614      	mov	r4, r2
 800de28:	18d5      	adds	r5, r2, r3
 800de2a:	42ac      	cmp	r4, r5
 800de2c:	d101      	bne.n	800de32 <__sfputs_r+0x12>
 800de2e:	2000      	movs	r0, #0
 800de30:	e007      	b.n	800de42 <__sfputs_r+0x22>
 800de32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de36:	463a      	mov	r2, r7
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff ffda 	bl	800ddf2 <__sfputc_r>
 800de3e:	1c43      	adds	r3, r0, #1
 800de40:	d1f3      	bne.n	800de2a <__sfputs_r+0xa>
 800de42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de44 <_vfiprintf_r>:
 800de44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	460d      	mov	r5, r1
 800de4a:	b09d      	sub	sp, #116	@ 0x74
 800de4c:	4614      	mov	r4, r2
 800de4e:	4698      	mov	r8, r3
 800de50:	4606      	mov	r6, r0
 800de52:	b118      	cbz	r0, 800de5c <_vfiprintf_r+0x18>
 800de54:	6a03      	ldr	r3, [r0, #32]
 800de56:	b90b      	cbnz	r3, 800de5c <_vfiprintf_r+0x18>
 800de58:	f7fc fdc4 	bl	800a9e4 <__sinit>
 800de5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de5e:	07d9      	lsls	r1, r3, #31
 800de60:	d405      	bmi.n	800de6e <_vfiprintf_r+0x2a>
 800de62:	89ab      	ldrh	r3, [r5, #12]
 800de64:	059a      	lsls	r2, r3, #22
 800de66:	d402      	bmi.n	800de6e <_vfiprintf_r+0x2a>
 800de68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de6a:	f7fc ff06 	bl	800ac7a <__retarget_lock_acquire_recursive>
 800de6e:	89ab      	ldrh	r3, [r5, #12]
 800de70:	071b      	lsls	r3, r3, #28
 800de72:	d501      	bpl.n	800de78 <_vfiprintf_r+0x34>
 800de74:	692b      	ldr	r3, [r5, #16]
 800de76:	b99b      	cbnz	r3, 800dea0 <_vfiprintf_r+0x5c>
 800de78:	4629      	mov	r1, r5
 800de7a:	4630      	mov	r0, r6
 800de7c:	f000 f938 	bl	800e0f0 <__swsetup_r>
 800de80:	b170      	cbz	r0, 800dea0 <_vfiprintf_r+0x5c>
 800de82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de84:	07dc      	lsls	r4, r3, #31
 800de86:	d504      	bpl.n	800de92 <_vfiprintf_r+0x4e>
 800de88:	f04f 30ff 	mov.w	r0, #4294967295
 800de8c:	b01d      	add	sp, #116	@ 0x74
 800de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de92:	89ab      	ldrh	r3, [r5, #12]
 800de94:	0598      	lsls	r0, r3, #22
 800de96:	d4f7      	bmi.n	800de88 <_vfiprintf_r+0x44>
 800de98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de9a:	f7fc feef 	bl	800ac7c <__retarget_lock_release_recursive>
 800de9e:	e7f3      	b.n	800de88 <_vfiprintf_r+0x44>
 800dea0:	2300      	movs	r3, #0
 800dea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea4:	2320      	movs	r3, #32
 800dea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800deaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800deae:	2330      	movs	r3, #48	@ 0x30
 800deb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e060 <_vfiprintf_r+0x21c>
 800deb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800deb8:	f04f 0901 	mov.w	r9, #1
 800debc:	4623      	mov	r3, r4
 800debe:	469a      	mov	sl, r3
 800dec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dec4:	b10a      	cbz	r2, 800deca <_vfiprintf_r+0x86>
 800dec6:	2a25      	cmp	r2, #37	@ 0x25
 800dec8:	d1f9      	bne.n	800debe <_vfiprintf_r+0x7a>
 800deca:	ebba 0b04 	subs.w	fp, sl, r4
 800dece:	d00b      	beq.n	800dee8 <_vfiprintf_r+0xa4>
 800ded0:	465b      	mov	r3, fp
 800ded2:	4622      	mov	r2, r4
 800ded4:	4629      	mov	r1, r5
 800ded6:	4630      	mov	r0, r6
 800ded8:	f7ff ffa2 	bl	800de20 <__sfputs_r>
 800dedc:	3001      	adds	r0, #1
 800dede:	f000 80a7 	beq.w	800e030 <_vfiprintf_r+0x1ec>
 800dee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dee4:	445a      	add	r2, fp
 800dee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dee8:	f89a 3000 	ldrb.w	r3, [sl]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f000 809f 	beq.w	800e030 <_vfiprintf_r+0x1ec>
 800def2:	2300      	movs	r3, #0
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800defc:	f10a 0a01 	add.w	sl, sl, #1
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	9307      	str	r3, [sp, #28]
 800df04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df08:	931a      	str	r3, [sp, #104]	@ 0x68
 800df0a:	4654      	mov	r4, sl
 800df0c:	2205      	movs	r2, #5
 800df0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df12:	4853      	ldr	r0, [pc, #332]	@ (800e060 <_vfiprintf_r+0x21c>)
 800df14:	f7f2 f934 	bl	8000180 <memchr>
 800df18:	9a04      	ldr	r2, [sp, #16]
 800df1a:	b9d8      	cbnz	r0, 800df54 <_vfiprintf_r+0x110>
 800df1c:	06d1      	lsls	r1, r2, #27
 800df1e:	bf44      	itt	mi
 800df20:	2320      	movmi	r3, #32
 800df22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df26:	0713      	lsls	r3, r2, #28
 800df28:	bf44      	itt	mi
 800df2a:	232b      	movmi	r3, #43	@ 0x2b
 800df2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df30:	f89a 3000 	ldrb.w	r3, [sl]
 800df34:	2b2a      	cmp	r3, #42	@ 0x2a
 800df36:	d015      	beq.n	800df64 <_vfiprintf_r+0x120>
 800df38:	9a07      	ldr	r2, [sp, #28]
 800df3a:	4654      	mov	r4, sl
 800df3c:	2000      	movs	r0, #0
 800df3e:	f04f 0c0a 	mov.w	ip, #10
 800df42:	4621      	mov	r1, r4
 800df44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df48:	3b30      	subs	r3, #48	@ 0x30
 800df4a:	2b09      	cmp	r3, #9
 800df4c:	d94b      	bls.n	800dfe6 <_vfiprintf_r+0x1a2>
 800df4e:	b1b0      	cbz	r0, 800df7e <_vfiprintf_r+0x13a>
 800df50:	9207      	str	r2, [sp, #28]
 800df52:	e014      	b.n	800df7e <_vfiprintf_r+0x13a>
 800df54:	eba0 0308 	sub.w	r3, r0, r8
 800df58:	fa09 f303 	lsl.w	r3, r9, r3
 800df5c:	4313      	orrs	r3, r2
 800df5e:	9304      	str	r3, [sp, #16]
 800df60:	46a2      	mov	sl, r4
 800df62:	e7d2      	b.n	800df0a <_vfiprintf_r+0xc6>
 800df64:	9b03      	ldr	r3, [sp, #12]
 800df66:	1d19      	adds	r1, r3, #4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	9103      	str	r1, [sp, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	bfbb      	ittet	lt
 800df70:	425b      	neglt	r3, r3
 800df72:	f042 0202 	orrlt.w	r2, r2, #2
 800df76:	9307      	strge	r3, [sp, #28]
 800df78:	9307      	strlt	r3, [sp, #28]
 800df7a:	bfb8      	it	lt
 800df7c:	9204      	strlt	r2, [sp, #16]
 800df7e:	7823      	ldrb	r3, [r4, #0]
 800df80:	2b2e      	cmp	r3, #46	@ 0x2e
 800df82:	d10a      	bne.n	800df9a <_vfiprintf_r+0x156>
 800df84:	7863      	ldrb	r3, [r4, #1]
 800df86:	2b2a      	cmp	r3, #42	@ 0x2a
 800df88:	d132      	bne.n	800dff0 <_vfiprintf_r+0x1ac>
 800df8a:	9b03      	ldr	r3, [sp, #12]
 800df8c:	1d1a      	adds	r2, r3, #4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	9203      	str	r2, [sp, #12]
 800df92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df96:	3402      	adds	r4, #2
 800df98:	9305      	str	r3, [sp, #20]
 800df9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e070 <_vfiprintf_r+0x22c>
 800df9e:	7821      	ldrb	r1, [r4, #0]
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	4650      	mov	r0, sl
 800dfa4:	f7f2 f8ec 	bl	8000180 <memchr>
 800dfa8:	b138      	cbz	r0, 800dfba <_vfiprintf_r+0x176>
 800dfaa:	9b04      	ldr	r3, [sp, #16]
 800dfac:	eba0 000a 	sub.w	r0, r0, sl
 800dfb0:	2240      	movs	r2, #64	@ 0x40
 800dfb2:	4082      	lsls	r2, r0
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfbe:	4829      	ldr	r0, [pc, #164]	@ (800e064 <_vfiprintf_r+0x220>)
 800dfc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dfc4:	2206      	movs	r2, #6
 800dfc6:	f7f2 f8db 	bl	8000180 <memchr>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d03f      	beq.n	800e04e <_vfiprintf_r+0x20a>
 800dfce:	4b26      	ldr	r3, [pc, #152]	@ (800e068 <_vfiprintf_r+0x224>)
 800dfd0:	bb1b      	cbnz	r3, 800e01a <_vfiprintf_r+0x1d6>
 800dfd2:	9b03      	ldr	r3, [sp, #12]
 800dfd4:	3307      	adds	r3, #7
 800dfd6:	f023 0307 	bic.w	r3, r3, #7
 800dfda:	3308      	adds	r3, #8
 800dfdc:	9303      	str	r3, [sp, #12]
 800dfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfe0:	443b      	add	r3, r7
 800dfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe4:	e76a      	b.n	800debc <_vfiprintf_r+0x78>
 800dfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfea:	460c      	mov	r4, r1
 800dfec:	2001      	movs	r0, #1
 800dfee:	e7a8      	b.n	800df42 <_vfiprintf_r+0xfe>
 800dff0:	2300      	movs	r3, #0
 800dff2:	3401      	adds	r4, #1
 800dff4:	9305      	str	r3, [sp, #20]
 800dff6:	4619      	mov	r1, r3
 800dff8:	f04f 0c0a 	mov.w	ip, #10
 800dffc:	4620      	mov	r0, r4
 800dffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e002:	3a30      	subs	r2, #48	@ 0x30
 800e004:	2a09      	cmp	r2, #9
 800e006:	d903      	bls.n	800e010 <_vfiprintf_r+0x1cc>
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d0c6      	beq.n	800df9a <_vfiprintf_r+0x156>
 800e00c:	9105      	str	r1, [sp, #20]
 800e00e:	e7c4      	b.n	800df9a <_vfiprintf_r+0x156>
 800e010:	fb0c 2101 	mla	r1, ip, r1, r2
 800e014:	4604      	mov	r4, r0
 800e016:	2301      	movs	r3, #1
 800e018:	e7f0      	b.n	800dffc <_vfiprintf_r+0x1b8>
 800e01a:	ab03      	add	r3, sp, #12
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	462a      	mov	r2, r5
 800e020:	4b12      	ldr	r3, [pc, #72]	@ (800e06c <_vfiprintf_r+0x228>)
 800e022:	a904      	add	r1, sp, #16
 800e024:	4630      	mov	r0, r6
 800e026:	f7fb fe85 	bl	8009d34 <_printf_float>
 800e02a:	4607      	mov	r7, r0
 800e02c:	1c78      	adds	r0, r7, #1
 800e02e:	d1d6      	bne.n	800dfde <_vfiprintf_r+0x19a>
 800e030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e032:	07d9      	lsls	r1, r3, #31
 800e034:	d405      	bmi.n	800e042 <_vfiprintf_r+0x1fe>
 800e036:	89ab      	ldrh	r3, [r5, #12]
 800e038:	059a      	lsls	r2, r3, #22
 800e03a:	d402      	bmi.n	800e042 <_vfiprintf_r+0x1fe>
 800e03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e03e:	f7fc fe1d 	bl	800ac7c <__retarget_lock_release_recursive>
 800e042:	89ab      	ldrh	r3, [r5, #12]
 800e044:	065b      	lsls	r3, r3, #25
 800e046:	f53f af1f 	bmi.w	800de88 <_vfiprintf_r+0x44>
 800e04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e04c:	e71e      	b.n	800de8c <_vfiprintf_r+0x48>
 800e04e:	ab03      	add	r3, sp, #12
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	462a      	mov	r2, r5
 800e054:	4b05      	ldr	r3, [pc, #20]	@ (800e06c <_vfiprintf_r+0x228>)
 800e056:	a904      	add	r1, sp, #16
 800e058:	4630      	mov	r0, r6
 800e05a:	f7fc f903 	bl	800a264 <_printf_i>
 800e05e:	e7e4      	b.n	800e02a <_vfiprintf_r+0x1e6>
 800e060:	0800e9b1 	.word	0x0800e9b1
 800e064:	0800e9bb 	.word	0x0800e9bb
 800e068:	08009d35 	.word	0x08009d35
 800e06c:	0800de21 	.word	0x0800de21
 800e070:	0800e9b7 	.word	0x0800e9b7

0800e074 <__swbuf_r>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	460e      	mov	r6, r1
 800e078:	4614      	mov	r4, r2
 800e07a:	4605      	mov	r5, r0
 800e07c:	b118      	cbz	r0, 800e086 <__swbuf_r+0x12>
 800e07e:	6a03      	ldr	r3, [r0, #32]
 800e080:	b90b      	cbnz	r3, 800e086 <__swbuf_r+0x12>
 800e082:	f7fc fcaf 	bl	800a9e4 <__sinit>
 800e086:	69a3      	ldr	r3, [r4, #24]
 800e088:	60a3      	str	r3, [r4, #8]
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	071a      	lsls	r2, r3, #28
 800e08e:	d501      	bpl.n	800e094 <__swbuf_r+0x20>
 800e090:	6923      	ldr	r3, [r4, #16]
 800e092:	b943      	cbnz	r3, 800e0a6 <__swbuf_r+0x32>
 800e094:	4621      	mov	r1, r4
 800e096:	4628      	mov	r0, r5
 800e098:	f000 f82a 	bl	800e0f0 <__swsetup_r>
 800e09c:	b118      	cbz	r0, 800e0a6 <__swbuf_r+0x32>
 800e09e:	f04f 37ff 	mov.w	r7, #4294967295
 800e0a2:	4638      	mov	r0, r7
 800e0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	6922      	ldr	r2, [r4, #16]
 800e0aa:	1a98      	subs	r0, r3, r2
 800e0ac:	6963      	ldr	r3, [r4, #20]
 800e0ae:	b2f6      	uxtb	r6, r6
 800e0b0:	4283      	cmp	r3, r0
 800e0b2:	4637      	mov	r7, r6
 800e0b4:	dc05      	bgt.n	800e0c2 <__swbuf_r+0x4e>
 800e0b6:	4621      	mov	r1, r4
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7ff fa47 	bl	800d54c <_fflush_r>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d1ed      	bne.n	800e09e <__swbuf_r+0x2a>
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	1c5a      	adds	r2, r3, #1
 800e0cc:	6022      	str	r2, [r4, #0]
 800e0ce:	701e      	strb	r6, [r3, #0]
 800e0d0:	6962      	ldr	r2, [r4, #20]
 800e0d2:	1c43      	adds	r3, r0, #1
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d004      	beq.n	800e0e2 <__swbuf_r+0x6e>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	07db      	lsls	r3, r3, #31
 800e0dc:	d5e1      	bpl.n	800e0a2 <__swbuf_r+0x2e>
 800e0de:	2e0a      	cmp	r6, #10
 800e0e0:	d1df      	bne.n	800e0a2 <__swbuf_r+0x2e>
 800e0e2:	4621      	mov	r1, r4
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	f7ff fa31 	bl	800d54c <_fflush_r>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d0d9      	beq.n	800e0a2 <__swbuf_r+0x2e>
 800e0ee:	e7d6      	b.n	800e09e <__swbuf_r+0x2a>

0800e0f0 <__swsetup_r>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	4b29      	ldr	r3, [pc, #164]	@ (800e198 <__swsetup_r+0xa8>)
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	6818      	ldr	r0, [r3, #0]
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	b118      	cbz	r0, 800e104 <__swsetup_r+0x14>
 800e0fc:	6a03      	ldr	r3, [r0, #32]
 800e0fe:	b90b      	cbnz	r3, 800e104 <__swsetup_r+0x14>
 800e100:	f7fc fc70 	bl	800a9e4 <__sinit>
 800e104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e108:	0719      	lsls	r1, r3, #28
 800e10a:	d422      	bmi.n	800e152 <__swsetup_r+0x62>
 800e10c:	06da      	lsls	r2, r3, #27
 800e10e:	d407      	bmi.n	800e120 <__swsetup_r+0x30>
 800e110:	2209      	movs	r2, #9
 800e112:	602a      	str	r2, [r5, #0]
 800e114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e118:	81a3      	strh	r3, [r4, #12]
 800e11a:	f04f 30ff 	mov.w	r0, #4294967295
 800e11e:	e033      	b.n	800e188 <__swsetup_r+0x98>
 800e120:	0758      	lsls	r0, r3, #29
 800e122:	d512      	bpl.n	800e14a <__swsetup_r+0x5a>
 800e124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e126:	b141      	cbz	r1, 800e13a <__swsetup_r+0x4a>
 800e128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e12c:	4299      	cmp	r1, r3
 800e12e:	d002      	beq.n	800e136 <__swsetup_r+0x46>
 800e130:	4628      	mov	r0, r5
 800e132:	f7fd fbf9 	bl	800b928 <_free_r>
 800e136:	2300      	movs	r3, #0
 800e138:	6363      	str	r3, [r4, #52]	@ 0x34
 800e13a:	89a3      	ldrh	r3, [r4, #12]
 800e13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	2300      	movs	r3, #0
 800e144:	6063      	str	r3, [r4, #4]
 800e146:	6923      	ldr	r3, [r4, #16]
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f043 0308 	orr.w	r3, r3, #8
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	6923      	ldr	r3, [r4, #16]
 800e154:	b94b      	cbnz	r3, 800e16a <__swsetup_r+0x7a>
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e160:	d003      	beq.n	800e16a <__swsetup_r+0x7a>
 800e162:	4621      	mov	r1, r4
 800e164:	4628      	mov	r0, r5
 800e166:	f000 f883 	bl	800e270 <__smakebuf_r>
 800e16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e16e:	f013 0201 	ands.w	r2, r3, #1
 800e172:	d00a      	beq.n	800e18a <__swsetup_r+0x9a>
 800e174:	2200      	movs	r2, #0
 800e176:	60a2      	str	r2, [r4, #8]
 800e178:	6962      	ldr	r2, [r4, #20]
 800e17a:	4252      	negs	r2, r2
 800e17c:	61a2      	str	r2, [r4, #24]
 800e17e:	6922      	ldr	r2, [r4, #16]
 800e180:	b942      	cbnz	r2, 800e194 <__swsetup_r+0xa4>
 800e182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e186:	d1c5      	bne.n	800e114 <__swsetup_r+0x24>
 800e188:	bd38      	pop	{r3, r4, r5, pc}
 800e18a:	0799      	lsls	r1, r3, #30
 800e18c:	bf58      	it	pl
 800e18e:	6962      	ldrpl	r2, [r4, #20]
 800e190:	60a2      	str	r2, [r4, #8]
 800e192:	e7f4      	b.n	800e17e <__swsetup_r+0x8e>
 800e194:	2000      	movs	r0, #0
 800e196:	e7f7      	b.n	800e188 <__swsetup_r+0x98>
 800e198:	20000034 	.word	0x20000034

0800e19c <_raise_r>:
 800e19c:	291f      	cmp	r1, #31
 800e19e:	b538      	push	{r3, r4, r5, lr}
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	d904      	bls.n	800e1b0 <_raise_r+0x14>
 800e1a6:	2316      	movs	r3, #22
 800e1a8:	6003      	str	r3, [r0, #0]
 800e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ae:	bd38      	pop	{r3, r4, r5, pc}
 800e1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e1b2:	b112      	cbz	r2, 800e1ba <_raise_r+0x1e>
 800e1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1b8:	b94b      	cbnz	r3, 800e1ce <_raise_r+0x32>
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 f830 	bl	800e220 <_getpid_r>
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ca:	f000 b817 	b.w	800e1fc <_kill_r>
 800e1ce:	2b01      	cmp	r3, #1
 800e1d0:	d00a      	beq.n	800e1e8 <_raise_r+0x4c>
 800e1d2:	1c59      	adds	r1, r3, #1
 800e1d4:	d103      	bne.n	800e1de <_raise_r+0x42>
 800e1d6:	2316      	movs	r3, #22
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	2001      	movs	r0, #1
 800e1dc:	e7e7      	b.n	800e1ae <_raise_r+0x12>
 800e1de:	2100      	movs	r1, #0
 800e1e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	4798      	blx	r3
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	e7e0      	b.n	800e1ae <_raise_r+0x12>

0800e1ec <raise>:
 800e1ec:	4b02      	ldr	r3, [pc, #8]	@ (800e1f8 <raise+0xc>)
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	6818      	ldr	r0, [r3, #0]
 800e1f2:	f7ff bfd3 	b.w	800e19c <_raise_r>
 800e1f6:	bf00      	nop
 800e1f8:	20000034 	.word	0x20000034

0800e1fc <_kill_r>:
 800e1fc:	b538      	push	{r3, r4, r5, lr}
 800e1fe:	4d07      	ldr	r5, [pc, #28]	@ (800e21c <_kill_r+0x20>)
 800e200:	2300      	movs	r3, #0
 800e202:	4604      	mov	r4, r0
 800e204:	4608      	mov	r0, r1
 800e206:	4611      	mov	r1, r2
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	f7f4 fbb3 	bl	8002974 <_kill>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	d102      	bne.n	800e218 <_kill_r+0x1c>
 800e212:	682b      	ldr	r3, [r5, #0]
 800e214:	b103      	cbz	r3, 800e218 <_kill_r+0x1c>
 800e216:	6023      	str	r3, [r4, #0]
 800e218:	bd38      	pop	{r3, r4, r5, pc}
 800e21a:	bf00      	nop
 800e21c:	200028e0 	.word	0x200028e0

0800e220 <_getpid_r>:
 800e220:	f7f4 bba0 	b.w	8002964 <_getpid>

0800e224 <__swhatbuf_r>:
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	460c      	mov	r4, r1
 800e228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e22c:	2900      	cmp	r1, #0
 800e22e:	b096      	sub	sp, #88	@ 0x58
 800e230:	4615      	mov	r5, r2
 800e232:	461e      	mov	r6, r3
 800e234:	da0d      	bge.n	800e252 <__swhatbuf_r+0x2e>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e23c:	f04f 0100 	mov.w	r1, #0
 800e240:	bf14      	ite	ne
 800e242:	2340      	movne	r3, #64	@ 0x40
 800e244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e248:	2000      	movs	r0, #0
 800e24a:	6031      	str	r1, [r6, #0]
 800e24c:	602b      	str	r3, [r5, #0]
 800e24e:	b016      	add	sp, #88	@ 0x58
 800e250:	bd70      	pop	{r4, r5, r6, pc}
 800e252:	466a      	mov	r2, sp
 800e254:	f000 f848 	bl	800e2e8 <_fstat_r>
 800e258:	2800      	cmp	r0, #0
 800e25a:	dbec      	blt.n	800e236 <__swhatbuf_r+0x12>
 800e25c:	9901      	ldr	r1, [sp, #4]
 800e25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e266:	4259      	negs	r1, r3
 800e268:	4159      	adcs	r1, r3
 800e26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e26e:	e7eb      	b.n	800e248 <__swhatbuf_r+0x24>

0800e270 <__smakebuf_r>:
 800e270:	898b      	ldrh	r3, [r1, #12]
 800e272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e274:	079d      	lsls	r5, r3, #30
 800e276:	4606      	mov	r6, r0
 800e278:	460c      	mov	r4, r1
 800e27a:	d507      	bpl.n	800e28c <__smakebuf_r+0x1c>
 800e27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	6123      	str	r3, [r4, #16]
 800e284:	2301      	movs	r3, #1
 800e286:	6163      	str	r3, [r4, #20]
 800e288:	b003      	add	sp, #12
 800e28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e28c:	ab01      	add	r3, sp, #4
 800e28e:	466a      	mov	r2, sp
 800e290:	f7ff ffc8 	bl	800e224 <__swhatbuf_r>
 800e294:	9f00      	ldr	r7, [sp, #0]
 800e296:	4605      	mov	r5, r0
 800e298:	4639      	mov	r1, r7
 800e29a:	4630      	mov	r0, r6
 800e29c:	f7fd fbb8 	bl	800ba10 <_malloc_r>
 800e2a0:	b948      	cbnz	r0, 800e2b6 <__smakebuf_r+0x46>
 800e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a6:	059a      	lsls	r2, r3, #22
 800e2a8:	d4ee      	bmi.n	800e288 <__smakebuf_r+0x18>
 800e2aa:	f023 0303 	bic.w	r3, r3, #3
 800e2ae:	f043 0302 	orr.w	r3, r3, #2
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	e7e2      	b.n	800e27c <__smakebuf_r+0xc>
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	6020      	str	r0, [r4, #0]
 800e2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2be:	81a3      	strh	r3, [r4, #12]
 800e2c0:	9b01      	ldr	r3, [sp, #4]
 800e2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e2c6:	b15b      	cbz	r3, 800e2e0 <__smakebuf_r+0x70>
 800e2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 f81d 	bl	800e30c <_isatty_r>
 800e2d2:	b128      	cbz	r0, 800e2e0 <__smakebuf_r+0x70>
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f023 0303 	bic.w	r3, r3, #3
 800e2da:	f043 0301 	orr.w	r3, r3, #1
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	89a3      	ldrh	r3, [r4, #12]
 800e2e2:	431d      	orrs	r5, r3
 800e2e4:	81a5      	strh	r5, [r4, #12]
 800e2e6:	e7cf      	b.n	800e288 <__smakebuf_r+0x18>

0800e2e8 <_fstat_r>:
 800e2e8:	b538      	push	{r3, r4, r5, lr}
 800e2ea:	4d07      	ldr	r5, [pc, #28]	@ (800e308 <_fstat_r+0x20>)
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	4608      	mov	r0, r1
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	602b      	str	r3, [r5, #0]
 800e2f6:	f7f4 fb81 	bl	80029fc <_fstat>
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	d102      	bne.n	800e304 <_fstat_r+0x1c>
 800e2fe:	682b      	ldr	r3, [r5, #0]
 800e300:	b103      	cbz	r3, 800e304 <_fstat_r+0x1c>
 800e302:	6023      	str	r3, [r4, #0]
 800e304:	bd38      	pop	{r3, r4, r5, pc}
 800e306:	bf00      	nop
 800e308:	200028e0 	.word	0x200028e0

0800e30c <_isatty_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d06      	ldr	r5, [pc, #24]	@ (800e328 <_isatty_r+0x1c>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	602b      	str	r3, [r5, #0]
 800e318:	f7f4 fb80 	bl	8002a1c <_isatty>
 800e31c:	1c43      	adds	r3, r0, #1
 800e31e:	d102      	bne.n	800e326 <_isatty_r+0x1a>
 800e320:	682b      	ldr	r3, [r5, #0]
 800e322:	b103      	cbz	r3, 800e326 <_isatty_r+0x1a>
 800e324:	6023      	str	r3, [r4, #0]
 800e326:	bd38      	pop	{r3, r4, r5, pc}
 800e328:	200028e0 	.word	0x200028e0

0800e32c <_init>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	bf00      	nop
 800e330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e332:	bc08      	pop	{r3}
 800e334:	469e      	mov	lr, r3
 800e336:	4770      	bx	lr

0800e338 <_fini>:
 800e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33a:	bf00      	nop
 800e33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e33e:	bc08      	pop	{r3}
 800e340:	469e      	mov	lr, r3
 800e342:	4770      	bx	lr
