
STM32WB55_LIS2DH_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e43c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  0800e580  0800e580  0000f580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800edc8  0800edc8  0000fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800edd0  0800edd0  0000fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800edd4  0800edd4  0000fdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800edd8  00010004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006d44  200001f0  0800efc4  000101f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20006f34  0800efc4  00010f34  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021338  00000000  00000000  00010220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004122  00000000  00000000  00031558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002180  00000000  00000000  00035680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019a0  00000000  00000000  00037800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00025fa2  00000000  00000000  000391a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022739  00000000  00000000  0005f142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e3ad0  00000000  00000000  0008187b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0016534b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3e8  00000000  00000000  00165390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  0016f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e564 	.word	0x0800e564

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800e564 	.word	0x0800e564

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <SELECT+0x1c>)
 8000fa0:	f002 fa2e 	bl	8003400 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 ffb3 	bl	8002f10 <HAL_Delay>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000800 	.word	0x48000800

08000fb4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <DESELECT+0x1c>)
 8000fc0:	f002 fa1e 	bl	8003400 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 ffa3 	bl	8002f10 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fde:	bf00      	nop
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <SPI_TxByte+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d1f8      	bne.n	8000fe0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	2364      	movs	r3, #100	@ 0x64
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <SPI_TxByte+0x30>)
 8000ff6:	f004 ffd5 	bl	8005fa4 <HAL_SPI_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002e4 	.word	0x200002e4

08001008 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001014:	bf00      	nop
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <SPI_TxBuffer+0x30>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b02      	cmp	r3, #2
 8001022:	d1f8      	bne.n	8001016 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	2364      	movs	r3, #100	@ 0x64
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <SPI_TxBuffer+0x30>)
 800102c:	f004 ffba 	bl	8005fa4 <HAL_SPI_Transmit>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002e4 	.word	0x200002e4

0800103c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001042:	23ff      	movs	r3, #255	@ 0xff
 8001044:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001046:	bf00      	nop
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <SPI_RxByte+0x34>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b02      	cmp	r3, #2
 8001054:	d1f8      	bne.n	8001048 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001056:	1dba      	adds	r2, r7, #6
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <SPI_RxByte+0x34>)
 8001062:	f005 f914 	bl	800628e <HAL_SPI_TransmitReceive>

  return data;
 8001066:	79bb      	ldrb	r3, [r7, #6]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002e4 	.word	0x200002e4

08001074 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800107c:	f7ff ffde 	bl	800103c <SPI_RxByte>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <SD_ReadyWait+0x30>)
 8001098:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800109c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800109e:	f7ff ffcd 	bl	800103c <SPI_RxByte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d004      	beq.n	80010b6 <SD_ReadyWait+0x26>
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SD_ReadyWait+0x30>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f3      	bne.n	800109e <SD_ReadyWait+0xe>

  return res;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20006da2 	.word	0x20006da2

080010c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80010ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010ce:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80010d0:	f7ff ff70 	bl	8000fb4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	e005      	b.n	80010e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010da:	20ff      	movs	r0, #255	@ 0xff
 80010dc:	f7ff ff7a 	bl	8000fd4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddf6      	ble.n	80010da <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80010ec:	f7ff ff52 	bl	8000f94 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001104:	2395      	movs	r3, #149	@ 0x95
 8001106:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001108:	463b      	mov	r3, r7
 800110a:	2106      	movs	r1, #6
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff7b 	bl	8001008 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001112:	e002      	b.n	800111a <SD_PowerOn+0x56>
  {
    cnt--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800111a:	f7ff ff8f 	bl	800103c <SPI_RxByte>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d002      	beq.n	800112a <SD_PowerOn+0x66>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f4      	bne.n	8001114 <SD_PowerOn+0x50>
  }

  DESELECT();
 800112a:	f7ff ff43 	bl	8000fb4 <DESELECT>
  SPI_TxByte(0XFF);
 800112e:	20ff      	movs	r0, #255	@ 0xff
 8001130:	f7ff ff50 	bl	8000fd4 <SPI_TxByte>

  PowerFlag = 1;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <SD_PowerOn+0x80>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000020d 	.word	0x2000020d

08001148 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <SD_PowerOff+0x14>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000020d 	.word	0x2000020d

08001160 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <SD_CheckPower+0x14>)
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000020d 	.word	0x2000020d

08001178 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001184:	22c8      	movs	r2, #200	@ 0xc8
 8001186:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8001188:	f7ff ff58 	bl	800103c <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2bff      	cmp	r3, #255	@ 0xff
 8001194:	d104      	bne.n	80011a0 <SD_RxDataBlock+0x28>
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80011a4:	d001      	beq.n	80011aa <SD_RxDataBlock+0x32>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e00f      	b.n	80011ca <SD_RxDataBlock+0x52>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <SPI_RxBytePtr>
  } while(len--);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f4      	bne.n	80011aa <SD_RxDataBlock+0x32>

  /* discard CRC */
  SPI_RxByte();
 80011c0:	f7ff ff3c 	bl	800103c <SPI_RxByte>
  SPI_RxByte();
 80011c4:	f7ff ff3a 	bl	800103c <SPI_RxByte>

  return TRUE;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20006da1 	.word	0x20006da1

080011d8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80011e8:	f7ff ff52 	bl	8001090 <SD_ReadyWait>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d001      	beq.n	80011f6 <SD_TxDataBlock+0x1e>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e02f      	b.n	8001256 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feeb 	bl	8000fd4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bfd      	cmp	r3, #253	@ 0xfd
 8001202:	d020      	beq.n	8001246 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fefd 	bl	8001008 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800120e:	f7ff ff15 	bl	800103c <SPI_RxByte>
    SPI_RxByte();
 8001212:	f7ff ff13 	bl	800103c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001216:	e00b      	b.n	8001230 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001218:	f7ff ff10 	bl	800103c <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b05      	cmp	r3, #5
 8001228:	d006      	beq.n	8001238 <SD_TxDataBlock+0x60>
      i++;
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b40      	cmp	r3, #64	@ 0x40
 8001234:	d9f0      	bls.n	8001218 <SD_TxDataBlock+0x40>
 8001236:	e000      	b.n	800123a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001238:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800123a:	bf00      	nop
 800123c:	f7ff fefe 	bl	800103c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0fa      	beq.n	800123c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b05      	cmp	r3, #5
 800124e:	d101      	bne.n	8001254 <SD_TxDataBlock+0x7c>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800126a:	f7ff ff11 	bl	8001090 <SD_ReadyWait>
 800126e:	4603      	mov	r3, r0
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d001      	beq.n	8001278 <SD_SendCmd+0x1a>
 8001274:	23ff      	movs	r3, #255	@ 0xff
 8001276:	e042      	b.n	80012fe <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff feaa 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	0e1b      	lsrs	r3, r3, #24
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fea4 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe9e 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe98 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe93 	bl	8000fd4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b40      	cmp	r3, #64	@ 0x40
 80012b2:	d102      	bne.n	80012ba <SD_SendCmd+0x5c>
 80012b4:	2395      	movs	r3, #149	@ 0x95
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e007      	b.n	80012ca <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b48      	cmp	r3, #72	@ 0x48
 80012be:	d102      	bne.n	80012c6 <SD_SendCmd+0x68>
 80012c0:	2387      	movs	r3, #135	@ 0x87
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <SD_SendCmd+0x6c>
  else crc = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe81 	bl	8000fd4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b4c      	cmp	r3, #76	@ 0x4c
 80012d6:	d101      	bne.n	80012dc <SD_SendCmd+0x7e>
 80012d8:	f7ff feb0 	bl	800103c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80012dc:	230a      	movs	r3, #10
 80012de:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80012e0:	f7ff feac 	bl	800103c <SPI_RxByte>
 80012e4:	4603      	mov	r3, r0
 80012e6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80012e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da05      	bge.n	80012fc <SD_SendCmd+0x9e>
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f1      	bne.n	80012e0 <SD_SendCmd+0x82>

  return res;
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SD_disk_initialize+0x14>
 8001318:	2301      	movs	r3, #1
 800131a:	e0d6      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <SD_disk_initialize+0x2a>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	e0cb      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* power on */
  SD_PowerOn();
 8001332:	f7ff fec7 	bl	80010c4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001336:	f7ff fe2d 	bl	8000f94 <SELECT>

  /* check disk type */
  type = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800133e:	2100      	movs	r1, #0
 8001340:	2040      	movs	r0, #64	@ 0x40
 8001342:	f7ff ff8c 	bl	800125e <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	f040 80a6 	bne.w	800149a <SD_disk_initialize+0x192>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800134e:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001356:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800135a:	2048      	movs	r0, #72	@ 0x48
 800135c:	f7ff ff7f 	bl	800125e <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d158      	bne.n	8001418 <SD_disk_initialize+0x110>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e00c      	b.n	8001386 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800136c:	7bfc      	ldrb	r4, [r7, #15]
 800136e:	f7ff fe65 	bl	800103c <SPI_RxByte>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f104 0310 	add.w	r3, r4, #16
 800137a:	443b      	add	r3, r7
 800137c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d9ef      	bls.n	800136c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800138c:	7abb      	ldrb	r3, [r7, #10]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8083 	bne.w	800149a <SD_disk_initialize+0x192>
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	2baa      	cmp	r3, #170	@ 0xaa
 8001398:	d17f      	bne.n	800149a <SD_disk_initialize+0x192>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800139a:	2100      	movs	r1, #0
 800139c:	2077      	movs	r0, #119	@ 0x77
 800139e:	f7ff ff5e 	bl	800125e <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d807      	bhi.n	80013b8 <SD_disk_initialize+0xb0>
 80013a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ac:	2069      	movs	r0, #105	@ 0x69
 80013ae:	f7ff ff56 	bl	800125e <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <SD_disk_initialize+0xbc>
        } while (Timer1);
 80013b8:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1eb      	bne.n	800139a <SD_disk_initialize+0x92>
 80013c2:	e000      	b.n	80013c6 <SD_disk_initialize+0xbe>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013c4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d064      	beq.n	800149a <SD_disk_initialize+0x192>
 80013d0:	2100      	movs	r1, #0
 80013d2:	207a      	movs	r0, #122	@ 0x7a
 80013d4:	f7ff ff43 	bl	800125e <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d15d      	bne.n	800149a <SD_disk_initialize+0x192>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e00c      	b.n	80013fe <SD_disk_initialize+0xf6>
          {
            ocr[n] = SPI_RxByte();
 80013e4:	7bfc      	ldrb	r4, [r7, #15]
 80013e6:	f7ff fe29 	bl	800103c <SPI_RxByte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	f104 0310 	add.w	r3, r4, #16
 80013f2:	443b      	add	r3, r7
 80013f4:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9ef      	bls.n	80013e4 <SD_disk_initialize+0xdc>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SD_disk_initialize+0x10a>
 800140e:	230c      	movs	r3, #12
 8001410:	e000      	b.n	8001414 <SD_disk_initialize+0x10c>
 8001412:	2304      	movs	r3, #4
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e040      	b.n	800149a <SD_disk_initialize+0x192>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001418:	2100      	movs	r1, #0
 800141a:	2077      	movs	r0, #119	@ 0x77
 800141c:	f7ff ff1f 	bl	800125e <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d808      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001426:	2100      	movs	r1, #0
 8001428:	2069      	movs	r0, #105	@ 0x69
 800142a:	f7ff ff18 	bl	800125e <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d801      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001434:	2302      	movs	r3, #2
 8001436:	e000      	b.n	800143a <SD_disk_initialize+0x132>
 8001438:	2301      	movs	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d10e      	bne.n	8001460 <SD_disk_initialize+0x158>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001442:	2100      	movs	r1, #0
 8001444:	2077      	movs	r0, #119	@ 0x77
 8001446:	f7ff ff0a 	bl	800125e <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d80e      	bhi.n	800146e <SD_disk_initialize+0x166>
 8001450:	2100      	movs	r1, #0
 8001452:	2069      	movs	r0, #105	@ 0x69
 8001454:	f7ff ff03 	bl	800125e <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <SD_disk_initialize+0x166>
 800145e:	e00d      	b.n	800147c <SD_disk_initialize+0x174>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001460:	2100      	movs	r1, #0
 8001462:	2041      	movs	r0, #65	@ 0x41
 8001464:	f7ff fefb 	bl	800125e <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <SD_disk_initialize+0x172>
        }

      } while (Timer1);
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e1      	bne.n	800143c <SD_disk_initialize+0x134>
 8001478:	e000      	b.n	800147c <SD_disk_initialize+0x174>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800147a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SD_disk_initialize+0x18e>
 8001486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148a:	2050      	movs	r0, #80	@ 0x50
 800148c:	f7ff fee7 	bl	800125e <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SD_disk_initialize+0x192>
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <SD_disk_initialize+0x1d4>)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80014a0:	f7ff fd88 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80014a4:	f7ff fdca 	bl	800103c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <SD_disk_initialize+0x1b8>
  {
    Stat &= ~STA_NOINIT;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <SD_disk_initialize+0x1bc>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014c0:	f7ff fe42 	bl	8001148 <SD_PowerOff>
  }

  return Stat;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20006da1 	.word	0x20006da1
 80014dc:	2000020c 	.word	0x2000020c

080014e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_status+0x14>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e002      	b.n	80014fa <SD_disk_status+0x1a>
  return Stat;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SD_disk_status+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000004 	.word	0x20000004

0800150c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <SD_disk_read+0x1c>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <SD_disk_read+0x20>
 8001528:	2304      	movs	r3, #4
 800152a:	e051      	b.n	80015d0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SD_disk_read+0xcc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SD_disk_read+0x32>
 800153a:	2303      	movs	r3, #3
 800153c:	e048      	b.n	80015d0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <SD_disk_read+0xd0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <SD_disk_read+0x44>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001550:	f7ff fd20 	bl	8000f94 <SELECT>

  if (count == 1)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2051      	movs	r0, #81	@ 0x51
 800155e:	f7ff fe7e 	bl	800125e <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <SD_disk_read+0xb0>
 8001568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fe03 	bl	8001178 <SD_RxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d021      	beq.n	80015bc <SD_disk_read+0xb0>
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	e01e      	b.n	80015bc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2052      	movs	r0, #82	@ 0x52
 8001582:	f7ff fe6c 	bl	800125e <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fdf1 	bl	8001178 <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <SD_disk_read+0xa6>
        buff += 512;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <SD_disk_read+0x80>
 80015b0:	e000      	b.n	80015b4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80015b2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80015b4:	2100      	movs	r1, #0
 80015b6:	204c      	movs	r0, #76	@ 0x4c
 80015b8:	f7ff fe51 	bl	800125e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80015bc:	f7ff fcfa 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80015c0:	f7ff fd3c 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <SD_disk_write+0x1c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SD_disk_write+0x20>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e06b      	b.n	80016d8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <SD_disk_write+0x100>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SD_disk_write+0x32>
 800160e:	2303      	movs	r3, #3
 8001610:	e062      	b.n	80016d8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <SD_disk_write+0x100>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_write+0x44>
 8001620:	2302      	movs	r3, #2
 8001622:	e059      	b.n	80016d8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <SD_disk_write+0x104>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <SD_disk_write+0x56>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	607b      	str	r3, [r7, #4]

  SELECT();
 8001636:	f7ff fcad 	bl	8000f94 <SELECT>

  if (count == 1)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2058      	movs	r0, #88	@ 0x58
 8001644:	f7ff fe0b 	bl	800125e <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <SD_disk_write+0xe4>
 800164e:	21fe      	movs	r1, #254	@ 0xfe
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdc1 	bl	80011d8 <SD_TxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <SD_disk_write+0xe4>
      count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e030      	b.n	80016c4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SD_disk_write+0x104>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	@ 0x77
 8001672:	f7ff fdf4 	bl	800125e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	2057      	movs	r0, #87	@ 0x57
 800167a:	f7ff fdf0 	bl	800125e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2059      	movs	r0, #89	@ 0x59
 8001682:	f7ff fdec 	bl	800125e <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11b      	bne.n	80016c4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800168c:	21fc      	movs	r1, #252	@ 0xfc
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff fda2 	bl	80011d8 <SD_TxDataBlock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <SD_disk_write+0xd0>
        buff += 512;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <SD_disk_write+0xac>
 80016ae:	e000      	b.n	80016b2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016b0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80016b2:	21fd      	movs	r1, #253	@ 0xfd
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd8f 	bl	80011d8 <SD_TxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_write+0xe4>
      {
        count = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80016c4:	f7ff fc76 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80016c8:	f7ff fcb8 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000004 	.word	0x20000004
 80016e4:	2000020c 	.word	0x2000020c

080016e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x1e>
 8001702:	2304      	movs	r3, #4
 8001704:	e113      	b.n	800192e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d124      	bne.n	800175c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d012      	beq.n	8001740 <SD_disk_ioctl+0x58>
 800171a:	2b02      	cmp	r3, #2
 800171c:	dc1a      	bgt.n	8001754 <SD_disk_ioctl+0x6c>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <SD_disk_ioctl+0x40>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d006      	beq.n	8001734 <SD_disk_ioctl+0x4c>
 8001726:	e015      	b.n	8001754 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001728:	f7ff fd0e 	bl	8001148 <SD_PowerOff>
      res = RES_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001732:	e0fa      	b.n	800192a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001734:	f7ff fcc6 	bl	80010c4 <SD_PowerOn>
      res = RES_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800173e:	e0f4      	b.n	800192a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	1c5c      	adds	r4, r3, #1
 8001744:	f7ff fd0c 	bl	8001160 <SD_CheckPower>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001752:	e0ea      	b.n	800192a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001754:	2304      	movs	r3, #4
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175a:	e0e6      	b.n	800192a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <SD_disk_ioctl+0x250>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x86>
 800176a:	2303      	movs	r3, #3
 800176c:	e0df      	b.n	800192e <SD_disk_ioctl+0x246>

    SELECT();
 800176e:	f7ff fc11 	bl	8000f94 <SELECT>

    switch (ctrl)
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b0d      	cmp	r3, #13
 8001776:	f200 80c9 	bhi.w	800190c <SD_disk_ioctl+0x224>
 800177a:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <SD_disk_ioctl+0x98>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001877 	.word	0x08001877
 8001784:	080017b9 	.word	0x080017b9
 8001788:	08001867 	.word	0x08001867
 800178c:	0800190d 	.word	0x0800190d
 8001790:	0800190d 	.word	0x0800190d
 8001794:	0800190d 	.word	0x0800190d
 8001798:	0800190d 	.word	0x0800190d
 800179c:	0800190d 	.word	0x0800190d
 80017a0:	0800190d 	.word	0x0800190d
 80017a4:	0800190d 	.word	0x0800190d
 80017a8:	0800190d 	.word	0x0800190d
 80017ac:	08001889 	.word	0x08001889
 80017b0:	080018ad 	.word	0x080018ad
 80017b4:	080018d1 	.word	0x080018d1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017b8:	2100      	movs	r1, #0
 80017ba:	2049      	movs	r0, #73	@ 0x49
 80017bc:	f7ff fd4f 	bl	800125e <SD_SendCmd>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80a6 	bne.w	8001914 <SD_disk_ioctl+0x22c>
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2110      	movs	r1, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fcd2 	bl	8001178 <SD_RxDataBlock>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 809c 	beq.w	8001914 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	461a      	mov	r2, r3
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017f8:	8bfb      	ldrh	r3, [r7, #30]
 80017fa:	029a      	lsls	r2, r3, #10
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e02d      	b.n	800185e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001802:	7c7b      	ldrb	r3, [r7, #17]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	09db      	lsrs	r3, r3, #7
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7d7b      	ldrb	r3, [r7, #21]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0306 	and.w	r3, r3, #6
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3302      	adds	r3, #2
 8001826:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800182a:	7d3b      	ldrb	r3, [r7, #20]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	7cbb      	ldrb	r3, [r7, #18]
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	b29b      	uxth	r3, r3
 8001842:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001856:	3b09      	subs	r3, #9
 8001858:	409a      	lsls	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001864:	e056      	b.n	8001914 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001874:	e055      	b.n	8001922 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001876:	f7ff fc0b 	bl	8001090 <SD_ReadyWait>
 800187a:	4603      	mov	r3, r0
 800187c:	2bff      	cmp	r3, #255	@ 0xff
 800187e:	d14b      	bne.n	8001918 <SD_disk_ioctl+0x230>
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001886:	e047      	b.n	8001918 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001888:	2100      	movs	r1, #0
 800188a:	2049      	movs	r0, #73	@ 0x49
 800188c:	f7ff fce7 	bl	800125e <SD_SendCmd>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d142      	bne.n	800191c <SD_disk_ioctl+0x234>
 8001896:	2110      	movs	r1, #16
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f7ff fc6d 	bl	8001178 <SD_RxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03b      	beq.n	800191c <SD_disk_ioctl+0x234>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018aa:	e037      	b.n	800191c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ac:	2100      	movs	r1, #0
 80018ae:	204a      	movs	r0, #74	@ 0x4a
 80018b0:	f7ff fcd5 	bl	800125e <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d132      	bne.n	8001920 <SD_disk_ioctl+0x238>
 80018ba:	2110      	movs	r1, #16
 80018bc:	6a38      	ldr	r0, [r7, #32]
 80018be:	f7ff fc5b 	bl	8001178 <SD_RxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02b      	beq.n	8001920 <SD_disk_ioctl+0x238>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018ce:	e027      	b.n	8001920 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018d0:	2100      	movs	r1, #0
 80018d2:	207a      	movs	r0, #122	@ 0x7a
 80018d4:	f7ff fcc3 	bl	800125e <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018e4:	e00b      	b.n	80018fe <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80018e6:	6a3c      	ldr	r4, [r7, #32]
 80018e8:	1c63      	adds	r3, r4, #1
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	f7ff fba6 	bl	800103c <SPI_RxByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f8:	3301      	adds	r3, #1
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001902:	2b03      	cmp	r3, #3
 8001904:	d9ef      	bls.n	80018e6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800190c:	2304      	movs	r3, #4
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001912:	e006      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001920:	bf00      	nop
    }

    DESELECT();
 8001922:	f7ff fb47 	bl	8000fb4 <DESELECT>
    SPI_RxByte();
 8001926:	f7ff fb89 	bl	800103c <SPI_RxByte>
  }

  return res;
 800192a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800192e:	4618      	mov	r0, r3
 8001930:	372c      	adds	r7, #44	@ 0x2c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000004 	.word	0x20000004

0800193c <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	460b      	mov	r3, r1
 800194a:	72fb      	strb	r3, [r7, #11]
 800194c:	4613      	mov	r3, r2
 800194e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <lis2dh12_read_reg+0x20>
  {
    return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e009      	b.n	8001970 <lis2dh12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685c      	ldr	r4, [r3, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	68d8      	ldr	r0, [r3, #12]
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	7af9      	ldrb	r1, [r7, #11]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	47a0      	blx	r4
 800196c:	6178      	str	r0, [r7, #20]

  return ret;
 800196e:	697b      	ldr	r3, [r7, #20]
}
 8001970:	4618      	mov	r0, r3
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}

08001978 <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	461a      	mov	r2, r3
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
 8001988:	4613      	mov	r3, r2
 800198a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d102      	bne.n	8001998 <lis2dh12_write_reg+0x20>
  {
    return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	e009      	b.n	80019ac <lis2dh12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68d8      	ldr	r0, [r3, #12]
 80019a0:	893b      	ldrh	r3, [r7, #8]
 80019a2:	7af9      	ldrb	r1, [r7, #11]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	47a0      	blx	r4
 80019a8:	6178      	str	r0, [r7, #20]

  return ret;
 80019aa:	697b      	ldr	r3, [r7, #20]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 1.0f;
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 80019ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019d2:	eef0 7a66 	vmov.f32	s15, s13
}
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(const stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 80019f0:	f107 0210 	add.w	r2, r7, #16
 80019f4:	2301      	movs	r3, #1
 80019f6:	2120      	movs	r1, #32
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff9f 	bl	800193c <lis2dh12_read_reg>
 80019fe:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <lis2dh12_operating_mode_set+0x32>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001a06:	f107 020c 	add.w	r2, r7, #12
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	2123      	movs	r1, #35	@ 0x23
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff94 	bl	800193c <lis2dh12_read_reg>
 8001a14:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d128      	bne.n	8001a6e <lis2dh12_operating_mode_set+0x8a>
  {
    if (val == LIS2DH12_HR_12bit)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <lis2dh12_operating_mode_set+0x4e>
    {
      ctrl_reg1.lpen = 0;
 8001a22:	7c3b      	ldrb	r3, [r7, #16]
 8001a24:	f36f 03c3 	bfc	r3, #3, #1
 8001a28:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 8001a2a:	7b3b      	ldrb	r3, [r7, #12]
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_NM_10bit)
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d107      	bne.n	8001a48 <lis2dh12_operating_mode_set+0x64>
    {
      ctrl_reg1.lpen = 0;
 8001a38:	7c3b      	ldrb	r3, [r7, #16]
 8001a3a:	f36f 03c3 	bfc	r3, #3, #1
 8001a3e:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8001a40:	7b3b      	ldrb	r3, [r7, #12]
 8001a42:	f36f 03c3 	bfc	r3, #3, #1
 8001a46:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_LP_8bit)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d107      	bne.n	8001a5e <lis2dh12_operating_mode_set+0x7a>
    {
      ctrl_reg1.lpen = 1;
 8001a4e:	7c3b      	ldrb	r3, [r7, #16]
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	f36f 03c3 	bfc	r3, #3, #1
 8001a5c:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 8001a5e:	f107 0210 	add.w	r2, r7, #16
 8001a62:	2301      	movs	r3, #1
 8001a64:	2120      	movs	r1, #32
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff86 	bl	8001978 <lis2dh12_write_reg>
 8001a6c:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <lis2dh12_operating_mode_set+0xa0>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2123      	movs	r1, #35	@ 0x23
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff7b 	bl	8001978 <lis2dh12_write_reg>
 8001a82:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001a84:	697b      	ldr	r3, [r7, #20]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(const stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8001a9a:	f107 0208 	add.w	r2, r7, #8
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff4a 	bl	800193c <lis2dh12_read_reg>
 8001aa8:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <lis2dh12_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	7a3b      	ldrb	r3, [r7, #8]
 8001aba:	f362 1307 	bfi	r3, r2, #4, #4
 8001abe:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 8001ac0:	f107 0208 	add.w	r2, r7, #8
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff55 	bl	8001978 <lis2dh12_write_reg>
 8001ace:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <lis2dh12_data_rate_get>:
  * @param  val      get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_get(const stmdev_ctx_t *ctx, lis2dh12_odr_t *val)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8001ae6:	f107 0208 	add.w	r2, r7, #8
 8001aea:	2301      	movs	r3, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff24 	bl	800193c <lis2dh12_read_reg>
 8001af4:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  switch (ctrl_reg1.odr)
 8001af6:	7a3b      	ldrb	r3, [r7, #8]
 8001af8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	d83e      	bhi.n	8001b80 <lis2dh12_data_rate_get+0xa4>
 8001b02:	a201      	add	r2, pc, #4	@ (adr r2, 8001b08 <lis2dh12_data_rate_get+0x2c>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	08001b39 	.word	0x08001b39
 8001b10:	08001b41 	.word	0x08001b41
 8001b14:	08001b49 	.word	0x08001b49
 8001b18:	08001b51 	.word	0x08001b51
 8001b1c:	08001b59 	.word	0x08001b59
 8001b20:	08001b61 	.word	0x08001b61
 8001b24:	08001b69 	.word	0x08001b69
 8001b28:	08001b71 	.word	0x08001b71
 8001b2c:	08001b79 	.word	0x08001b79
  {
    case LIS2DH12_POWER_DOWN:
      *val = LIS2DH12_POWER_DOWN;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
      break;
 8001b36:	e027      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_1Hz:
      *val = LIS2DH12_ODR_1Hz;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
      break;
 8001b3e:	e023      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_10Hz:
      *val = LIS2DH12_ODR_10Hz;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
      break;
 8001b46:	e01f      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_25Hz:
      *val = LIS2DH12_ODR_25Hz;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e01b      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_50Hz:
      *val = LIS2DH12_ODR_50Hz;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	701a      	strb	r2, [r3, #0]
      break;
 8001b56:	e017      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_100Hz:
      *val = LIS2DH12_ODR_100Hz;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2205      	movs	r2, #5
 8001b5c:	701a      	strb	r2, [r3, #0]
      break;
 8001b5e:	e013      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_200Hz:
      *val = LIS2DH12_ODR_200Hz;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2206      	movs	r2, #6
 8001b64:	701a      	strb	r2, [r3, #0]
      break;
 8001b66:	e00f      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_400Hz:
      *val = LIS2DH12_ODR_400Hz;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e00b      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_1kHz620_LP:
      *val = LIS2DH12_ODR_1kHz620_LP;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2208      	movs	r2, #8
 8001b74:	701a      	strb	r2, [r3, #0]
      break;
 8001b76:	e007      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    case LIS2DH12_ODR_5kHz376_LP_1kHz344_NM_HP:
      *val = LIS2DH12_ODR_5kHz376_LP_1kHz344_NM_HP;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2209      	movs	r2, #9
 8001b7c:	701a      	strb	r2, [r3, #0]
      break;
 8001b7e:	e003      	b.n	8001b88 <lis2dh12_data_rate_get+0xac>

    default:
      *val = LIS2DH12_POWER_DOWN;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
      break;
 8001b86:	bf00      	nop
  }

  return ret;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop

08001b94 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(const stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001ba0:	f107 0208 	add.w	r2, r7, #8
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	2123      	movs	r1, #35	@ 0x23
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fec7 	bl	800193c <lis2dh12_read_reg>
 8001bae:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <lis2dh12_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	7a3b      	ldrb	r3, [r7, #8]
 8001bc0:	f362 1305 	bfi	r3, r2, #4, #2
 8001bc4:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001bc6:	f107 0208 	add.w	r2, r7, #8
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2123      	movs	r1, #35	@ 0x23
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fed2 	bl	8001978 <lis2dh12_write_reg>
 8001bd4:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001bec:	f107 0208 	add.w	r2, r7, #8
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2123      	movs	r1, #35	@ 0x23
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fea1 	bl	800193c <lis2dh12_read_reg>
 8001bfa:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10f      	bne.n	8001c22 <lis2dh12_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	7a3b      	ldrb	r3, [r7, #8]
 8001c0c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001c10:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001c12:	f107 0208 	add.w	r2, r7, #8
 8001c16:	2301      	movs	r3, #1
 8001c18:	2123      	movs	r1, #35	@ 0x23
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff feac 	bl	8001978 <lis2dh12_write_reg>
 8001c20:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
 8001c36:	f107 0208 	add.w	r2, r7, #8
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2127      	movs	r1, #39	@ 0x27
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fe7c 	bl	800193c <lis2dh12_read_reg>
 8001c44:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
 8001c46:	7a3b      	ldrb	r3, [r7, #8]
 8001c48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	2128      	movs	r1, #40	@ 0x28
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fe63 	bl	800193c <lis2dh12_read_reg>
 8001c76:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001c78:	7b7b      	ldrb	r3, [r7, #13]
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	7b3a      	ldrb	r2, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	b212      	sxth	r2, r2
 8001ca0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	7bba      	ldrb	r2, [r7, #14]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001cbe:	7c7a      	ldrb	r2, [r7, #17]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	b212      	sxth	r2, r2
 8001cc6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	3304      	adds	r3, #4
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	7c3a      	ldrb	r2, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	b212      	sxth	r2, r2
 8001ce2:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ce4:	697b      	ldr	r3, [r7, #20]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b084      	sub	sp, #16
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe1c 	bl	800193c <lis2dh12_read_reg>
 8001d04:	60f8      	str	r0, [r7, #12]

  return ret;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001d30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d38:	e000      	b.n	8001d3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f9      	beq.n	8001d3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d46:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6e:	f023 0218 	bic.w	r2, r3, #24
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e009      	b.n	8001de2 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff9a 	bl	8001d10 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf1      	blt.n	8001dce <_write+0x12>
  }
  return len;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <initialize_sd_card>:

/* Main Example --------------------------------------------------------------*/
static void initialize_sd_card(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  // Mount SDCard
  send_uart("MOUNTING_SD_CARD\n");
 8001dfa:	4847      	ldr	r0, [pc, #284]	@ (8001f18 <initialize_sd_card+0x124>)
 8001dfc:	f000 fab2 	bl	8002364 <send_uart>
  HAL_Delay(1000);
 8001e00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e04:	f001 f884 	bl	8002f10 <HAL_Delay>

  fresult = f_mount(&fs, "", 1); /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4944      	ldr	r1, [pc, #272]	@ (8001f1c <initialize_sd_card+0x128>)
 8001e0c:	4844      	ldr	r0, [pc, #272]	@ (8001f20 <initialize_sd_card+0x12c>)
 8001e0e:	f007 fab3 	bl	8009378 <f_mount>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <initialize_sd_card+0x130>)
 8001e18:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8001e1a:	4b42      	ldr	r3, [pc, #264]	@ (8001f24 <initialize_sd_card+0x130>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d01c      	beq.n	8001e5c <initialize_sd_card+0x68>
  {
    send_uart("*************************************\n");
 8001e22:	4841      	ldr	r0, [pc, #260]	@ (8001f28 <initialize_sd_card+0x134>)
 8001e24:	f000 fa9e 	bl	8002364 <send_uart>
    send_uart("ERR_MOUNTING_SD_CARD\n");
 8001e28:	4840      	ldr	r0, [pc, #256]	@ (8001f2c <initialize_sd_card+0x138>)
 8001e2a:	f000 fa9b 	bl	8002364 <send_uart>
    send_uart("*************************************\n");
 8001e2e:	483e      	ldr	r0, [pc, #248]	@ (8001f28 <initialize_sd_card+0x134>)
 8001e30:	f000 fa98 	bl	8002364 <send_uart>
    for (int x = 0; x < 6; x++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	e00c      	b.n	8001e54 <initialize_sd_card+0x60>
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001e3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e42:	f001 faf5 	bl	8003430 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8001e46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e4a:	f001 f861 	bl	8002f10 <HAL_Delay>
    for (int x = 0; x < 6; x++)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3301      	adds	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	ddef      	ble.n	8001e3a <initialize_sd_card+0x46>
 8001e5a:	e008      	b.n	8001e6e <initialize_sd_card+0x7a>
    }
  }
  else
  {
    send_uart("*************************************\n");
 8001e5c:	4832      	ldr	r0, [pc, #200]	@ (8001f28 <initialize_sd_card+0x134>)
 8001e5e:	f000 fa81 	bl	8002364 <send_uart>
    send_uart("SUCC_MOUNTING_SD_CARD\n");
 8001e62:	4833      	ldr	r0, [pc, #204]	@ (8001f30 <initialize_sd_card+0x13c>)
 8001e64:	f000 fa7e 	bl	8002364 <send_uart>
    send_uart("*************************************\n");
 8001e68:	482f      	ldr	r0, [pc, #188]	@ (8001f28 <initialize_sd_card+0x134>)
 8001e6a:	f000 fa7b 	bl	8002364 <send_uart>
  }

  /*************** Card capacity details ********************/
  /*Checking free space*/
  f_getfree("", &fre_clust, &pfs);
 8001e6e:	4a31      	ldr	r2, [pc, #196]	@ (8001f34 <initialize_sd_card+0x140>)
 8001e70:	4931      	ldr	r1, [pc, #196]	@ (8001f38 <initialize_sd_card+0x144>)
 8001e72:	482a      	ldr	r0, [pc, #168]	@ (8001f1c <initialize_sd_card+0x128>)
 8001e74:	f007 feca 	bl	8009c0c <f_getfree>
  total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <initialize_sd_card+0x140>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	3b02      	subs	r3, #2
 8001e80:	4a2c      	ldr	r2, [pc, #176]	@ (8001f34 <initialize_sd_card+0x140>)
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	8952      	ldrh	r2, [r2, #10]
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb12 	bl	80004b4 <__aeabi_ui2d>
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <initialize_sd_card+0x148>)
 8001e96:	f7fe fb87 	bl	80005a8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe59 	bl	8000b58 <__aeabi_d2uiz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <initialize_sd_card+0x14c>)
 8001eaa:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_TOTAL_SIZE: \t%lu\n", total);
 8001eac:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <initialize_sd_card+0x14c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4924      	ldr	r1, [pc, #144]	@ (8001f44 <initialize_sd_card+0x150>)
 8001eb4:	4824      	ldr	r0, [pc, #144]	@ (8001f48 <initialize_sd_card+0x154>)
 8001eb6:	f008 ff1b 	bl	800acf0 <siprintf>
  send_uart(buffer);
 8001eba:	4823      	ldr	r0, [pc, #140]	@ (8001f48 <initialize_sd_card+0x154>)
 8001ebc:	f000 fa52 	bl	8002364 <send_uart>
  clear_buffer();
 8001ec0:	f000 fa74 	bl	80023ac <clear_buffer>
  free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f34 <initialize_sd_card+0x140>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	895b      	ldrh	r3, [r3, #10]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <initialize_sd_card+0x144>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe faed 	bl	80004b4 <__aeabi_ui2d>
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b17      	ldr	r3, [pc, #92]	@ (8001f3c <initialize_sd_card+0x148>)
 8001ee0:	f7fe fb62 	bl	80005a8 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fe34 	bl	8000b58 <__aeabi_d2uiz>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <initialize_sd_card+0x158>)
 8001ef4:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_FREE_SPACE: \t%lu\n", free_space);
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <initialize_sd_card+0x158>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4914      	ldr	r1, [pc, #80]	@ (8001f50 <initialize_sd_card+0x15c>)
 8001efe:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <initialize_sd_card+0x154>)
 8001f00:	f008 fef6 	bl	800acf0 <siprintf>
  send_uart(buffer);
 8001f04:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <initialize_sd_card+0x154>)
 8001f06:	f000 fa2d 	bl	8002364 <send_uart>
  clear_buffer();
 8001f0a:	f000 fa4f 	bl	80023ac <clear_buffer>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800e580 	.word	0x0800e580
 8001f1c:	0800e594 	.word	0x0800e594
 8001f20:	200006d0 	.word	0x200006d0
 8001f24:	20002734 	.word	0x20002734
 8001f28:	0800e598 	.word	0x0800e598
 8001f2c:	0800e5c0 	.word	0x0800e5c0
 8001f30:	0800e5d8 	.word	0x0800e5d8
 8001f34:	2000273c 	.word	0x2000273c
 8001f38:	20002740 	.word	0x20002740
 8001f3c:	3fe00000 	.word	0x3fe00000
 8001f40:	20002744 	.word	0x20002744
 8001f44:	0800e5f0 	.word	0x0800e5f0
 8001f48:	20000210 	.word	0x20000210
 8001f4c:	20002748 	.word	0x20002748
 8001f50:	0800e60c 	.word	0x0800e60c

08001f54 <lis2dh12_read_data_polling>:

void lis2dh12_read_data_polling(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	@ 0x30
 8001f58:	af02      	add	r7, sp, #8
  stmdev_ctx_t dev_ctx;
  lis2dh12_odr_t data_rate;         // Variable to store the data rate
  int32_t ret;

  // Call the function to get the data rate
  dev_ctx.write_reg = platform_write;
 8001f5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002190 <lis2dh12_read_data_polling+0x23c>)
 8001f5c:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002194 <lis2dh12_read_data_polling+0x240>)
 8001f60:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 8001f62:	4b8d      	ldr	r3, [pc, #564]	@ (8002198 <lis2dh12_read_data_polling+0x244>)
 8001f64:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &hi2c1;
 8001f66:	4b8d      	ldr	r3, [pc, #564]	@ (800219c <lis2dh12_read_data_polling+0x248>)
 8001f68:	617b      	str	r3, [r7, #20]
  /* Wait boot time and initialize platform specific hardware */
  //  platform_init();
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8001f6a:	2005      	movs	r0, #5
 8001f6c:	f000 fa12 	bl	8002394 <platform_delay>
  /* Check device ID */
  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	498a      	ldr	r1, [pc, #552]	@ (80021a0 <lis2dh12_read_data_polling+0x24c>)
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff feb9 	bl	8001cee <lis2dh12_device_id_get>

  if (whoamI != LIS2DH12_ID)
 8001f7c:	4b88      	ldr	r3, [pc, #544]	@ (80021a0 <lis2dh12_read_data_polling+0x24c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b33      	cmp	r3, #51	@ 0x33
 8001f82:	d001      	beq.n	8001f88 <lis2dh12_read_data_polling+0x34>
  {
    while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <lis2dh12_read_data_polling+0x30>
    {
      /* manage here device not found */
    }
  }
  /* Enable Block Data Update. */
  lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe26 	bl	8001be0 <lis2dh12_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_200Hz);
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	2106      	movs	r1, #6
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fd77 	bl	8001a8e <lis2dh12_data_rate_set>
  /* Set full scale to 2g. */
  lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fdf4 	bl	8001b94 <lis2dh12_full_scale_set>
  /* Enable temperature sensor. */
  //  lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
  /* Set device in continuous mode with 12 bit resol. */
  lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fd16 	bl	80019e4 <lis2dh12_operating_mode_set>

  ret = lis2dh12_data_rate_get(&dev_ctx, &data_rate);
 8001fb8:	1dfa      	adds	r2, r7, #7
 8001fba:	f107 0308 	add.w	r3, r7, #8
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fd8b 	bl	8001adc <lis2dh12_data_rate_get>
 8001fc6:	6238      	str	r0, [r7, #32]
  // Check if the function executed successfully
  if (ret == 0)
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d146      	bne.n	800205c <lis2dh12_read_data_polling+0x108>
  {
    // Print the data rate based on the returned value
    switch (data_rate)
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d83f      	bhi.n	8002054 <lis2dh12_read_data_polling+0x100>
 8001fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <lis2dh12_read_data_polling+0x88>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	0800200d 	.word	0x0800200d
 8001fe4:	08002015 	.word	0x08002015
 8001fe8:	0800201d 	.word	0x0800201d
 8001fec:	08002025 	.word	0x08002025
 8001ff0:	0800202d 	.word	0x0800202d
 8001ff4:	08002035 	.word	0x08002035
 8001ff8:	0800203d 	.word	0x0800203d
 8001ffc:	08002045 	.word	0x08002045
 8002000:	0800204d 	.word	0x0800204d
    {
    case LIS2DH12_POWER_DOWN:
      send_uart("Data rate: Power Down\n");
 8002004:	4867      	ldr	r0, [pc, #412]	@ (80021a4 <lis2dh12_read_data_polling+0x250>)
 8002006:	f000 f9ad 	bl	8002364 <send_uart>
      break;
 800200a:	e02f      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_1Hz:
      send_uart("Data rate: 1 Hz\n");
 800200c:	4866      	ldr	r0, [pc, #408]	@ (80021a8 <lis2dh12_read_data_polling+0x254>)
 800200e:	f000 f9a9 	bl	8002364 <send_uart>
      break;
 8002012:	e02b      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_10Hz:
      send_uart("Data rate: 10 Hz\n");
 8002014:	4865      	ldr	r0, [pc, #404]	@ (80021ac <lis2dh12_read_data_polling+0x258>)
 8002016:	f000 f9a5 	bl	8002364 <send_uart>
      break;
 800201a:	e027      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_25Hz:
      send_uart("Data rate: 25 Hz\n");
 800201c:	4864      	ldr	r0, [pc, #400]	@ (80021b0 <lis2dh12_read_data_polling+0x25c>)
 800201e:	f000 f9a1 	bl	8002364 <send_uart>
      break;
 8002022:	e023      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_50Hz:
      send_uart("Data rate: 50 Hz\n");
 8002024:	4863      	ldr	r0, [pc, #396]	@ (80021b4 <lis2dh12_read_data_polling+0x260>)
 8002026:	f000 f99d 	bl	8002364 <send_uart>
      break;
 800202a:	e01f      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_100Hz:
      send_uart("Data rate: 100 Hz\n");
 800202c:	4862      	ldr	r0, [pc, #392]	@ (80021b8 <lis2dh12_read_data_polling+0x264>)
 800202e:	f000 f999 	bl	8002364 <send_uart>
      break;
 8002032:	e01b      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_200Hz:
      send_uart("Data rate: 200 Hz\n");
 8002034:	4861      	ldr	r0, [pc, #388]	@ (80021bc <lis2dh12_read_data_polling+0x268>)
 8002036:	f000 f995 	bl	8002364 <send_uart>
      break;
 800203a:	e017      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_400Hz:
      send_uart("Data rate: 400 Hz\n");
 800203c:	4860      	ldr	r0, [pc, #384]	@ (80021c0 <lis2dh12_read_data_polling+0x26c>)
 800203e:	f000 f991 	bl	8002364 <send_uart>
      break;
 8002042:	e013      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_1kHz620_LP:
      send_uart("Data rate: 1.620 kHz (Low Power mode)\n");
 8002044:	485f      	ldr	r0, [pc, #380]	@ (80021c4 <lis2dh12_read_data_polling+0x270>)
 8002046:	f000 f98d 	bl	8002364 <send_uart>
      break;
 800204a:	e00f      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    case LIS2DH12_ODR_5kHz376_LP_1kHz344_NM_HP:
      send_uart("Data rate: 5.376 kHz (Low Power) / 1.344 kHz (Normal/High Performance)\n");
 800204c:	485e      	ldr	r0, [pc, #376]	@ (80021c8 <lis2dh12_read_data_polling+0x274>)
 800204e:	f000 f989 	bl	8002364 <send_uart>
      break;
 8002052:	e00b      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    default:
      send_uart("Data rate: Unknown\n");
 8002054:	485d      	ldr	r0, [pc, #372]	@ (80021cc <lis2dh12_read_data_polling+0x278>)
 8002056:	f000 f985 	bl	8002364 <send_uart>
      break;
 800205a:	e007      	b.n	800206c <lis2dh12_read_data_polling+0x118>
    }
  }
  else
  {
    // Handle error
    sprintf(buffer, "Failed to read data rate, error code: %ld\n", ret);
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	495c      	ldr	r1, [pc, #368]	@ (80021d0 <lis2dh12_read_data_polling+0x27c>)
 8002060:	485c      	ldr	r0, [pc, #368]	@ (80021d4 <lis2dh12_read_data_polling+0x280>)
 8002062:	f008 fe45 	bl	800acf0 <siprintf>
    send_uart(buffer);
 8002066:	485b      	ldr	r0, [pc, #364]	@ (80021d4 <lis2dh12_read_data_polling+0x280>)
 8002068:	f000 f97c 	bl	8002364 <send_uart>
  }

  for (int i = 0; i < SAMPLES; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002070:	e082      	b.n	8002178 <lis2dh12_read_data_polling+0x224>
  { //sampling 200 data = 2 detik (i.0n 100Hz)
    uint32_t start_time = HAL_GetTick(); //HAL_GetTick(); resolution in ms
 8002072:	f000 ff35 	bl	8002ee0 <HAL_GetTick>
 8002076:	61f8      	str	r0, [r7, #28]
    lis2dh12_reg_t reg;
    lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8002078:	1d3a      	adds	r2, r7, #4
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdd3 	bl	8001c2c <lis2dh12_xl_data_ready_get>
    memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002086:	2206      	movs	r2, #6
 8002088:	2100      	movs	r1, #0
 800208a:	4853      	ldr	r0, [pc, #332]	@ (80021d8 <lis2dh12_read_data_polling+0x284>)
 800208c:	f008 fe93 	bl	800adb6 <memset>
    lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4950      	ldr	r1, [pc, #320]	@ (80021d8 <lis2dh12_read_data_polling+0x284>)
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fde1 	bl	8001c5e <lis2dh12_acceleration_raw_get>
    acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 800209c:	4b4e      	ldr	r3, [pc, #312]	@ (80021d8 <lis2dh12_read_data_polling+0x284>)
 800209e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc86 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 80020a8:	eef0 7a40 	vmov.f32	s15, s0
 80020ac:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 80020ae:	edc3 7a00 	vstr	s15, [r3]
    acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 80020b2:	4b49      	ldr	r3, [pc, #292]	@ (80021d8 <lis2dh12_read_data_polling+0x284>)
 80020b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fc7b 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 80020be:	eef0 7a40 	vmov.f32	s15, s0
 80020c2:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]
    acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 80020c8:	4b43      	ldr	r3, [pc, #268]	@ (80021d8 <lis2dh12_read_data_polling+0x284>)
 80020ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fc70 	bl	80019b4 <lis2dh12_from_fs2_hr_to_mg>
 80020d4:	eef0 7a40 	vmov.f32	s15, s0
 80020d8:	4b40      	ldr	r3, [pc, #256]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 80020da:	edc3 7a02 	vstr	s15, [r3, #8]
    // Append formatted data directly to the single buffer (max 18 characters per entry)
    // Store formatted data in data_buffer (max 18 characters)
    snprintf(
        data_buffer[i],
 80020de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4a3d      	ldr	r2, [pc, #244]	@ (80021e0 <lis2dh12_read_data_polling+0x28c>)
 80020ea:	1898      	adds	r0, r3, r2
        sizeof(data_buffer[i]),
        "%d,%d,%d\n",
        (int) acceleration_mg[0],
 80020ec:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
    snprintf(
 80020f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
        (int) acceleration_mg[1],
 80020f6:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 80020f8:	edd3 7a01 	vldr	s15, [r3, #4]
    snprintf(
 80020fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002100:	ee17 2a90 	vmov	r2, s15
        (int) acceleration_mg[2]);
 8002104:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <lis2dh12_read_data_polling+0x288>)
 8002106:	edd3 7a02 	vldr	s15, [r3, #8]
    snprintf(
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	9200      	str	r2, [sp, #0]
 8002116:	ee17 3a10 	vmov	r3, s14
 800211a:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <lis2dh12_read_data_polling+0x290>)
 800211c:	2112      	movs	r1, #18
 800211e:	f008 fdb3 	bl	800ac88 <sniprintf>

    // Concatenate each line to sd_write_buffer and update total length
    size_t line_length = strlen(data_buffer[i]);
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4a2c      	ldr	r2, [pc, #176]	@ (80021e0 <lis2dh12_read_data_polling+0x28c>)
 800212e:	4413      	add	r3, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f875 	bl	8000220 <strlen>
 8002136:	61b8      	str	r0, [r7, #24]
    memcpy(sd_write_buffer + total_data_length, data_buffer[i], line_length);
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <lis2dh12_read_data_polling+0x294>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2b      	ldr	r2, [pc, #172]	@ (80021ec <lis2dh12_read_data_polling+0x298>)
 800213e:	1898      	adds	r0, r3, r2
 8002140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <lis2dh12_read_data_polling+0x28c>)
 800214c:	4413      	add	r3, r2
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4619      	mov	r1, r3
 8002152:	f008 feb0 	bl	800aeb6 <memcpy>
    total_data_length += line_length;
 8002156:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <lis2dh12_read_data_polling+0x294>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4413      	add	r3, r2
 800215e:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <lis2dh12_read_data_polling+0x294>)
 8002160:	6013      	str	r3, [r2, #0]

    // Wait until 10ms have passed
    while (HAL_GetTick() < start_time + 10)
 8002162:	bf00      	nop
 8002164:	f000 febc 	bl	8002ee0 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	330a      	adds	r3, #10
 800216e:	429a      	cmp	r2, r3
 8002170:	d3f8      	bcc.n	8002164 <lis2dh12_read_data_polling+0x210>
  for (int i = 0; i < SAMPLES; i++)
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	3301      	adds	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800217e:	f6ff af78 	blt.w	8002072 <lis2dh12_read_data_polling+0x11e>
    {
      //wait for 1ms
    }
  }
  send_uart("finish polling sensor data\n");
 8002182:	481b      	ldr	r0, [pc, #108]	@ (80021f0 <lis2dh12_read_data_polling+0x29c>)
 8002184:	f000 f8ee 	bl	8002364 <send_uart>
}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	@ 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	080022e5 	.word	0x080022e5
 8002194:	08002325 	.word	0x08002325
 8002198:	08002395 	.word	0x08002395
 800219c:	20000290 	.word	0x20000290
 80021a0:	200006cc 	.word	0x200006cc
 80021a4:	0800e628 	.word	0x0800e628
 80021a8:	0800e640 	.word	0x0800e640
 80021ac:	0800e654 	.word	0x0800e654
 80021b0:	0800e668 	.word	0x0800e668
 80021b4:	0800e67c 	.word	0x0800e67c
 80021b8:	0800e690 	.word	0x0800e690
 80021bc:	0800e6a4 	.word	0x0800e6a4
 80021c0:	0800e6b8 	.word	0x0800e6b8
 80021c4:	0800e6cc 	.word	0x0800e6cc
 80021c8:	0800e6f4 	.word	0x0800e6f4
 80021cc:	0800e73c 	.word	0x0800e73c
 80021d0:	0800e750 	.word	0x0800e750
 80021d4:	20000210 	.word	0x20000210
 80021d8:	200006b8 	.word	0x200006b8
 80021dc:	200006c0 	.word	0x200006c0
 80021e0:	2000274c 	.word	0x2000274c
 80021e4:	0800e77c 	.word	0x0800e77c
 80021e8:	20006d9c 	.word	0x20006d9c
 80021ec:	20004a74 	.word	0x20004a74
 80021f0:	0800e788 	.word	0x0800e788

080021f4 <write_to_sd>:

// Function to write the global data_buffer to SD card
void write_to_sd(char *data, size_t total_size)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b09e      	sub	sp, #120	@ 0x78
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]

  int counter = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	677b      	str	r3, [r7, #116]	@ 0x74
  int file_exists = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	673b      	str	r3, [r7, #112]	@ 0x70
  char filename[100];

  do
  {
    if (counter == 0)
 8002206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <write_to_sd+0x28>
    {
      snprintf(filename, sizeof(filename), "result.csv");
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4a2c      	ldr	r2, [pc, #176]	@ (80022c4 <write_to_sd+0xd0>)
 8002212:	2164      	movs	r1, #100	@ 0x64
 8002214:	4618      	mov	r0, r3
 8002216:	f008 fd37 	bl	800ac88 <sniprintf>
 800221a:	e006      	b.n	800222a <write_to_sd+0x36>
    }
    else
    {
      snprintf(filename, sizeof(filename), "result_%d.csv", counter);
 800221c:	f107 000c 	add.w	r0, r7, #12
 8002220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002222:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <write_to_sd+0xd4>)
 8002224:	2164      	movs	r1, #100	@ 0x64
 8002226:	f008 fd2f 	bl	800ac88 <sniprintf>
    }

    if (f_open(&fil, filename, FA_OPEN_EXISTING) == FR_OK)
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2200      	movs	r2, #0
 8002230:	4619      	mov	r1, r3
 8002232:	4826      	ldr	r0, [pc, #152]	@ (80022cc <write_to_sd+0xd8>)
 8002234:	f007 f8e6 	bl	8009404 <f_open>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d108      	bne.n	8002250 <write_to_sd+0x5c>
    {
      f_close(&fil);
 800223e:	4823      	ldr	r0, [pc, #140]	@ (80022cc <write_to_sd+0xd8>)
 8002240:	f007 fcba 	bl	8009bb8 <f_close>
      file_exists = 1;
 8002244:	2301      	movs	r3, #1
 8002246:	673b      	str	r3, [r7, #112]	@ 0x70
      counter++;
 8002248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800224a:	3301      	adds	r3, #1
 800224c:	677b      	str	r3, [r7, #116]	@ 0x74
 800224e:	e001      	b.n	8002254 <write_to_sd+0x60>
    }
    else
    {
      file_exists = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	673b      	str	r3, [r7, #112]	@ 0x70
    }
  }
  while (file_exists);
 8002254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1d5      	bne.n	8002206 <write_to_sd+0x12>

  if (f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	2232      	movs	r2, #50	@ 0x32
 8002260:	4619      	mov	r1, r3
 8002262:	481a      	ldr	r0, [pc, #104]	@ (80022cc <write_to_sd+0xd8>)
 8002264:	f007 f8ce 	bl	8009404 <f_open>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <write_to_sd+0x9a>
  {
    fresult = f_write(&fil, data, total_size, &br);
 800226e:	4b18      	ldr	r3, [pc, #96]	@ (80022d0 <write_to_sd+0xdc>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4815      	ldr	r0, [pc, #84]	@ (80022cc <write_to_sd+0xd8>)
 8002276:	f007 fa8d 	bl	8009794 <f_write>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <write_to_sd+0xe0>)
 8002280:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK || br != total_size)
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <write_to_sd+0xe0>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
    {
      // Handle write error
    }
    f_close(&fil);
 8002288:	4810      	ldr	r0, [pc, #64]	@ (80022cc <write_to_sd+0xd8>)
 800228a:	f007 fc95 	bl	8009bb8 <f_close>
  else
  {
    // Handle file open error
  }
  /* Unmount SDCARD */
  fresult = f_mount(NULL, "", 0);
 800228e:	2200      	movs	r2, #0
 8002290:	4911      	ldr	r1, [pc, #68]	@ (80022d8 <write_to_sd+0xe4>)
 8002292:	2000      	movs	r0, #0
 8002294:	f007 f870 	bl	8009378 <f_mount>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <write_to_sd+0xe0>)
 800229e:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK)
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <write_to_sd+0xe0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <write_to_sd+0xba>
  {
    send_uart("SD CARD UNMOUNTED successfully...\n");
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <write_to_sd+0xe8>)
 80022aa:	f000 f85b 	bl	8002364 <send_uart>
  }
  memset(data_buffer, 0, sizeof(data_buffer));
 80022ae:	f242 3228 	movw	r2, #9000	@ 0x2328
 80022b2:	2100      	movs	r1, #0
 80022b4:	480a      	ldr	r0, [pc, #40]	@ (80022e0 <write_to_sd+0xec>)
 80022b6:	f008 fd7e 	bl	800adb6 <memset>
}
 80022ba:	bf00      	nop
 80022bc:	3778      	adds	r7, #120	@ 0x78
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800e7a4 	.word	0x0800e7a4
 80022c8:	0800e7b0 	.word	0x0800e7b0
 80022cc:	20001704 	.word	0x20001704
 80022d0:	20002738 	.word	0x20002738
 80022d4:	20002734 	.word	0x20002734
 80022d8:	0800e594 	.word	0x0800e594
 80022dc:	0800e7c0 	.word	0x0800e7c0
 80022e0:	2000274c 	.word	0x2000274c

080022e4 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static void platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af04      	add	r7, sp, #16
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	461a      	mov	r2, r3
 80022f0:	460b      	mov	r3, r1
 80022f2:	72fb      	strb	r3, [r7, #11]
 80022f4:	4613      	mov	r3, r2
 80022f6:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022fe:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	b29a      	uxth	r2, r3
 8002304:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	893b      	ldrh	r3, [r7, #8]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2301      	movs	r3, #1
 8002314:	2132      	movs	r1, #50	@ 0x32
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 f940 	bl	800359c <HAL_I2C_Mem_Write>
  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <platform_read>:

static void platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af04      	add	r7, sp, #16
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	460b      	mov	r3, r1
 8002332:	72fb      	strb	r3, [r7, #11]
 8002334:	4613      	mov	r3, r2
 8002336:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800233e:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg,
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	893b      	ldrh	r3, [r7, #8]
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	2132      	movs	r1, #50	@ 0x32
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f001 fa34 	bl	80037c4 <HAL_I2C_Mem_Read>
  I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <send_uart>:

void send_uart(char *string)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(string);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fd ff57 	bl	8000220 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, (uint8_t*) string, len, 1000);
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	b29a      	uxth	r2, r3
 800237a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4803      	ldr	r0, [pc, #12]	@ (8002390 <send_uart+0x2c>)
 8002382:	f004 fb7b 	bl	8006a7c <HAL_UART_Transmit>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000348 	.word	0x20000348

08002394 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fdb7 	bl	8002f10 <HAL_Delay>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <clear_buffer>:
    i++;
  return i;
}

void clear_buffer(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
  for (int i = 0; i < BUFFER_SIZE; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e007      	b.n	80023c8 <clear_buffer+0x1c>
    buffer[i] = '\0';
 80023b8:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <clear_buffer+0x30>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BUFFER_SIZE; i++)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3301      	adds	r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80023cc:	ddf4      	ble.n	80023b8 <clear_buffer+0xc>
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	20000210 	.word	0x20000210

080023e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e4:	f000 fd0e 	bl	8002e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e8:	f000 f824 	bl	8002434 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023ec:	f000 f896 	bl	800251c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023f0:	f000 f9a4 	bl	800273c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80023f4:	f000 f92e 	bl	8002654 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80023f8:	f000 f978 	bl	80026ec <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80023fc:	f000 f8ac 	bl	8002558 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002400:	f000 f8ea 	bl	80025d8 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK)
 8002404:	f005 f94c 	bl	80076a0 <MX_FATFS_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <main+0x32>
  {
    Error_Handler();
 800240e:	f000 f9f1 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  //  logging_sdcard("################\n");
  initialize_sd_card();
 8002412:	f7ff fcef 	bl	8001df4 <initialize_sd_card>
  lis2dh12_read_data_polling();
 8002416:	f7ff fd9d 	bl	8001f54 <lis2dh12_read_data_polling>
  write_to_sd(sd_write_buffer, total_data_length);
 800241a:	4b04      	ldr	r3, [pc, #16]	@ (800242c <main+0x4c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4803      	ldr	r0, [pc, #12]	@ (8002430 <main+0x50>)
 8002422:	f7ff fee7 	bl	80021f4 <write_to_sd>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002426:	bf00      	nop
 8002428:	e7fd      	b.n	8002426 <main+0x46>
 800242a:	bf00      	nop
 800242c:	20006d9c 	.word	0x20006d9c
 8002430:	20004a74 	.word	0x20004a74

08002434 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b09a      	sub	sp, #104	@ 0x68
 8002438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	2248      	movs	r2, #72	@ 0x48
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f008 fcb7 	bl	800adb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
 8002456:	615a      	str	r2, [r3, #20]
 8002458:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 800245a:	f001 ff1f 	bl	800429c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800245e:	2000      	movs	r0, #0
 8002460:	f7ff fc7d 	bl	8001d5e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002464:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <SystemClock_Config+0xe4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <SystemClock_Config+0xe4>)
 800246e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <SystemClock_Config+0xe4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 8002480:	2327      	movs	r3, #39	@ 0x27
 8002482:	623b      	str	r3, [r7, #32]
      | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800248a:	2301      	movs	r3, #1
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002498:	2340      	movs	r3, #64	@ 0x40
 800249a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800249c:	2300      	movs	r3, #0
 800249e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024a0:	2360      	movs	r3, #96	@ 0x60
 80024a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a4:	2302      	movs	r3, #2
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80024a8:	2301      	movs	r3, #1
 80024aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 80024b0:	2318      	movs	r3, #24
 80024b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80024ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80024be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 fa7a 	bl	80049c4 <HAL_RCC_OscConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024d6:	f000 f98d 	bl	80027f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80024da:	236f      	movs	r3, #111	@ 0x6f
 80024dc:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024de:	2303      	movs	r3, #3
 80024e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	2101      	movs	r1, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fdd6 	bl	80050ac <HAL_RCC_ClockConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002506:	f000 f975 	bl	80027f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 800250a:	f003 fb91 	bl	8005c30 <HAL_RCCEx_EnableMSIPLLMode>
}
 800250e:	bf00      	nop
 8002510:	3768      	adds	r7, #104	@ 0x68
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	58000400 	.word	0x58000400

0800251c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b094      	sub	sp, #80	@ 0x50
 8002520:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002522:	463b      	mov	r3, r7
 8002524:	2250      	movs	r2, #80	@ 0x50
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f008 fc44 	bl	800adb6 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800252e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002532:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002534:	2300      	movs	r3, #0
 8002536:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002538:	2300      	movs	r3, #0
 800253a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fa00 	bl	8005944 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800254a:	f000 f953 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800254e:	bf00      	nop
 8002550:	3750      	adds	r7, #80	@ 0x50
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <MX_I2C1_Init+0x74>)
 800255e:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <MX_I2C1_Init+0x78>)
 8002560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002564:	4a1b      	ldr	r2, [pc, #108]	@ (80025d4 <MX_I2C1_Init+0x7c>)
 8002566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <MX_I2C1_Init+0x74>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002570:	2201      	movs	r2, #1
 8002572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <MX_I2C1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002586:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002588:	2200      	movs	r2, #0
 800258a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800258c:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <MX_I2C1_Init+0x74>)
 800258e:	2200      	movs	r2, #0
 8002590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002592:	480e      	ldr	r0, [pc, #56]	@ (80025cc <MX_I2C1_Init+0x74>)
 8002594:	f000 ff66 	bl	8003464 <HAL_I2C_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800259e:	f000 f929 	bl	80027f4 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025a2:	2100      	movs	r1, #0
 80025a4:	4809      	ldr	r0, [pc, #36]	@ (80025cc <MX_I2C1_Init+0x74>)
 80025a6:	f001 fce9 	bl	8003f7c <HAL_I2CEx_ConfigAnalogFilter>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80025b0:	f000 f920 	bl	80027f4 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025b4:	2100      	movs	r1, #0
 80025b6:	4805      	ldr	r0, [pc, #20]	@ (80025cc <MX_I2C1_Init+0x74>)
 80025b8:	f001 fd2b 	bl	8004012 <HAL_I2CEx_ConfigDigitalFilter>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025c2:	f000 f917 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000290 	.word	0x20000290
 80025d0:	40005400 	.word	0x40005400
 80025d4:	00b07cb4 	.word	0x00b07cb4

080025d8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <MX_SPI1_Init+0x74>)
 80025de:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <MX_SPI1_Init+0x78>)
 80025e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <MX_SPI1_Init+0x74>)
 80025e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <MX_SPI1_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <MX_SPI1_Init+0x74>)
 80025f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80025f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <MX_SPI1_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <MX_SPI1_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002604:	4b11      	ldr	r3, [pc, #68]	@ (800264c <MX_SPI1_Init+0x74>)
 8002606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800260c:	4b0f      	ldr	r3, [pc, #60]	@ (800264c <MX_SPI1_Init+0x74>)
 800260e:	2218      	movs	r2, #24
 8002610:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <MX_SPI1_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <MX_SPI1_Init+0x74>)
 800261a:	2200      	movs	r2, #0
 800261c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002624:	4b09      	ldr	r3, [pc, #36]	@ (800264c <MX_SPI1_Init+0x74>)
 8002626:	2207      	movs	r2, #7
 8002628:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800262a:	4b08      	ldr	r3, [pc, #32]	@ (800264c <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <MX_SPI1_Init+0x74>)
 8002632:	2208      	movs	r2, #8
 8002634:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	@ (800264c <MX_SPI1_Init+0x74>)
 8002638:	f003 fc11 	bl	8005e5e <HAL_SPI_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002642:	f000 f8d7 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200002e4 	.word	0x200002e4
 8002650:	40013000 	.word	0x40013000

08002654 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002658:	4b22      	ldr	r3, [pc, #136]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 800265a:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <MX_USART1_UART_Init+0x94>)
 800265c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b1f      	ldr	r3, [pc, #124]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268a:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 800268c:	2200      	movs	r2, #0
 800268e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 800269e:	f004 f99d 	bl	80069dc <HAL_UART_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026a8:	f000 f8a4 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ac:	2100      	movs	r1, #0
 80026ae:	480d      	ldr	r0, [pc, #52]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 80026b0:	f004 fef2 	bl	8007498 <HAL_UARTEx_SetTxFifoThreshold>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026ba:	f000 f89b 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026be:	2100      	movs	r1, #0
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 80026c2:	f004 ff27 	bl	8007514 <HAL_UARTEx_SetRxFifoThreshold>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026cc:	f000 f892 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026d0:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <MX_USART1_UART_Init+0x90>)
 80026d2:	f004 fea8 	bl	8007426 <HAL_UARTEx_DisableFifoMode>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026dc:	f000 f88a 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000348 	.word	0x20000348
 80026e8:	40013800 	.word	0x40013800

080026ec <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80026f0:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 80026f2:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <MX_USB_PCD_Init+0x4c>)
 80026f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 80026f8:	2208      	movs	r2, #8
 80026fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 80026fe:	2202      	movs	r2, #2
 8002700:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002702:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 8002704:	2202      	movs	r2, #2
 8002706:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 800270a:	2200      	movs	r2, #0
 800270c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800270e:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 8002710:	2200      	movs	r2, #0
 8002712:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 8002716:	2200      	movs	r2, #0
 8002718:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 800271c:	2200      	movs	r2, #0
 800271e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002720:	4804      	ldr	r0, [pc, #16]	@ (8002734 <MX_USB_PCD_Init+0x48>)
 8002722:	f001 fcc2 	bl	80040aa <HAL_PCD_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800272c:	f000 f862 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200003dc 	.word	0x200003dc
 8002738:	40006800 	.word	0x40006800

0800273c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002750:	2004      	movs	r0, #4
 8002752:	f7ff fb1a 	bl	8001d8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	2002      	movs	r0, #2
 8002758:	f7ff fb17 	bl	8001d8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	2001      	movs	r0, #1
 800275e:	f7ff fb14 	bl	8001d8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002762:	2008      	movs	r0, #8
 8002764:	f7ff fb11 	bl	8001d8a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2123      	movs	r1, #35	@ 0x23
 800276c:	481e      	ldr	r0, [pc, #120]	@ (80027e8 <MX_GPIO_Init+0xac>)
 800276e:	f000 fe47 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002778:	481c      	ldr	r0, [pc, #112]	@ (80027ec <MX_GPIO_Init+0xb0>)
 800277a:	f000 fe41 	bl	8003400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800277e:	2310      	movs	r3, #16
 8002780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4817      	ldr	r0, [pc, #92]	@ (80027ec <MX_GPIO_Init+0xb0>)
 8002790:	f000 fcc6 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8002794:	2323      	movs	r3, #35	@ 0x23
 8002796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	480f      	ldr	r0, [pc, #60]	@ (80027e8 <MX_GPIO_Init+0xac>)
 80027aa:	f000 fcb9 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	@ (80027ec <MX_GPIO_Init+0xb0>)
 80027c6:	f000 fcab 	bl	8003120 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 80027ca:	2303      	movs	r3, #3
 80027cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4805      	ldr	r0, [pc, #20]	@ (80027f0 <MX_GPIO_Init+0xb4>)
 80027dc:	f000 fca0 	bl	8003120 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	48000400 	.word	0x48000400
 80027ec:	48000800 	.word	0x48000800
 80027f0:	48000c00 	.word	0x48000c00

080027f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <Error_Handler+0x8>

08002800 <LL_AHB2_GRP1_EnableClock>:
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800280e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4313      	orrs	r3, r2
 8002816:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002824:	68fb      	ldr	r3, [r7, #12]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002832:	b480      	push	{r7}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4313      	orrs	r3, r2
 8002848:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002872:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4313      	orrs	r3, r2
 800287a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002880:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b09c      	sub	sp, #112	@ 0x70
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	2250      	movs	r2, #80	@ 0x50
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f008 fa76 	bl	800adb6 <memset>
  if(hi2c->Instance==I2C1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a17      	ldr	r2, [pc, #92]	@ (800292c <HAL_I2C_MspInit+0x88>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d126      	bne.n	8002922 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028d4:	2304      	movs	r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028d8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f82e 	bl	8005944 <HAL_RCCEx_PeriphCLKConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028ee:	f7ff ff81 	bl	80027f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2002      	movs	r0, #2
 80028f4:	f7ff ff84 	bl	8002800 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fe:	2312      	movs	r3, #18
 8002900:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800290a:	2304      	movs	r3, #4
 800290c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002912:	4619      	mov	r1, r3
 8002914:	4806      	ldr	r0, [pc, #24]	@ (8002930 <HAL_I2C_MspInit+0x8c>)
 8002916:	f000 fc03 	bl	8003120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800291a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800291e:	f7ff ff88 	bl	8002832 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002922:	bf00      	nop
 8002924:	3770      	adds	r7, #112	@ 0x70
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40005400 	.word	0x40005400
 8002930:	48000400 	.word	0x48000400

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0f      	ldr	r2, [pc, #60]	@ (8002990 <HAL_SPI_MspInit+0x5c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d117      	bne.n	8002986 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002956:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800295a:	f7ff ff83 	bl	8002864 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff ff4e 	bl	8002800 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002964:	23e0      	movs	r3, #224	@ 0xe0
 8002966:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002968:	2302      	movs	r3, #2
 800296a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002974:	2305      	movs	r3, #5
 8002976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	4619      	mov	r1, r3
 800297e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002982:	f000 fbcd 	bl	8003120 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002986:	bf00      	nop
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40013000 	.word	0x40013000

08002994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b09c      	sub	sp, #112	@ 0x70
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	2250      	movs	r2, #80	@ 0x50
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f008 f9fe 	bl	800adb6 <memset>
  if(huart->Instance==USART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a16      	ldr	r2, [pc, #88]	@ (8002a18 <HAL_UART_MspInit+0x84>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d124      	bne.n	8002a0e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4618      	mov	r0, r3
 80029d2:	f002 ffb7 	bl	8005944 <HAL_RCCEx_PeriphCLKConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029dc:	f7ff ff0a 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80029e4:	f7ff ff3e 	bl	8002864 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e8:	2002      	movs	r0, #2
 80029ea:	f7ff ff09 	bl	8002800 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80029ee:	23c0      	movs	r3, #192	@ 0xc0
 80029f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f6:	2301      	movs	r3, #1
 80029f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029fe:	2307      	movs	r3, #7
 8002a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4804      	ldr	r0, [pc, #16]	@ (8002a1c <HAL_UART_MspInit+0x88>)
 8002a0a:	f000 fb89 	bl	8003120 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a0e:	bf00      	nop
 8002a10:	3770      	adds	r7, #112	@ 0x70
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40013800 	.word	0x40013800
 8002a1c:	48000400 	.word	0x48000400

08002a20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b09c      	sub	sp, #112	@ 0x70
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	2250      	movs	r2, #80	@ 0x50
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f008 f9b8 	bl	800adb6 <memset>
  if(hpcd->Instance==USB)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <HAL_PCD_MspInit+0xa8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d136      	bne.n	8002abe <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002a56:	2318      	movs	r3, #24
 8002a58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002a5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002a60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002a66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002a72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a76:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 ff61 	bl	8005944 <HAL_RCCEx_PeriphCLKConfig>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002a88:	f7ff feb4 	bl	80027f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7ff feb7 	bl	8002800 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002a96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002aa4:	230a      	movs	r3, #10
 8002aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ab2:	f000 fb35 	bl	8003120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002ab6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002aba:	f7ff feba 	bl	8002832 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8002abe:	bf00      	nop
 8002ac0:	3770      	adds	r7, #112	@ 0x70
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40006800 	.word	0x40006800

08002acc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <SDTimer_Handler+0x40>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <SDTimer_Handler+0x1c>
    Timer1--;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <SDTimer_Handler+0x40>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <SDTimer_Handler+0x40>)
 8002ae6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <SDTimer_Handler+0x44>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <SDTimer_Handler+0x34>
    Timer2--;
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <SDTimer_Handler+0x44>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <SDTimer_Handler+0x44>)
 8002afe:	701a      	strb	r2, [r3, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20006da1 	.word	0x20006da1
 8002b10:	20006da2 	.word	0x20006da2

08002b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <NMI_Handler+0x4>

08002b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <HardFault_Handler+0x4>

08002b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <MemManage_Handler+0x4>

08002b2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <BusFault_Handler+0x4>

08002b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <UsageFault_Handler+0x4>

08002b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <SysTick_Handler+0x30>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <SysTick_Handler+0x30>)
 8002b78:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8002b7a:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <SysTick_Handler+0x30>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d904      	bls.n	8002b8e <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <SysTick_Handler+0x30>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8002b8a:	f7ff ff9f 	bl	8002acc <SDTimer_Handler>
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8e:	f000 f993 	bl	8002eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20006da0 	.word	0x20006da0

08002b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
	return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_kill>:

int _kill(int pid, int sig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bb6:	f008 f951 	bl	800ae5c <__errno>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2216      	movs	r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
	return -1;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_exit>:

void _exit (int status)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffe7 	bl	8002bac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <_exit+0x12>

08002be2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e00a      	b.n	8002c0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60ba      	str	r2, [r7, #8]
 8002c00:	b2ca      	uxtb	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbf0      	blt.n	8002bf4 <_read+0x12>
	}

return len;
 8002c12:	687b      	ldr	r3, [r7, #4]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_close>:
	}
	return len;
}

int _close(int file)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c44:	605a      	str	r2, [r3, #4]
	return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <_isatty>:

int _isatty(int file)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	return 1;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
	return 0;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f008 f8d2 	bl	800ae5c <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20030000 	.word	0x20030000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20006da4 	.word	0x20006da4
 8002cec:	20006f38 	.word	0x20006f38

08002cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <SystemInit+0x98>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <SystemInit+0x98>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d18:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002d1c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d28:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <SystemInit+0x9c>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3a:	f023 0305 	bic.w	r3, r3, #5
 8002d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <SystemInit+0xa0>)
 8002d5c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <SystemInit+0xa0>)
 8002d64:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00
 8002d8c:	faf6fefb 	.word	0xfaf6fefb
 8002d90:	22041000 	.word	0x22041000

08002d94 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d94:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d96:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d98:	3304      	adds	r3, #4

08002d9a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d9e:	d3f9      	bcc.n	8002d94 <CopyDataInit>
  bx lr
 8002da0:	4770      	bx	lr

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002da2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002da4:	3004      	adds	r0, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002da6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>
  bx lr
 8002daa:	4770      	bx	lr

08002dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dac:	480c      	ldr	r0, [pc, #48]	@ (8002de0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002dae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002db0:	f7ff ff9e 	bl	8002cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002db4:	480b      	ldr	r0, [pc, #44]	@ (8002de4 <LoopForever+0x8>)
 8002db6:	490c      	ldr	r1, [pc, #48]	@ (8002de8 <LoopForever+0xc>)
 8002db8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <LoopForever+0x10>)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f7ff ffed 	bl	8002d9a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002dc0:	480b      	ldr	r0, [pc, #44]	@ (8002df0 <LoopForever+0x14>)
 8002dc2:	490c      	ldr	r1, [pc, #48]	@ (8002df4 <LoopForever+0x18>)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f7ff ffee 	bl	8002da6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002dca:	480b      	ldr	r0, [pc, #44]	@ (8002df8 <LoopForever+0x1c>)
 8002dcc:	490b      	ldr	r1, [pc, #44]	@ (8002dfc <LoopForever+0x20>)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f7ff ffe9 	bl	8002da6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dd4:	f008 f848 	bl	800ae68 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002dd8:	f7ff fb02 	bl	80023e0 <main>

08002ddc <LoopForever>:

LoopForever:
  b LoopForever
 8002ddc:	e7fe      	b.n	8002ddc <LoopForever>
 8002dde:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002de0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002de4:	20000004 	.word	0x20000004
 8002de8:	200001f0 	.word	0x200001f0
 8002dec:	0800edd8 	.word	0x0800edd8
  INIT_BSS _sbss, _ebss
 8002df0:	200001f0 	.word	0x200001f0
 8002df4:	20006f34 	.word	0x20006f34
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002df8:	20030000 	.word	0x20030000
 8002dfc:	20030000 	.word	0x20030000

08002e00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC1_IRQHandler>
	...

08002e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <HAL_Init+0x3c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <HAL_Init+0x3c>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e1a:	2003      	movs	r0, #3
 8002e1c:	f000 f94e 	bl	80030bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e20:	2000      	movs	r0, #0
 8002e22:	f000 f80f 	bl	8002e44 <HAL_InitTick>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	71fb      	strb	r3, [r7, #7]
 8002e30:	e001      	b.n	8002e36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e32:	f7ff fd30 	bl	8002896 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	58004000 	.word	0x58004000

08002e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_InitTick+0x6c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d024      	beq.n	8002ea2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e58:	f002 fad4 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_InitTick+0x6c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4619      	mov	r1, r3
 8002e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 f948 	bl	8003106 <HAL_SYSTICK_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b0f      	cmp	r3, #15
 8002e80:	d809      	bhi.n	8002e96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e82:	2200      	movs	r2, #0
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8a:	f000 f922 	bl	80030d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e8e:	4a09      	ldr	r2, [pc, #36]	@ (8002eb4 <HAL_InitTick+0x70>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e007      	b.n	8002ea6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e004      	b.n	8002ea6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e001      	b.n	8002ea6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000010 	.word	0x20000010
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_IncTick+0x20>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_IncTick+0x24>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <HAL_IncTick+0x24>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	20006da8 	.word	0x20006da8

08002ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <HAL_GetTick+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20006da8 	.word	0x20006da8

08002ef8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <HAL_GetTickPrio+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	2000000c 	.word	0x2000000c

08002f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff ffe2 	bl	8002ee0 <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f28:	d005      	beq.n	8002f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <HAL_Delay+0x44>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f36:	bf00      	nop
 8002f38:	f7ff ffd2 	bl	8002ee0 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d8f7      	bhi.n	8002f38 <HAL_Delay+0x28>
  {
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000010 	.word	0x20000010

08002f58 <__NVIC_SetPriorityGrouping>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f74:	4013      	ands	r3, r2
 8002f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <__NVIC_SetPriorityGrouping+0x44>)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	60d3      	str	r3, [r2, #12]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_GetPriorityGrouping>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b04      	ldr	r3, [pc, #16]	@ (8002fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 0307 	and.w	r3, r3, #7
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_SetPriority>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	6039      	str	r1, [r7, #0]
 8002fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	db0a      	blt.n	8002fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	490c      	ldr	r1, [pc, #48]	@ (8003008 <__NVIC_SetPriority+0x4c>)
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fe4:	e00a      	b.n	8002ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	4908      	ldr	r1, [pc, #32]	@ (800300c <__NVIC_SetPriority+0x50>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	3b04      	subs	r3, #4
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	761a      	strb	r2, [r3, #24]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000e100 	.word	0xe000e100
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <NVIC_EncodePriority>:
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	@ 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f1c3 0307 	rsb	r3, r3, #7
 800302a:	2b04      	cmp	r3, #4
 800302c:	bf28      	it	cs
 800302e:	2304      	movcs	r3, #4
 8003030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3304      	adds	r3, #4
 8003036:	2b06      	cmp	r3, #6
 8003038:	d902      	bls.n	8003040 <NVIC_EncodePriority+0x30>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3b03      	subs	r3, #3
 800303e:	e000      	b.n	8003042 <NVIC_EncodePriority+0x32>
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	f04f 32ff 	mov.w	r2, #4294967295
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43da      	mvns	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	401a      	ands	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	43d9      	mvns	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	4313      	orrs	r3, r2
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	@ 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <SysTick_Config>:
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3b01      	subs	r3, #1
 8003084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003088:	d301      	bcc.n	800308e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800308a:	2301      	movs	r3, #1
 800308c:	e00f      	b.n	80030ae <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <SysTick_Config+0x40>)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003096:	210f      	movs	r1, #15
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	f7ff ff8e 	bl	8002fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <SysTick_Config+0x40>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030a6:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <SysTick_Config+0x40>)
 80030a8:	2207      	movs	r2, #7
 80030aa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	e000e010 	.word	0xe000e010

080030bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7ff ff47 	bl	8002f58 <__NVIC_SetPriorityGrouping>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e0:	f7ff ff5e 	bl	8002fa0 <__NVIC_GetPriorityGrouping>
 80030e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f7ff ff90 	bl	8003010 <NVIC_EncodePriority>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff5f 	bl	8002fbc <__NVIC_SetPriority>
}
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffb2 	bl	8003078 <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	e14c      	b.n	80033ca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	2101      	movs	r1, #1
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 813e 	beq.w	80033c4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d005      	beq.n	8003160 <HAL_GPIO_Init+0x40>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d130      	bne.n	80031c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003196:	2201      	movs	r2, #1
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f003 0201 	and.w	r2, r3, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d017      	beq.n	80031fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	2203      	movs	r2, #3
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d123      	bne.n	8003252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	08da      	lsrs	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3208      	adds	r2, #8
 8003212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	220f      	movs	r2, #15
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	08da      	lsrs	r2, r3, #3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3208      	adds	r2, #8
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	2203      	movs	r2, #3
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0203 	and.w	r2, r3, #3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8098 	beq.w	80033c4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003294:	4a54      	ldr	r2, [pc, #336]	@ (80033e8 <HAL_GPIO_Init+0x2c8>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032be:	d019      	beq.n	80032f4 <HAL_GPIO_Init+0x1d4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a4a      	ldr	r2, [pc, #296]	@ (80033ec <HAL_GPIO_Init+0x2cc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_GPIO_Init+0x1d0>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a49      	ldr	r2, [pc, #292]	@ (80033f0 <HAL_GPIO_Init+0x2d0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00d      	beq.n	80032ec <HAL_GPIO_Init+0x1cc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a48      	ldr	r2, [pc, #288]	@ (80033f4 <HAL_GPIO_Init+0x2d4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <HAL_GPIO_Init+0x1c8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a47      	ldr	r2, [pc, #284]	@ (80033f8 <HAL_GPIO_Init+0x2d8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_GPIO_Init+0x1c4>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e008      	b.n	80032f6 <HAL_GPIO_Init+0x1d6>
 80032e4:	2307      	movs	r3, #7
 80032e6:	e006      	b.n	80032f6 <HAL_GPIO_Init+0x1d6>
 80032e8:	2303      	movs	r3, #3
 80032ea:	e004      	b.n	80032f6 <HAL_GPIO_Init+0x1d6>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e002      	b.n	80032f6 <HAL_GPIO_Init+0x1d6>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <HAL_GPIO_Init+0x1d6>
 80032f4:	2300      	movs	r3, #0
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	f002 0203 	and.w	r2, r2, #3
 80032fc:	0092      	lsls	r2, r2, #2
 80032fe:	4093      	lsls	r3, r2
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003306:	4938      	ldr	r1, [pc, #224]	@ (80033e8 <HAL_GPIO_Init+0x2c8>)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003314:	4b39      	ldr	r3, [pc, #228]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	43db      	mvns	r3, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4013      	ands	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003338:	4a30      	ldr	r2, [pc, #192]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800333e:	4b2f      	ldr	r3, [pc, #188]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003362:	4a26      	ldr	r2, [pc, #152]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003368:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 800336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	43db      	mvns	r3, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800338e:	4a1b      	ldr	r2, [pc, #108]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003396:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033bc:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <HAL_GPIO_Init+0x2dc>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f aeab 	bne.w	8003130 <HAL_GPIO_Init+0x10>
  }
}
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40010000 	.word	0x40010000
 80033ec:	48000400 	.word	0x48000400
 80033f0:	48000800 	.word	0x48000800
 80033f4:	48000c00 	.word	0x48000c00
 80033f8:	48001000 	.word	0x48001000
 80033fc:	58000800 	.word	0x58000800

08003400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	807b      	strh	r3, [r7, #2]
 800340c:	4613      	mov	r3, r2
 800340e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003410:	787b      	ldrb	r3, [r7, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800341c:	e002      	b.n	8003424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4013      	ands	r3, r2
 8003448:	041a      	lsls	r2, r3, #16
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43d9      	mvns	r1, r3
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	400b      	ands	r3, r1
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e08d      	b.n	8003592 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff fa0a 	bl	80028a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	e006      	b.n	80034ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d108      	bne.n	8003506 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	e007      	b.n	8003516 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003528:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003538:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	4608      	mov	r0, r1
 80035a6:	4611      	mov	r1, r2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	460b      	mov	r3, r1
 80035b0:	813b      	strh	r3, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	f040 80f9 	bne.w	80037b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_I2C_Mem_Write+0x34>
 80035ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0ed      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Mem_Write+0x4e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0e6      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f2:	f7ff fc75 	bl	8002ee0 <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2319      	movs	r3, #25
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fac3 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d1      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2221      	movs	r2, #33	@ 0x21
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2240      	movs	r2, #64	@ 0x40
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363c:	88f8      	ldrh	r0, [r7, #6]
 800363e:	893a      	ldrh	r2, [r7, #8]
 8003640:	8979      	ldrh	r1, [r7, #10]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	4603      	mov	r3, r0
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f9d3 	bl	80039f8 <I2C_RequestMemoryWrite>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0a9      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	2bff      	cmp	r3, #255	@ 0xff
 800366c:	d90e      	bls.n	800368c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	22ff      	movs	r2, #255	@ 0xff
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	b2da      	uxtb	r2, r3
 800367a:	8979      	ldrh	r1, [r7, #10]
 800367c:	2300      	movs	r3, #0
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fc47 	bl	8003f18 <I2C_TransferConfig>
 800368a:	e00f      	b.n	80036ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	8979      	ldrh	r1, [r7, #10]
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fc36 	bl	8003f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fac6 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e07b      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d034      	beq.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d130      	bne.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	@ 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa3f 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e04d      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	2bff      	cmp	r3, #255	@ 0xff
 8003724:	d90e      	bls.n	8003744 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	22ff      	movs	r2, #255	@ 0xff
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	b2da      	uxtb	r2, r3
 8003732:	8979      	ldrh	r1, [r7, #10]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fbeb 	bl	8003f18 <I2C_TransferConfig>
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003752:	b2da      	uxtb	r2, r3
 8003754:	8979      	ldrh	r1, [r7, #10]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fbda 	bl	8003f18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d19e      	bne.n	80036ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 faac 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01a      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2220      	movs	r2, #32
 8003788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_I2C_Mem_Write+0x224>)
 8003796:	400b      	ands	r3, r1
 8003798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	fe00e800 	.word	0xfe00e800

080037c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	817b      	strh	r3, [r7, #10]
 80037d6:	460b      	mov	r3, r1
 80037d8:	813b      	strh	r3, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	f040 80fd 	bne.w	80039e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x34>
 80037f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0f1      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_I2C_Mem_Read+0x4e>
 800380e:	2302      	movs	r3, #2
 8003810:	e0ea      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800381a:	f7ff fb61 	bl	8002ee0 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	2319      	movs	r3, #25
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f9af 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d5      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2222      	movs	r2, #34	@ 0x22
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2240      	movs	r2, #64	@ 0x40
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003864:	88f8      	ldrh	r0, [r7, #6]
 8003866:	893a      	ldrh	r2, [r7, #8]
 8003868:	8979      	ldrh	r1, [r7, #10]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	4603      	mov	r3, r0
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f913 	bl	8003aa0 <I2C_RequestMemoryRead>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0ad      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2bff      	cmp	r3, #255	@ 0xff
 8003894:	d90e      	bls.n	80038b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	22ff      	movs	r2, #255	@ 0xff
 800389a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	8979      	ldrh	r1, [r7, #10]
 80038a4:	4b52      	ldr	r3, [pc, #328]	@ (80039f0 <HAL_I2C_Mem_Read+0x22c>)
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fb33 	bl	8003f18 <I2C_TransferConfig>
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	8979      	ldrh	r1, [r7, #10]
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_I2C_Mem_Read+0x22c>)
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 fb22 	bl	8003f18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	2200      	movs	r2, #0
 80038dc:	2104      	movs	r1, #4
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f956 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e07c      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d034      	beq.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d130      	bne.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	@ 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f927 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e04d      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2bff      	cmp	r3, #255	@ 0xff
 8003954:	d90e      	bls.n	8003974 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	22ff      	movs	r2, #255	@ 0xff
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	2300      	movs	r3, #0
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fad3 	bl	8003f18 <I2C_TransferConfig>
 8003972:	e00f      	b.n	8003994 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	2300      	movs	r3, #0
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fac2 	bl	8003f18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d19a      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f994 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e01a      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_I2C_Mem_Read+0x230>)
 80039c6:	400b      	ands	r3, r1
 80039c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	80002400 	.word	0x80002400
 80039f4:	fe00e800 	.word	0xfe00e800

080039f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <I2C_RequestMemoryWrite+0xa4>)
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fa79 	bl	8003f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f909 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e02c      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a4a:	e015      	b.n	8003a78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a4c:	893b      	ldrh	r3, [r7, #8]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f8ef 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e012      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2180      	movs	r1, #128	@ 0x80
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f884 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	80002000 	.word	0x80002000

08003aa0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	4611      	mov	r1, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	813b      	strh	r3, [r7, #8]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <I2C_RequestMemoryRead+0xa4>)
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa26 	bl	8003f18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	69b9      	ldr	r1, [r7, #24]
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f8b6 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e02c      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d105      	bne.n	8003af2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af0:	e015      	b.n	8003b1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af2:	893b      	ldrh	r3, [r7, #8]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b00:	69fa      	ldr	r2, [r7, #28]
 8003b02:	69b9      	ldr	r1, [r7, #24]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f89c 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e012      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2140      	movs	r1, #64	@ 0x40
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f831 	bl	8003b90 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e000      	b.n	8003b3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	80002000 	.word	0x80002000

08003b48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d103      	bne.n	8003b66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d007      	beq.n	8003b84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	619a      	str	r2, [r3, #24]
  }
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ba0:	e03b      	b.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8d6 	bl	8003d58 <I2C_IsErrorOccurred>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e041      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d02d      	beq.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7ff f98f 	bl	8002ee0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d122      	bne.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d113      	bne.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00f      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0b4      	beq.n	8003ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4e:	e033      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f87f 	bl	8003d58 <I2C_IsErrorOccurred>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e031      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d025      	beq.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7ff f938 	bl	8002ee0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11a      	bne.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d013      	beq.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d1c4      	bne.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cdc:	e02f      	b.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f838 	bl	8003d58 <I2C_IsErrorOccurred>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02d      	b.n	8003d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7ff f8f5 	bl	8002ee0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11a      	bne.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d013      	beq.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e007      	b.n	8003d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d1c8      	bne.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d068      	beq.n	8003e56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2210      	movs	r2, #16
 8003d8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d8c:	e049      	b.n	8003e22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d045      	beq.n	8003e22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7ff f8a3 	bl	8002ee0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <I2C_IsErrorOccurred+0x54>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d13a      	bne.n	8003e22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003db6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dce:	d121      	bne.n	8003e14 <I2C_IsErrorOccurred+0xbc>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dd6:	d01d      	beq.n	8003e14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003dd8:	7cfb      	ldrb	r3, [r7, #19]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d01a      	beq.n	8003e14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dee:	f7ff f877 	bl	8002ee0 <HAL_GetTick>
 8003df2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df4:	e00e      	b.n	8003e14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003df6:	f7ff f873 	bl	8002ee0 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b19      	cmp	r3, #25
 8003e02:	d907      	bls.n	8003e14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f043 0320 	orr.w	r3, r3, #32
 8003e0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e12:	e006      	b.n	8003e22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d1e9      	bne.n	8003df6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d003      	beq.n	8003e38 <I2C_IsErrorOccurred+0xe0>
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0aa      	beq.n	8003d8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2220      	movs	r2, #32
 8003e46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f043 0304 	orr.w	r3, r3, #4
 8003e4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f043 0308 	orr.w	r3, r3, #8
 8003e90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ebc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fe3b 	bl	8003b48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <I2C_IsErrorOccurred+0x1bc>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3728      	adds	r7, #40	@ 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	fe00e800 	.word	0xfe00e800

08003f18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	4613      	mov	r3, r2
 8003f28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f2a:	897b      	ldrh	r3, [r7, #10]
 8003f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f30:	7a7b      	ldrb	r3, [r7, #9]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	0d5b      	lsrs	r3, r3, #21
 8003f52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <I2C_TransferConfig+0x60>)
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	ea02 0103 	and.w	r1, r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	03ff63ff 	.word	0x03ff63ff

08003f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d138      	bne.n	8004004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e032      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	@ 0x24
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d139      	bne.n	800409c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004032:	2302      	movs	r3, #2
 8004034:	e033      	b.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2224      	movs	r2, #36	@ 0x24
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004064:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800409c:	2302      	movs	r3, #2
  }
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0c0      	b.n	800423e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fe fca5 	bl	8002a20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 faa2 	bl	800762c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e03e      	b.n	800416c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ee:	7bfa      	ldrb	r2, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	3311      	adds	r3, #17
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3310      	adds	r3, #16
 8004112:	7bfa      	ldrb	r2, [r7, #15]
 8004114:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004116:	7bfa      	ldrb	r2, [r7, #15]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3313      	adds	r3, #19
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	3320      	adds	r3, #32
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	3324      	adds	r3, #36	@ 0x24
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	440b      	add	r3, r1
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3301      	adds	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	791b      	ldrb	r3, [r3, #4]
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	429a      	cmp	r2, r3
 8004174:	d3bb      	bcc.n	80040ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e044      	b.n	8004206 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3b5      	bcc.n	800417c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	e893 0006 	ldmia.w	r3, {r1, r2}
 800421c:	f003 fa21 	bl	8007662 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7a9b      	ldrb	r3, [r3, #10]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f805 	bl	8004246 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800426a:	b29b      	uxth	r3, r3
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800427e:	b29b      	uxth	r3, r3
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a04      	ldr	r2, [pc, #16]	@ (80042b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	58000400 	.word	0x58000400

080042bc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80042c0:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	58000400 	.word	0x58000400

080042d8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ea:	d101      	bne.n	80042f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_RCC_HSE_Enable>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800430a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_HSE_Disable>:
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_HSE_IsReady>:
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800434a:	d101      	bne.n	8004350 <LL_RCC_HSE_IsReady+0x18>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <LL_RCC_HSE_IsReady+0x1a>
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_HSI_Enable>:
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800436a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800436e:	6013      	str	r3, [r2, #0]
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_HSI_Disable>:
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438c:	6013      	str	r3, [r2, #0]
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_HSI_IsReady>:
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043aa:	d101      	bne.n	80043b0 <LL_RCC_HSI_IsReady+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_RCC_HSI_IsReady+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_RCC_HSI_SetCalibTrimming>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_HSI48_Enable>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_HSI48_Disable>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_RCC_HSI48_IsReady>:
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d101      	bne.n	8004442 <LL_RCC_HSI48_IsReady+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_RCC_HSI48_IsReady+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_RCC_LSE_Enable>:
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_LSE_Disable>:
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_LSE_EnableBypass>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_RCC_LSE_DisableBypass>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <LL_RCC_LSE_IsReady+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_RCC_LSE_IsReady+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d101      	bne.n	8004556 <LL_RCC_LSI1_IsReady+0x18>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <LL_RCC_LSI1_IsReady+0x1a>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800456e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004590:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d101      	bne.n	80045be <LL_RCC_LSI2_IsReady+0x18>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <LL_RCC_LSI2_IsReady+0x1a>
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d101      	bne.n	800464a <LL_RCC_MSI_IsReady+0x16>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_RCC_MSI_IsReady+0x18>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004668:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800468e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2bb0      	cmp	r3, #176	@ 0xb0
 8004694:	d901      	bls.n	800469a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004696:	23b0      	movs	r3, #176	@ 0xb0
 8004698:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800469a:	687b      	ldr	r3, [r7, #4]
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 0203 	bic.w	r2, r3, #3
 80046e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004724:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004746:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800474a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800474e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004772:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80047ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004804:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004896:	d101      	bne.n	800489c <LL_RCC_PLL_IsReady+0x18>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <LL_RCC_PLL_IsReady+0x1a>
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80048c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491c:	d101      	bne.n	8004922 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004936:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004942:	d101      	bne.n	8004948 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800495c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004968:	d101      	bne.n	800496e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800498c:	d101      	bne.n	8004992 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049b0:	d101      	bne.n	80049b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b08d      	sub	sp, #52	@ 0x34
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e363      	b.n	800509e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 808d 	beq.w	8004afe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e4:	f7ff fe89 	bl	80046fa <LL_RCC_GetSysClkSource>
 80049e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ea:	f7ff ff82 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 80049ee:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x3e>
 80049f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d147      	bne.n	8004a8c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80049fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d144      	bne.n	8004a8c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e347      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004a12:	f7ff fe34 	bl	800467e <LL_RCC_MSI_GetRange>
 8004a16:	4603      	mov	r3, r0
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	d914      	bls.n	8004a46 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fd2f 	bl	8005484 <RCC_SetFlashLatencyFromMSIRange>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e336      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fe0e 	bl	8004656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fe32 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>
 8004a44:	e013      	b.n	8004a6e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fe03 	bl	8004656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fe27 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fd10 	bl	8005484 <RCC_SetFlashLatencyFromMSIRange>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e317      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a6e:	f000 fcc9 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4aa4      	ldr	r2, [pc, #656]	@ (8004d08 <HAL_RCC_OscConfig+0x344>)
 8004a76:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a78:	4ba4      	ldr	r3, [pc, #656]	@ (8004d0c <HAL_RCC_OscConfig+0x348>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe f9e1 	bl	8002e44 <HAL_InitTick>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d039      	beq.n	8004afc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e308      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01e      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a94:	f7ff fdb0 	bl	80045f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a98:	f7fe fa22 	bl	8002ee0 <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa0:	f7fe fa1e 	bl	8002ee0 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e2f5      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ab2:	f7ff fdbf 	bl	8004634 <LL_RCC_MSI_IsReady>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f1      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fdc8 	bl	8004656 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fdec 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>
 8004ad0:	e015      	b.n	8004afe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ad2:	f7ff fda0 	bl	8004616 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ad6:	f7fe fa03 	bl	8002ee0 <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ade:	f7fe f9ff 	bl	8002ee0 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e2d6      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004af0:	f7ff fda0 	bl	8004634 <LL_RCC_MSI_IsReady>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f1      	bne.n	8004ade <HAL_RCC_OscConfig+0x11a>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004afc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d047      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0a:	f7ff fdf6 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004b0e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b10:	f7ff feef 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 8004b14:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d005      	beq.n	8004b28 <HAL_RCC_OscConfig+0x164>
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d108      	bne.n	8004b34 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d134      	bne.n	8004b9a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e2b4      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3c:	d102      	bne.n	8004b44 <HAL_RCC_OscConfig+0x180>
 8004b3e:	f7ff fbdd 	bl	80042fc <LL_RCC_HSE_Enable>
 8004b42:	e001      	b.n	8004b48 <HAL_RCC_OscConfig+0x184>
 8004b44:	f7ff fbe9 	bl	800431a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7fe f9c6 	bl	8002ee0 <HAL_GetTick>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b58:	f7fe f9c2 	bl	8002ee0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b64      	cmp	r3, #100	@ 0x64
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e299      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b6a:	f7ff fbe5 	bl	8004338 <LL_RCC_HSE_IsReady>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f1      	beq.n	8004b58 <HAL_RCC_OscConfig+0x194>
 8004b74:	e011      	b.n	8004b9a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe f9b3 	bl	8002ee0 <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b7e:	f7fe f9af 	bl	8002ee0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	@ 0x64
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e286      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b90:	f7ff fbd2 	bl	8004338 <LL_RCC_HSE_IsReady>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f1      	bne.n	8004b7e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	f7ff fda8 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004baa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bac:	f7ff fea1 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 8004bb0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x200>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d10e      	bne.n	8004bdc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d10b      	bne.n	8004bdc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e266      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fbf1 	bl	80043bc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bda:	e031      	b.n	8004c40 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d019      	beq.n	8004c18 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	f7ff fbba 	bl	800435c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fe f97a 	bl	8002ee0 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf0:	f7fe f976 	bl	8002ee0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e24d      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c02:	f7ff fbc9 	bl	8004398 <LL_RCC_HSI_IsReady>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f1      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fbd3 	bl	80043bc <LL_RCC_HSI_SetCalibTrimming>
 8004c16:	e013      	b.n	8004c40 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c18:	f7ff fbaf 	bl	800437a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1c:	f7fe f960 	bl	8002ee0 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c24:	f7fe f95c 	bl	8002ee0 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e233      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c36:	f7ff fbaf 	bl	8004398 <LL_RCC_HSI_IsReady>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f1      	bne.n	8004c24 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a3 	beq.w	8004da0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d076      	beq.n	8004d50 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d046      	beq.n	8004cfc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004c6e:	f7ff fc66 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d113      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004c78:	f7ff fc3f 	bl	80044fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c7c:	f7fe f930 	bl	8002ee0 <HAL_GetTick>
 8004c80:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c84:	f7fe f92c 	bl	8002ee0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e203      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c96:	f7ff fc52 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f1      	beq.n	8004c84 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ca0:	f7ff fc5f 	bl	8004562 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe f91c 	bl	8002ee0 <HAL_GetTick>
 8004ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cac:	f7fe f918 	bl	8002ee0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1ef      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004cbe:	f7ff fc72 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f1      	beq.n	8004cac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fc7c 	bl	80045ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004cd2:	f7ff fc23 	bl	800451c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fe f903 	bl	8002ee0 <HAL_GetTick>
 8004cda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004cde:	f7fe f8ff 	bl	8002ee0 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1d6      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004cf0:	f7ff fc25 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f1      	bne.n	8004cde <HAL_RCC_OscConfig+0x31a>
 8004cfa:	e051      	b.n	8004da0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004cfc:	f7ff fbfd 	bl	80044fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fe f8ee 	bl	8002ee0 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d06:	e00c      	b.n	8004d22 <HAL_RCC_OscConfig+0x35e>
 8004d08:	20000008 	.word	0x20000008
 8004d0c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d10:	f7fe f8e6 	bl	8002ee0 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1bd      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d22:	f7ff fc0c 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f1      	beq.n	8004d10 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004d2c:	f7ff fc2a 	bl	8004584 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d32:	f7fe f8d5 	bl	8002ee0 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1ac      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d44:	f7ff fc2f 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f1      	bne.n	8004d32 <HAL_RCC_OscConfig+0x36e>
 8004d4e:	e027      	b.n	8004da0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004d50:	f7ff fc18 	bl	8004584 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fe f8c4 	bl	8002ee0 <HAL_GetTick>
 8004d58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d5c:	f7fe f8c0 	bl	8002ee0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e197      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d6e:	f7ff fc1a 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f1      	bne.n	8004d5c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004d78:	f7ff fbd0 	bl	800451c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fe f8b0 	bl	8002ee0 <HAL_GetTick>
 8004d80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d84:	f7fe f8ac 	bl	8002ee0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e183      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d96:	f7ff fbd2 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f1      	bne.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d05b      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dac:	4ba7      	ldr	r3, [pc, #668]	@ (800504c <HAL_RCC_OscConfig+0x688>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d114      	bne.n	8004de2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004db8:	f7ff fa70 	bl	800429c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dbc:	f7fe f890 	bl	8002ee0 <HAL_GetTick>
 8004dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc4:	f7fe f88c 	bl	8002ee0 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e163      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd6:	4b9d      	ldr	r3, [pc, #628]	@ (800504c <HAL_RCC_OscConfig+0x688>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <HAL_RCC_OscConfig+0x42c>
 8004dea:	f7ff fb30 	bl	800444e <LL_RCC_LSE_Enable>
 8004dee:	e00c      	b.n	8004e0a <HAL_RCC_OscConfig+0x446>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d104      	bne.n	8004e02 <HAL_RCC_OscConfig+0x43e>
 8004df8:	f7ff fb4b 	bl	8004492 <LL_RCC_LSE_EnableBypass>
 8004dfc:	f7ff fb27 	bl	800444e <LL_RCC_LSE_Enable>
 8004e00:	e003      	b.n	8004e0a <HAL_RCC_OscConfig+0x446>
 8004e02:	f7ff fb35 	bl	8004470 <LL_RCC_LSE_Disable>
 8004e06:	f7ff fb55 	bl	80044b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fe f865 	bl	8002ee0 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fe f861 	bl	8002ee0 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e136      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e30:	f7ff fb51 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ef      	beq.n	8004e1a <HAL_RCC_OscConfig+0x456>
 8004e3a:	e013      	b.n	8004e64 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe f850 	bl	8002ee0 <HAL_GetTick>
 8004e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe f84c 	bl	8002ee0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e121      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e5a:	f7ff fb3c 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ef      	bne.n	8004e44 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d02c      	beq.n	8004eca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d014      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e78:	f7ff fab5 	bl	80043e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fe f830 	bl	8002ee0 <HAL_GetTick>
 8004e80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e84:	f7fe f82c 	bl	8002ee0 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e103      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e96:	f7ff fac8 	bl	800442a <LL_RCC_HSI48_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0f1      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4c0>
 8004ea0:	e013      	b.n	8004eca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	f7ff fab1 	bl	8004408 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fe f81b 	bl	8002ee0 <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eae:	f7fe f817 	bl	8002ee0 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0ee      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ec0:	f7ff fab3 	bl	800442a <LL_RCC_HSI48_IsReady>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f1      	bne.n	8004eae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80e4 	beq.w	800509c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed4:	f7ff fc11 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004ed8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	f040 80b4 	bne.w	8005054 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0203 	and.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d123      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d11c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d114      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d05d      	beq.n	8004ffe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d058      	beq.n	8004ffa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0a1      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f5a:	f7ff fc84 	bl	8004866 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f5e:	f7fd ffbf 	bl	8002ee0 <HAL_GetTick>
 8004f62:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fd ffbb 	bl	8002ee0 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e092      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1ef      	bne.n	8004f66 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	4b30      	ldr	r3, [pc, #192]	@ (8005050 <HAL_RCC_OscConfig+0x68c>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f98:	4311      	orrs	r1, r2
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f9e:	0212      	lsls	r2, r2, #8
 8004fa0:	4311      	orrs	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fa6:	4311      	orrs	r1, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fbc:	f7ff fc44 	bl	8004848 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7fd ff86 	bl	8002ee0 <HAL_GetTick>
 8004fd4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd ff82 	bl	8002ee0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e059      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ff8:	e050      	b.n	800509c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04f      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d147      	bne.n	800509c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800500c:	f7ff fc1c 	bl	8004848 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800501a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800501e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005020:	f7fd ff5e 	bl	8002ee0 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd ff5a 	bl	8002ee0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e031      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0ef      	beq.n	8005028 <HAL_RCC_OscConfig+0x664>
 8005048:	e028      	b.n	800509c <HAL_RCC_OscConfig+0x6d8>
 800504a:	bf00      	nop
 800504c:	58000400 	.word	0x58000400
 8005050:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b0c      	cmp	r3, #12
 8005058:	d01e      	beq.n	8005098 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	f7ff fc04 	bl	8004866 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fd ff3f 	bl	8002ee0 <HAL_GetTick>
 8005062:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005066:	f7fd ff3b 	bl	8002ee0 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e012      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1ef      	bne.n	8005066 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005090:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_OscConfig+0x6e4>)
 8005092:	4013      	ands	r3, r2
 8005094:	60cb      	str	r3, [r1, #12]
 8005096:	e001      	b.n	800509c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3734      	adds	r7, #52	@ 0x34
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	bf00      	nop
 80050a8:	eefefffc 	.word	0xeefefffc

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e12d      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b98      	ldr	r3, [pc, #608]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d91b      	bls.n	8005106 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b95      	ldr	r3, [pc, #596]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 0207 	bic.w	r2, r3, #7
 80050d6:	4993      	ldr	r1, [pc, #588]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050de:	f7fd feff 	bl	8002ee0 <HAL_GetTick>
 80050e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050e6:	f7fd fefb 	bl	8002ee0 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e111      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d1ef      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fafb 	bl	8004712 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800511c:	f7fd fee0 	bl	8002ee0 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005124:	f7fd fedc 	bl	8002ee0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0f2      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005136:	f7ff fbe8 	bl	800490a <LL_RCC_IsActiveFlag_HPRE>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f1      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d016      	beq.n	800517a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff faf2 	bl	800473a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005156:	f7fd fec3 	bl	8002ee0 <HAL_GetTick>
 800515a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800515e:	f7fd febf 	bl	8002ee0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e0d5      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005170:	f7ff fbdd 	bl	800492e <LL_RCC_IsActiveFlag_C2HPRE>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f1      	beq.n	800515e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	4618      	mov	r0, r3
 800518c:	f7ff faeb 	bl	8004766 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005190:	f7fd fea6 	bl	8002ee0 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005198:	f7fd fea2 	bl	8002ee0 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0b8      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051aa:	f7ff fbd3 	bl	8004954 <LL_RCC_IsActiveFlag_SHDHPRE>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f1      	beq.n	8005198 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d016      	beq.n	80051ee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fae5 	bl	8004794 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051ca:	f7fd fe89 	bl	8002ee0 <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051d2:	f7fd fe85 	bl	8002ee0 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e09b      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80051e4:	f7ff fbc9 	bl	800497a <LL_RCC_IsActiveFlag_PPRE1>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f1      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d017      	beq.n	800522a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fadb 	bl	80047bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005206:	f7fd fe6b 	bl	8002ee0 <HAL_GetTick>
 800520a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800520e:	f7fd fe67 	bl	8002ee0 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e07d      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005220:	f7ff fbbd 	bl	800499e <LL_RCC_IsActiveFlag_PPRE2>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f1      	beq.n	800520e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d043      	beq.n	80052be <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d106      	bne.n	800524c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800523e:	f7ff f87b 	bl	8004338 <LL_RCC_HSE_IsReady>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11e      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e067      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d106      	bne.n	8005262 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005254:	f7ff fb16 	bl	8004884 <LL_RCC_PLL_IsReady>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d113      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e05c      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800526a:	f7ff f9e3 	bl	8004634 <LL_RCC_MSI_IsReady>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e051      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005278:	f7ff f88e 	bl	8004398 <LL_RCC_HSI_IsReady>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e04a      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fa21 	bl	80046d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005290:	f7fd fe26 	bl	8002ee0 <HAL_GetTick>
 8005294:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005296:	e00a      	b.n	80052ae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005298:	f7fd fe22 	bl	8002ee0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e036      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ae:	f7ff fa24 	bl	80046fa <LL_RCC_GetSysClkSource>
 80052b2:	4602      	mov	r2, r0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d1ec      	bne.n	8005298 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052be:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d21b      	bcs.n	8005304 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052cc:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 0207 	bic.w	r2, r3, #7
 80052d4:	4913      	ldr	r1, [pc, #76]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd fe00 	bl	8002ee0 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052e4:	f7fd fdfc 	bl	8002ee0 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e012      	b.n	800531c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <HAL_RCC_ClockConfig+0x278>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d1ef      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005304:	f000 f87e 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005308:	4603      	mov	r3, r0
 800530a:	4a07      	ldr	r2, [pc, #28]	@ (8005328 <HAL_RCC_ClockConfig+0x27c>)
 800530c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800530e:	f7fd fdf3 	bl	8002ef8 <HAL_GetTickPrio>
 8005312:	4603      	mov	r3, r0
 8005314:	4618      	mov	r0, r3
 8005316:	f7fd fd95 	bl	8002e44 <HAL_InitTick>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	58004000 	.word	0x58004000
 8005328:	20000008 	.word	0x20000008

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005332:	f7ff f9e2 	bl	80046fa <LL_RCC_GetSysClkSource>
 8005336:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10a      	bne.n	8005354 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800533e:	f7ff f99e 	bl	800467e <LL_RCC_MSI_GetRange>
 8005342:	4603      	mov	r3, r0
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	4a2b      	ldr	r2, [pc, #172]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e04b      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d102      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800535a:	4b28      	ldr	r3, [pc, #160]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xd0>)
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e045      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b08      	cmp	r3, #8
 8005364:	d10a      	bne.n	800537c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005366:	f7fe ffb7 	bl	80042d8 <LL_RCC_HSE_IsEnabledDiv2>
 800536a:	4603      	mov	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d102      	bne.n	8005376 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005370:	4b22      	ldr	r3, [pc, #136]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e03a      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005376:	4b22      	ldr	r3, [pc, #136]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e037      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800537c:	f7ff fab9 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 8005380:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d003      	beq.n	8005390 <HAL_RCC_GetSysClockFreq+0x64>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b03      	cmp	r3, #3
 800538c:	d003      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x6a>
 800538e:	e00d      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005392:	60bb      	str	r3, [r7, #8]
        break;
 8005394:	e015      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005396:	f7fe ff9f 	bl	80042d8 <LL_RCC_HSE_IsEnabledDiv2>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80053a0:	4b16      	ldr	r3, [pc, #88]	@ (80053fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80053a2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80053a4:	e00d      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80053a6:	4b16      	ldr	r3, [pc, #88]	@ (8005400 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053a8:	60bb      	str	r3, [r7, #8]
        break;
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053ac:	f7ff f967 	bl	800467e <LL_RCC_MSI_GetRange>
 80053b0:	4603      	mov	r3, r0
 80053b2:	091b      	lsrs	r3, r3, #4
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	4a0f      	ldr	r2, [pc, #60]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053be:	60bb      	str	r3, [r7, #8]
        break;
 80053c0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80053c2:	f7ff fa71 	bl	80048a8 <LL_RCC_PLL_GetN>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	fb03 f402 	mul.w	r4, r3, r2
 80053ce:	f7ff fa84 	bl	80048da <LL_RCC_PLL_GetDivider>
 80053d2:	4603      	mov	r3, r0
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	3301      	adds	r3, #1
 80053d8:	fbb4 f4f3 	udiv	r4, r4, r3
 80053dc:	f7ff fa71 	bl	80048c2 <LL_RCC_PLL_GetR>
 80053e0:	4603      	mov	r3, r0
 80053e2:	0f5b      	lsrs	r3, r3, #29
 80053e4:	3301      	adds	r3, #1
 80053e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80053ea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd90      	pop	{r4, r7, pc}
 80053f6:	bf00      	nop
 80053f8:	0800e8b4 	.word	0x0800e8b4
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	01e84800 	.word	0x01e84800

08005404 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005404:	b598      	push	{r3, r4, r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005408:	f7ff ff90 	bl	800532c <HAL_RCC_GetSysClockFreq>
 800540c:	4604      	mov	r4, r0
 800540e:	f7ff f9e9 	bl	80047e4 <LL_RCC_GetAHBPrescaler>
 8005412:	4603      	mov	r3, r0
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	4a03      	ldr	r2, [pc, #12]	@ (8005428 <HAL_RCC_GetHCLKFreq+0x24>)
 800541c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005420:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005424:	4618      	mov	r0, r3
 8005426:	bd98      	pop	{r3, r4, r7, pc}
 8005428:	0800e854 	.word	0x0800e854

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b598      	push	{r3, r4, r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005430:	f7ff ffe8 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005434:	4604      	mov	r4, r0
 8005436:	f7ff f9ef 	bl	8004818 <LL_RCC_GetAPB1Prescaler>
 800543a:	4603      	mov	r3, r0
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	4a04      	ldr	r2, [pc, #16]	@ (8005454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd98      	pop	{r3, r4, r7, pc}
 8005454:	0800e894 	.word	0x0800e894

08005458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005458:	b598      	push	{r3, r4, r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800545c:	f7ff ffd2 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005460:	4604      	mov	r4, r0
 8005462:	f7ff f9e5 	bl	8004830 <LL_RCC_GetAPB2Prescaler>
 8005466:	4603      	mov	r3, r0
 8005468:	0adb      	lsrs	r3, r3, #11
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	4a04      	ldr	r2, [pc, #16]	@ (8005480 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa24 f303 	lsr.w	r3, r4, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd98      	pop	{r3, r4, r7, pc}
 8005480:	0800e894 	.word	0x0800e894

08005484 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005490:	d903      	bls.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005492:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e007      	b.n	80054aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	4a11      	ldr	r2, [pc, #68]	@ (80054e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80054aa:	f7ff f9a7 	bl	80047fc <LL_RCC_GetAHB4Prescaler>
 80054ae:	4603      	mov	r3, r0
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	4a0d      	ldr	r2, [pc, #52]	@ (80054ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	0c9c      	lsrs	r4, r3, #18
 80054ce:	f7fe fef5 	bl	80042bc <HAL_PWREx_GetVoltageRange>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4619      	mov	r1, r3
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 f80c 	bl	80054f4 <RCC_SetFlashLatency>
 80054dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd90      	pop	{r4, r7, pc}
 80054e6:	bf00      	nop
 80054e8:	0800e8b4 	.word	0x0800e8b4
 80054ec:	0800e854 	.word	0x0800e854
 80054f0:	431bde83 	.word	0x431bde83

080054f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b093      	sub	sp, #76	@ 0x4c
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80054fe:	4b37      	ldr	r3, [pc, #220]	@ (80055dc <RCC_SetFlashLatency+0xe8>)
 8005500:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800550a:	4a35      	ldr	r2, [pc, #212]	@ (80055e0 <RCC_SetFlashLatency+0xec>)
 800550c:	f107 031c 	add.w	r3, r7, #28
 8005510:	ca07      	ldmia	r2, {r0, r1, r2}
 8005512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005516:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <RCC_SetFlashLatency+0xf0>)
 8005518:	f107 040c 	add.w	r4, r7, #12
 800551c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800551e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005522:	2300      	movs	r3, #0
 8005524:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800552c:	d11a      	bne.n	8005564 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800552e:	2300      	movs	r3, #0
 8005530:	643b      	str	r3, [r7, #64]	@ 0x40
 8005532:	e013      	b.n	800555c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	3348      	adds	r3, #72	@ 0x48
 800553a:	443b      	add	r3, r7
 800553c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d807      	bhi.n	8005556 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	3348      	adds	r3, #72	@ 0x48
 800554c:	443b      	add	r3, r7
 800554e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005552:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005554:	e020      	b.n	8005598 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005558:	3301      	adds	r3, #1
 800555a:	643b      	str	r3, [r7, #64]	@ 0x40
 800555c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555e:	2b03      	cmp	r3, #3
 8005560:	d9e8      	bls.n	8005534 <RCC_SetFlashLatency+0x40>
 8005562:	e019      	b.n	8005598 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005564:	2300      	movs	r3, #0
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005568:	e013      	b.n	8005592 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	3348      	adds	r3, #72	@ 0x48
 8005570:	443b      	add	r3, r7
 8005572:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d807      	bhi.n	800558c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800557c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	3348      	adds	r3, #72	@ 0x48
 8005582:	443b      	add	r3, r7
 8005584:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005588:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800558a:	e005      	b.n	8005598 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800558c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800558e:	3301      	adds	r3, #1
 8005590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005594:	2b02      	cmp	r3, #2
 8005596:	d9e8      	bls.n	800556a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <RCC_SetFlashLatency+0xf4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 0207 	bic.w	r2, r3, #7
 80055a0:	4911      	ldr	r1, [pc, #68]	@ (80055e8 <RCC_SetFlashLatency+0xf4>)
 80055a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055a8:	f7fd fc9a 	bl	8002ee0 <HAL_GetTick>
 80055ac:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055ae:	e008      	b.n	80055c2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055b0:	f7fd fc96 	bl	8002ee0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e007      	b.n	80055d2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055c2:	4b09      	ldr	r3, [pc, #36]	@ (80055e8 <RCC_SetFlashLatency+0xf4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1ef      	bne.n	80055b0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	374c      	adds	r7, #76	@ 0x4c
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	0800e7e4 	.word	0x0800e7e4
 80055e0:	0800e7f4 	.word	0x0800e7f4
 80055e4:	0800e800 	.word	0x0800e800
 80055e8:	58004000 	.word	0x58004000

080055ec <LL_RCC_LSE_IsEnabled>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80055f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <LL_RCC_LSE_IsEnabled+0x18>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <LL_RCC_LSE_IsEnabled+0x1a>
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_RCC_LSE_IsReady>:
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d101      	bne.n	8005628 <LL_RCC_LSE_IsReady+0x18>
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <LL_RCC_LSE_IsReady+0x1a>
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <LL_RCC_MSI_EnablePLLMode>:
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	6013      	str	r3, [r2, #0]
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <LL_RCC_SetRFWKPClockSource>:
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800565a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_RCC_SetSMPSClockSource>:
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	f023 0203 	bic.w	r2, r3, #3
 8005690:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4313      	orrs	r3, r2
 8005698:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_RCC_SetSMPSPrescaler>:
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80056ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4313      	orrs	r3, r2
 80056c0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_RCC_SetUSARTClockSource>:
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80056d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	f023 0203 	bic.w	r2, r3, #3
 80056e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <LL_RCC_SetLPUARTClockSource>:
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800570e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <LL_RCC_SetI2CClockSource>:
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005732:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800573e:	43db      	mvns	r3, r3
 8005740:	401a      	ands	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800574a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_RCC_SetLPTIMClockSource>:
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800576c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	43db      	mvns	r3, r3
 8005778:	401a      	ands	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <LL_RCC_SetSAIClockSource>:
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <LL_RCC_SetRNGClockSource>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80057d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <LL_RCC_SetCLK48ClockSource>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80057f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <LL_RCC_SetUSBClockSource>:
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ffe3 	bl	80057ec <LL_RCC_SetCLK48ClockSource>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <LL_RCC_SetADCClockSource>:
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <LL_RCC_SetRTCClockSource>:
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800586a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800586e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <LL_RCC_GetRTCClockSource>:
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005896:	4618      	mov	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_ForceBackupDomainReset>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80058c2:	b480      	push	{r7}
 80058c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80058c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_RCC_PLLSAI1_Enable>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_RCC_PLLSAI1_Disable>:
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005910:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005914:	6013      	str	r3, [r2, #0]
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_RCC_PLLSAI1_IsReady>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005932:	d101      	bne.n	8005938 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800594c:	2300      	movs	r3, #0
 800594e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005950:	2300      	movs	r3, #0
 8005952:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d034      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005968:	d021      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800596a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800596e:	d81b      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005970:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005974:	d01d      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005976:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800597a:	d815      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00b      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005984:	d110      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005994:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005996:	e00d      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f94d 	bl	8005c3c <RCCEx_PLLSAI1_ConfigNP>
 80059a2:	4603      	mov	r3, r0
 80059a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80059a6:	e005      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	77fb      	strb	r3, [r7, #31]
        break;
 80059ac:	e002      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80059ae:	bf00      	nop
 80059b0:	e000      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80059b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b4:	7ffb      	ldrb	r3, [r7, #31]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fee8 	bl	8005794 <LL_RCC_SetSAIClockSource>
 80059c4:	e001      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
 80059c8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d046      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80059d6:	f7ff ff56 	bl	8005886 <LL_RCC_GetRTCClockSource>
 80059da:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d03c      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80059e6:	f7fe fc59 	bl	800429c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff30 	bl	800585a <LL_RCC_SetRTCClockSource>
 80059fa:	e02e      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80059fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a04:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a06:	f7ff ff4b 	bl	80058a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a0a:	f7ff ff5a 	bl	80058c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005a26:	f7ff fde1 	bl	80055ec <LL_RCC_LSE_IsEnabled>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d114      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005a30:	f7fd fa56 	bl	8002ee0 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a36:	e00b      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a38:	f7fd fa52 	bl	8002ee0 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d902      	bls.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	77fb      	strb	r3, [r7, #31]
              break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005a50:	f7ff fdde 	bl	8005610 <LL_RCC_LSE_IsReady>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d1ee      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005a5a:	7ffb      	ldrb	r3, [r7, #31]
 8005a5c:	77bb      	strb	r3, [r7, #30]
 8005a5e:	e001      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7ffb      	ldrb	r3, [r7, #31]
 8005a62:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fe2a 	bl	80056ce <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fe35 	bl	80056fa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fe5d 	bl	8005760 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d004      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff fe52 	bl	8005760 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d004      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fe2a 	bl	8005726 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fe1f 	bl	8005726 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d022      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fe8d 	bl	8005818 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b06:	d107      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b16:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b20:	d10b      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f8e3 	bl	8005cf2 <RCCEx_PLLSAI1_ConfigNQ>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b30:	7ffb      	ldrb	r3, [r7, #31]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
 8005b38:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02b      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b58:	d003      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff fe2a 	bl	80057c0 <LL_RCC_SetRNGClockSource>
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7ff fe21 	bl	80057c0 <LL_RCC_SetRNGClockSource>
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fe34 	bl	80057ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d022      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fe3d 	bl	800582e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bbc:	d107      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bcc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f8e3 	bl	8005da8 <RCCEx_PLLSAI1_ConfigNR>
 8005be2:	4603      	mov	r3, r0
 8005be4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fd26 	bl	8005652 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fd45 	bl	80056a6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fd2c 	bl	800567e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005c26:	7fbb      	ldrb	r3, [r7, #30]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005c34:	f7ff fcfe 	bl	8005634 <LL_RCC_MSI_EnablePLLMode>
}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c48:	f7ff fe5b 	bl	8005902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c4c:	f7fd f948 	bl	8002ee0 <HAL_GetTick>
 8005c50:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c52:	e009      	b.n	8005c68 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c54:	f7fd f944 	bl	8002ee0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d902      	bls.n	8005c68 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	73fb      	strb	r3, [r7, #15]
      break;
 8005c66:	e004      	b.n	8005c72 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c68:	f7ff fe5a 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f0      	bne.n	8005c54 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d137      	bne.n	8005ce8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ca6:	f7ff fe1d 	bl	80058e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005caa:	f7fd f919 	bl	8002ee0 <HAL_GetTick>
 8005cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cb0:	e009      	b.n	8005cc6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cb2:	f7fd f915 	bl	8002ee0 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d902      	bls.n	8005cc6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	73fb      	strb	r3, [r7, #15]
        break;
 8005cc4:	e004      	b.n	8005cd0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005cc6:	f7ff fe2b 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d1f0      	bne.n	8005cb2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d108      	bne.n	8005ce8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005cfe:	f7ff fe00 	bl	8005902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d02:	f7fd f8ed 	bl	8002ee0 <HAL_GetTick>
 8005d06:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d08:	e009      	b.n	8005d1e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d0a:	f7fd f8e9 	bl	8002ee0 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e004      	b.n	8005d28 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d1e:	f7ff fdff 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f0      	bne.n	8005d0a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d137      	bne.n	8005d9e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d42:	4313      	orrs	r3, r2
 8005d44:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d5c:	f7ff fdc2 	bl	80058e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d60:	f7fd f8be 	bl	8002ee0 <HAL_GetTick>
 8005d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d66:	e009      	b.n	8005d7c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d68:	f7fd f8ba 	bl	8002ee0 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d902      	bls.n	8005d7c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	73fb      	strb	r3, [r7, #15]
        break;
 8005d7a:	e004      	b.n	8005d86 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d7c:	f7ff fdd0 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d1f0      	bne.n	8005d68 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d108      	bne.n	8005d9e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005db4:	f7ff fda5 	bl	8005902 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005db8:	f7fd f892 	bl	8002ee0 <HAL_GetTick>
 8005dbc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dbe:	e009      	b.n	8005dd4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dc0:	f7fd f88e 	bl	8002ee0 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d902      	bls.n	8005dd4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd2:	e004      	b.n	8005dde <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dd4:	f7ff fda4 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d137      	bne.n	8005e54 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e12:	f7ff fd67 	bl	80058e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e16:	f7fd f863 	bl	8002ee0 <HAL_GetTick>
 8005e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e1c:	e009      	b.n	8005e32 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e1e:	f7fd f85f 	bl	8002ee0 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d902      	bls.n	8005e32 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	73fb      	strb	r3, [r7, #15]
        break;
 8005e30:	e004      	b.n	8005e3c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e32:	f7ff fd75 	bl	8005920 <LL_RCC_PLLSAI1_IsReady>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d1f0      	bne.n	8005e1e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d108      	bne.n	8005e54 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e50:	4313      	orrs	r3, r2
 8005e52:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e095      	b.n	8005f9c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d108      	bne.n	8005e8a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e80:	d009      	beq.n	8005e96 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	61da      	str	r2, [r3, #28]
 8005e88:	e005      	b.n	8005e96 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fc fd3f 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ed6:	d902      	bls.n	8005ede <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e002      	b.n	8005ee4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ee2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005eec:	d007      	beq.n	8005efe <HAL_SPI_Init+0xa0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ef6:	d002      	beq.n	8005efe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f40:	ea42 0103 	orr.w	r1, r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	f003 0204 	and.w	r2, r3, #4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f7a:	ea42 0103 	orr.w	r1, r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_SPI_Transmit+0x22>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e15f      	b.n	8006286 <HAL_SPI_Transmit+0x2e2>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fce:	f7fc ff87 	bl	8002ee0 <HAL_GetTick>
 8005fd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fd4:	88fb      	ldrh	r3, [r7, #6]
 8005fd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d002      	beq.n	8005fea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe8:	e148      	b.n	800627c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_Transmit+0x52>
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d102      	bne.n	8005ffc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ffa:	e13f      	b.n	800627c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2203      	movs	r2, #3
 8006000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	88fa      	ldrh	r2, [r7, #6]
 800601a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006046:	d10f      	bne.n	8006068 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006056:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006066:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d007      	beq.n	8006086 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800608e:	d94f      	bls.n	8006130 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <HAL_SPI_Transmit+0xfa>
 8006098:	8afb      	ldrh	r3, [r7, #22]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d142      	bne.n	8006124 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	881a      	ldrh	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ae:	1c9a      	adds	r2, r3, #2
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060c2:	e02f      	b.n	8006124 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d112      	bne.n	80060f8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	881a      	ldrh	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	1c9a      	adds	r2, r3, #2
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060f6:	e015      	b.n	8006124 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060f8:	f7fc fef2 	bl	8002ee0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d803      	bhi.n	8006110 <HAL_SPI_Transmit+0x16c>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d102      	bne.n	8006116 <HAL_SPI_Transmit+0x172>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006122:	e0ab      	b.n	800627c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1ca      	bne.n	80060c4 <HAL_SPI_Transmit+0x120>
 800612e:	e080      	b.n	8006232 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_SPI_Transmit+0x19a>
 8006138:	8afb      	ldrh	r3, [r7, #22]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d174      	bne.n	8006228 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d912      	bls.n	800616e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	1c9a      	adds	r2, r3, #2
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b02      	subs	r3, #2
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800616c:	e05c      	b.n	8006228 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	330c      	adds	r3, #12
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006194:	e048      	b.n	8006228 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d12b      	bne.n	80061fc <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d912      	bls.n	80061d4 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b02      	subs	r3, #2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061d2:	e029      	b.n	8006228 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061fa:	e015      	b.n	8006228 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061fc:	f7fc fe70 	bl	8002ee0 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d803      	bhi.n	8006214 <HAL_SPI_Transmit+0x270>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <HAL_SPI_Transmit+0x276>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006226:	e029      	b.n	800627c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1b1      	bne.n	8006196 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f000 fb6a 	bl	8006910 <SPI_EndRxTxTransaction>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	77fb      	strb	r3, [r7, #31]
 8006272:	e003      	b.n	800627c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006284:	7ffb      	ldrb	r3, [r7, #31]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3720      	adds	r7, #32
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b08a      	sub	sp, #40	@ 0x28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800629c:	2301      	movs	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x26>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e20a      	b.n	80066ca <HAL_SPI_TransmitReceive+0x43c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062bc:	f7fc fe10 	bl	8002ee0 <HAL_GetTick>
 80062c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80062d0:	887b      	ldrh	r3, [r7, #2]
 80062d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80062d4:	887b      	ldrh	r3, [r7, #2]
 80062d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062d8:	7efb      	ldrb	r3, [r7, #27]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d00e      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x6e>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062e4:	d106      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <HAL_SPI_TransmitReceive+0x66>
 80062ee:	7efb      	ldrb	r3, [r7, #27]
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d003      	beq.n	80062fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80062fa:	e1e0      	b.n	80066be <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_SPI_TransmitReceive+0x80>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_TransmitReceive+0x80>
 8006308:	887b      	ldrh	r3, [r7, #2]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006314:	e1d3      	b.n	80066be <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b04      	cmp	r3, #4
 8006320:	d003      	beq.n	800632a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2205      	movs	r2, #5
 8006326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	887a      	ldrh	r2, [r7, #2]
 800633a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	887a      	ldrh	r2, [r7, #2]
 8006342:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	887a      	ldrh	r2, [r7, #2]
 8006350:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	887a      	ldrh	r2, [r7, #2]
 8006356:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800636c:	d802      	bhi.n	8006374 <HAL_SPI_TransmitReceive+0xe6>
 800636e:	8a3b      	ldrh	r3, [r7, #16]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d908      	bls.n	8006386 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	e007      	b.n	8006396 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d007      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063bc:	f240 8081 	bls.w	80064c2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x140>
 80063c8:	8a7b      	ldrh	r3, [r7, #18]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d16d      	bne.n	80064aa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d2:	881a      	ldrh	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	1c9a      	adds	r2, r3, #2
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f2:	e05a      	b.n	80064aa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d11b      	bne.n	800643a <HAL_SPI_TransmitReceive+0x1ac>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d016      	beq.n	800643a <HAL_SPI_TransmitReceive+0x1ac>
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	2b01      	cmp	r3, #1
 8006410:	d113      	bne.n	800643a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	881a      	ldrh	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	1c9a      	adds	r2, r3, #2
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d11c      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x1f4>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d016      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	b292      	uxth	r2, r2
 8006460:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800647e:	2301      	movs	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006482:	f7fc fd2d 	bl	8002ee0 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800648e:	429a      	cmp	r2, r3
 8006490:	d80b      	bhi.n	80064aa <HAL_SPI_TransmitReceive+0x21c>
 8006492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d007      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80064a8:	e109      	b.n	80066be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d19f      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x166>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d199      	bne.n	80063f4 <HAL_SPI_TransmitReceive+0x166>
 80064c0:	e0e3      	b.n	800668a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_SPI_TransmitReceive+0x244>
 80064ca:	8a7b      	ldrh	r3, [r7, #18]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	f040 80cf 	bne.w	8006670 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d912      	bls.n	8006502 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	881a      	ldrh	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b02      	subs	r3, #2
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006500:	e0b6      	b.n	8006670 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006528:	e0a2      	b.n	8006670 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b02      	cmp	r3, #2
 8006536:	d134      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x314>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d02f      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x314>
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	2b01      	cmp	r3, #1
 8006546:	d12c      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d912      	bls.n	8006578 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006556:	881a      	ldrh	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	1c9a      	adds	r2, r3, #2
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b02      	subs	r3, #2
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006576:	e012      	b.n	800659e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d148      	bne.n	8006642 <HAL_SPI_TransmitReceive+0x3b4>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d042      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d923      	bls.n	8006610 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	b292      	uxth	r2, r2
 80065d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	1c9a      	adds	r2, r3, #2
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3b02      	subs	r3, #2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d81f      	bhi.n	800663e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800660c:	605a      	str	r2, [r3, #4]
 800660e:	e016      	b.n	800663e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f103 020c 	add.w	r2, r3, #12
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006632:	b29b      	uxth	r3, r3
 8006634:	3b01      	subs	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800663e:	2301      	movs	r3, #1
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006642:	f7fc fc4d 	bl	8002ee0 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664e:	429a      	cmp	r2, r3
 8006650:	d803      	bhi.n	800665a <HAL_SPI_TransmitReceive+0x3cc>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d102      	bne.n	8006660 <HAL_SPI_TransmitReceive+0x3d2>
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	2b00      	cmp	r3, #0
 800665e:	d107      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800666e:	e026      	b.n	80066be <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f47f af57 	bne.w	800652a <HAL_SPI_TransmitReceive+0x29c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f af50 	bne.w	800652a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f93e 	bl	8006910 <SPI_EndRxTxTransaction>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b4:	e003      	b.n	80066be <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80066c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066e4:	f7fc fbfc 	bl	8002ee0 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ec:	1a9b      	subs	r3, r3, r2
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	4413      	add	r3, r2
 80066f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066f4:	f7fc fbf4 	bl	8002ee0 <HAL_GetTick>
 80066f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066fa:	4b39      	ldr	r3, [pc, #228]	@ (80067e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	015b      	lsls	r3, r3, #5
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	fb02 f303 	mul.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800670a:	e054      	b.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d050      	beq.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006714:	f7fc fbe4 	bl	8002ee0 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	429a      	cmp	r2, r3
 8006722:	d902      	bls.n	800672a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d13d      	bne.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006742:	d111      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800674c:	d004      	beq.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006756:	d107      	bne.n	8006768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006770:	d10f      	bne.n	8006792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e017      	b.n	80067d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4013      	ands	r3, r2
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d19b      	bne.n	800670c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000008 	.word	0x20000008

080067e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	@ 0x28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
 80067f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80067f6:	f7fc fb73 	bl	8002ee0 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	4413      	add	r3, r2
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006806:	f7fc fb6b 	bl	8002ee0 <HAL_GetTick>
 800680a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006814:	4b3d      	ldr	r3, [pc, #244]	@ (800690c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	00da      	lsls	r2, r3, #3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	0d1b      	lsrs	r3, r3, #20
 8006824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800682c:	e060      	b.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006834:	d107      	bne.n	8006846 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006844:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d050      	beq.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800684e:	f7fc fb47 	bl	8002ee0 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685a:	429a      	cmp	r2, r3
 800685c:	d902      	bls.n	8006864 <SPI_WaitFifoStateUntilTimeout+0x80>
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d13d      	bne.n	80068e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800687c:	d111      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006886:	d004      	beq.n	8006892 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006890:	d107      	bne.n	80068a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068aa:	d10f      	bne.n	80068cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e010      	b.n	8006902 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d196      	bne.n	800682e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3728      	adds	r7, #40	@ 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000008 	.word	0x20000008

08006910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ff5b 	bl	80067e4 <SPI_WaitFifoStateUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e027      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	2180      	movs	r1, #128	@ 0x80
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff fec0 	bl	80066d4 <SPI_WaitFlagStateUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800695e:	f043 0220 	orr.w	r2, r3, #32
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e014      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff ff34 	bl	80067e4 <SPI_WaitFifoStateUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d007      	beq.n	8006992 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006986:	f043 0220 	orr.w	r2, r3, #32
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e000      	b.n	8006994 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <LL_RCC_GetUSARTClockSource>:
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80069a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4013      	ands	r3, r2
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_GetLPUARTClockSource>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80069c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4013      	ands	r3, r2
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e042      	b.n	8006a74 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fb ffc7 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2224      	movs	r2, #36	@ 0x24
 8006a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fade 	bl	8006fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f8b3 	bl	8006b98 <UART_SetConfig>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e01b      	b.n	8006a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fb5d 	bl	800712c <UART_CheckIdleState>
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	@ 0x28
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	603b      	str	r3, [r7, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d17b      	bne.n	8006b8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_UART_Transmit+0x26>
 8006a9c:	88fb      	ldrh	r3, [r7, #6]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e074      	b.n	8006b90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2221      	movs	r2, #33	@ 0x21
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ab6:	f7fc fa13 	bl	8002ee0 <HAL_GetTick>
 8006aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	88fa      	ldrh	r2, [r7, #6]
 8006ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad4:	d108      	bne.n	8006ae8 <HAL_UART_Transmit+0x6c>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e003      	b.n	8006af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006af0:	e030      	b.n	8006b54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	@ 0x80
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fbbf 	bl	8007280 <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e03d      	b.n	8006b90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	e007      	b.n	8006b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1c8      	bne.n	8006af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2200      	movs	r2, #0
 8006b68:	2140      	movs	r1, #64	@ 0x40
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fb88 	bl	8007280 <UART_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e006      	b.n	8006b90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006b8e:	2302      	movs	r3, #2
  }
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b9c:	b08c      	sub	sp, #48	@ 0x30
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4baf      	ldr	r3, [pc, #700]	@ (8006e84 <UART_SetConfig+0x2ec>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4aa4      	ldr	r2, [pc, #656]	@ (8006e88 <UART_SetConfig+0x2f0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c00:	4313      	orrs	r3, r2
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006c0e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	f023 010f 	bic.w	r1, r3, #15
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a95      	ldr	r2, [pc, #596]	@ (8006e8c <UART_SetConfig+0x2f4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d125      	bne.n	8006c88 <UART_SetConfig+0xf0>
 8006c3c:	2003      	movs	r0, #3
 8006c3e:	f7ff fead 	bl	800699c <LL_RCC_GetUSARTClockSource>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d81b      	bhi.n	8006c80 <UART_SetConfig+0xe8>
 8006c48:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <UART_SetConfig+0xb8>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	2301      	movs	r3, #1
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e042      	b.n	8006cee <UART_SetConfig+0x156>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6e:	e03e      	b.n	8006cee <UART_SetConfig+0x156>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c76:	e03a      	b.n	8006cee <UART_SetConfig+0x156>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7e:	e036      	b.n	8006cee <UART_SetConfig+0x156>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c86:	e032      	b.n	8006cee <UART_SetConfig+0x156>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a7e      	ldr	r2, [pc, #504]	@ (8006e88 <UART_SetConfig+0x2f0>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d12a      	bne.n	8006ce8 <UART_SetConfig+0x150>
 8006c92:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006c96:	f7ff fe91 	bl	80069bc <LL_RCC_GetLPUARTClockSource>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca0:	d01a      	beq.n	8006cd8 <UART_SetConfig+0x140>
 8006ca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca6:	d81b      	bhi.n	8006ce0 <UART_SetConfig+0x148>
 8006ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cac:	d00c      	beq.n	8006cc8 <UART_SetConfig+0x130>
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb2:	d815      	bhi.n	8006ce0 <UART_SetConfig+0x148>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x128>
 8006cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbc:	d008      	beq.n	8006cd0 <UART_SetConfig+0x138>
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x148>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e012      	b.n	8006cee <UART_SetConfig+0x156>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cce:	e00e      	b.n	8006cee <UART_SetConfig+0x156>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd6:	e00a      	b.n	8006cee <UART_SetConfig+0x156>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cde:	e006      	b.n	8006cee <UART_SetConfig+0x156>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce6:	e002      	b.n	8006cee <UART_SetConfig+0x156>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a65      	ldr	r2, [pc, #404]	@ (8006e88 <UART_SetConfig+0x2f0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	f040 8097 	bne.w	8006e28 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d823      	bhi.n	8006d4a <UART_SetConfig+0x1b2>
 8006d02:	a201      	add	r2, pc, #4	@ (adr r2, 8006d08 <UART_SetConfig+0x170>)
 8006d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d4b 	.word	0x08006d4b
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d4b 	.word	0x08006d4b
 8006d18:	08006d3b 	.word	0x08006d3b
 8006d1c:	08006d4b 	.word	0x08006d4b
 8006d20:	08006d4b 	.word	0x08006d4b
 8006d24:	08006d4b 	.word	0x08006d4b
 8006d28:	08006d43 	.word	0x08006d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d2c:	f7fe fb7e 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006d30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d32:	e010      	b.n	8006d56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d34:	4b56      	ldr	r3, [pc, #344]	@ (8006e90 <UART_SetConfig+0x2f8>)
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d38:	e00d      	b.n	8006d56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fe faf7 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8006d3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d40:	e009      	b.n	8006d56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d48:	e005      	b.n	8006d56 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 812b 	beq.w	8006fb4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d62:	4a4c      	ldr	r2, [pc, #304]	@ (8006e94 <UART_SetConfig+0x2fc>)
 8006d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	4613      	mov	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d305      	bcc.n	8006d8e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d903      	bls.n	8006d96 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d94:	e10e      	b.n	8006fb4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	2200      	movs	r2, #0
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	60fa      	str	r2, [r7, #12]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	4a3c      	ldr	r2, [pc, #240]	@ (8006e94 <UART_SetConfig+0x2fc>)
 8006da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2200      	movs	r2, #0
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006db8:	f7f9 ff3e 	bl	8000c38 <__aeabi_uldivmod>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	020b      	lsls	r3, r1, #8
 8006dce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dd2:	0202      	lsls	r2, r0, #8
 8006dd4:	6979      	ldr	r1, [r7, #20]
 8006dd6:	6849      	ldr	r1, [r1, #4]
 8006dd8:	0849      	lsrs	r1, r1, #1
 8006dda:	2000      	movs	r0, #0
 8006ddc:	460c      	mov	r4, r1
 8006dde:	4605      	mov	r5, r0
 8006de0:	eb12 0804 	adds.w	r8, r2, r4
 8006de4:	eb43 0905 	adc.w	r9, r3, r5
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	469a      	mov	sl, r3
 8006df0:	4693      	mov	fp, r2
 8006df2:	4652      	mov	r2, sl
 8006df4:	465b      	mov	r3, fp
 8006df6:	4640      	mov	r0, r8
 8006df8:	4649      	mov	r1, r9
 8006dfa:	f7f9 ff1d 	bl	8000c38 <__aeabi_uldivmod>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	4613      	mov	r3, r2
 8006e04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e0c:	d308      	bcc.n	8006e20 <UART_SetConfig+0x288>
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e14:	d204      	bcs.n	8006e20 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a3a      	ldr	r2, [r7, #32]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e0c9      	b.n	8006fb4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e26:	e0c5      	b.n	8006fb4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e30:	d16d      	bne.n	8006f0e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006e32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e36:	3b01      	subs	r3, #1
 8006e38:	2b07      	cmp	r3, #7
 8006e3a:	d82d      	bhi.n	8006e98 <UART_SetConfig+0x300>
 8006e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <UART_SetConfig+0x2ac>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e65 	.word	0x08006e65
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e99 	.word	0x08006e99
 8006e50:	08006e73 	.word	0x08006e73
 8006e54:	08006e99 	.word	0x08006e99
 8006e58:	08006e99 	.word	0x08006e99
 8006e5c:	08006e99 	.word	0x08006e99
 8006e60:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fe faf8 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e6a:	e01b      	b.n	8006ea4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b08      	ldr	r3, [pc, #32]	@ (8006e90 <UART_SetConfig+0x2f8>)
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e70:	e018      	b.n	8006ea4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fe fa5b 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8006e76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e78:	e014      	b.n	8006ea4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e80:	e010      	b.n	8006ea4 <UART_SetConfig+0x30c>
 8006e82:	bf00      	nop
 8006e84:	cfff69f3 	.word	0xcfff69f3
 8006e88:	40008000 	.word	0x40008000
 8006e8c:	40013800 	.word	0x40013800
 8006e90:	00f42400 	.word	0x00f42400
 8006e94:	0800e8f4 	.word	0x0800e8f4
      default:
        pclk = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ea2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 8084 	beq.w	8006fb4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8006fe0 <UART_SetConfig+0x448>)
 8006eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ebe:	005a      	lsls	r2, r3, #1
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	441a      	add	r2, r3
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	2b0f      	cmp	r3, #15
 8006ed6:	d916      	bls.n	8006f06 <UART_SetConfig+0x36e>
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ede:	d212      	bcs.n	8006f06 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f023 030f 	bic.w	r3, r3, #15
 8006ee8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	085b      	lsrs	r3, r3, #1
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	8bfb      	ldrh	r3, [r7, #30]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	8bfa      	ldrh	r2, [r7, #30]
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e056      	b.n	8006fb4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f0c:	e052      	b.n	8006fb4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	3b01      	subs	r3, #1
 8006f14:	2b07      	cmp	r3, #7
 8006f16:	d822      	bhi.n	8006f5e <UART_SetConfig+0x3c6>
 8006f18:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <UART_SetConfig+0x388>)
 8006f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1e:	bf00      	nop
 8006f20:	08006f41 	.word	0x08006f41
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f5f 	.word	0x08006f5f
 8006f2c:	08006f4f 	.word	0x08006f4f
 8006f30:	08006f5f 	.word	0x08006f5f
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f5f 	.word	0x08006f5f
 8006f3c:	08006f57 	.word	0x08006f57
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f40:	f7fe fa8a 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 8006f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f46:	e010      	b.n	8006f6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f48:	4b26      	ldr	r3, [pc, #152]	@ (8006fe4 <UART_SetConfig+0x44c>)
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f4c:	e00d      	b.n	8006f6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4e:	f7fe f9ed 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8006f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f54:	e009      	b.n	8006f6a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f5c:	e005      	b.n	8006f6a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f68:	bf00      	nop
    }

    if (pclk != 0U)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d021      	beq.n	8006fb4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe0 <UART_SetConfig+0x448>)
 8006f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d909      	bls.n	8006fae <UART_SetConfig+0x416>
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d205      	bcs.n	8006fae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e002      	b.n	8006fb4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3730      	adds	r7, #48	@ 0x30
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800e8f4 	.word	0x0800e8f4
 8006fe4:	00f42400 	.word	0x00f42400

08006fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00a      	beq.n	8007012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00a      	beq.n	8007056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01a      	beq.n	80070fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070e6:	d10a      	bne.n	80070fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	605a      	str	r2, [r3, #4]
  }
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b098      	sub	sp, #96	@ 0x60
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800713c:	f7fb fed0 	bl	8002ee0 <HAL_GetTick>
 8007140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b08      	cmp	r3, #8
 800714e:	d12f      	bne.n	80071b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007158:	2200      	movs	r2, #0
 800715a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f88e 	bl	8007280 <UART_WaitOnFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d022      	beq.n	80071b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800717e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007188:	647b      	str	r3, [r7, #68]	@ 0x44
 800718a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800718e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e063      	b.n	8007278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d149      	bne.n	8007252 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c6:	2200      	movs	r2, #0
 80071c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f857 	bl	8007280 <UART_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d03c      	beq.n	8007252 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	623b      	str	r3, [r7, #32]
   return(result);
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80071f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	60fb      	str	r3, [r7, #12]
   return(result);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722a:	61fa      	str	r2, [r7, #28]
 800722c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	69b9      	ldr	r1, [r7, #24]
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	617b      	str	r3, [r7, #20]
   return(result);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2220      	movs	r2, #32
 8007242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e012      	b.n	8007278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3758      	adds	r7, #88	@ 0x58
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007290:	e04f      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d04b      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729a:	f7fb fe21 	bl	8002ee0 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d302      	bcc.n	80072b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e04e      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d037      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b80      	cmp	r3, #128	@ 0x80
 80072c6:	d034      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b40      	cmp	r3, #64	@ 0x40
 80072cc:	d031      	beq.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d110      	bne.n	80072fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2208      	movs	r2, #8
 80072e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f838 	bl	800735a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2208      	movs	r2, #8
 80072ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e029      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800730c:	d111      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f81e 	bl	800735a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e00f      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	429a      	cmp	r2, r3
 8007340:	bf0c      	ite	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	2300      	movne	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	461a      	mov	r2, r3
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	429a      	cmp	r2, r3
 800734e:	d0a0      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735a:	b480      	push	{r7}
 800735c:	b095      	sub	sp, #84	@ 0x54
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007380:	643b      	str	r3, [r7, #64]	@ 0x40
 8007382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800738e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e6      	bne.n	8007362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3308      	adds	r3, #8
 800739a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073aa:	f023 0301 	bic.w	r3, r3, #1
 80073ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3308      	adds	r3, #8
 80073b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e3      	bne.n	8007394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d118      	bne.n	8007406 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800741a:	bf00      	nop
 800741c:	3754      	adds	r7, #84	@ 0x54
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_UARTEx_DisableFifoMode+0x16>
 8007438:	2302      	movs	r3, #2
 800743a:	e027      	b.n	800748c <HAL_UARTEx_DisableFifoMode+0x66>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2224      	movs	r2, #36	@ 0x24
 8007448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800746a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e02d      	b.n	800750c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	@ 0x24
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f84f 	bl	8007590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007528:	2302      	movs	r3, #2
 800752a:	e02d      	b.n	8007588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	@ 0x24
 8007538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f811 	bl	8007590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075b0:	e031      	b.n	8007616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075b2:	2308      	movs	r3, #8
 80075b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075b6:	2308      	movs	r3, #8
 80075b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	0e5b      	lsrs	r3, r3, #25
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	0f5b      	lsrs	r3, r3, #29
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	7b3a      	ldrb	r2, [r7, #12]
 80075de:	4911      	ldr	r1, [pc, #68]	@ (8007624 <UARTEx_SetNbDataToProcess+0x94>)
 80075e0:	5c8a      	ldrb	r2, [r1, r2]
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075e6:	7b3a      	ldrb	r2, [r7, #12]
 80075e8:	490f      	ldr	r1, [pc, #60]	@ (8007628 <UARTEx_SetNbDataToProcess+0x98>)
 80075ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	7b7a      	ldrb	r2, [r7, #13]
 80075fc:	4909      	ldr	r1, [pc, #36]	@ (8007624 <UARTEx_SetNbDataToProcess+0x94>)
 80075fe:	5c8a      	ldrb	r2, [r1, r2]
 8007600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007604:	7b7a      	ldrb	r2, [r7, #13]
 8007606:	4908      	ldr	r1, [pc, #32]	@ (8007628 <UARTEx_SetNbDataToProcess+0x98>)
 8007608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800760a:	fb93 f3f2 	sdiv	r3, r3, r2
 800760e:	b29a      	uxth	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007616:	bf00      	nop
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	0800e90c 	.word	0x0800e90c
 8007628:	0800e914 	.word	0x0800e914

0800762c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007634:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007638:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	b29b      	uxth	r3, r3
 8007646:	43db      	mvns	r3, r3
 8007648:	b29b      	uxth	r3, r3
 800764a:	4013      	ands	r3, r2
 800764c:	b29a      	uxth	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007662:	b480      	push	{r7}
 8007664:	b085      	sub	sp, #20
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	1d3b      	adds	r3, r7, #4
 800766c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80076a4:	4907      	ldr	r1, [pc, #28]	@ (80076c4 <MX_FATFS_Init+0x24>)
 80076a6:	4808      	ldr	r0, [pc, #32]	@ (80076c8 <MX_FATFS_Init+0x28>)
 80076a8:	f002 fbb2 	bl	8009e10 <FATFS_LinkDriver>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
 80076b6:	e003      	b.n	80076c0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80076b8:	4b04      	ldr	r3, [pc, #16]	@ (80076cc <MX_FATFS_Init+0x2c>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80076be:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20006dac 	.word	0x20006dac
 80076c8:	20000014 	.word	0x20000014
 80076cc:	20006db0 	.word	0x20006db0

080076d0 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80076d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 80076ea:	79fb      	ldrb	r3, [r7, #7]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7f9 fe0b 	bl	8001308 <SD_disk_initialize>
 80076f2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status (pdrv);
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	4618      	mov	r0, r3
 800770a:	f7f9 fee9 	bl	80014e0 <SD_disk_status>
 800770e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read (pdrv, buff, sector, count);
 8007728:	7bf8      	ldrb	r0, [r7, #15]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	68b9      	ldr	r1, [r7, #8]
 8007730:	f7f9 feec 	bl	800150c <SD_disk_read>
 8007734:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write (pdrv, buff, sector, count);
 800774e:	7bf8      	ldrb	r0, [r7, #15]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	f7f9 ff43 	bl	80015e0 <SD_disk_write>
 800775a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	603a      	str	r2, [r7, #0]
 800776e:	71fb      	strb	r3, [r7, #7]
 8007770:	460b      	mov	r3, r1
 8007772:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl (pdrv, cmd, buff);
 8007774:	79b9      	ldrb	r1, [r7, #6]
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7f9 ffb4 	bl	80016e8 <SD_disk_ioctl>
 8007780:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007796:	79fb      	ldrb	r3, [r7, #7]
 8007798:	4a08      	ldr	r2, [pc, #32]	@ (80077bc <disk_status+0x30>)
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	4905      	ldr	r1, [pc, #20]	@ (80077bc <disk_status+0x30>)
 80077a6:	440a      	add	r2, r1
 80077a8:	7a12      	ldrb	r2, [r2, #8]
 80077aa:	4610      	mov	r0, r2
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	20006ddc 	.word	0x20006ddc

080077c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	4a0e      	ldr	r2, [pc, #56]	@ (800780c <disk_initialize+0x4c>)
 80077d2:	5cd3      	ldrb	r3, [r2, r3]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d114      	bne.n	8007802 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	4a0c      	ldr	r2, [pc, #48]	@ (800780c <disk_initialize+0x4c>)
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	79fa      	ldrb	r2, [r7, #7]
 80077e6:	4909      	ldr	r1, [pc, #36]	@ (800780c <disk_initialize+0x4c>)
 80077e8:	440a      	add	r2, r1
 80077ea:	7a12      	ldrb	r2, [r2, #8]
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	4a03      	ldr	r2, [pc, #12]	@ (800780c <disk_initialize+0x4c>)
 80077fe:	2101      	movs	r1, #1
 8007800:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20006ddc 	.word	0x20006ddc

08007810 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007810:	b590      	push	{r4, r7, lr}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	4a0a      	ldr	r2, [pc, #40]	@ (800784c <disk_read+0x3c>)
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	689c      	ldr	r4, [r3, #8]
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4a07      	ldr	r2, [pc, #28]	@ (800784c <disk_read+0x3c>)
 8007830:	4413      	add	r3, r2
 8007832:	7a18      	ldrb	r0, [r3, #8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	47a0      	blx	r4
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}
 800784a:	bf00      	nop
 800784c:	20006ddc 	.word	0x20006ddc

08007850 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	4603      	mov	r3, r0
 800785e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	4a0a      	ldr	r2, [pc, #40]	@ (800788c <disk_write+0x3c>)
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68dc      	ldr	r4, [r3, #12]
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4a07      	ldr	r2, [pc, #28]	@ (800788c <disk_write+0x3c>)
 8007870:	4413      	add	r3, r2
 8007872:	7a18      	ldrb	r0, [r3, #8]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	47a0      	blx	r4
 800787c:	4603      	mov	r3, r0
 800787e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}
 800788a:	bf00      	nop
 800788c:	20006ddc 	.word	0x20006ddc

08007890 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	603a      	str	r2, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
 800789c:	460b      	mov	r3, r1
 800789e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	4a09      	ldr	r2, [pc, #36]	@ (80078c8 <disk_ioctl+0x38>)
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	79fa      	ldrb	r2, [r7, #7]
 80078ae:	4906      	ldr	r1, [pc, #24]	@ (80078c8 <disk_ioctl+0x38>)
 80078b0:	440a      	add	r2, r1
 80078b2:	7a10      	ldrb	r0, [r2, #8]
 80078b4:	79b9      	ldrb	r1, [r7, #6]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	4798      	blx	r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20006ddc 	.word	0x20006ddc

080078cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3301      	adds	r3, #1
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078dc:	89fb      	ldrh	r3, [r7, #14]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	b21a      	sxth	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	4313      	orrs	r3, r2
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80078ee:	89fb      	ldrh	r3, [r7, #14]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3303      	adds	r3, #3
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	3202      	adds	r2, #2
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	3201      	adds	r2, #1
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	7812      	ldrb	r2, [r2, #0]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
	return rv;
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr

08007942 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	887a      	ldrh	r2, [r7, #2]
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	887b      	ldrh	r3, [r7, #2]
 800795c:	0a1b      	lsrs	r3, r3, #8
 800795e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	887a      	ldrh	r2, [r7, #2]
 8007968:	b2d2      	uxtb	r2, r2
 800796a:	701a      	strb	r2, [r3, #0]
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	b2d2      	uxtb	r2, r2
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	0a1b      	lsrs	r3, r3, #8
 8007992:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	607a      	str	r2, [r7, #4]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	b2d2      	uxtb	r2, r2
 80079c2:	701a      	strb	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	1c53      	adds	r3, r2, #1
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	1c59      	adds	r1, r3, #1
 80079f4:	6179      	str	r1, [r7, #20]
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	607b      	str	r3, [r7, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1f1      	bne.n	80079ea <mem_cpy+0x1a>
	}
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a12:	b480      	push	{r7}
 8007a14:	b087      	sub	sp, #28
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	617a      	str	r2, [r7, #20]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	607b      	str	r3, [r7, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f3      	bne.n	8007a22 <mem_set+0x10>
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	371c      	adds	r7, #28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	@ 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	61fa      	str	r2, [r7, #28]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	61ba      	str	r2, [r7, #24]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	1acb      	subs	r3, r1, r3
 8007a74:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	607b      	str	r3, [r7, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <mem_cmp+0x40>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0eb      	beq.n	8007a60 <mem_cmp+0x18>

	return r;
 8007a88:	697b      	ldr	r3, [r7, #20]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3724      	adds	r7, #36	@ 0x24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007aa0:	e002      	b.n	8007aa8 <chk_chr+0x12>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <chk_chr+0x26>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d1f2      	bne.n	8007aa2 <chk_chr+0xc>
	return *str;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	781b      	ldrb	r3, [r3, #0]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	e029      	b.n	8007b34 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ae0:	4a27      	ldr	r2, [pc, #156]	@ (8007b80 <chk_lock+0xb4>)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	4413      	add	r3, r2
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d01d      	beq.n	8007b2a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007aee:	4a24      	ldr	r2, [pc, #144]	@ (8007b80 <chk_lock+0xb4>)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	4413      	add	r3, r2
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d116      	bne.n	8007b2e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b00:	4a1f      	ldr	r2, [pc, #124]	@ (8007b80 <chk_lock+0xb4>)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d10c      	bne.n	8007b2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b14:	4a1a      	ldr	r2, [pc, #104]	@ (8007b80 <chk_lock+0xb4>)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d102      	bne.n	8007b2e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b28:	e007      	b.n	8007b3a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3301      	adds	r3, #1
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d9d2      	bls.n	8007ae0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d109      	bne.n	8007b54 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <chk_lock+0x80>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d101      	bne.n	8007b50 <chk_lock+0x84>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e010      	b.n	8007b72 <chk_lock+0xa6>
 8007b50:	2312      	movs	r3, #18
 8007b52:	e00e      	b.n	8007b72 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <chk_lock+0xa0>
 8007b5a:	4a09      	ldr	r2, [pc, #36]	@ (8007b80 <chk_lock+0xb4>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	4413      	add	r3, r2
 8007b62:	330c      	adds	r3, #12
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b6a:	d101      	bne.n	8007b70 <chk_lock+0xa4>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	e000      	b.n	8007b72 <chk_lock+0xa6>
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20006dbc 	.word	0x20006dbc

08007b84 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	e002      	b.n	8007b96 <enq_lock+0x12>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3301      	adds	r3, #1
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d806      	bhi.n	8007baa <enq_lock+0x26>
 8007b9c:	4a09      	ldr	r2, [pc, #36]	@ (8007bc4 <enq_lock+0x40>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	011b      	lsls	r3, r3, #4
 8007ba2:	4413      	add	r3, r2
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f2      	bne.n	8007b90 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	bf14      	ite	ne
 8007bb0:	2301      	movne	r3, #1
 8007bb2:	2300      	moveq	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20006dbc 	.word	0x20006dbc

08007bc8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e01f      	b.n	8007c18 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bd8:	4a41      	ldr	r2, [pc, #260]	@ (8007ce0 <inc_lock+0x118>)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	4413      	add	r3, r2
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d113      	bne.n	8007c12 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007bea:	4a3d      	ldr	r2, [pc, #244]	@ (8007ce0 <inc_lock+0x118>)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d109      	bne.n	8007c12 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007bfe:	4a38      	ldr	r2, [pc, #224]	@ (8007ce0 <inc_lock+0x118>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	4413      	add	r3, r2
 8007c06:	3308      	adds	r3, #8
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d006      	beq.n	8007c20 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d9dc      	bls.n	8007bd8 <inc_lock+0x10>
 8007c1e:	e000      	b.n	8007c22 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c20:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d132      	bne.n	8007c8e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e002      	b.n	8007c34 <inc_lock+0x6c>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d806      	bhi.n	8007c48 <inc_lock+0x80>
 8007c3a:	4a29      	ldr	r2, [pc, #164]	@ (8007ce0 <inc_lock+0x118>)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	4413      	add	r3, r2
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f2      	bne.n	8007c2e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d101      	bne.n	8007c52 <inc_lock+0x8a>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e040      	b.n	8007cd4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4922      	ldr	r1, [pc, #136]	@ (8007ce0 <inc_lock+0x118>)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	440b      	add	r3, r1
 8007c5e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	491e      	ldr	r1, [pc, #120]	@ (8007ce0 <inc_lock+0x118>)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3304      	adds	r3, #4
 8007c6e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	491a      	ldr	r1, [pc, #104]	@ (8007ce0 <inc_lock+0x118>)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c80:	4a17      	ldr	r2, [pc, #92]	@ (8007ce0 <inc_lock+0x118>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	4413      	add	r3, r2
 8007c88:	330c      	adds	r3, #12
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d009      	beq.n	8007ca8 <inc_lock+0xe0>
 8007c94:	4a12      	ldr	r2, [pc, #72]	@ (8007ce0 <inc_lock+0x118>)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	4413      	add	r3, r2
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <inc_lock+0xe0>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e015      	b.n	8007cd4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d108      	bne.n	8007cc0 <inc_lock+0xf8>
 8007cae:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce0 <inc_lock+0x118>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	4413      	add	r3, r2
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	e001      	b.n	8007cc4 <inc_lock+0xfc>
 8007cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cc4:	4906      	ldr	r1, [pc, #24]	@ (8007ce0 <inc_lock+0x118>)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	440b      	add	r3, r1
 8007ccc:	330c      	adds	r3, #12
 8007cce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	3301      	adds	r3, #1
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20006dbc 	.word	0x20006dbc

08007ce4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d825      	bhi.n	8007d44 <dec_lock+0x60>
		n = Files[i].ctr;
 8007cf8:	4a17      	ldr	r2, [pc, #92]	@ (8007d58 <dec_lock+0x74>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	4413      	add	r3, r2
 8007d00:	330c      	adds	r3, #12
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d06:	89fb      	ldrh	r3, [r7, #14]
 8007d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0c:	d101      	bne.n	8007d12 <dec_lock+0x2e>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d12:	89fb      	ldrh	r3, [r7, #14]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <dec_lock+0x3a>
 8007d18:	89fb      	ldrh	r3, [r7, #14]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8007d58 <dec_lock+0x74>)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	4413      	add	r3, r2
 8007d26:	330c      	adds	r3, #12
 8007d28:	89fa      	ldrh	r2, [r7, #14]
 8007d2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d2c:	89fb      	ldrh	r3, [r7, #14]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d105      	bne.n	8007d3e <dec_lock+0x5a>
 8007d32:	4a09      	ldr	r2, [pc, #36]	@ (8007d58 <dec_lock+0x74>)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	4413      	add	r3, r2
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	737b      	strb	r3, [r7, #13]
 8007d42:	e001      	b.n	8007d48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d44:	2302      	movs	r3, #2
 8007d46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d48:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20006dbc 	.word	0x20006dbc

08007d5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e010      	b.n	8007d8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8007da0 <clear_lock+0x44>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	4413      	add	r3, r2
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d105      	bne.n	8007d86 <clear_lock+0x2a>
 8007d7a:	4a09      	ldr	r2, [pc, #36]	@ (8007da0 <clear_lock+0x44>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	4413      	add	r3, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d9eb      	bls.n	8007d6a <clear_lock+0xe>
	}
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	20006dbc 	.word	0x20006dbc

08007da4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	78db      	ldrb	r3, [r3, #3]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d034      	beq.n	8007e22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7858      	ldrb	r0, [r3, #1]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007dc8:	2301      	movs	r3, #1
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	f7ff fd40 	bl	8007850 <disk_write>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	73fb      	strb	r3, [r7, #15]
 8007dda:	e022      	b.n	8007e22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d217      	bcs.n	8007e22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	789b      	ldrb	r3, [r3, #2]
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	e010      	b.n	8007e1c <sync_window+0x78>
					wsect += fs->fsize;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4413      	add	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7858      	ldrb	r0, [r3, #1]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e0e:	2301      	movs	r3, #1
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	f7ff fd1d 	bl	8007850 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d8eb      	bhi.n	8007dfa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d01b      	beq.n	8007e7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff ffad 	bl	8007da4 <sync_window>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d113      	bne.n	8007e7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7858      	ldrb	r0, [r3, #1]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007e5e:	2301      	movs	r3, #1
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	f7ff fcd5 	bl	8007810 <disk_read>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff ff87 	bl	8007da4 <sync_window>
 8007e96:	4603      	mov	r3, r0
 8007e98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d159      	bne.n	8007f54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d149      	bne.n	8007f3c <sync_fs+0xb4>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	791b      	ldrb	r3, [r3, #4]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d145      	bne.n	8007f3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	899b      	ldrh	r3, [r3, #12]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f7ff fda8 	bl	8007a12 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3334      	adds	r3, #52	@ 0x34
 8007ec6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007eca:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fd37 	bl	8007942 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3334      	adds	r3, #52	@ 0x34
 8007ed8:	4921      	ldr	r1, [pc, #132]	@ (8007f60 <sync_fs+0xd8>)
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff fd4c 	bl	8007978 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3334      	adds	r3, #52	@ 0x34
 8007ee4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007ee8:	491e      	ldr	r1, [pc, #120]	@ (8007f64 <sync_fs+0xdc>)
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fd44 	bl	8007978 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3334      	adds	r3, #52	@ 0x34
 8007ef4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	695b      	ldr	r3, [r3, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	f7ff fd3a 	bl	8007978 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3334      	adds	r3, #52	@ 0x34
 8007f08:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7ff fd30 	bl	8007978 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	7858      	ldrb	r0, [r3, #1]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f30:	2301      	movs	r3, #1
 8007f32:	f7ff fc8d 	bl	8007850 <disk_write>
			fs->fsi_flag = 0;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff fca3 	bl	8007890 <disk_ioctl>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <sync_fs+0xcc>
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	41615252 	.word	0x41615252
 8007f64:	61417272 	.word	0x61417272

08007f68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3b02      	subs	r3, #2
 8007f76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	3b02      	subs	r3, #2
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d301      	bcc.n	8007f88 <clust2sect+0x20>
 8007f84:	2300      	movs	r3, #0
 8007f86:	e008      	b.n	8007f9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	895b      	ldrh	r3, [r3, #10]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	fb03 f202 	mul.w	r2, r3, r2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4413      	add	r3, r2
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d904      	bls.n	8007fc6 <get_fat+0x20>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e0ba      	b.n	8008142 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	f000 8082 	beq.w	80080e0 <get_fat+0x13a>
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	f300 80a6 	bgt.w	800812e <get_fat+0x188>
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d002      	beq.n	8007fec <get_fat+0x46>
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d055      	beq.n	8008096 <get_fat+0xf0>
 8007fea:	e0a0      	b.n	800812e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	085b      	lsrs	r3, r3, #1
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	899b      	ldrh	r3, [r3, #12]
 8008002:	4619      	mov	r1, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	fbb3 f3f1 	udiv	r3, r3, r1
 800800a:	4413      	add	r3, r2
 800800c:	4619      	mov	r1, r3
 800800e:	6938      	ldr	r0, [r7, #16]
 8008010:	f7ff ff0c 	bl	8007e2c <move_window>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 808c 	bne.w	8008134 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	60fa      	str	r2, [r7, #12]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	8992      	ldrh	r2, [r2, #12]
 8008026:	fbb3 f1f2 	udiv	r1, r3, r2
 800802a:	fb01 f202 	mul.w	r2, r1, r2
 800802e:	1a9b      	subs	r3, r3, r2
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	4413      	add	r3, r2
 8008034:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008038:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	899b      	ldrh	r3, [r3, #12]
 8008042:	4619      	mov	r1, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	fbb3 f3f1 	udiv	r3, r3, r1
 800804a:	4413      	add	r3, r2
 800804c:	4619      	mov	r1, r3
 800804e:	6938      	ldr	r0, [r7, #16]
 8008050:	f7ff feec 	bl	8007e2c <move_window>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d16e      	bne.n	8008138 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	899b      	ldrh	r3, [r3, #12]
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	fbb3 f1f2 	udiv	r1, r3, r2
 8008066:	fb01 f202 	mul.w	r2, r1, r2
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4413      	add	r3, r2
 8008070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4313      	orrs	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <get_fat+0xe6>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	091b      	lsrs	r3, r3, #4
 800808a:	e002      	b.n	8008092 <get_fat+0xec>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008092:	617b      	str	r3, [r7, #20]
			break;
 8008094:	e055      	b.n	8008142 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	899b      	ldrh	r3, [r3, #12]
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80080aa:	4413      	add	r3, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	6938      	ldr	r0, [r7, #16]
 80080b0:	f7ff febc 	bl	8007e2c <move_window>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d140      	bne.n	800813c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	8992      	ldrh	r2, [r2, #12]
 80080c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80080cc:	fb00 f202 	mul.w	r2, r0, r2
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	440b      	add	r3, r1
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff fbf9 	bl	80078cc <ld_word>
 80080da:	4603      	mov	r3, r0
 80080dc:	617b      	str	r3, [r7, #20]
			break;
 80080de:	e030      	b.n	8008142 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	899b      	ldrh	r3, [r3, #12]
 80080e8:	089b      	lsrs	r3, r3, #2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080f4:	4413      	add	r3, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	6938      	ldr	r0, [r7, #16]
 80080fa:	f7ff fe97 	bl	8007e2c <move_window>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11d      	bne.n	8008140 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	8992      	ldrh	r2, [r2, #12]
 8008112:	fbb3 f0f2 	udiv	r0, r3, r2
 8008116:	fb00 f202 	mul.w	r2, r0, r2
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	440b      	add	r3, r1
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fbec 	bl	80078fc <ld_dword>
 8008124:	4603      	mov	r3, r0
 8008126:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800812a:	617b      	str	r3, [r7, #20]
			break;
 800812c:	e009      	b.n	8008142 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e006      	b.n	8008142 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008134:	bf00      	nop
 8008136:	e004      	b.n	8008142 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008138:	bf00      	nop
 800813a:	e002      	b.n	8008142 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800813c:	bf00      	nop
 800813e:	e000      	b.n	8008142 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008140:	bf00      	nop
		}
	}

	return val;
 8008142:	697b      	ldr	r3, [r7, #20]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b089      	sub	sp, #36	@ 0x24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008158:	2302      	movs	r3, #2
 800815a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b01      	cmp	r3, #1
 8008160:	f240 8109 	bls.w	8008376 <put_fat+0x22a>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	f080 8103 	bcs.w	8008376 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b03      	cmp	r3, #3
 8008176:	f000 80b6 	beq.w	80082e6 <put_fat+0x19a>
 800817a:	2b03      	cmp	r3, #3
 800817c:	f300 80fb 	bgt.w	8008376 <put_fat+0x22a>
 8008180:	2b01      	cmp	r3, #1
 8008182:	d003      	beq.n	800818c <put_fat+0x40>
 8008184:	2b02      	cmp	r3, #2
 8008186:	f000 8083 	beq.w	8008290 <put_fat+0x144>
 800818a:	e0f4      	b.n	8008376 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	4413      	add	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	899b      	ldrh	r3, [r3, #12]
 80081a2:	4619      	mov	r1, r3
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081aa:	4413      	add	r3, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff fe3c 	bl	8007e2c <move_window>
 80081b4:	4603      	mov	r3, r0
 80081b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f040 80d4 	bne.w	8008368 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	61ba      	str	r2, [r7, #24]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	8992      	ldrh	r2, [r2, #12]
 80081d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80081d4:	fb00 f202 	mul.w	r2, r0, r2
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	440b      	add	r3, r1
 80081dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00d      	beq.n	8008204 <put_fat+0xb8>
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	b25a      	sxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	b25b      	sxtb	r3, r3
 80081fc:	4313      	orrs	r3, r2
 80081fe:	b25b      	sxtb	r3, r3
 8008200:	b2db      	uxtb	r3, r3
 8008202:	e001      	b.n	8008208 <put_fat+0xbc>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	899b      	ldrh	r3, [r3, #12]
 800821a:	4619      	mov	r1, r3
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008222:	4413      	add	r3, r2
 8008224:	4619      	mov	r1, r3
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fe00 	bl	8007e2c <move_window>
 800822c:	4603      	mov	r3, r0
 800822e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008230:	7ffb      	ldrb	r3, [r7, #31]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f040 809a 	bne.w	800836c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	899b      	ldrh	r3, [r3, #12]
 8008242:	461a      	mov	r2, r3
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	fbb3 f0f2 	udiv	r0, r3, r2
 800824a:	fb00 f202 	mul.w	r2, r0, r2
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	440b      	add	r3, r1
 8008252:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <put_fat+0x11a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	091b      	lsrs	r3, r3, #4
 8008262:	b2db      	uxtb	r3, r3
 8008264:	e00e      	b.n	8008284 <put_fat+0x138>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f023 030f 	bic.w	r3, r3, #15
 8008270:	b25a      	sxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	0a1b      	lsrs	r3, r3, #8
 8008276:	b25b      	sxtb	r3, r3
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	b25b      	sxtb	r3, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	b25b      	sxtb	r3, r3
 8008282:	b2db      	uxtb	r3, r3
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	70da      	strb	r2, [r3, #3]
			break;
 800828e:	e072      	b.n	8008376 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	899b      	ldrh	r3, [r3, #12]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	4619      	mov	r1, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a4:	4413      	add	r3, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fdbf 	bl	8007e2c <move_window>
 80082ae:	4603      	mov	r3, r0
 80082b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082b2:	7ffb      	ldrb	r3, [r7, #31]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d15b      	bne.n	8008370 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	8992      	ldrh	r2, [r2, #12]
 80082c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80082ca:	fb00 f202 	mul.w	r2, r0, r2
 80082ce:	1a9b      	subs	r3, r3, r2
 80082d0:	440b      	add	r3, r1
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	b292      	uxth	r2, r2
 80082d6:	4611      	mov	r1, r2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7ff fb32 	bl	8007942 <st_word>
			fs->wflag = 1;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	70da      	strb	r2, [r3, #3]
			break;
 80082e4:	e047      	b.n	8008376 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	899b      	ldrh	r3, [r3, #12]
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4619      	mov	r1, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80082fa:	4413      	add	r3, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7ff fd94 	bl	8007e2c <move_window>
 8008304:	4603      	mov	r3, r0
 8008306:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008308:	7ffb      	ldrb	r3, [r7, #31]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d132      	bne.n	8008374 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	8992      	ldrh	r2, [r2, #12]
 8008322:	fbb3 f0f2 	udiv	r0, r3, r2
 8008326:	fb00 f202 	mul.w	r2, r0, r2
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	440b      	add	r3, r1
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fae4 	bl	80078fc <ld_dword>
 8008334:	4603      	mov	r3, r0
 8008336:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800833a:	4323      	orrs	r3, r4
 800833c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	8992      	ldrh	r2, [r2, #12]
 800834c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008350:	fb00 f202 	mul.w	r2, r0, r2
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	440b      	add	r3, r1
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fb0c 	bl	8007978 <st_dword>
			fs->wflag = 1;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	70da      	strb	r2, [r3, #3]
			break;
 8008366:	e006      	b.n	8008376 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008368:	bf00      	nop
 800836a:	e004      	b.n	8008376 <put_fat+0x22a>
			if (res != FR_OK) break;
 800836c:	bf00      	nop
 800836e:	e002      	b.n	8008376 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008370:	bf00      	nop
 8008372:	e000      	b.n	8008376 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008374:	bf00      	nop
		}
	}
	return res;
 8008376:	7ffb      	ldrb	r3, [r7, #31]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3724      	adds	r7, #36	@ 0x24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd90      	pop	{r4, r7, pc}

08008380 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d904      	bls.n	80083a6 <remove_chain+0x26>
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d301      	bcc.n	80083aa <remove_chain+0x2a>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e04b      	b.n	8008442 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80083b0:	f04f 32ff 	mov.w	r2, #4294967295
 80083b4:	6879      	ldr	r1, [r7, #4]
 80083b6:	69b8      	ldr	r0, [r7, #24]
 80083b8:	f7ff fec8 	bl	800814c <put_fat>
 80083bc:	4603      	mov	r3, r0
 80083be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80083c0:	7ffb      	ldrb	r3, [r7, #31]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <remove_chain+0x4a>
 80083c6:	7ffb      	ldrb	r3, [r7, #31]
 80083c8:	e03b      	b.n	8008442 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff fdea 	bl	8007fa6 <get_fat>
 80083d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d031      	beq.n	800843e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <remove_chain+0x64>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e02e      	b.n	8008442 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ea:	d101      	bne.n	80083f0 <remove_chain+0x70>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e028      	b.n	8008442 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80083f0:	2200      	movs	r2, #0
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	69b8      	ldr	r0, [r7, #24]
 80083f6:	f7ff fea9 	bl	800814c <put_fat>
 80083fa:	4603      	mov	r3, r0
 80083fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80083fe:	7ffb      	ldrb	r3, [r7, #31]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <remove_chain+0x88>
 8008404:	7ffb      	ldrb	r3, [r7, #31]
 8008406:	e01c      	b.n	8008442 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	695a      	ldr	r2, [r3, #20]
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	3b02      	subs	r3, #2
 8008412:	429a      	cmp	r2, r3
 8008414:	d20b      	bcs.n	800842e <remove_chain+0xae>
			fs->free_clst++;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3c6      	bcc.n	80083ca <remove_chain+0x4a>
 800843c:	e000      	b.n	8008440 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800843e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10d      	bne.n	800847c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <create_chain+0x2c>
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	429a      	cmp	r2, r3
 8008474:	d31b      	bcc.n	80084ae <create_chain+0x64>
 8008476:	2301      	movs	r3, #1
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	e018      	b.n	80084ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fd91 	bl	8007fa6 <get_fat>
 8008484:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d801      	bhi.n	8008490 <create_chain+0x46>
 800848c:	2301      	movs	r3, #1
 800848e:	e070      	b.n	8008572 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d101      	bne.n	800849c <create_chain+0x52>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	e06a      	b.n	8008572 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d201      	bcs.n	80084aa <create_chain+0x60>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	e063      	b.n	8008572 <create_chain+0x128>
		scl = clst;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	3301      	adds	r3, #1
 80084b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d307      	bcc.n	80084d2 <create_chain+0x88>
				ncl = 2;
 80084c2:	2302      	movs	r3, #2
 80084c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d901      	bls.n	80084d2 <create_chain+0x88>
 80084ce:	2300      	movs	r3, #0
 80084d0:	e04f      	b.n	8008572 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80084d2:	69f9      	ldr	r1, [r7, #28]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fd66 	bl	8007fa6 <get_fat>
 80084da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d003      	beq.n	80084f0 <create_chain+0xa6>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ee:	d101      	bne.n	80084f4 <create_chain+0xaa>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	e03e      	b.n	8008572 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d1da      	bne.n	80084b2 <create_chain+0x68>
 80084fc:	2300      	movs	r3, #0
 80084fe:	e038      	b.n	8008572 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008500:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008502:	f04f 32ff 	mov.w	r2, #4294967295
 8008506:	69f9      	ldr	r1, [r7, #28]
 8008508:	6938      	ldr	r0, [r7, #16]
 800850a:	f7ff fe1f 	bl	800814c <put_fat>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <create_chain+0xe2>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d006      	beq.n	800852c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f7ff fe12 	bl	800814c <put_fat>
 8008528:	4603      	mov	r3, r0
 800852a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d116      	bne.n	8008560 <create_chain+0x116>
		fs->last_clst = ncl;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	695a      	ldr	r2, [r3, #20]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	3b02      	subs	r3, #2
 8008542:	429a      	cmp	r2, r3
 8008544:	d804      	bhi.n	8008550 <create_chain+0x106>
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	1e5a      	subs	r2, r3, #1
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	711a      	strb	r2, [r3, #4]
 800855e:	e007      	b.n	8008570 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d102      	bne.n	800856c <create_chain+0x122>
 8008566:	f04f 33ff 	mov.w	r3, #4294967295
 800856a:	e000      	b.n	800856e <create_chain+0x124>
 800856c:	2301      	movs	r3, #1
 800856e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008570:	69fb      	ldr	r3, [r7, #28]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3720      	adds	r7, #32
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800857a:	b480      	push	{r7}
 800857c:	b087      	sub	sp, #28
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858e:	3304      	adds	r3, #4
 8008590:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	899b      	ldrh	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	fbb3 f3f2 	udiv	r3, r3, r2
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	8952      	ldrh	r2, [r2, #10]
 80085a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	613a      	str	r2, [r7, #16]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <clmt_clust+0x42>
 80085b8:	2300      	movs	r3, #0
 80085ba:	e010      	b.n	80085de <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d307      	bcc.n	80085d4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	3304      	adds	r3, #4
 80085d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80085d2:	e7e9      	b.n	80085a8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80085d4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	4413      	add	r3, r2
}
 80085de:	4618      	mov	r0, r3
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b086      	sub	sp, #24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008600:	d204      	bcs.n	800860c <dir_sdi+0x22>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	f003 031f 	and.w	r3, r3, #31
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <dir_sdi+0x26>
		return FR_INT_ERR;
 800860c:	2302      	movs	r3, #2
 800860e:	e071      	b.n	80086f4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <dir_sdi+0x46>
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d902      	bls.n	8008630 <dir_sdi+0x46>
		clst = fs->dirbase;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10c      	bne.n	8008650 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	8912      	ldrh	r2, [r2, #8]
 800863e:	4293      	cmp	r3, r2
 8008640:	d301      	bcc.n	8008646 <dir_sdi+0x5c>
 8008642:	2302      	movs	r3, #2
 8008644:	e056      	b.n	80086f4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	61da      	str	r2, [r3, #28]
 800864e:	e02d      	b.n	80086ac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	895b      	ldrh	r3, [r3, #10]
 8008654:	461a      	mov	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	899b      	ldrh	r3, [r3, #12]
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008660:	e019      	b.n	8008696 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fc9d 	bl	8007fa6 <get_fat>
 800866c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008674:	d101      	bne.n	800867a <dir_sdi+0x90>
 8008676:	2301      	movs	r3, #1
 8008678:	e03c      	b.n	80086f4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d904      	bls.n	800868a <dir_sdi+0xa0>
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	429a      	cmp	r2, r3
 8008688:	d301      	bcc.n	800868e <dir_sdi+0xa4>
 800868a:	2302      	movs	r3, #2
 800868c:	e032      	b.n	80086f4 <dir_sdi+0x10a>
			ofs -= csz;
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	429a      	cmp	r2, r3
 800869c:	d2e1      	bcs.n	8008662 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	6938      	ldr	r0, [r7, #16]
 80086a2:	f7ff fc61 	bl	8007f68 <clust2sect>
 80086a6:	4602      	mov	r2, r0
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <dir_sdi+0xd4>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e01a      	b.n	80086f4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	69da      	ldr	r2, [r3, #28]
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	4619      	mov	r1, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ce:	441a      	add	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	899b      	ldrh	r3, [r3, #12]
 80086de:	461a      	mov	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80086e6:	fb00 f202 	mul.w	r2, r0, r2
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	18ca      	adds	r2, r1, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	3320      	adds	r3, #32
 8008712:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <dir_next+0x28>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008722:	d301      	bcc.n	8008728 <dir_next+0x2c>
 8008724:	2304      	movs	r3, #4
 8008726:	e0bb      	b.n	80088a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	899b      	ldrh	r3, [r3, #12]
 800872c:	461a      	mov	r2, r3
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	fbb3 f1f2 	udiv	r1, r3, r2
 8008734:	fb01 f202 	mul.w	r2, r1, r2
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	f040 809d 	bne.w	800887a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10b      	bne.n	800876a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	095b      	lsrs	r3, r3, #5
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	8912      	ldrh	r2, [r2, #8]
 800875a:	4293      	cmp	r3, r2
 800875c:	f0c0 808d 	bcc.w	800887a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	61da      	str	r2, [r3, #28]
 8008766:	2304      	movs	r3, #4
 8008768:	e09a      	b.n	80088a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	899b      	ldrh	r3, [r3, #12]
 800876e:	461a      	mov	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	fbb3 f3f2 	udiv	r3, r3, r2
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	8952      	ldrh	r2, [r2, #10]
 800877a:	3a01      	subs	r2, #1
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d17b      	bne.n	800887a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4619      	mov	r1, r3
 800878a:	4610      	mov	r0, r2
 800878c:	f7ff fc0b 	bl	8007fa6 <get_fat>
 8008790:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d801      	bhi.n	800879c <dir_next+0xa0>
 8008798:	2302      	movs	r3, #2
 800879a:	e081      	b.n	80088a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a2:	d101      	bne.n	80087a8 <dir_next+0xac>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e07b      	b.n	80088a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d359      	bcc.n	8008866 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d104      	bne.n	80087c2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	61da      	str	r2, [r3, #28]
 80087be:	2304      	movs	r3, #4
 80087c0:	e06e      	b.n	80088a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f7ff fe3d 	bl	800844a <create_chain>
 80087d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <dir_next+0xe0>
 80087d8:	2307      	movs	r3, #7
 80087da:	e061      	b.n	80088a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <dir_next+0xea>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e05c      	b.n	80088a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d101      	bne.n	80087f2 <dir_next+0xf6>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e056      	b.n	80088a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f7ff fad6 	bl	8007da4 <sync_window>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <dir_next+0x106>
 80087fe:	2301      	movs	r3, #1
 8008800:	e04e      	b.n	80088a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	899b      	ldrh	r3, [r3, #12]
 800880c:	461a      	mov	r2, r3
 800880e:	2100      	movs	r1, #0
 8008810:	f7ff f8ff 	bl	8007a12 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	6979      	ldr	r1, [r7, #20]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fba4 	bl	8007f68 <clust2sect>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	631a      	str	r2, [r3, #48]	@ 0x30
 8008826:	e012      	b.n	800884e <dir_next+0x152>
						fs->wflag = 1;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7ff fab8 	bl	8007da4 <sync_window>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <dir_next+0x142>
 800883a:	2301      	movs	r3, #1
 800883c:	e030      	b.n	80088a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	3301      	adds	r3, #1
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	631a      	str	r2, [r3, #48]	@ 0x30
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	895b      	ldrh	r3, [r3, #10]
 8008852:	461a      	mov	r2, r3
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4293      	cmp	r3, r2
 8008858:	d3e6      	bcc.n	8008828 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800886c:	6979      	ldr	r1, [r7, #20]
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fb7a 	bl	8007f68 <clust2sect>
 8008874:	4602      	mov	r2, r0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	461a      	mov	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008892:	fb00 f202 	mul.w	r2, r0, r2
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	18ca      	adds	r2, r1, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80088b8:	2100      	movs	r1, #0
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fe95 	bl	80085ea <dir_sdi>
 80088c0:	4603      	mov	r3, r0
 80088c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d12b      	bne.n	8008922 <dir_alloc+0x7a>
		n = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	4619      	mov	r1, r3
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff faa9 	bl	8007e2c <move_window>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d11d      	bne.n	8008920 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2be5      	cmp	r3, #229	@ 0xe5
 80088ec:	d004      	beq.n	80088f8 <dir_alloc+0x50>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3301      	adds	r3, #1
 80088fc:	613b      	str	r3, [r7, #16]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d102      	bne.n	800890c <dir_alloc+0x64>
 8008906:	e00c      	b.n	8008922 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800890c:	2101      	movs	r1, #1
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fef4 	bl	80086fc <dir_next>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0d7      	beq.n	80088ce <dir_alloc+0x26>
 800891e:	e000      	b.n	8008922 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008920:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008922:	7dfb      	ldrb	r3, [r7, #23]
 8008924:	2b04      	cmp	r3, #4
 8008926:	d101      	bne.n	800892c <dir_alloc+0x84>
 8008928:	2307      	movs	r3, #7
 800892a:	75fb      	strb	r3, [r7, #23]
	return res;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	331a      	adds	r3, #26
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe ffc1 	bl	80078cc <ld_word>
 800894a:	4603      	mov	r3, r0
 800894c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d109      	bne.n	800896a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	3314      	adds	r3, #20
 800895a:	4618      	mov	r0, r3
 800895c:	f7fe ffb6 	bl	80078cc <ld_word>
 8008960:	4603      	mov	r3, r0
 8008962:	041b      	lsls	r3, r3, #16
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	331a      	adds	r3, #26
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	b292      	uxth	r2, r2
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe ffd9 	bl	8007942 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d109      	bne.n	80089ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f103 0214 	add.w	r2, r3, #20
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	0c1b      	lsrs	r3, r3, #16
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	4619      	mov	r1, r3
 80089a6:	4610      	mov	r0, r2
 80089a8:	f7fe ffcb 	bl	8007942 <st_word>
	}
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe10 	bl	80085ea <dir_sdi>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <dir_find+0x24>
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	e03e      	b.n	8008a56 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4619      	mov	r1, r3
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7ff fa24 	bl	8007e2c <move_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d12f      	bne.n	8008a4e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <dir_find+0x4e>
 80089fc:	2304      	movs	r3, #4
 80089fe:	75fb      	strb	r3, [r7, #23]
 8008a00:	e028      	b.n	8008a54 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	330b      	adds	r3, #11
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	330b      	adds	r3, #11
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10a      	bne.n	8008a3a <dir_find+0x86>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a18      	ldr	r0, [r3, #32]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3324      	adds	r3, #36	@ 0x24
 8008a2c:	220b      	movs	r2, #11
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f7ff f80a 	bl	8007a48 <mem_cmp>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00b      	beq.n	8008a52 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff fe5d 	bl	80086fc <dir_next>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0c5      	beq.n	80089d8 <dir_find+0x24>
 8008a4c:	e002      	b.n	8008a54 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a4e:	bf00      	nop
 8008a50:	e000      	b.n	8008a54 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a52:	bf00      	nop

	return res;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff ff1a 	bl	80088a8 <dir_alloc>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d11c      	bne.n	8008ab8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	4619      	mov	r1, r3
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff f9d1 	bl	8007e2c <move_window>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d111      	bne.n	8008ab8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe ffb8 	bl	8007a12 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a18      	ldr	r0, [r3, #32]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3324      	adds	r3, #36	@ 0x24
 8008aaa:	220b      	movs	r2, #11
 8008aac:	4619      	mov	r1, r3
 8008aae:	f7fe ff8f 	bl	80079d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3324      	adds	r3, #36	@ 0x24
 8008ad8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008ada:	220b      	movs	r2, #11
 8008adc:	2120      	movs	r1, #32
 8008ade:	68b8      	ldr	r0, [r7, #8]
 8008ae0:	f7fe ff97 	bl	8007a12 <mem_set>
	si = i = 0; ni = 8;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	61fb      	str	r3, [r7, #28]
 8008aec:	2308      	movs	r3, #8
 8008aee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	61fa      	str	r2, [r7, #28]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	4413      	add	r3, r2
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008afe:	7efb      	ldrb	r3, [r7, #27]
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d94e      	bls.n	8008ba2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008b04:	7efb      	ldrb	r3, [r7, #27]
 8008b06:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b08:	d006      	beq.n	8008b18 <create_name+0x54>
 8008b0a:	7efb      	ldrb	r3, [r7, #27]
 8008b0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b0e:	d110      	bne.n	8008b32 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b10:	e002      	b.n	8008b18 <create_name+0x54>
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	3301      	adds	r3, #1
 8008b16:	61fb      	str	r3, [r7, #28]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b22:	d0f6      	beq.n	8008b12 <create_name+0x4e>
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b2e:	d0f0      	beq.n	8008b12 <create_name+0x4e>
			break;
 8008b30:	e038      	b.n	8008ba4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b32:	7efb      	ldrb	r3, [r7, #27]
 8008b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b36:	d003      	beq.n	8008b40 <create_name+0x7c>
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d30c      	bcc.n	8008b5a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2b0b      	cmp	r3, #11
 8008b44:	d002      	beq.n	8008b4c <create_name+0x88>
 8008b46:	7efb      	ldrb	r3, [r7, #27]
 8008b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b4a:	d001      	beq.n	8008b50 <create_name+0x8c>
 8008b4c:	2306      	movs	r3, #6
 8008b4e:	e044      	b.n	8008bda <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b50:	2308      	movs	r3, #8
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	230b      	movs	r3, #11
 8008b56:	617b      	str	r3, [r7, #20]
			continue;
 8008b58:	e022      	b.n	8008ba0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008b5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	da04      	bge.n	8008b6c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008b62:	7efb      	ldrb	r3, [r7, #27]
 8008b64:	3b80      	subs	r3, #128	@ 0x80
 8008b66:	4a1f      	ldr	r2, [pc, #124]	@ (8008be4 <create_name+0x120>)
 8008b68:	5cd3      	ldrb	r3, [r2, r3]
 8008b6a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008b6c:	7efb      	ldrb	r3, [r7, #27]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	481d      	ldr	r0, [pc, #116]	@ (8008be8 <create_name+0x124>)
 8008b72:	f7fe ff90 	bl	8007a96 <chk_chr>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <create_name+0xbc>
 8008b7c:	2306      	movs	r3, #6
 8008b7e:	e02c      	b.n	8008bda <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008b80:	7efb      	ldrb	r3, [r7, #27]
 8008b82:	2b60      	cmp	r3, #96	@ 0x60
 8008b84:	d905      	bls.n	8008b92 <create_name+0xce>
 8008b86:	7efb      	ldrb	r3, [r7, #27]
 8008b88:	2b7a      	cmp	r3, #122	@ 0x7a
 8008b8a:	d802      	bhi.n	8008b92 <create_name+0xce>
 8008b8c:	7efb      	ldrb	r3, [r7, #27]
 8008b8e:	3b20      	subs	r3, #32
 8008b90:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	613a      	str	r2, [r7, #16]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	7efa      	ldrb	r2, [r7, #27]
 8008b9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ba0:	e7a6      	b.n	8008af0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008ba2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	441a      	add	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <create_name+0xf4>
 8008bb4:	2306      	movs	r3, #6
 8008bb6:	e010      	b.n	8008bda <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2be5      	cmp	r3, #229	@ 0xe5
 8008bbe:	d102      	bne.n	8008bc6 <create_name+0x102>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2205      	movs	r2, #5
 8008bc4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008bc6:	7efb      	ldrb	r3, [r7, #27]
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d801      	bhi.n	8008bd0 <create_name+0x10c>
 8008bcc:	2204      	movs	r2, #4
 8008bce:	e000      	b.n	8008bd2 <create_name+0x10e>
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	330b      	adds	r3, #11
 8008bd6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008bd8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	0800e91c 	.word	0x0800e91c
 8008be8:	0800e810 	.word	0x0800e810

08008bec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c00:	e002      	b.n	8008c08 <follow_path+0x1c>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	3301      	adds	r3, #1
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c0e:	d0f8      	beq.n	8008c02 <follow_path+0x16>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c16:	d0f4      	beq.n	8008c02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b1f      	cmp	r3, #31
 8008c24:	d80a      	bhi.n	8008c3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2280      	movs	r2, #128	@ 0x80
 8008c2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008c2e:	2100      	movs	r1, #0
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff fcda 	bl	80085ea <dir_sdi>
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]
 8008c3a:	e048      	b.n	8008cce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ff3f 	bl	8008ac4 <create_name>
 8008c46:	4603      	mov	r3, r0
 8008c48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d139      	bne.n	8008cc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff feaf 	bl	80089b4 <dir_find>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008c60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d12c      	bne.n	8008cc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d127      	bne.n	8008cc8 <follow_path+0xdc>
 8008c78:	2305      	movs	r3, #5
 8008c7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008c7c:	e024      	b.n	8008cc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008c7e:	7afb      	ldrb	r3, [r7, #11]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d121      	bne.n	8008ccc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	799b      	ldrb	r3, [r3, #6]
 8008c8c:	f003 0310 	and.w	r3, r3, #16
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008c94:	2305      	movs	r3, #5
 8008c96:	75fb      	strb	r3, [r7, #23]
 8008c98:	e019      	b.n	8008cce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	8992      	ldrh	r2, [r2, #12]
 8008ca8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cac:	fb00 f202 	mul.w	r2, r0, r2
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff fe3d 	bl	8008936 <ld_clust>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cc2:	e7bb      	b.n	8008c3c <follow_path+0x50>
			if (res != FR_OK) break;
 8008cc4:	bf00      	nop
 8008cc6:	e002      	b.n	8008cce <follow_path+0xe2>
				break;
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008ccc:	bf00      	nop
			}
		}
	}

	return res;
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d031      	beq.n	8008d52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e002      	b.n	8008cfc <get_ldnumber+0x24>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d903      	bls.n	8008d0c <get_ldnumber+0x34>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d0a:	d1f4      	bne.n	8008cf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d12:	d11c      	bne.n	8008d4e <get_ldnumber+0x76>
			tp = *path;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	60fa      	str	r2, [r7, #12]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	3b30      	subs	r3, #48	@ 0x30
 8008d24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b09      	cmp	r3, #9
 8008d2a:	d80e      	bhi.n	8008d4a <get_ldnumber+0x72>
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d10a      	bne.n	8008d4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d107      	bne.n	8008d4a <get_ldnumber+0x72>
					vol = (int)i;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	3301      	adds	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	e002      	b.n	8008d54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d52:	693b      	ldr	r3, [r7, #16]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	70da      	strb	r2, [r3, #3]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff f856 	bl	8007e2c <move_window>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <check_fs+0x2a>
 8008d86:	2304      	movs	r3, #4
 8008d88:	e038      	b.n	8008dfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3334      	adds	r3, #52	@ 0x34
 8008d8e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fd9a 	bl	80078cc <ld_word>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d001      	beq.n	8008da8 <check_fs+0x48>
 8008da4:	2303      	movs	r3, #3
 8008da6:	e029      	b.n	8008dfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008dae:	2be9      	cmp	r3, #233	@ 0xe9
 8008db0:	d009      	beq.n	8008dc6 <check_fs+0x66>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008db8:	2beb      	cmp	r3, #235	@ 0xeb
 8008dba:	d11e      	bne.n	8008dfa <check_fs+0x9a>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008dc2:	2b90      	cmp	r3, #144	@ 0x90
 8008dc4:	d119      	bne.n	8008dfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3334      	adds	r3, #52	@ 0x34
 8008dca:	3336      	adds	r3, #54	@ 0x36
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fd95 	bl	80078fc <ld_dword>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8008e04 <check_fs+0xa4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d101      	bne.n	8008de2 <check_fs+0x82>
 8008dde:	2300      	movs	r3, #0
 8008de0:	e00c      	b.n	8008dfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3334      	adds	r3, #52	@ 0x34
 8008de6:	3352      	adds	r3, #82	@ 0x52
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fd87 	bl	80078fc <ld_dword>
 8008dee:	4603      	mov	r3, r0
 8008df0:	4a05      	ldr	r2, [pc, #20]	@ (8008e08 <check_fs+0xa8>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d101      	bne.n	8008dfa <check_fs+0x9a>
 8008df6:	2300      	movs	r3, #0
 8008df8:	e000      	b.n	8008dfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008dfa:	2302      	movs	r3, #2
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	00544146 	.word	0x00544146
 8008e08:	33544146 	.word	0x33544146

08008e0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b096      	sub	sp, #88	@ 0x58
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ff59 	bl	8008cd8 <get_ldnumber>
 8008e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da01      	bge.n	8008e32 <find_volume+0x26>
 8008e2e:	230b      	movs	r3, #11
 8008e30:	e262      	b.n	80092f8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e32:	4a9f      	ldr	r2, [pc, #636]	@ (80090b0 <find_volume+0x2a4>)
 8008e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <find_volume+0x3a>
 8008e42:	230c      	movs	r3, #12
 8008e44:	e258      	b.n	80092f8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01a      	beq.n	8008e92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5e:	785b      	ldrb	r3, [r3, #1]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fc93 	bl	800778c <disk_status>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10c      	bne.n	8008e92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <find_volume+0x82>
 8008e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008e8a:	230a      	movs	r3, #10
 8008e8c:	e234      	b.n	80092f8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8008e8e:	2300      	movs	r3, #0
 8008e90:	e232      	b.n	80092f8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	2200      	movs	r2, #0
 8008e96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea2:	785b      	ldrb	r3, [r3, #1]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fc8b 	bl	80077c0 <disk_initialize>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e21b      	b.n	80092f8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d007      	beq.n	8008ed6 <find_volume+0xca>
 8008ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008ed2:	230a      	movs	r3, #10
 8008ed4:	e210      	b.n	80092f8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed8:	7858      	ldrb	r0, [r3, #1]
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	330c      	adds	r3, #12
 8008ede:	461a      	mov	r2, r3
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	f7fe fcd5 	bl	8007890 <disk_ioctl>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <find_volume+0xe4>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e203      	b.n	80092f8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	899b      	ldrh	r3, [r3, #12]
 8008ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ef8:	d80d      	bhi.n	8008f16 <find_volume+0x10a>
 8008efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efc:	899b      	ldrh	r3, [r3, #12]
 8008efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f02:	d308      	bcc.n	8008f16 <find_volume+0x10a>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f06:	899b      	ldrh	r3, [r3, #12]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	899b      	ldrh	r3, [r3, #12]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <find_volume+0x10e>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e1ee      	b.n	80092f8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f22:	f7ff ff1d 	bl	8008d60 <check_fs>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d149      	bne.n	8008fc8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f34:	2300      	movs	r3, #0
 8008f36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f38:	e01e      	b.n	8008f78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008f48:	4413      	add	r3, r2
 8008f4a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	3304      	adds	r3, #4
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d006      	beq.n	8008f64 <find_volume+0x158>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	3308      	adds	r3, #8
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fcce 	bl	80078fc <ld_dword>
 8008f60:	4602      	mov	r2, r0
 8008f62:	e000      	b.n	8008f66 <find_volume+0x15a>
 8008f64:	2200      	movs	r2, #0
 8008f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	3358      	adds	r3, #88	@ 0x58
 8008f6c:	443b      	add	r3, r7
 8008f6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f74:	3301      	adds	r3, #1
 8008f76:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d9dd      	bls.n	8008f3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f7e:	2300      	movs	r3, #0
 8008f80:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <find_volume+0x182>
 8008f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	3358      	adds	r3, #88	@ 0x58
 8008f94:	443b      	add	r3, r7
 8008f96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f9a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <find_volume+0x1a2>
 8008fa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fa4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008fa6:	f7ff fedb 	bl	8008d60 <check_fs>
 8008faa:	4603      	mov	r3, r0
 8008fac:	e000      	b.n	8008fb0 <find_volume+0x1a4>
 8008fae:	2303      	movs	r3, #3
 8008fb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d905      	bls.n	8008fc8 <find_volume+0x1bc>
 8008fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d9e2      	bls.n	8008f8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d101      	bne.n	8008fd4 <find_volume+0x1c8>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e191      	b.n	80092f8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d901      	bls.n	8008fe0 <find_volume+0x1d4>
 8008fdc:	230d      	movs	r3, #13
 8008fde:	e18b      	b.n	80092f8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe2:	3334      	adds	r3, #52	@ 0x34
 8008fe4:	330b      	adds	r3, #11
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fc70 	bl	80078cc <ld_word>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	899b      	ldrh	r3, [r3, #12]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d001      	beq.n	8008ffc <find_volume+0x1f0>
 8008ff8:	230d      	movs	r3, #13
 8008ffa:	e17d      	b.n	80092f8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffe:	3334      	adds	r3, #52	@ 0x34
 8009000:	3316      	adds	r3, #22
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fc62 	bl	80078cc <ld_word>
 8009008:	4603      	mov	r3, r0
 800900a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800900c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <find_volume+0x214>
 8009012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009014:	3334      	adds	r3, #52	@ 0x34
 8009016:	3324      	adds	r3, #36	@ 0x24
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fc6f 	bl	80078fc <ld_dword>
 800901e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009024:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009032:	789b      	ldrb	r3, [r3, #2]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d005      	beq.n	8009044 <find_volume+0x238>
 8009038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800903a:	789b      	ldrb	r3, [r3, #2]
 800903c:	2b02      	cmp	r3, #2
 800903e:	d001      	beq.n	8009044 <find_volume+0x238>
 8009040:	230d      	movs	r3, #13
 8009042:	e159      	b.n	80092f8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	461a      	mov	r2, r3
 800904a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800904c:	fb02 f303 	mul.w	r3, r2, r3
 8009050:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009058:	461a      	mov	r2, r3
 800905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	895b      	ldrh	r3, [r3, #10]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <find_volume+0x26c>
 8009066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009068:	895b      	ldrh	r3, [r3, #10]
 800906a:	461a      	mov	r2, r3
 800906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906e:	895b      	ldrh	r3, [r3, #10]
 8009070:	3b01      	subs	r3, #1
 8009072:	4013      	ands	r3, r2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <find_volume+0x270>
 8009078:	230d      	movs	r3, #13
 800907a:	e13d      	b.n	80092f8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800907c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907e:	3334      	adds	r3, #52	@ 0x34
 8009080:	3311      	adds	r3, #17
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fc22 	bl	80078cc <ld_word>
 8009088:	4603      	mov	r3, r0
 800908a:	461a      	mov	r2, r3
 800908c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	891b      	ldrh	r3, [r3, #8]
 8009094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009096:	8992      	ldrh	r2, [r2, #12]
 8009098:	0952      	lsrs	r2, r2, #5
 800909a:	b292      	uxth	r2, r2
 800909c:	fbb3 f1f2 	udiv	r1, r3, r2
 80090a0:	fb01 f202 	mul.w	r2, r1, r2
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <find_volume+0x2a8>
 80090ac:	230d      	movs	r3, #13
 80090ae:	e123      	b.n	80092f8 <find_volume+0x4ec>
 80090b0:	20006db4 	.word	0x20006db4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	3334      	adds	r3, #52	@ 0x34
 80090b8:	3313      	adds	r3, #19
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fc06 	bl	80078cc <ld_word>
 80090c0:	4603      	mov	r3, r0
 80090c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80090c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <find_volume+0x2cc>
 80090ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090cc:	3334      	adds	r3, #52	@ 0x34
 80090ce:	3320      	adds	r3, #32
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe fc13 	bl	80078fc <ld_dword>
 80090d6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090da:	3334      	adds	r3, #52	@ 0x34
 80090dc:	330e      	adds	r3, #14
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fbf4 	bl	80078cc <ld_word>
 80090e4:	4603      	mov	r3, r0
 80090e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80090e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <find_volume+0x2e6>
 80090ee:	230d      	movs	r3, #13
 80090f0:	e102      	b.n	80092f8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80090f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80090f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090f6:	4413      	add	r3, r2
 80090f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090fa:	8911      	ldrh	r1, [r2, #8]
 80090fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090fe:	8992      	ldrh	r2, [r2, #12]
 8009100:	0952      	lsrs	r2, r2, #5
 8009102:	b292      	uxth	r2, r2
 8009104:	fbb1 f2f2 	udiv	r2, r1, r2
 8009108:	b292      	uxth	r2, r2
 800910a:	4413      	add	r3, r2
 800910c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800910e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009112:	429a      	cmp	r2, r3
 8009114:	d201      	bcs.n	800911a <find_volume+0x30e>
 8009116:	230d      	movs	r3, #13
 8009118:	e0ee      	b.n	80092f8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800911a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009122:	8952      	ldrh	r2, [r2, #10]
 8009124:	fbb3 f3f2 	udiv	r3, r3, r2
 8009128:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <find_volume+0x328>
 8009130:	230d      	movs	r3, #13
 8009132:	e0e1      	b.n	80092f8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8009134:	2303      	movs	r3, #3
 8009136:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009140:	4293      	cmp	r3, r2
 8009142:	d802      	bhi.n	800914a <find_volume+0x33e>
 8009144:	2302      	movs	r3, #2
 8009146:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009150:	4293      	cmp	r3, r2
 8009152:	d802      	bhi.n	800915a <find_volume+0x34e>
 8009154:	2301      	movs	r3, #1
 8009156:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	1c9a      	adds	r2, r3, #2
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009164:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009166:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009168:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800916a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800916c:	441a      	add	r2, r3
 800916e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009170:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009172:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009176:	441a      	add	r2, r3
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800917c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009180:	2b03      	cmp	r3, #3
 8009182:	d11e      	bne.n	80091c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	3334      	adds	r3, #52	@ 0x34
 8009188:	332a      	adds	r3, #42	@ 0x2a
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fb9e 	bl	80078cc <ld_word>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <find_volume+0x38e>
 8009196:	230d      	movs	r3, #13
 8009198:	e0ae      	b.n	80092f8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	891b      	ldrh	r3, [r3, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <find_volume+0x39a>
 80091a2:	230d      	movs	r3, #13
 80091a4:	e0a8      	b.n	80092f8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	3334      	adds	r3, #52	@ 0x34
 80091aa:	332c      	adds	r3, #44	@ 0x2c
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe fba5 	bl	80078fc <ld_dword>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80091b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	647b      	str	r3, [r7, #68]	@ 0x44
 80091c0:	e01f      	b.n	8009202 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	891b      	ldrh	r3, [r3, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <find_volume+0x3c2>
 80091ca:	230d      	movs	r3, #13
 80091cc:	e094      	b.n	80092f8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d4:	441a      	add	r2, r3
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d103      	bne.n	80091ea <find_volume+0x3de>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	e00a      	b.n	8009200 <find_volume+0x3f4>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	4613      	mov	r3, r2
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	4413      	add	r3, r2
 80091f4:	085a      	lsrs	r2, r3, #1
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009200:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	69da      	ldr	r2, [r3, #28]
 8009206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	4619      	mov	r1, r3
 800920c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920e:	440b      	add	r3, r1
 8009210:	3b01      	subs	r3, #1
 8009212:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009214:	8989      	ldrh	r1, [r1, #12]
 8009216:	fbb3 f3f1 	udiv	r3, r3, r1
 800921a:	429a      	cmp	r2, r3
 800921c:	d201      	bcs.n	8009222 <find_volume+0x416>
 800921e:	230d      	movs	r3, #13
 8009220:	e06a      	b.n	80092f8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009224:	f04f 32ff 	mov.w	r2, #4294967295
 8009228:	615a      	str	r2, [r3, #20]
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	695a      	ldr	r2, [r3, #20]
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009234:	2280      	movs	r2, #128	@ 0x80
 8009236:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009238:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800923c:	2b03      	cmp	r3, #3
 800923e:	d149      	bne.n	80092d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	3334      	adds	r3, #52	@ 0x34
 8009244:	3330      	adds	r3, #48	@ 0x30
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fb40 	bl	80078cc <ld_word>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d140      	bne.n	80092d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009254:	3301      	adds	r3, #1
 8009256:	4619      	mov	r1, r3
 8009258:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800925a:	f7fe fde7 	bl	8007e2c <move_window>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d137      	bne.n	80092d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009266:	2200      	movs	r2, #0
 8009268:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	3334      	adds	r3, #52	@ 0x34
 800926e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fb2a 	bl	80078cc <ld_word>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009280:	429a      	cmp	r2, r3
 8009282:	d127      	bne.n	80092d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	3334      	adds	r3, #52	@ 0x34
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fb37 	bl	80078fc <ld_dword>
 800928e:	4603      	mov	r3, r0
 8009290:	4a1b      	ldr	r2, [pc, #108]	@ (8009300 <find_volume+0x4f4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d11e      	bne.n	80092d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009298:	3334      	adds	r3, #52	@ 0x34
 800929a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fb2c 	bl	80078fc <ld_dword>
 80092a4:	4603      	mov	r3, r0
 80092a6:	4a17      	ldr	r2, [pc, #92]	@ (8009304 <find_volume+0x4f8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d113      	bne.n	80092d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80092ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ae:	3334      	adds	r3, #52	@ 0x34
 80092b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe fb21 	bl	80078fc <ld_dword>
 80092ba:	4602      	mov	r2, r0
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c2:	3334      	adds	r3, #52	@ 0x34
 80092c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe fb17 	bl	80078fc <ld_dword>
 80092ce:	4602      	mov	r2, r0
 80092d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80092d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80092da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <find_volume+0x4fc>)
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	4b08      	ldr	r3, [pc, #32]	@ (8009308 <find_volume+0x4fc>)
 80092e6:	801a      	strh	r2, [r3, #0]
 80092e8:	4b07      	ldr	r3, [pc, #28]	@ (8009308 <find_volume+0x4fc>)
 80092ea:	881a      	ldrh	r2, [r3, #0]
 80092ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80092f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80092f2:	f7fe fd33 	bl	8007d5c <clear_lock>
#endif
	return FR_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3758      	adds	r7, #88	@ 0x58
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	41615252 	.word	0x41615252
 8009304:	61417272 	.word	0x61417272
 8009308:	20006db8 	.word	0x20006db8

0800930c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009316:	2309      	movs	r3, #9
 8009318:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01c      	beq.n	800935a <validate+0x4e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d018      	beq.n	800935a <validate+0x4e>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d013      	beq.n	800935a <validate+0x4e>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	889a      	ldrh	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	88db      	ldrh	r3, [r3, #6]
 800933c:	429a      	cmp	r2, r3
 800933e:	d10c      	bne.n	800935a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe fa20 	bl	800778c <disk_status>
 800934c:	4603      	mov	r3, r0
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <validate+0x4e>
			res = FR_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <validate+0x5a>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	e000      	b.n	8009368 <validate+0x5c>
 8009366:	2300      	movs	r3, #0
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	6013      	str	r3, [r2, #0]
	return res;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800938a:	f107 0310 	add.w	r3, r7, #16
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fca2 	bl	8008cd8 <get_ldnumber>
 8009394:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	2b00      	cmp	r3, #0
 800939a:	da01      	bge.n	80093a0 <f_mount+0x28>
 800939c:	230b      	movs	r3, #11
 800939e:	e02b      	b.n	80093f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80093a0:	4a17      	ldr	r2, [pc, #92]	@ (8009400 <f_mount+0x88>)
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80093b0:	69b8      	ldr	r0, [r7, #24]
 80093b2:	f7fe fcd3 	bl	8007d5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	490d      	ldr	r1, [pc, #52]	@ (8009400 <f_mount+0x88>)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <f_mount+0x66>
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d001      	beq.n	80093e2 <f_mount+0x6a>
 80093de:	2300      	movs	r3, #0
 80093e0:	e00a      	b.n	80093f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80093e2:	f107 010c 	add.w	r1, r7, #12
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	2200      	movs	r2, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fd0d 	bl	8008e0c <find_volume>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3720      	adds	r7, #32
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20006db4 	.word	0x20006db4

08009404 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b098      	sub	sp, #96	@ 0x60
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <f_open+0x18>
 8009418:	2309      	movs	r3, #9
 800941a:	e1b7      	b.n	800978c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009422:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009424:	79fa      	ldrb	r2, [r7, #7]
 8009426:	f107 0110 	add.w	r1, r7, #16
 800942a:	f107 0308 	add.w	r3, r7, #8
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff fcec 	bl	8008e0c <find_volume>
 8009434:	4603      	mov	r3, r0
 8009436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800943a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 819b 	bne.w	800977a <f_open+0x376>
		dj.obj.fs = fs;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	f107 0314 	add.w	r3, r7, #20
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7ff fbcb 	bl	8008bec <follow_path>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800945c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009460:	2b00      	cmp	r3, #0
 8009462:	d118      	bne.n	8009496 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009464:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009468:	b25b      	sxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	da03      	bge.n	8009476 <f_open+0x72>
				res = FR_INVALID_NAME;
 800946e:	2306      	movs	r3, #6
 8009470:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009474:	e00f      	b.n	8009496 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b01      	cmp	r3, #1
 800947a:	bf8c      	ite	hi
 800947c:	2301      	movhi	r3, #1
 800947e:	2300      	movls	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	461a      	mov	r2, r3
 8009484:	f107 0314 	add.w	r3, r7, #20
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fb1e 	bl	8007acc <chk_lock>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	f003 031c 	and.w	r3, r3, #28
 800949c:	2b00      	cmp	r3, #0
 800949e:	d07f      	beq.n	80095a0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80094a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d017      	beq.n	80094d8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80094a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d10e      	bne.n	80094ce <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80094b0:	f7fe fb68 	bl	8007b84 <enq_lock>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d006      	beq.n	80094c8 <f_open+0xc4>
 80094ba:	f107 0314 	add.w	r3, r7, #20
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff facd 	bl	8008a5e <dir_register>
 80094c4:	4603      	mov	r3, r0
 80094c6:	e000      	b.n	80094ca <f_open+0xc6>
 80094c8:	2312      	movs	r3, #18
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	f043 0308 	orr.w	r3, r3, #8
 80094d4:	71fb      	strb	r3, [r7, #7]
 80094d6:	e010      	b.n	80094fa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80094d8:	7ebb      	ldrb	r3, [r7, #26]
 80094da:	f003 0311 	and.w	r3, r3, #17
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <f_open+0xe6>
					res = FR_DENIED;
 80094e2:	2307      	movs	r3, #7
 80094e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80094e8:	e007      	b.n	80094fa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d002      	beq.n	80094fa <f_open+0xf6>
 80094f4:	2308      	movs	r3, #8
 80094f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80094fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d168      	bne.n	80095d4 <f_open+0x1d0>
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	f003 0308 	and.w	r3, r3, #8
 8009508:	2b00      	cmp	r3, #0
 800950a:	d063      	beq.n	80095d4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800950c:	f7fe f8e0 	bl	80076d0 <get_fattime>
 8009510:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	330e      	adds	r3, #14
 8009516:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009518:	4618      	mov	r0, r3
 800951a:	f7fe fa2d 	bl	8007978 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009520:	3316      	adds	r3, #22
 8009522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fa27 	bl	8007978 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800952a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800952c:	330b      	adds	r3, #11
 800952e:	2220      	movs	r2, #32
 8009530:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009536:	4611      	mov	r1, r2
 8009538:	4618      	mov	r0, r3
 800953a:	f7ff f9fc 	bl	8008936 <ld_clust>
 800953e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009544:	2200      	movs	r2, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff fa14 	bl	8008974 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800954c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954e:	331c      	adds	r3, #28
 8009550:	2100      	movs	r1, #0
 8009552:	4618      	mov	r0, r3
 8009554:	f7fe fa10 	bl	8007978 <st_dword>
					fs->wflag = 1;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2201      	movs	r2, #1
 800955c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800955e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d037      	beq.n	80095d4 <f_open+0x1d0>
						dw = fs->winsect;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009568:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800956a:	f107 0314 	add.w	r3, r7, #20
 800956e:	2200      	movs	r2, #0
 8009570:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe ff04 	bl	8008380 <remove_chain>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800957e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009582:	2b00      	cmp	r3, #0
 8009584:	d126      	bne.n	80095d4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe fc4e 	bl	8007e2c <move_window>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800959a:	3a01      	subs	r2, #1
 800959c:	611a      	str	r2, [r3, #16]
 800959e:	e019      	b.n	80095d4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80095a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d115      	bne.n	80095d4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80095a8:	7ebb      	ldrb	r3, [r7, #26]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <f_open+0x1b6>
					res = FR_NO_FILE;
 80095b2:	2304      	movs	r3, #4
 80095b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80095b8:	e00c      	b.n	80095d4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	f003 0302 	and.w	r3, r3, #2
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d007      	beq.n	80095d4 <f_open+0x1d0>
 80095c4:	7ebb      	ldrb	r3, [r7, #26]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <f_open+0x1d0>
						res = FR_DENIED;
 80095ce:	2307      	movs	r3, #7
 80095d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80095d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d126      	bne.n	800962a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095dc:	79fb      	ldrb	r3, [r7, #7]
 80095de:	f003 0308 	and.w	r3, r3, #8
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80095e6:	79fb      	ldrb	r3, [r7, #7]
 80095e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80095f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	bf8c      	ite	hi
 8009602:	2301      	movhi	r3, #1
 8009604:	2300      	movls	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	f107 0314 	add.w	r3, r7, #20
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fad9 	bl	8007bc8 <inc_lock>
 8009616:	4602      	mov	r2, r0
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d102      	bne.n	800962a <f_open+0x226>
 8009624:	2302      	movs	r3, #2
 8009626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800962a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 80a3 	bne.w	800977a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009638:	4611      	mov	r1, r2
 800963a:	4618      	mov	r0, r3
 800963c:	f7ff f97b 	bl	8008936 <ld_clust>
 8009640:	4602      	mov	r2, r0
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009648:	331c      	adds	r3, #28
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe f956 	bl	80078fc <ld_dword>
 8009650:	4602      	mov	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	88da      	ldrh	r2, [r3, #6]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	79fa      	ldrb	r2, [r7, #7]
 800966e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3330      	adds	r3, #48	@ 0x30
 8009686:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800968a:	2100      	movs	r1, #0
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe f9c0 	bl	8007a12 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d06e      	beq.n	800977a <f_open+0x376>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d06a      	beq.n	800977a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	895b      	ldrh	r3, [r3, #10]
 80096b0:	461a      	mov	r2, r3
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	899b      	ldrh	r3, [r3, #12]
 80096b6:	fb02 f303 	mul.w	r3, r2, r3
 80096ba:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80096c8:	e016      	b.n	80096f8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fc69 	bl	8007fa6 <get_fat>
 80096d4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80096d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d802      	bhi.n	80096e2 <f_open+0x2de>
 80096dc:	2302      	movs	r3, #2
 80096de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80096e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d102      	bne.n	80096f0 <f_open+0x2ec>
 80096ea:	2301      	movs	r3, #1
 80096ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80096f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <f_open+0x304>
 8009700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009704:	429a      	cmp	r2, r3
 8009706:	d8e0      	bhi.n	80096ca <f_open+0x2c6>
				}
				fp->clust = clst;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800970c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800970e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009712:	2b00      	cmp	r3, #0
 8009714:	d131      	bne.n	800977a <f_open+0x376>
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	899b      	ldrh	r3, [r3, #12]
 800971a:	461a      	mov	r2, r3
 800971c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800971e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009722:	fb01 f202 	mul.w	r2, r1, r2
 8009726:	1a9b      	subs	r3, r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d026      	beq.n	800977a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009730:	4618      	mov	r0, r3
 8009732:	f7fe fc19 	bl	8007f68 <clust2sect>
 8009736:	6478      	str	r0, [r7, #68]	@ 0x44
 8009738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973a:	2b00      	cmp	r3, #0
 800973c:	d103      	bne.n	8009746 <f_open+0x342>
						res = FR_INT_ERR;
 800973e:	2302      	movs	r3, #2
 8009740:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009744:	e019      	b.n	800977a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	899b      	ldrh	r3, [r3, #12]
 800974a:	461a      	mov	r2, r3
 800974c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800974e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009754:	441a      	add	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	7858      	ldrb	r0, [r3, #1]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1a      	ldr	r2, [r3, #32]
 8009768:	2301      	movs	r3, #1
 800976a:	f7fe f851 	bl	8007810 <disk_read>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <f_open+0x376>
 8009774:	2301      	movs	r3, #1
 8009776:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800977a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <f_open+0x384>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009788:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800978c:	4618      	mov	r0, r3
 800978e:	3760      	adds	r7, #96	@ 0x60
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08c      	sub	sp, #48	@ 0x30
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f107 0210 	add.w	r2, r7, #16
 80097b2:	4611      	mov	r1, r2
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff fda9 	bl	800930c <validate>
 80097ba:	4603      	mov	r3, r0
 80097bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80097c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d107      	bne.n	80097d8 <f_write+0x44>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	7d5b      	ldrb	r3, [r3, #21]
 80097cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80097d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <f_write+0x4a>
 80097d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80097dc:	e16a      	b.n	8009ab4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	7d1b      	ldrb	r3, [r3, #20]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <f_write+0x5a>
 80097ea:	2307      	movs	r3, #7
 80097ec:	e162      	b.n	8009ab4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	f080 814c 	bcs.w	8009a98 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	43db      	mvns	r3, r3
 8009806:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009808:	e146      	b.n	8009a98 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	8992      	ldrh	r2, [r2, #12]
 8009812:	fbb3 f1f2 	udiv	r1, r3, r2
 8009816:	fb01 f202 	mul.w	r2, r1, r2
 800981a:	1a9b      	subs	r3, r3, r2
 800981c:	2b00      	cmp	r3, #0
 800981e:	f040 80f1 	bne.w	8009a04 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	8992      	ldrh	r2, [r2, #12]
 800982a:	fbb3 f3f2 	udiv	r3, r3, r2
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	8952      	ldrh	r2, [r2, #10]
 8009832:	3a01      	subs	r2, #1
 8009834:	4013      	ands	r3, r2
 8009836:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d143      	bne.n	80098c6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d11a      	bne.n	8009888 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fdf7 	bl	800844a <create_chain>
 800985c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800985e:	e013      	b.n	8009888 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d007      	beq.n	8009878 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	699b      	ldr	r3, [r3, #24]
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7fe fe83 	bl	800857a <clmt_clust>
 8009874:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009876:	e007      	b.n	8009888 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe fde2 	bl	800844a <create_chain>
 8009886:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8109 	beq.w	8009aa2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009892:	2b01      	cmp	r3, #1
 8009894:	d104      	bne.n	80098a0 <f_write+0x10c>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2202      	movs	r2, #2
 800989a:	755a      	strb	r2, [r3, #21]
 800989c:	2302      	movs	r3, #2
 800989e:	e109      	b.n	8009ab4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a6:	d104      	bne.n	80098b2 <f_write+0x11e>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	755a      	strb	r2, [r3, #21]
 80098ae:	2301      	movs	r3, #1
 80098b0:	e100      	b.n	8009ab4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098b6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <f_write+0x132>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da18      	bge.n	8009902 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	7858      	ldrb	r0, [r3, #1]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a1a      	ldr	r2, [r3, #32]
 80098de:	2301      	movs	r3, #1
 80098e0:	f7fd ffb6 	bl	8007850 <disk_write>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d004      	beq.n	80098f4 <f_write+0x160>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2201      	movs	r2, #1
 80098ee:	755a      	strb	r2, [r3, #21]
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0df      	b.n	8009ab4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	7d1b      	ldrb	r3, [r3, #20]
 80098f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fe fb2c 	bl	8007f68 <clust2sect>
 8009910:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d104      	bne.n	8009922 <f_write+0x18e>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2202      	movs	r2, #2
 800991c:	755a      	strb	r2, [r3, #21]
 800991e:	2302      	movs	r3, #2
 8009920:	e0c8      	b.n	8009ab4 <f_write+0x320>
			sect += csect;
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	4413      	add	r3, r2
 8009928:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	899b      	ldrh	r3, [r3, #12]
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	fbb3 f3f2 	udiv	r3, r3, r2
 8009936:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d043      	beq.n	80099c6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800993e:	69ba      	ldr	r2, [r7, #24]
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	4413      	add	r3, r2
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	8952      	ldrh	r2, [r2, #10]
 8009948:	4293      	cmp	r3, r2
 800994a:	d905      	bls.n	8009958 <f_write+0x1c4>
					cc = fs->csize - csect;
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	895b      	ldrh	r3, [r3, #10]
 8009950:	461a      	mov	r2, r3
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	7858      	ldrb	r0, [r3, #1]
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	69f9      	ldr	r1, [r7, #28]
 8009962:	f7fd ff75 	bl	8007850 <disk_write>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <f_write+0x1e2>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	755a      	strb	r2, [r3, #21]
 8009972:	2301      	movs	r3, #1
 8009974:	e09e      	b.n	8009ab4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1a      	ldr	r2, [r3, #32]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	6a3a      	ldr	r2, [r7, #32]
 8009980:	429a      	cmp	r2, r3
 8009982:	d918      	bls.n	80099b6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6a1a      	ldr	r2, [r3, #32]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	8992      	ldrh	r2, [r2, #12]
 8009996:	fb02 f303 	mul.w	r3, r2, r3
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	18d1      	adds	r1, r2, r3
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	899b      	ldrh	r3, [r3, #12]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f7fe f814 	bl	80079d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	7d1b      	ldrb	r3, [r3, #20]
 80099ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	899b      	ldrh	r3, [r3, #12]
 80099ba:	461a      	mov	r2, r3
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	fb02 f303 	mul.w	r3, r2, r3
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80099c4:	e04b      	b.n	8009a5e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d016      	beq.n	80099fe <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099d8:	429a      	cmp	r2, r3
 80099da:	d210      	bcs.n	80099fe <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	7858      	ldrb	r0, [r3, #1]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099e6:	2301      	movs	r3, #1
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	f7fd ff11 	bl	8007810 <disk_read>
 80099ee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	755a      	strb	r2, [r3, #21]
 80099fa:	2301      	movs	r3, #1
 80099fc:	e05a      	b.n	8009ab4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	899b      	ldrh	r3, [r3, #12]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	8992      	ldrh	r2, [r2, #12]
 8009a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a16:	fb01 f202 	mul.w	r2, r1, r2
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	1ac3      	subs	r3, r0, r3
 8009a1e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d901      	bls.n	8009a2c <f_write+0x298>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	8992      	ldrh	r2, [r2, #12]
 8009a3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a3e:	fb00 f202 	mul.w	r2, r0, r2
 8009a42:	1a9b      	subs	r3, r3, r2
 8009a44:	440b      	add	r3, r1
 8009a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a48:	69f9      	ldr	r1, [r7, #28]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fd ffc0 	bl	80079d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7d1b      	ldrb	r3, [r3, #20]
 8009a54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a58:	b2da      	uxtb	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	4413      	add	r3, r2
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	619a      	str	r2, [r3, #24]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	bf38      	it	cc
 8009a7e:	461a      	movcc	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	60da      	str	r2, [r3, #12]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	441a      	add	r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f47f aeb5 	bne.w	800980a <f_write+0x76>
 8009aa0:	e000      	b.n	8009aa4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009aa2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	7d1b      	ldrb	r3, [r3, #20]
 8009aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3730      	adds	r7, #48	@ 0x30
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f107 0208 	add.w	r2, r7, #8
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7ff fc1d 	bl	800930c <validate>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d168      	bne.n	8009bae <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7d1b      	ldrb	r3, [r3, #20]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d062      	beq.n	8009bae <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	7d1b      	ldrb	r3, [r3, #20]
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da15      	bge.n	8009b1e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	7858      	ldrb	r0, [r3, #1]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1a      	ldr	r2, [r3, #32]
 8009b00:	2301      	movs	r3, #1
 8009b02:	f7fd fea5 	bl	8007850 <disk_write>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <f_sync+0x54>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e04f      	b.n	8009bb0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7d1b      	ldrb	r3, [r3, #20]
 8009b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b18:	b2da      	uxtb	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009b1e:	f7fd fdd7 	bl	80076d0 <get_fattime>
 8009b22:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	f7fe f97d 	bl	8007e2c <move_window>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d138      	bne.n	8009bae <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b40:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	330b      	adds	r3, #11
 8009b46:	781a      	ldrb	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	330b      	adds	r3, #11
 8009b4c:	f042 0220 	orr.w	r2, r2, #32
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	68f9      	ldr	r1, [r7, #12]
 8009b60:	f7fe ff08 	bl	8008974 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f103 021c 	add.w	r2, r3, #28
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fd ff01 	bl	8007978 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3316      	adds	r3, #22
 8009b7a:	6939      	ldr	r1, [r7, #16]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd fefb 	bl	8007978 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3312      	adds	r3, #18
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fd feda 	bl	8007942 <st_word>
					fs->wflag = 1;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2201      	movs	r2, #1
 8009b92:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe f976 	bl	8007e88 <sync_fs>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	7d1b      	ldrb	r3, [r3, #20]
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff ff7b 	bl	8009abc <f_sync>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d118      	bne.n	8009c02 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f107 0208 	add.w	r2, r7, #8
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff fb97 	bl	800930c <validate>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10c      	bne.n	8009c02 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe f879 	bl	8007ce4 <dec_lock>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b092      	sub	sp, #72	@ 0x48
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009c18:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009c1c:	f107 030c 	add.w	r3, r7, #12
 8009c20:	2200      	movs	r2, #0
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff f8f2 	bl	8008e0c <find_volume>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009c2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f040 8099 	bne.w	8009d6a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	695a      	ldr	r2, [r3, #20]
 8009c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	3b02      	subs	r3, #2
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d804      	bhi.n	8009c56 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	695a      	ldr	r2, [r3, #20]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e089      	b.n	8009d6a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d128      	bne.n	8009cb4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009c62:	2302      	movs	r3, #2
 8009c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009c6a:	f107 0314 	add.w	r3, r7, #20
 8009c6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe f998 	bl	8007fa6 <get_fat>
 8009c76:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7e:	d103      	bne.n	8009c88 <f_getfree+0x7c>
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c86:	e063      	b.n	8009d50 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d103      	bne.n	8009c96 <f_getfree+0x8a>
 8009c8e:	2302      	movs	r3, #2
 8009c90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c94:	e05c      	b.n	8009d50 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <f_getfree+0x96>
 8009c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d3db      	bcc.n	8009c6a <f_getfree+0x5e>
 8009cb2:	e04d      	b.n	8009d50 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8009cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d113      	bne.n	8009cf6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f7fe f8a8 	bl	8007e2c <move_window>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8009ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d131      	bne.n	8009d4e <f_getfree+0x142>
							p = fs->win;
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	3334      	adds	r3, #52	@ 0x34
 8009cee:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf2:	899b      	ldrh	r3, [r3, #12]
 8009cf4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d10f      	bne.n	8009d1e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009cfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d00:	f7fd fde4 	bl	80078cc <ld_word>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <f_getfree+0x104>
 8009d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	3302      	adds	r3, #2
 8009d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	3b02      	subs	r3, #2
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d1c:	e010      	b.n	8009d40 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d20:	f7fd fdec 	bl	80078fc <ld_dword>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <f_getfree+0x128>
 8009d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d30:	3301      	adds	r3, #1
 8009d32:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	3304      	adds	r3, #4
 8009d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8009d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d42:	3b01      	subs	r3, #1
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1bd      	bne.n	8009cc8 <f_getfree+0xbc>
 8009d4c:	e000      	b.n	8009d50 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009d4e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d54:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d5a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	791a      	ldrb	r2, [r3, #4]
 8009d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d62:	f042 0201 	orr.w	r2, r2, #1
 8009d66:	b2d2      	uxtb	r2, r2
 8009d68:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3748      	adds	r7, #72	@ 0x48
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d86:	2301      	movs	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009d90:	7a5b      	ldrb	r3, [r3, #9]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d131      	bne.n	8009dfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d98:	4b1c      	ldr	r3, [pc, #112]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009d9a:	7a5b      	ldrb	r3, [r3, #9]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4b1a      	ldr	r3, [pc, #104]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009da2:	2100      	movs	r1, #0
 8009da4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009da6:	4b19      	ldr	r3, [pc, #100]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009da8:	7a5b      	ldrb	r3, [r3, #9]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	4a17      	ldr	r2, [pc, #92]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009db6:	4b15      	ldr	r3, [pc, #84]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009db8:	7a5b      	ldrb	r3, [r3, #9]
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b13      	ldr	r3, [pc, #76]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	79fa      	ldrb	r2, [r7, #7]
 8009dc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009dc6:	4b11      	ldr	r3, [pc, #68]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dc8:	7a5b      	ldrb	r3, [r3, #9]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	b2d1      	uxtb	r1, r2
 8009dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dd2:	7251      	strb	r1, [r2, #9]
 8009dd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009dd6:	7dbb      	ldrb	r3, [r7, #22]
 8009dd8:	3330      	adds	r3, #48	@ 0x30
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	3301      	adds	r3, #1
 8009de4:	223a      	movs	r2, #58	@ 0x3a
 8009de6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3302      	adds	r3, #2
 8009dec:	222f      	movs	r2, #47	@ 0x2f
 8009dee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	3303      	adds	r3, #3
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20006ddc 	.word	0x20006ddc

08009e10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ffaa 	bl	8009d78 <FATFS_LinkDriverEx>
 8009e24:	4603      	mov	r3, r0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <__cvt>:
 8009e2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e32:	ec57 6b10 	vmov	r6, r7, d0
 8009e36:	2f00      	cmp	r7, #0
 8009e38:	460c      	mov	r4, r1
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	463b      	mov	r3, r7
 8009e3e:	bfbb      	ittet	lt
 8009e40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e44:	461f      	movlt	r7, r3
 8009e46:	2300      	movge	r3, #0
 8009e48:	232d      	movlt	r3, #45	@ 0x2d
 8009e4a:	700b      	strb	r3, [r1, #0]
 8009e4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e52:	4691      	mov	r9, r2
 8009e54:	f023 0820 	bic.w	r8, r3, #32
 8009e58:	bfbc      	itt	lt
 8009e5a:	4632      	movlt	r2, r6
 8009e5c:	4616      	movlt	r6, r2
 8009e5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e62:	d005      	beq.n	8009e70 <__cvt+0x42>
 8009e64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e68:	d100      	bne.n	8009e6c <__cvt+0x3e>
 8009e6a:	3401      	adds	r4, #1
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	e000      	b.n	8009e72 <__cvt+0x44>
 8009e70:	2103      	movs	r1, #3
 8009e72:	ab03      	add	r3, sp, #12
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	ab02      	add	r3, sp, #8
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	ec47 6b10 	vmov	d0, r6, r7
 8009e7e:	4653      	mov	r3, sl
 8009e80:	4622      	mov	r2, r4
 8009e82:	f001 f8b5 	bl	800aff0 <_dtoa_r>
 8009e86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e8a:	4605      	mov	r5, r0
 8009e8c:	d119      	bne.n	8009ec2 <__cvt+0x94>
 8009e8e:	f019 0f01 	tst.w	r9, #1
 8009e92:	d00e      	beq.n	8009eb2 <__cvt+0x84>
 8009e94:	eb00 0904 	add.w	r9, r0, r4
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	f7f6 fdea 	bl	8000a78 <__aeabi_dcmpeq>
 8009ea4:	b108      	cbz	r0, 8009eaa <__cvt+0x7c>
 8009ea6:	f8cd 900c 	str.w	r9, [sp, #12]
 8009eaa:	2230      	movs	r2, #48	@ 0x30
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	454b      	cmp	r3, r9
 8009eb0:	d31e      	bcc.n	8009ef0 <__cvt+0xc2>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eb6:	1b5b      	subs	r3, r3, r5
 8009eb8:	4628      	mov	r0, r5
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	b004      	add	sp, #16
 8009ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ec6:	eb00 0904 	add.w	r9, r0, r4
 8009eca:	d1e5      	bne.n	8009e98 <__cvt+0x6a>
 8009ecc:	7803      	ldrb	r3, [r0, #0]
 8009ece:	2b30      	cmp	r3, #48	@ 0x30
 8009ed0:	d10a      	bne.n	8009ee8 <__cvt+0xba>
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fdcd 	bl	8000a78 <__aeabi_dcmpeq>
 8009ede:	b918      	cbnz	r0, 8009ee8 <__cvt+0xba>
 8009ee0:	f1c4 0401 	rsb	r4, r4, #1
 8009ee4:	f8ca 4000 	str.w	r4, [sl]
 8009ee8:	f8da 3000 	ldr.w	r3, [sl]
 8009eec:	4499      	add	r9, r3
 8009eee:	e7d3      	b.n	8009e98 <__cvt+0x6a>
 8009ef0:	1c59      	adds	r1, r3, #1
 8009ef2:	9103      	str	r1, [sp, #12]
 8009ef4:	701a      	strb	r2, [r3, #0]
 8009ef6:	e7d9      	b.n	8009eac <__cvt+0x7e>

08009ef8 <__exponent>:
 8009ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009efa:	2900      	cmp	r1, #0
 8009efc:	bfba      	itte	lt
 8009efe:	4249      	neglt	r1, r1
 8009f00:	232d      	movlt	r3, #45	@ 0x2d
 8009f02:	232b      	movge	r3, #43	@ 0x2b
 8009f04:	2909      	cmp	r1, #9
 8009f06:	7002      	strb	r2, [r0, #0]
 8009f08:	7043      	strb	r3, [r0, #1]
 8009f0a:	dd29      	ble.n	8009f60 <__exponent+0x68>
 8009f0c:	f10d 0307 	add.w	r3, sp, #7
 8009f10:	461d      	mov	r5, r3
 8009f12:	270a      	movs	r7, #10
 8009f14:	461a      	mov	r2, r3
 8009f16:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f1a:	fb07 1416 	mls	r4, r7, r6, r1
 8009f1e:	3430      	adds	r4, #48	@ 0x30
 8009f20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f24:	460c      	mov	r4, r1
 8009f26:	2c63      	cmp	r4, #99	@ 0x63
 8009f28:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	dcf1      	bgt.n	8009f14 <__exponent+0x1c>
 8009f30:	3130      	adds	r1, #48	@ 0x30
 8009f32:	1e94      	subs	r4, r2, #2
 8009f34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f38:	1c41      	adds	r1, r0, #1
 8009f3a:	4623      	mov	r3, r4
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	d30a      	bcc.n	8009f56 <__exponent+0x5e>
 8009f40:	f10d 0309 	add.w	r3, sp, #9
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	42ac      	cmp	r4, r5
 8009f48:	bf88      	it	hi
 8009f4a:	2300      	movhi	r3, #0
 8009f4c:	3302      	adds	r3, #2
 8009f4e:	4403      	add	r3, r0
 8009f50:	1a18      	subs	r0, r3, r0
 8009f52:	b003      	add	sp, #12
 8009f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f5e:	e7ed      	b.n	8009f3c <__exponent+0x44>
 8009f60:	2330      	movs	r3, #48	@ 0x30
 8009f62:	3130      	adds	r1, #48	@ 0x30
 8009f64:	7083      	strb	r3, [r0, #2]
 8009f66:	70c1      	strb	r1, [r0, #3]
 8009f68:	1d03      	adds	r3, r0, #4
 8009f6a:	e7f1      	b.n	8009f50 <__exponent+0x58>

08009f6c <_printf_float>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b08d      	sub	sp, #52	@ 0x34
 8009f72:	460c      	mov	r4, r1
 8009f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f78:	4616      	mov	r6, r2
 8009f7a:	461f      	mov	r7, r3
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	f000 ff23 	bl	800adc8 <_localeconv_r>
 8009f82:	6803      	ldr	r3, [r0, #0]
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7f6 f94a 	bl	8000220 <strlen>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	9005      	str	r0, [sp, #20]
 8009f96:	3307      	adds	r3, #7
 8009f98:	f023 0307 	bic.w	r3, r3, #7
 8009f9c:	f103 0208 	add.w	r2, r3, #8
 8009fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8009fa8:	f8c8 2000 	str.w	r2, [r8]
 8009fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fc2:	4b9c      	ldr	r3, [pc, #624]	@ (800a234 <_printf_float+0x2c8>)
 8009fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc8:	f7f6 fd88 	bl	8000adc <__aeabi_dcmpun>
 8009fcc:	bb70      	cbnz	r0, 800a02c <_printf_float+0xc0>
 8009fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fd2:	4b98      	ldr	r3, [pc, #608]	@ (800a234 <_printf_float+0x2c8>)
 8009fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd8:	f7f6 fd62 	bl	8000aa0 <__aeabi_dcmple>
 8009fdc:	bb30      	cbnz	r0, 800a02c <_printf_float+0xc0>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	f7f6 fd51 	bl	8000a8c <__aeabi_dcmplt>
 8009fea:	b110      	cbz	r0, 8009ff2 <_printf_float+0x86>
 8009fec:	232d      	movs	r3, #45	@ 0x2d
 8009fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff2:	4a91      	ldr	r2, [pc, #580]	@ (800a238 <_printf_float+0x2cc>)
 8009ff4:	4b91      	ldr	r3, [pc, #580]	@ (800a23c <_printf_float+0x2d0>)
 8009ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ffa:	bf94      	ite	ls
 8009ffc:	4690      	movls	r8, r2
 8009ffe:	4698      	movhi	r8, r3
 800a000:	2303      	movs	r3, #3
 800a002:	6123      	str	r3, [r4, #16]
 800a004:	f02b 0304 	bic.w	r3, fp, #4
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	f04f 0900 	mov.w	r9, #0
 800a00e:	9700      	str	r7, [sp, #0]
 800a010:	4633      	mov	r3, r6
 800a012:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f9d2 	bl	800a3c0 <_printf_common>
 800a01c:	3001      	adds	r0, #1
 800a01e:	f040 808d 	bne.w	800a13c <_printf_float+0x1d0>
 800a022:	f04f 30ff 	mov.w	r0, #4294967295
 800a026:	b00d      	add	sp, #52	@ 0x34
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	4642      	mov	r2, r8
 800a02e:	464b      	mov	r3, r9
 800a030:	4640      	mov	r0, r8
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 fd52 	bl	8000adc <__aeabi_dcmpun>
 800a038:	b140      	cbz	r0, 800a04c <_printf_float+0xe0>
 800a03a:	464b      	mov	r3, r9
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfbc      	itt	lt
 800a040:	232d      	movlt	r3, #45	@ 0x2d
 800a042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a046:	4a7e      	ldr	r2, [pc, #504]	@ (800a240 <_printf_float+0x2d4>)
 800a048:	4b7e      	ldr	r3, [pc, #504]	@ (800a244 <_printf_float+0x2d8>)
 800a04a:	e7d4      	b.n	8009ff6 <_printf_float+0x8a>
 800a04c:	6863      	ldr	r3, [r4, #4]
 800a04e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a052:	9206      	str	r2, [sp, #24]
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	d13b      	bne.n	800a0d0 <_printf_float+0x164>
 800a058:	2306      	movs	r3, #6
 800a05a:	6063      	str	r3, [r4, #4]
 800a05c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a060:	2300      	movs	r3, #0
 800a062:	6022      	str	r2, [r4, #0]
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	ab0a      	add	r3, sp, #40	@ 0x28
 800a068:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a06c:	ab09      	add	r3, sp, #36	@ 0x24
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	6861      	ldr	r1, [r4, #4]
 800a072:	ec49 8b10 	vmov	d0, r8, r9
 800a076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a07a:	4628      	mov	r0, r5
 800a07c:	f7ff fed7 	bl	8009e2e <__cvt>
 800a080:	9b06      	ldr	r3, [sp, #24]
 800a082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a084:	2b47      	cmp	r3, #71	@ 0x47
 800a086:	4680      	mov	r8, r0
 800a088:	d129      	bne.n	800a0de <_printf_float+0x172>
 800a08a:	1cc8      	adds	r0, r1, #3
 800a08c:	db02      	blt.n	800a094 <_printf_float+0x128>
 800a08e:	6863      	ldr	r3, [r4, #4]
 800a090:	4299      	cmp	r1, r3
 800a092:	dd41      	ble.n	800a118 <_printf_float+0x1ac>
 800a094:	f1aa 0a02 	sub.w	sl, sl, #2
 800a098:	fa5f fa8a 	uxtb.w	sl, sl
 800a09c:	3901      	subs	r1, #1
 800a09e:	4652      	mov	r2, sl
 800a0a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0a6:	f7ff ff27 	bl	8009ef8 <__exponent>
 800a0aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0ac:	1813      	adds	r3, r2, r0
 800a0ae:	2a01      	cmp	r2, #1
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	6123      	str	r3, [r4, #16]
 800a0b4:	dc02      	bgt.n	800a0bc <_printf_float+0x150>
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	07d2      	lsls	r2, r2, #31
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_float+0x154>
 800a0bc:	3301      	adds	r3, #1
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0a2      	beq.n	800a00e <_printf_float+0xa2>
 800a0c8:	232d      	movs	r3, #45	@ 0x2d
 800a0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ce:	e79e      	b.n	800a00e <_printf_float+0xa2>
 800a0d0:	9a06      	ldr	r2, [sp, #24]
 800a0d2:	2a47      	cmp	r2, #71	@ 0x47
 800a0d4:	d1c2      	bne.n	800a05c <_printf_float+0xf0>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1c0      	bne.n	800a05c <_printf_float+0xf0>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e7bd      	b.n	800a05a <_printf_float+0xee>
 800a0de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0e2:	d9db      	bls.n	800a09c <_printf_float+0x130>
 800a0e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0e8:	d118      	bne.n	800a11c <_printf_float+0x1b0>
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	dd0b      	ble.n	800a108 <_printf_float+0x19c>
 800a0f0:	6121      	str	r1, [r4, #16]
 800a0f2:	b913      	cbnz	r3, 800a0fa <_printf_float+0x18e>
 800a0f4:	6822      	ldr	r2, [r4, #0]
 800a0f6:	07d0      	lsls	r0, r2, #31
 800a0f8:	d502      	bpl.n	800a100 <_printf_float+0x194>
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	440b      	add	r3, r1
 800a0fe:	6123      	str	r3, [r4, #16]
 800a100:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	e7db      	b.n	800a0c0 <_printf_float+0x154>
 800a108:	b913      	cbnz	r3, 800a110 <_printf_float+0x1a4>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	07d2      	lsls	r2, r2, #31
 800a10e:	d501      	bpl.n	800a114 <_printf_float+0x1a8>
 800a110:	3302      	adds	r3, #2
 800a112:	e7f4      	b.n	800a0fe <_printf_float+0x192>
 800a114:	2301      	movs	r3, #1
 800a116:	e7f2      	b.n	800a0fe <_printf_float+0x192>
 800a118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	4299      	cmp	r1, r3
 800a120:	db05      	blt.n	800a12e <_printf_float+0x1c2>
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	6121      	str	r1, [r4, #16]
 800a126:	07d8      	lsls	r0, r3, #31
 800a128:	d5ea      	bpl.n	800a100 <_printf_float+0x194>
 800a12a:	1c4b      	adds	r3, r1, #1
 800a12c:	e7e7      	b.n	800a0fe <_printf_float+0x192>
 800a12e:	2900      	cmp	r1, #0
 800a130:	bfd4      	ite	le
 800a132:	f1c1 0202 	rsble	r2, r1, #2
 800a136:	2201      	movgt	r2, #1
 800a138:	4413      	add	r3, r2
 800a13a:	e7e0      	b.n	800a0fe <_printf_float+0x192>
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	055a      	lsls	r2, r3, #21
 800a140:	d407      	bmi.n	800a152 <_printf_float+0x1e6>
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	4642      	mov	r2, r8
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	d12b      	bne.n	800a1a8 <_printf_float+0x23c>
 800a150:	e767      	b.n	800a022 <_printf_float+0xb6>
 800a152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a156:	f240 80dd 	bls.w	800a314 <_printf_float+0x3a8>
 800a15a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	f7f6 fc89 	bl	8000a78 <__aeabi_dcmpeq>
 800a166:	2800      	cmp	r0, #0
 800a168:	d033      	beq.n	800a1d2 <_printf_float+0x266>
 800a16a:	4a37      	ldr	r2, [pc, #220]	@ (800a248 <_printf_float+0x2dc>)
 800a16c:	2301      	movs	r3, #1
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	f43f af54 	beq.w	800a022 <_printf_float+0xb6>
 800a17a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a17e:	4543      	cmp	r3, r8
 800a180:	db02      	blt.n	800a188 <_printf_float+0x21c>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	07d8      	lsls	r0, r3, #31
 800a186:	d50f      	bpl.n	800a1a8 <_printf_float+0x23c>
 800a188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	f43f af45 	beq.w	800a022 <_printf_float+0xb6>
 800a198:	f04f 0900 	mov.w	r9, #0
 800a19c:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1a0:	f104 0a1a 	add.w	sl, r4, #26
 800a1a4:	45c8      	cmp	r8, r9
 800a1a6:	dc09      	bgt.n	800a1bc <_printf_float+0x250>
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	079b      	lsls	r3, r3, #30
 800a1ac:	f100 8103 	bmi.w	800a3b6 <_printf_float+0x44a>
 800a1b0:	68e0      	ldr	r0, [r4, #12]
 800a1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1b4:	4298      	cmp	r0, r3
 800a1b6:	bfb8      	it	lt
 800a1b8:	4618      	movlt	r0, r3
 800a1ba:	e734      	b.n	800a026 <_printf_float+0xba>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4652      	mov	r2, sl
 800a1c0:	4631      	mov	r1, r6
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47b8      	blx	r7
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f43f af2b 	beq.w	800a022 <_printf_float+0xb6>
 800a1cc:	f109 0901 	add.w	r9, r9, #1
 800a1d0:	e7e8      	b.n	800a1a4 <_printf_float+0x238>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc39      	bgt.n	800a24c <_printf_float+0x2e0>
 800a1d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a248 <_printf_float+0x2dc>)
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f af1d 	beq.w	800a022 <_printf_float+0xb6>
 800a1e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1ec:	ea59 0303 	orrs.w	r3, r9, r3
 800a1f0:	d102      	bne.n	800a1f8 <_printf_float+0x28c>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	07d9      	lsls	r1, r3, #31
 800a1f6:	d5d7      	bpl.n	800a1a8 <_printf_float+0x23c>
 800a1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	f43f af0d 	beq.w	800a022 <_printf_float+0xb6>
 800a208:	f04f 0a00 	mov.w	sl, #0
 800a20c:	f104 0b1a 	add.w	fp, r4, #26
 800a210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a212:	425b      	negs	r3, r3
 800a214:	4553      	cmp	r3, sl
 800a216:	dc01      	bgt.n	800a21c <_printf_float+0x2b0>
 800a218:	464b      	mov	r3, r9
 800a21a:	e793      	b.n	800a144 <_printf_float+0x1d8>
 800a21c:	2301      	movs	r3, #1
 800a21e:	465a      	mov	r2, fp
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f aefb 	beq.w	800a022 <_printf_float+0xb6>
 800a22c:	f10a 0a01 	add.w	sl, sl, #1
 800a230:	e7ee      	b.n	800a210 <_printf_float+0x2a4>
 800a232:	bf00      	nop
 800a234:	7fefffff 	.word	0x7fefffff
 800a238:	0800e99c 	.word	0x0800e99c
 800a23c:	0800e9a0 	.word	0x0800e9a0
 800a240:	0800e9a4 	.word	0x0800e9a4
 800a244:	0800e9a8 	.word	0x0800e9a8
 800a248:	0800e9ac 	.word	0x0800e9ac
 800a24c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a24e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a252:	4553      	cmp	r3, sl
 800a254:	bfa8      	it	ge
 800a256:	4653      	movge	r3, sl
 800a258:	2b00      	cmp	r3, #0
 800a25a:	4699      	mov	r9, r3
 800a25c:	dc36      	bgt.n	800a2cc <_printf_float+0x360>
 800a25e:	f04f 0b00 	mov.w	fp, #0
 800a262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a266:	f104 021a 	add.w	r2, r4, #26
 800a26a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a26c:	9306      	str	r3, [sp, #24]
 800a26e:	eba3 0309 	sub.w	r3, r3, r9
 800a272:	455b      	cmp	r3, fp
 800a274:	dc31      	bgt.n	800a2da <_printf_float+0x36e>
 800a276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a278:	459a      	cmp	sl, r3
 800a27a:	dc3a      	bgt.n	800a2f2 <_printf_float+0x386>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	07da      	lsls	r2, r3, #31
 800a280:	d437      	bmi.n	800a2f2 <_printf_float+0x386>
 800a282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a284:	ebaa 0903 	sub.w	r9, sl, r3
 800a288:	9b06      	ldr	r3, [sp, #24]
 800a28a:	ebaa 0303 	sub.w	r3, sl, r3
 800a28e:	4599      	cmp	r9, r3
 800a290:	bfa8      	it	ge
 800a292:	4699      	movge	r9, r3
 800a294:	f1b9 0f00 	cmp.w	r9, #0
 800a298:	dc33      	bgt.n	800a302 <_printf_float+0x396>
 800a29a:	f04f 0800 	mov.w	r8, #0
 800a29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2a2:	f104 0b1a 	add.w	fp, r4, #26
 800a2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a8:	ebaa 0303 	sub.w	r3, sl, r3
 800a2ac:	eba3 0309 	sub.w	r3, r3, r9
 800a2b0:	4543      	cmp	r3, r8
 800a2b2:	f77f af79 	ble.w	800a1a8 <_printf_float+0x23c>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	465a      	mov	r2, fp
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b8      	blx	r7
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f43f aeae 	beq.w	800a022 <_printf_float+0xb6>
 800a2c6:	f108 0801 	add.w	r8, r8, #1
 800a2ca:	e7ec      	b.n	800a2a6 <_printf_float+0x33a>
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	47b8      	blx	r7
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d1c2      	bne.n	800a25e <_printf_float+0x2f2>
 800a2d8:	e6a3      	b.n	800a022 <_printf_float+0xb6>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	9206      	str	r2, [sp, #24]
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f43f ae9c 	beq.w	800a022 <_printf_float+0xb6>
 800a2ea:	9a06      	ldr	r2, [sp, #24]
 800a2ec:	f10b 0b01 	add.w	fp, fp, #1
 800a2f0:	e7bb      	b.n	800a26a <_printf_float+0x2fe>
 800a2f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d1c0      	bne.n	800a282 <_printf_float+0x316>
 800a300:	e68f      	b.n	800a022 <_printf_float+0xb6>
 800a302:	9a06      	ldr	r2, [sp, #24]
 800a304:	464b      	mov	r3, r9
 800a306:	4442      	add	r2, r8
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	d1c3      	bne.n	800a29a <_printf_float+0x32e>
 800a312:	e686      	b.n	800a022 <_printf_float+0xb6>
 800a314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a318:	f1ba 0f01 	cmp.w	sl, #1
 800a31c:	dc01      	bgt.n	800a322 <_printf_float+0x3b6>
 800a31e:	07db      	lsls	r3, r3, #31
 800a320:	d536      	bpl.n	800a390 <_printf_float+0x424>
 800a322:	2301      	movs	r3, #1
 800a324:	4642      	mov	r2, r8
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	47b8      	blx	r7
 800a32c:	3001      	adds	r0, #1
 800a32e:	f43f ae78 	beq.w	800a022 <_printf_float+0xb6>
 800a332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a336:	4631      	mov	r1, r6
 800a338:	4628      	mov	r0, r5
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	f43f ae70 	beq.w	800a022 <_printf_float+0xb6>
 800a342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a346:	2200      	movs	r2, #0
 800a348:	2300      	movs	r3, #0
 800a34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a34e:	f7f6 fb93 	bl	8000a78 <__aeabi_dcmpeq>
 800a352:	b9c0      	cbnz	r0, 800a386 <_printf_float+0x41a>
 800a354:	4653      	mov	r3, sl
 800a356:	f108 0201 	add.w	r2, r8, #1
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	d10c      	bne.n	800a37e <_printf_float+0x412>
 800a364:	e65d      	b.n	800a022 <_printf_float+0xb6>
 800a366:	2301      	movs	r3, #1
 800a368:	465a      	mov	r2, fp
 800a36a:	4631      	mov	r1, r6
 800a36c:	4628      	mov	r0, r5
 800a36e:	47b8      	blx	r7
 800a370:	3001      	adds	r0, #1
 800a372:	f43f ae56 	beq.w	800a022 <_printf_float+0xb6>
 800a376:	f108 0801 	add.w	r8, r8, #1
 800a37a:	45d0      	cmp	r8, sl
 800a37c:	dbf3      	blt.n	800a366 <_printf_float+0x3fa>
 800a37e:	464b      	mov	r3, r9
 800a380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a384:	e6df      	b.n	800a146 <_printf_float+0x1da>
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	f104 0b1a 	add.w	fp, r4, #26
 800a38e:	e7f4      	b.n	800a37a <_printf_float+0x40e>
 800a390:	2301      	movs	r3, #1
 800a392:	4642      	mov	r2, r8
 800a394:	e7e1      	b.n	800a35a <_printf_float+0x3ee>
 800a396:	2301      	movs	r3, #1
 800a398:	464a      	mov	r2, r9
 800a39a:	4631      	mov	r1, r6
 800a39c:	4628      	mov	r0, r5
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f43f ae3e 	beq.w	800a022 <_printf_float+0xb6>
 800a3a6:	f108 0801 	add.w	r8, r8, #1
 800a3aa:	68e3      	ldr	r3, [r4, #12]
 800a3ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3ae:	1a5b      	subs	r3, r3, r1
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	dcf0      	bgt.n	800a396 <_printf_float+0x42a>
 800a3b4:	e6fc      	b.n	800a1b0 <_printf_float+0x244>
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	f104 0919 	add.w	r9, r4, #25
 800a3be:	e7f4      	b.n	800a3aa <_printf_float+0x43e>

0800a3c0 <_printf_common>:
 800a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	4698      	mov	r8, r3
 800a3c8:	688a      	ldr	r2, [r1, #8]
 800a3ca:	690b      	ldr	r3, [r1, #16]
 800a3cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	bfb8      	it	lt
 800a3d4:	4613      	movlt	r3, r2
 800a3d6:	6033      	str	r3, [r6, #0]
 800a3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3dc:	4607      	mov	r7, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	b10a      	cbz	r2, 800a3e6 <_printf_common+0x26>
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	6033      	str	r3, [r6, #0]
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	0699      	lsls	r1, r3, #26
 800a3ea:	bf42      	ittt	mi
 800a3ec:	6833      	ldrmi	r3, [r6, #0]
 800a3ee:	3302      	addmi	r3, #2
 800a3f0:	6033      	strmi	r3, [r6, #0]
 800a3f2:	6825      	ldr	r5, [r4, #0]
 800a3f4:	f015 0506 	ands.w	r5, r5, #6
 800a3f8:	d106      	bne.n	800a408 <_printf_common+0x48>
 800a3fa:	f104 0a19 	add.w	sl, r4, #25
 800a3fe:	68e3      	ldr	r3, [r4, #12]
 800a400:	6832      	ldr	r2, [r6, #0]
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	42ab      	cmp	r3, r5
 800a406:	dc26      	bgt.n	800a456 <_printf_common+0x96>
 800a408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	3b00      	subs	r3, #0
 800a410:	bf18      	it	ne
 800a412:	2301      	movne	r3, #1
 800a414:	0692      	lsls	r2, r2, #26
 800a416:	d42b      	bmi.n	800a470 <_printf_common+0xb0>
 800a418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a41c:	4641      	mov	r1, r8
 800a41e:	4638      	mov	r0, r7
 800a420:	47c8      	blx	r9
 800a422:	3001      	adds	r0, #1
 800a424:	d01e      	beq.n	800a464 <_printf_common+0xa4>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	6922      	ldr	r2, [r4, #16]
 800a42a:	f003 0306 	and.w	r3, r3, #6
 800a42e:	2b04      	cmp	r3, #4
 800a430:	bf02      	ittt	eq
 800a432:	68e5      	ldreq	r5, [r4, #12]
 800a434:	6833      	ldreq	r3, [r6, #0]
 800a436:	1aed      	subeq	r5, r5, r3
 800a438:	68a3      	ldr	r3, [r4, #8]
 800a43a:	bf0c      	ite	eq
 800a43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a440:	2500      	movne	r5, #0
 800a442:	4293      	cmp	r3, r2
 800a444:	bfc4      	itt	gt
 800a446:	1a9b      	subgt	r3, r3, r2
 800a448:	18ed      	addgt	r5, r5, r3
 800a44a:	2600      	movs	r6, #0
 800a44c:	341a      	adds	r4, #26
 800a44e:	42b5      	cmp	r5, r6
 800a450:	d11a      	bne.n	800a488 <_printf_common+0xc8>
 800a452:	2000      	movs	r0, #0
 800a454:	e008      	b.n	800a468 <_printf_common+0xa8>
 800a456:	2301      	movs	r3, #1
 800a458:	4652      	mov	r2, sl
 800a45a:	4641      	mov	r1, r8
 800a45c:	4638      	mov	r0, r7
 800a45e:	47c8      	blx	r9
 800a460:	3001      	adds	r0, #1
 800a462:	d103      	bne.n	800a46c <_printf_common+0xac>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a46c:	3501      	adds	r5, #1
 800a46e:	e7c6      	b.n	800a3fe <_printf_common+0x3e>
 800a470:	18e1      	adds	r1, r4, r3
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	2030      	movs	r0, #48	@ 0x30
 800a476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a47a:	4422      	add	r2, r4
 800a47c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a484:	3302      	adds	r3, #2
 800a486:	e7c7      	b.n	800a418 <_printf_common+0x58>
 800a488:	2301      	movs	r3, #1
 800a48a:	4622      	mov	r2, r4
 800a48c:	4641      	mov	r1, r8
 800a48e:	4638      	mov	r0, r7
 800a490:	47c8      	blx	r9
 800a492:	3001      	adds	r0, #1
 800a494:	d0e6      	beq.n	800a464 <_printf_common+0xa4>
 800a496:	3601      	adds	r6, #1
 800a498:	e7d9      	b.n	800a44e <_printf_common+0x8e>
	...

0800a49c <_printf_i>:
 800a49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	7e0f      	ldrb	r7, [r1, #24]
 800a4a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4a4:	2f78      	cmp	r7, #120	@ 0x78
 800a4a6:	4691      	mov	r9, r2
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	469a      	mov	sl, r3
 800a4ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4b2:	d807      	bhi.n	800a4c4 <_printf_i+0x28>
 800a4b4:	2f62      	cmp	r7, #98	@ 0x62
 800a4b6:	d80a      	bhi.n	800a4ce <_printf_i+0x32>
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	f000 80d2 	beq.w	800a662 <_printf_i+0x1c6>
 800a4be:	2f58      	cmp	r7, #88	@ 0x58
 800a4c0:	f000 80b9 	beq.w	800a636 <_printf_i+0x19a>
 800a4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4cc:	e03a      	b.n	800a544 <_printf_i+0xa8>
 800a4ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4d2:	2b15      	cmp	r3, #21
 800a4d4:	d8f6      	bhi.n	800a4c4 <_printf_i+0x28>
 800a4d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a4dc <_printf_i+0x40>)
 800a4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4dc:	0800a535 	.word	0x0800a535
 800a4e0:	0800a549 	.word	0x0800a549
 800a4e4:	0800a4c5 	.word	0x0800a4c5
 800a4e8:	0800a4c5 	.word	0x0800a4c5
 800a4ec:	0800a4c5 	.word	0x0800a4c5
 800a4f0:	0800a4c5 	.word	0x0800a4c5
 800a4f4:	0800a549 	.word	0x0800a549
 800a4f8:	0800a4c5 	.word	0x0800a4c5
 800a4fc:	0800a4c5 	.word	0x0800a4c5
 800a500:	0800a4c5 	.word	0x0800a4c5
 800a504:	0800a4c5 	.word	0x0800a4c5
 800a508:	0800a649 	.word	0x0800a649
 800a50c:	0800a573 	.word	0x0800a573
 800a510:	0800a603 	.word	0x0800a603
 800a514:	0800a4c5 	.word	0x0800a4c5
 800a518:	0800a4c5 	.word	0x0800a4c5
 800a51c:	0800a66b 	.word	0x0800a66b
 800a520:	0800a4c5 	.word	0x0800a4c5
 800a524:	0800a573 	.word	0x0800a573
 800a528:	0800a4c5 	.word	0x0800a4c5
 800a52c:	0800a4c5 	.word	0x0800a4c5
 800a530:	0800a60b 	.word	0x0800a60b
 800a534:	6833      	ldr	r3, [r6, #0]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6032      	str	r2, [r6, #0]
 800a53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a544:	2301      	movs	r3, #1
 800a546:	e09d      	b.n	800a684 <_printf_i+0x1e8>
 800a548:	6833      	ldr	r3, [r6, #0]
 800a54a:	6820      	ldr	r0, [r4, #0]
 800a54c:	1d19      	adds	r1, r3, #4
 800a54e:	6031      	str	r1, [r6, #0]
 800a550:	0606      	lsls	r6, r0, #24
 800a552:	d501      	bpl.n	800a558 <_printf_i+0xbc>
 800a554:	681d      	ldr	r5, [r3, #0]
 800a556:	e003      	b.n	800a560 <_printf_i+0xc4>
 800a558:	0645      	lsls	r5, r0, #25
 800a55a:	d5fb      	bpl.n	800a554 <_printf_i+0xb8>
 800a55c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a560:	2d00      	cmp	r5, #0
 800a562:	da03      	bge.n	800a56c <_printf_i+0xd0>
 800a564:	232d      	movs	r3, #45	@ 0x2d
 800a566:	426d      	negs	r5, r5
 800a568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a56c:	4859      	ldr	r0, [pc, #356]	@ (800a6d4 <_printf_i+0x238>)
 800a56e:	230a      	movs	r3, #10
 800a570:	e011      	b.n	800a596 <_printf_i+0xfa>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	6833      	ldr	r3, [r6, #0]
 800a576:	0608      	lsls	r0, r1, #24
 800a578:	f853 5b04 	ldr.w	r5, [r3], #4
 800a57c:	d402      	bmi.n	800a584 <_printf_i+0xe8>
 800a57e:	0649      	lsls	r1, r1, #25
 800a580:	bf48      	it	mi
 800a582:	b2ad      	uxthmi	r5, r5
 800a584:	2f6f      	cmp	r7, #111	@ 0x6f
 800a586:	4853      	ldr	r0, [pc, #332]	@ (800a6d4 <_printf_i+0x238>)
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	bf14      	ite	ne
 800a58c:	230a      	movne	r3, #10
 800a58e:	2308      	moveq	r3, #8
 800a590:	2100      	movs	r1, #0
 800a592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a596:	6866      	ldr	r6, [r4, #4]
 800a598:	60a6      	str	r6, [r4, #8]
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	bfa2      	ittt	ge
 800a59e:	6821      	ldrge	r1, [r4, #0]
 800a5a0:	f021 0104 	bicge.w	r1, r1, #4
 800a5a4:	6021      	strge	r1, [r4, #0]
 800a5a6:	b90d      	cbnz	r5, 800a5ac <_printf_i+0x110>
 800a5a8:	2e00      	cmp	r6, #0
 800a5aa:	d04b      	beq.n	800a644 <_printf_i+0x1a8>
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a5b6:	5dc7      	ldrb	r7, [r0, r7]
 800a5b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5bc:	462f      	mov	r7, r5
 800a5be:	42bb      	cmp	r3, r7
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	d9f4      	bls.n	800a5ae <_printf_i+0x112>
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d10b      	bne.n	800a5e0 <_printf_i+0x144>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	07df      	lsls	r7, r3, #31
 800a5cc:	d508      	bpl.n	800a5e0 <_printf_i+0x144>
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	6861      	ldr	r1, [r4, #4]
 800a5d2:	4299      	cmp	r1, r3
 800a5d4:	bfde      	ittt	le
 800a5d6:	2330      	movle	r3, #48	@ 0x30
 800a5d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5e0:	1b92      	subs	r2, r2, r6
 800a5e2:	6122      	str	r2, [r4, #16]
 800a5e4:	f8cd a000 	str.w	sl, [sp]
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	aa03      	add	r2, sp, #12
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	f7ff fee6 	bl	800a3c0 <_printf_common>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d14a      	bne.n	800a68e <_printf_i+0x1f2>
 800a5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5fc:	b004      	add	sp, #16
 800a5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	f043 0320 	orr.w	r3, r3, #32
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	4833      	ldr	r0, [pc, #204]	@ (800a6d8 <_printf_i+0x23c>)
 800a60c:	2778      	movs	r7, #120	@ 0x78
 800a60e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6831      	ldr	r1, [r6, #0]
 800a616:	061f      	lsls	r7, r3, #24
 800a618:	f851 5b04 	ldr.w	r5, [r1], #4
 800a61c:	d402      	bmi.n	800a624 <_printf_i+0x188>
 800a61e:	065f      	lsls	r7, r3, #25
 800a620:	bf48      	it	mi
 800a622:	b2ad      	uxthmi	r5, r5
 800a624:	6031      	str	r1, [r6, #0]
 800a626:	07d9      	lsls	r1, r3, #31
 800a628:	bf44      	itt	mi
 800a62a:	f043 0320 	orrmi.w	r3, r3, #32
 800a62e:	6023      	strmi	r3, [r4, #0]
 800a630:	b11d      	cbz	r5, 800a63a <_printf_i+0x19e>
 800a632:	2310      	movs	r3, #16
 800a634:	e7ac      	b.n	800a590 <_printf_i+0xf4>
 800a636:	4827      	ldr	r0, [pc, #156]	@ (800a6d4 <_printf_i+0x238>)
 800a638:	e7e9      	b.n	800a60e <_printf_i+0x172>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	f023 0320 	bic.w	r3, r3, #32
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	e7f6      	b.n	800a632 <_printf_i+0x196>
 800a644:	4616      	mov	r6, r2
 800a646:	e7bd      	b.n	800a5c4 <_printf_i+0x128>
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	6825      	ldr	r5, [r4, #0]
 800a64c:	6961      	ldr	r1, [r4, #20]
 800a64e:	1d18      	adds	r0, r3, #4
 800a650:	6030      	str	r0, [r6, #0]
 800a652:	062e      	lsls	r6, r5, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	d501      	bpl.n	800a65c <_printf_i+0x1c0>
 800a658:	6019      	str	r1, [r3, #0]
 800a65a:	e002      	b.n	800a662 <_printf_i+0x1c6>
 800a65c:	0668      	lsls	r0, r5, #25
 800a65e:	d5fb      	bpl.n	800a658 <_printf_i+0x1bc>
 800a660:	8019      	strh	r1, [r3, #0]
 800a662:	2300      	movs	r3, #0
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	4616      	mov	r6, r2
 800a668:	e7bc      	b.n	800a5e4 <_printf_i+0x148>
 800a66a:	6833      	ldr	r3, [r6, #0]
 800a66c:	1d1a      	adds	r2, r3, #4
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	681e      	ldr	r6, [r3, #0]
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	2100      	movs	r1, #0
 800a676:	4630      	mov	r0, r6
 800a678:	f7f5 fd82 	bl	8000180 <memchr>
 800a67c:	b108      	cbz	r0, 800a682 <_printf_i+0x1e6>
 800a67e:	1b80      	subs	r0, r0, r6
 800a680:	6060      	str	r0, [r4, #4]
 800a682:	6863      	ldr	r3, [r4, #4]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	2300      	movs	r3, #0
 800a688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68c:	e7aa      	b.n	800a5e4 <_printf_i+0x148>
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	4632      	mov	r2, r6
 800a692:	4649      	mov	r1, r9
 800a694:	4640      	mov	r0, r8
 800a696:	47d0      	blx	sl
 800a698:	3001      	adds	r0, #1
 800a69a:	d0ad      	beq.n	800a5f8 <_printf_i+0x15c>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	079b      	lsls	r3, r3, #30
 800a6a0:	d413      	bmi.n	800a6ca <_printf_i+0x22e>
 800a6a2:	68e0      	ldr	r0, [r4, #12]
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	4298      	cmp	r0, r3
 800a6a8:	bfb8      	it	lt
 800a6aa:	4618      	movlt	r0, r3
 800a6ac:	e7a6      	b.n	800a5fc <_printf_i+0x160>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4640      	mov	r0, r8
 800a6b6:	47d0      	blx	sl
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	d09d      	beq.n	800a5f8 <_printf_i+0x15c>
 800a6bc:	3501      	adds	r5, #1
 800a6be:	68e3      	ldr	r3, [r4, #12]
 800a6c0:	9903      	ldr	r1, [sp, #12]
 800a6c2:	1a5b      	subs	r3, r3, r1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dcf2      	bgt.n	800a6ae <_printf_i+0x212>
 800a6c8:	e7eb      	b.n	800a6a2 <_printf_i+0x206>
 800a6ca:	2500      	movs	r5, #0
 800a6cc:	f104 0619 	add.w	r6, r4, #25
 800a6d0:	e7f5      	b.n	800a6be <_printf_i+0x222>
 800a6d2:	bf00      	nop
 800a6d4:	0800e9ae 	.word	0x0800e9ae
 800a6d8:	0800e9bf 	.word	0x0800e9bf

0800a6dc <_scanf_float>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	b087      	sub	sp, #28
 800a6e2:	4617      	mov	r7, r2
 800a6e4:	9303      	str	r3, [sp, #12]
 800a6e6:	688b      	ldr	r3, [r1, #8]
 800a6e8:	1e5a      	subs	r2, r3, #1
 800a6ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6ee:	bf81      	itttt	hi
 800a6f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800a6f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6fc:	608b      	strhi	r3, [r1, #8]
 800a6fe:	680b      	ldr	r3, [r1, #0]
 800a700:	460a      	mov	r2, r1
 800a702:	f04f 0500 	mov.w	r5, #0
 800a706:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a70a:	f842 3b1c 	str.w	r3, [r2], #28
 800a70e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a712:	4680      	mov	r8, r0
 800a714:	460c      	mov	r4, r1
 800a716:	bf98      	it	ls
 800a718:	f04f 0b00 	movls.w	fp, #0
 800a71c:	9201      	str	r2, [sp, #4]
 800a71e:	4616      	mov	r6, r2
 800a720:	46aa      	mov	sl, r5
 800a722:	46a9      	mov	r9, r5
 800a724:	9502      	str	r5, [sp, #8]
 800a726:	68a2      	ldr	r2, [r4, #8]
 800a728:	b152      	cbz	r2, 800a740 <_scanf_float+0x64>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a730:	d864      	bhi.n	800a7fc <_scanf_float+0x120>
 800a732:	2b40      	cmp	r3, #64	@ 0x40
 800a734:	d83c      	bhi.n	800a7b0 <_scanf_float+0xd4>
 800a736:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a73a:	b2c8      	uxtb	r0, r1
 800a73c:	280e      	cmp	r0, #14
 800a73e:	d93a      	bls.n	800a7b6 <_scanf_float+0xda>
 800a740:	f1b9 0f00 	cmp.w	r9, #0
 800a744:	d003      	beq.n	800a74e <_scanf_float+0x72>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a752:	f1ba 0f01 	cmp.w	sl, #1
 800a756:	f200 8117 	bhi.w	800a988 <_scanf_float+0x2ac>
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	429e      	cmp	r6, r3
 800a75e:	f200 8108 	bhi.w	800a972 <_scanf_float+0x296>
 800a762:	2001      	movs	r0, #1
 800a764:	b007      	add	sp, #28
 800a766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a76e:	2a0d      	cmp	r2, #13
 800a770:	d8e6      	bhi.n	800a740 <_scanf_float+0x64>
 800a772:	a101      	add	r1, pc, #4	@ (adr r1, 800a778 <_scanf_float+0x9c>)
 800a774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a778:	0800a8bf 	.word	0x0800a8bf
 800a77c:	0800a741 	.word	0x0800a741
 800a780:	0800a741 	.word	0x0800a741
 800a784:	0800a741 	.word	0x0800a741
 800a788:	0800a91f 	.word	0x0800a91f
 800a78c:	0800a8f7 	.word	0x0800a8f7
 800a790:	0800a741 	.word	0x0800a741
 800a794:	0800a741 	.word	0x0800a741
 800a798:	0800a8cd 	.word	0x0800a8cd
 800a79c:	0800a741 	.word	0x0800a741
 800a7a0:	0800a741 	.word	0x0800a741
 800a7a4:	0800a741 	.word	0x0800a741
 800a7a8:	0800a741 	.word	0x0800a741
 800a7ac:	0800a885 	.word	0x0800a885
 800a7b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a7b4:	e7db      	b.n	800a76e <_scanf_float+0x92>
 800a7b6:	290e      	cmp	r1, #14
 800a7b8:	d8c2      	bhi.n	800a740 <_scanf_float+0x64>
 800a7ba:	a001      	add	r0, pc, #4	@ (adr r0, 800a7c0 <_scanf_float+0xe4>)
 800a7bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7c0:	0800a875 	.word	0x0800a875
 800a7c4:	0800a741 	.word	0x0800a741
 800a7c8:	0800a875 	.word	0x0800a875
 800a7cc:	0800a90b 	.word	0x0800a90b
 800a7d0:	0800a741 	.word	0x0800a741
 800a7d4:	0800a81d 	.word	0x0800a81d
 800a7d8:	0800a85b 	.word	0x0800a85b
 800a7dc:	0800a85b 	.word	0x0800a85b
 800a7e0:	0800a85b 	.word	0x0800a85b
 800a7e4:	0800a85b 	.word	0x0800a85b
 800a7e8:	0800a85b 	.word	0x0800a85b
 800a7ec:	0800a85b 	.word	0x0800a85b
 800a7f0:	0800a85b 	.word	0x0800a85b
 800a7f4:	0800a85b 	.word	0x0800a85b
 800a7f8:	0800a85b 	.word	0x0800a85b
 800a7fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a7fe:	d809      	bhi.n	800a814 <_scanf_float+0x138>
 800a800:	2b60      	cmp	r3, #96	@ 0x60
 800a802:	d8b2      	bhi.n	800a76a <_scanf_float+0x8e>
 800a804:	2b54      	cmp	r3, #84	@ 0x54
 800a806:	d07b      	beq.n	800a900 <_scanf_float+0x224>
 800a808:	2b59      	cmp	r3, #89	@ 0x59
 800a80a:	d199      	bne.n	800a740 <_scanf_float+0x64>
 800a80c:	2d07      	cmp	r5, #7
 800a80e:	d197      	bne.n	800a740 <_scanf_float+0x64>
 800a810:	2508      	movs	r5, #8
 800a812:	e02c      	b.n	800a86e <_scanf_float+0x192>
 800a814:	2b74      	cmp	r3, #116	@ 0x74
 800a816:	d073      	beq.n	800a900 <_scanf_float+0x224>
 800a818:	2b79      	cmp	r3, #121	@ 0x79
 800a81a:	e7f6      	b.n	800a80a <_scanf_float+0x12e>
 800a81c:	6821      	ldr	r1, [r4, #0]
 800a81e:	05c8      	lsls	r0, r1, #23
 800a820:	d51b      	bpl.n	800a85a <_scanf_float+0x17e>
 800a822:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a826:	6021      	str	r1, [r4, #0]
 800a828:	f109 0901 	add.w	r9, r9, #1
 800a82c:	f1bb 0f00 	cmp.w	fp, #0
 800a830:	d003      	beq.n	800a83a <_scanf_float+0x15e>
 800a832:	3201      	adds	r2, #1
 800a834:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a838:	60a2      	str	r2, [r4, #8]
 800a83a:	68a3      	ldr	r3, [r4, #8]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	60a3      	str	r3, [r4, #8]
 800a840:	6923      	ldr	r3, [r4, #16]
 800a842:	3301      	adds	r3, #1
 800a844:	6123      	str	r3, [r4, #16]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3b01      	subs	r3, #1
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	607b      	str	r3, [r7, #4]
 800a84e:	f340 8087 	ble.w	800a960 <_scanf_float+0x284>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	e765      	b.n	800a726 <_scanf_float+0x4a>
 800a85a:	eb1a 0105 	adds.w	r1, sl, r5
 800a85e:	f47f af6f 	bne.w	800a740 <_scanf_float+0x64>
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a868:	6022      	str	r2, [r4, #0]
 800a86a:	460d      	mov	r5, r1
 800a86c:	468a      	mov	sl, r1
 800a86e:	f806 3b01 	strb.w	r3, [r6], #1
 800a872:	e7e2      	b.n	800a83a <_scanf_float+0x15e>
 800a874:	6822      	ldr	r2, [r4, #0]
 800a876:	0610      	lsls	r0, r2, #24
 800a878:	f57f af62 	bpl.w	800a740 <_scanf_float+0x64>
 800a87c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a880:	6022      	str	r2, [r4, #0]
 800a882:	e7f4      	b.n	800a86e <_scanf_float+0x192>
 800a884:	f1ba 0f00 	cmp.w	sl, #0
 800a888:	d10e      	bne.n	800a8a8 <_scanf_float+0x1cc>
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	d10e      	bne.n	800a8ae <_scanf_float+0x1d2>
 800a890:	6822      	ldr	r2, [r4, #0]
 800a892:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a896:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a89a:	d108      	bne.n	800a8ae <_scanf_float+0x1d2>
 800a89c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8a0:	6022      	str	r2, [r4, #0]
 800a8a2:	f04f 0a01 	mov.w	sl, #1
 800a8a6:	e7e2      	b.n	800a86e <_scanf_float+0x192>
 800a8a8:	f1ba 0f02 	cmp.w	sl, #2
 800a8ac:	d055      	beq.n	800a95a <_scanf_float+0x27e>
 800a8ae:	2d01      	cmp	r5, #1
 800a8b0:	d002      	beq.n	800a8b8 <_scanf_float+0x1dc>
 800a8b2:	2d04      	cmp	r5, #4
 800a8b4:	f47f af44 	bne.w	800a740 <_scanf_float+0x64>
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	b2ed      	uxtb	r5, r5
 800a8bc:	e7d7      	b.n	800a86e <_scanf_float+0x192>
 800a8be:	f1ba 0f01 	cmp.w	sl, #1
 800a8c2:	f47f af3d 	bne.w	800a740 <_scanf_float+0x64>
 800a8c6:	f04f 0a02 	mov.w	sl, #2
 800a8ca:	e7d0      	b.n	800a86e <_scanf_float+0x192>
 800a8cc:	b97d      	cbnz	r5, 800a8ee <_scanf_float+0x212>
 800a8ce:	f1b9 0f00 	cmp.w	r9, #0
 800a8d2:	f47f af38 	bne.w	800a746 <_scanf_float+0x6a>
 800a8d6:	6822      	ldr	r2, [r4, #0]
 800a8d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8e0:	f040 8108 	bne.w	800aaf4 <_scanf_float+0x418>
 800a8e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8e8:	6022      	str	r2, [r4, #0]
 800a8ea:	2501      	movs	r5, #1
 800a8ec:	e7bf      	b.n	800a86e <_scanf_float+0x192>
 800a8ee:	2d03      	cmp	r5, #3
 800a8f0:	d0e2      	beq.n	800a8b8 <_scanf_float+0x1dc>
 800a8f2:	2d05      	cmp	r5, #5
 800a8f4:	e7de      	b.n	800a8b4 <_scanf_float+0x1d8>
 800a8f6:	2d02      	cmp	r5, #2
 800a8f8:	f47f af22 	bne.w	800a740 <_scanf_float+0x64>
 800a8fc:	2503      	movs	r5, #3
 800a8fe:	e7b6      	b.n	800a86e <_scanf_float+0x192>
 800a900:	2d06      	cmp	r5, #6
 800a902:	f47f af1d 	bne.w	800a740 <_scanf_float+0x64>
 800a906:	2507      	movs	r5, #7
 800a908:	e7b1      	b.n	800a86e <_scanf_float+0x192>
 800a90a:	6822      	ldr	r2, [r4, #0]
 800a90c:	0591      	lsls	r1, r2, #22
 800a90e:	f57f af17 	bpl.w	800a740 <_scanf_float+0x64>
 800a912:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a916:	6022      	str	r2, [r4, #0]
 800a918:	f8cd 9008 	str.w	r9, [sp, #8]
 800a91c:	e7a7      	b.n	800a86e <_scanf_float+0x192>
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a928:	d006      	beq.n	800a938 <_scanf_float+0x25c>
 800a92a:	0550      	lsls	r0, r2, #21
 800a92c:	f57f af08 	bpl.w	800a740 <_scanf_float+0x64>
 800a930:	f1b9 0f00 	cmp.w	r9, #0
 800a934:	f000 80de 	beq.w	800aaf4 <_scanf_float+0x418>
 800a938:	0591      	lsls	r1, r2, #22
 800a93a:	bf58      	it	pl
 800a93c:	9902      	ldrpl	r1, [sp, #8]
 800a93e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a942:	bf58      	it	pl
 800a944:	eba9 0101 	subpl.w	r1, r9, r1
 800a948:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a94c:	bf58      	it	pl
 800a94e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a952:	6022      	str	r2, [r4, #0]
 800a954:	f04f 0900 	mov.w	r9, #0
 800a958:	e789      	b.n	800a86e <_scanf_float+0x192>
 800a95a:	f04f 0a03 	mov.w	sl, #3
 800a95e:	e786      	b.n	800a86e <_scanf_float+0x192>
 800a960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a964:	4639      	mov	r1, r7
 800a966:	4640      	mov	r0, r8
 800a968:	4798      	blx	r3
 800a96a:	2800      	cmp	r0, #0
 800a96c:	f43f aedb 	beq.w	800a726 <_scanf_float+0x4a>
 800a970:	e6e6      	b.n	800a740 <_scanf_float+0x64>
 800a972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a97a:	463a      	mov	r2, r7
 800a97c:	4640      	mov	r0, r8
 800a97e:	4798      	blx	r3
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	3b01      	subs	r3, #1
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	e6e8      	b.n	800a75a <_scanf_float+0x7e>
 800a988:	1e6b      	subs	r3, r5, #1
 800a98a:	2b06      	cmp	r3, #6
 800a98c:	d824      	bhi.n	800a9d8 <_scanf_float+0x2fc>
 800a98e:	2d02      	cmp	r5, #2
 800a990:	d836      	bhi.n	800aa00 <_scanf_float+0x324>
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	429e      	cmp	r6, r3
 800a996:	f67f aee4 	bls.w	800a762 <_scanf_float+0x86>
 800a99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a99e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	4798      	blx	r3
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	6123      	str	r3, [r4, #16]
 800a9ae:	e7f0      	b.n	800a992 <_scanf_float+0x2b6>
 800a9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	4798      	blx	r3
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c8:	fa5f fa8a 	uxtb.w	sl, sl
 800a9cc:	f1ba 0f02 	cmp.w	sl, #2
 800a9d0:	d1ee      	bne.n	800a9b0 <_scanf_float+0x2d4>
 800a9d2:	3d03      	subs	r5, #3
 800a9d4:	b2ed      	uxtb	r5, r5
 800a9d6:	1b76      	subs	r6, r6, r5
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	05da      	lsls	r2, r3, #23
 800a9dc:	d530      	bpl.n	800aa40 <_scanf_float+0x364>
 800a9de:	055b      	lsls	r3, r3, #21
 800a9e0:	d511      	bpl.n	800aa06 <_scanf_float+0x32a>
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	429e      	cmp	r6, r3
 800a9e6:	f67f aebc 	bls.w	800a762 <_scanf_float+0x86>
 800a9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9f2:	463a      	mov	r2, r7
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	4798      	blx	r3
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	6123      	str	r3, [r4, #16]
 800a9fe:	e7f0      	b.n	800a9e2 <_scanf_float+0x306>
 800aa00:	46aa      	mov	sl, r5
 800aa02:	46b3      	mov	fp, r6
 800aa04:	e7de      	b.n	800a9c4 <_scanf_float+0x2e8>
 800aa06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa0a:	6923      	ldr	r3, [r4, #16]
 800aa0c:	2965      	cmp	r1, #101	@ 0x65
 800aa0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa12:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	d00c      	beq.n	800aa34 <_scanf_float+0x358>
 800aa1a:	2945      	cmp	r1, #69	@ 0x45
 800aa1c:	d00a      	beq.n	800aa34 <_scanf_float+0x358>
 800aa1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa22:	463a      	mov	r2, r7
 800aa24:	4640      	mov	r0, r8
 800aa26:	4798      	blx	r3
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	1eb5      	subs	r5, r6, #2
 800aa32:	6123      	str	r3, [r4, #16]
 800aa34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa38:	463a      	mov	r2, r7
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	4798      	blx	r3
 800aa3e:	462e      	mov	r6, r5
 800aa40:	6822      	ldr	r2, [r4, #0]
 800aa42:	f012 0210 	ands.w	r2, r2, #16
 800aa46:	d001      	beq.n	800aa4c <_scanf_float+0x370>
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e68b      	b.n	800a764 <_scanf_float+0x88>
 800aa4c:	7032      	strb	r2, [r6, #0]
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa58:	d11c      	bne.n	800aa94 <_scanf_float+0x3b8>
 800aa5a:	9b02      	ldr	r3, [sp, #8]
 800aa5c:	454b      	cmp	r3, r9
 800aa5e:	eba3 0209 	sub.w	r2, r3, r9
 800aa62:	d123      	bne.n	800aaac <_scanf_float+0x3d0>
 800aa64:	9901      	ldr	r1, [sp, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	4640      	mov	r0, r8
 800aa6a:	f002 fc39 	bl	800d2e0 <_strtod_r>
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	6821      	ldr	r1, [r4, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f011 0f02 	tst.w	r1, #2
 800aa78:	ec57 6b10 	vmov	r6, r7, d0
 800aa7c:	f103 0204 	add.w	r2, r3, #4
 800aa80:	d01f      	beq.n	800aac2 <_scanf_float+0x3e6>
 800aa82:	9903      	ldr	r1, [sp, #12]
 800aa84:	600a      	str	r2, [r1, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	e9c3 6700 	strd	r6, r7, [r3]
 800aa8c:	68e3      	ldr	r3, [r4, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60e3      	str	r3, [r4, #12]
 800aa92:	e7d9      	b.n	800aa48 <_scanf_float+0x36c>
 800aa94:	9b04      	ldr	r3, [sp, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0e4      	beq.n	800aa64 <_scanf_float+0x388>
 800aa9a:	9905      	ldr	r1, [sp, #20]
 800aa9c:	230a      	movs	r3, #10
 800aa9e:	3101      	adds	r1, #1
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	f002 fc9d 	bl	800d3e0 <_strtol_r>
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	9e05      	ldr	r6, [sp, #20]
 800aaaa:	1ac2      	subs	r2, r0, r3
 800aaac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aab0:	429e      	cmp	r6, r3
 800aab2:	bf28      	it	cs
 800aab4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aab8:	4910      	ldr	r1, [pc, #64]	@ (800aafc <_scanf_float+0x420>)
 800aaba:	4630      	mov	r0, r6
 800aabc:	f000 f918 	bl	800acf0 <siprintf>
 800aac0:	e7d0      	b.n	800aa64 <_scanf_float+0x388>
 800aac2:	f011 0f04 	tst.w	r1, #4
 800aac6:	9903      	ldr	r1, [sp, #12]
 800aac8:	600a      	str	r2, [r1, #0]
 800aaca:	d1dc      	bne.n	800aa86 <_scanf_float+0x3aa>
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	4632      	mov	r2, r6
 800aad0:	463b      	mov	r3, r7
 800aad2:	4630      	mov	r0, r6
 800aad4:	4639      	mov	r1, r7
 800aad6:	f7f6 f801 	bl	8000adc <__aeabi_dcmpun>
 800aada:	b128      	cbz	r0, 800aae8 <_scanf_float+0x40c>
 800aadc:	4808      	ldr	r0, [pc, #32]	@ (800ab00 <_scanf_float+0x424>)
 800aade:	f000 f9f9 	bl	800aed4 <nanf>
 800aae2:	ed85 0a00 	vstr	s0, [r5]
 800aae6:	e7d1      	b.n	800aa8c <_scanf_float+0x3b0>
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f6 f854 	bl	8000b98 <__aeabi_d2f>
 800aaf0:	6028      	str	r0, [r5, #0]
 800aaf2:	e7cb      	b.n	800aa8c <_scanf_float+0x3b0>
 800aaf4:	f04f 0900 	mov.w	r9, #0
 800aaf8:	e629      	b.n	800a74e <_scanf_float+0x72>
 800aafa:	bf00      	nop
 800aafc:	0800e9d0 	.word	0x0800e9d0
 800ab00:	0800ed65 	.word	0x0800ed65

0800ab04 <std>:
 800ab04:	2300      	movs	r3, #0
 800ab06:	b510      	push	{r4, lr}
 800ab08:	4604      	mov	r4, r0
 800ab0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab12:	6083      	str	r3, [r0, #8]
 800ab14:	8181      	strh	r1, [r0, #12]
 800ab16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab18:	81c2      	strh	r2, [r0, #14]
 800ab1a:	6183      	str	r3, [r0, #24]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	2208      	movs	r2, #8
 800ab20:	305c      	adds	r0, #92	@ 0x5c
 800ab22:	f000 f948 	bl	800adb6 <memset>
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <std+0x58>)
 800ab28:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <std+0x5c>)
 800ab2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x60>)
 800ab30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab32:	4b0d      	ldr	r3, [pc, #52]	@ (800ab68 <std+0x64>)
 800ab34:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab36:	4b0d      	ldr	r3, [pc, #52]	@ (800ab6c <std+0x68>)
 800ab38:	6224      	str	r4, [r4, #32]
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d006      	beq.n	800ab4c <std+0x48>
 800ab3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab42:	4294      	cmp	r4, r2
 800ab44:	d002      	beq.n	800ab4c <std+0x48>
 800ab46:	33d0      	adds	r3, #208	@ 0xd0
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	d105      	bne.n	800ab58 <std+0x54>
 800ab4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f000 b9ac 	b.w	800aeb0 <__retarget_lock_init_recursive>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800ad31 	.word	0x0800ad31
 800ab60:	0800ad53 	.word	0x0800ad53
 800ab64:	0800ad8b 	.word	0x0800ad8b
 800ab68:	0800adaf 	.word	0x0800adaf
 800ab6c:	20006de8 	.word	0x20006de8

0800ab70 <stdio_exit_handler>:
 800ab70:	4a02      	ldr	r2, [pc, #8]	@ (800ab7c <stdio_exit_handler+0xc>)
 800ab72:	4903      	ldr	r1, [pc, #12]	@ (800ab80 <stdio_exit_handler+0x10>)
 800ab74:	4803      	ldr	r0, [pc, #12]	@ (800ab84 <stdio_exit_handler+0x14>)
 800ab76:	f000 b869 	b.w	800ac4c <_fwalk_sglue>
 800ab7a:	bf00      	nop
 800ab7c:	20000028 	.word	0x20000028
 800ab80:	0800d79d 	.word	0x0800d79d
 800ab84:	20000038 	.word	0x20000038

0800ab88 <cleanup_stdio>:
 800ab88:	6841      	ldr	r1, [r0, #4]
 800ab8a:	4b0c      	ldr	r3, [pc, #48]	@ (800abbc <cleanup_stdio+0x34>)
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	4604      	mov	r4, r0
 800ab92:	d001      	beq.n	800ab98 <cleanup_stdio+0x10>
 800ab94:	f002 fe02 	bl	800d79c <_fflush_r>
 800ab98:	68a1      	ldr	r1, [r4, #8]
 800ab9a:	4b09      	ldr	r3, [pc, #36]	@ (800abc0 <cleanup_stdio+0x38>)
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <cleanup_stdio+0x1e>
 800aba0:	4620      	mov	r0, r4
 800aba2:	f002 fdfb 	bl	800d79c <_fflush_r>
 800aba6:	68e1      	ldr	r1, [r4, #12]
 800aba8:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <cleanup_stdio+0x3c>)
 800abaa:	4299      	cmp	r1, r3
 800abac:	d004      	beq.n	800abb8 <cleanup_stdio+0x30>
 800abae:	4620      	mov	r0, r4
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f002 bdf2 	b.w	800d79c <_fflush_r>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	20006de8 	.word	0x20006de8
 800abc0:	20006e50 	.word	0x20006e50
 800abc4:	20006eb8 	.word	0x20006eb8

0800abc8 <global_stdio_init.part.0>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <global_stdio_init.part.0+0x30>)
 800abcc:	4c0b      	ldr	r4, [pc, #44]	@ (800abfc <global_stdio_init.part.0+0x34>)
 800abce:	4a0c      	ldr	r2, [pc, #48]	@ (800ac00 <global_stdio_init.part.0+0x38>)
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	4620      	mov	r0, r4
 800abd4:	2200      	movs	r2, #0
 800abd6:	2104      	movs	r1, #4
 800abd8:	f7ff ff94 	bl	800ab04 <std>
 800abdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abe0:	2201      	movs	r2, #1
 800abe2:	2109      	movs	r1, #9
 800abe4:	f7ff ff8e 	bl	800ab04 <std>
 800abe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abec:	2202      	movs	r2, #2
 800abee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf2:	2112      	movs	r1, #18
 800abf4:	f7ff bf86 	b.w	800ab04 <std>
 800abf8:	20006f20 	.word	0x20006f20
 800abfc:	20006de8 	.word	0x20006de8
 800ac00:	0800ab71 	.word	0x0800ab71

0800ac04 <__sfp_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	@ (800ac0c <__sfp_lock_acquire+0x8>)
 800ac06:	f000 b954 	b.w	800aeb2 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20006f29 	.word	0x20006f29

0800ac10 <__sfp_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	@ (800ac18 <__sfp_lock_release+0x8>)
 800ac12:	f000 b94f 	b.w	800aeb4 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	20006f29 	.word	0x20006f29

0800ac1c <__sinit>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f7ff fff0 	bl	800ac04 <__sfp_lock_acquire>
 800ac24:	6a23      	ldr	r3, [r4, #32]
 800ac26:	b11b      	cbz	r3, 800ac30 <__sinit+0x14>
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f7ff bff0 	b.w	800ac10 <__sfp_lock_release>
 800ac30:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <__sinit+0x28>)
 800ac32:	6223      	str	r3, [r4, #32]
 800ac34:	4b04      	ldr	r3, [pc, #16]	@ (800ac48 <__sinit+0x2c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f5      	bne.n	800ac28 <__sinit+0xc>
 800ac3c:	f7ff ffc4 	bl	800abc8 <global_stdio_init.part.0>
 800ac40:	e7f2      	b.n	800ac28 <__sinit+0xc>
 800ac42:	bf00      	nop
 800ac44:	0800ab89 	.word	0x0800ab89
 800ac48:	20006f20 	.word	0x20006f20

0800ac4c <_fwalk_sglue>:
 800ac4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac50:	4607      	mov	r7, r0
 800ac52:	4688      	mov	r8, r1
 800ac54:	4614      	mov	r4, r2
 800ac56:	2600      	movs	r6, #0
 800ac58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac60:	d505      	bpl.n	800ac6e <_fwalk_sglue+0x22>
 800ac62:	6824      	ldr	r4, [r4, #0]
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d1f7      	bne.n	800ac58 <_fwalk_sglue+0xc>
 800ac68:	4630      	mov	r0, r6
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d907      	bls.n	800ac84 <_fwalk_sglue+0x38>
 800ac74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	d003      	beq.n	800ac84 <_fwalk_sglue+0x38>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4638      	mov	r0, r7
 800ac80:	47c0      	blx	r8
 800ac82:	4306      	orrs	r6, r0
 800ac84:	3568      	adds	r5, #104	@ 0x68
 800ac86:	e7e9      	b.n	800ac5c <_fwalk_sglue+0x10>

0800ac88 <sniprintf>:
 800ac88:	b40c      	push	{r2, r3}
 800ac8a:	b530      	push	{r4, r5, lr}
 800ac8c:	4b17      	ldr	r3, [pc, #92]	@ (800acec <sniprintf+0x64>)
 800ac8e:	1e0c      	subs	r4, r1, #0
 800ac90:	681d      	ldr	r5, [r3, #0]
 800ac92:	b09d      	sub	sp, #116	@ 0x74
 800ac94:	da08      	bge.n	800aca8 <sniprintf+0x20>
 800ac96:	238b      	movs	r3, #139	@ 0x8b
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9e:	b01d      	add	sp, #116	@ 0x74
 800aca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aca4:	b002      	add	sp, #8
 800aca6:	4770      	bx	lr
 800aca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800acac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800acb0:	bf14      	ite	ne
 800acb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800acb6:	4623      	moveq	r3, r4
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800acc0:	9002      	str	r0, [sp, #8]
 800acc2:	9006      	str	r0, [sp, #24]
 800acc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800acc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800acca:	ab21      	add	r3, sp, #132	@ 0x84
 800accc:	a902      	add	r1, sp, #8
 800acce:	4628      	mov	r0, r5
 800acd0:	9301      	str	r3, [sp, #4]
 800acd2:	f002 fbe3 	bl	800d49c <_svfiprintf_r>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	bfbc      	itt	lt
 800acda:	238b      	movlt	r3, #139	@ 0x8b
 800acdc:	602b      	strlt	r3, [r5, #0]
 800acde:	2c00      	cmp	r4, #0
 800ace0:	d0dd      	beq.n	800ac9e <sniprintf+0x16>
 800ace2:	9b02      	ldr	r3, [sp, #8]
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e7d9      	b.n	800ac9e <sniprintf+0x16>
 800acea:	bf00      	nop
 800acec:	20000034 	.word	0x20000034

0800acf0 <siprintf>:
 800acf0:	b40e      	push	{r1, r2, r3}
 800acf2:	b500      	push	{lr}
 800acf4:	b09c      	sub	sp, #112	@ 0x70
 800acf6:	ab1d      	add	r3, sp, #116	@ 0x74
 800acf8:	9002      	str	r0, [sp, #8]
 800acfa:	9006      	str	r0, [sp, #24]
 800acfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad00:	4809      	ldr	r0, [pc, #36]	@ (800ad28 <siprintf+0x38>)
 800ad02:	9107      	str	r1, [sp, #28]
 800ad04:	9104      	str	r1, [sp, #16]
 800ad06:	4909      	ldr	r1, [pc, #36]	@ (800ad2c <siprintf+0x3c>)
 800ad08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0c:	9105      	str	r1, [sp, #20]
 800ad0e:	6800      	ldr	r0, [r0, #0]
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	a902      	add	r1, sp, #8
 800ad14:	f002 fbc2 	bl	800d49c <_svfiprintf_r>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	b01c      	add	sp, #112	@ 0x70
 800ad20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad24:	b003      	add	sp, #12
 800ad26:	4770      	bx	lr
 800ad28:	20000034 	.word	0x20000034
 800ad2c:	ffff0208 	.word	0xffff0208

0800ad30 <__sread>:
 800ad30:	b510      	push	{r4, lr}
 800ad32:	460c      	mov	r4, r1
 800ad34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad38:	f000 f86c 	bl	800ae14 <_read_r>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	bfab      	itete	ge
 800ad40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad42:	89a3      	ldrhlt	r3, [r4, #12]
 800ad44:	181b      	addge	r3, r3, r0
 800ad46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad4a:	bfac      	ite	ge
 800ad4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad4e:	81a3      	strhlt	r3, [r4, #12]
 800ad50:	bd10      	pop	{r4, pc}

0800ad52 <__swrite>:
 800ad52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad56:	461f      	mov	r7, r3
 800ad58:	898b      	ldrh	r3, [r1, #12]
 800ad5a:	05db      	lsls	r3, r3, #23
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	4616      	mov	r6, r2
 800ad62:	d505      	bpl.n	800ad70 <__swrite+0x1e>
 800ad64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad68:	2302      	movs	r3, #2
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f000 f840 	bl	800adf0 <_lseek_r>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	463b      	mov	r3, r7
 800ad80:	4628      	mov	r0, r5
 800ad82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad86:	f000 b857 	b.w	800ae38 <_write_r>

0800ad8a <__sseek>:
 800ad8a:	b510      	push	{r4, lr}
 800ad8c:	460c      	mov	r4, r1
 800ad8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad92:	f000 f82d 	bl	800adf0 <_lseek_r>
 800ad96:	1c43      	adds	r3, r0, #1
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	bf15      	itete	ne
 800ad9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ada2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ada6:	81a3      	strheq	r3, [r4, #12]
 800ada8:	bf18      	it	ne
 800adaa:	81a3      	strhne	r3, [r4, #12]
 800adac:	bd10      	pop	{r4, pc}

0800adae <__sclose>:
 800adae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb2:	f000 b80d 	b.w	800add0 <_close_r>

0800adb6 <memset>:
 800adb6:	4402      	add	r2, r0
 800adb8:	4603      	mov	r3, r0
 800adba:	4293      	cmp	r3, r2
 800adbc:	d100      	bne.n	800adc0 <memset+0xa>
 800adbe:	4770      	bx	lr
 800adc0:	f803 1b01 	strb.w	r1, [r3], #1
 800adc4:	e7f9      	b.n	800adba <memset+0x4>
	...

0800adc8 <_localeconv_r>:
 800adc8:	4800      	ldr	r0, [pc, #0]	@ (800adcc <_localeconv_r+0x4>)
 800adca:	4770      	bx	lr
 800adcc:	20000174 	.word	0x20000174

0800add0 <_close_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d06      	ldr	r5, [pc, #24]	@ (800adec <_close_r+0x1c>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f7 ff1e 	bl	8002c1c <_close>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_close_r+0x1a>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_close_r+0x1a>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20006f24 	.word	0x20006f24

0800adf0 <_lseek_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	@ (800ae10 <_lseek_r+0x20>)
 800adf4:	4604      	mov	r4, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f7 ff33 	bl	8002c6a <_lseek>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_lseek_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_lseek_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20006f24 	.word	0x20006f24

0800ae14 <_read_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d07      	ldr	r5, [pc, #28]	@ (800ae34 <_read_r+0x20>)
 800ae18:	4604      	mov	r4, r0
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	2200      	movs	r2, #0
 800ae20:	602a      	str	r2, [r5, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f7f7 fedd 	bl	8002be2 <_read>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_read_r+0x1e>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_read_r+0x1e>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20006f24 	.word	0x20006f24

0800ae38 <_write_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d07      	ldr	r5, [pc, #28]	@ (800ae58 <_write_r+0x20>)
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	4608      	mov	r0, r1
 800ae40:	4611      	mov	r1, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f7f6 ffb8 	bl	8001dbc <_write>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_write_r+0x1e>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_write_r+0x1e>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	20006f24 	.word	0x20006f24

0800ae5c <__errno>:
 800ae5c:	4b01      	ldr	r3, [pc, #4]	@ (800ae64 <__errno+0x8>)
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000034 	.word	0x20000034

0800ae68 <__libc_init_array>:
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	4d0d      	ldr	r5, [pc, #52]	@ (800aea0 <__libc_init_array+0x38>)
 800ae6c:	4c0d      	ldr	r4, [pc, #52]	@ (800aea4 <__libc_init_array+0x3c>)
 800ae6e:	1b64      	subs	r4, r4, r5
 800ae70:	10a4      	asrs	r4, r4, #2
 800ae72:	2600      	movs	r6, #0
 800ae74:	42a6      	cmp	r6, r4
 800ae76:	d109      	bne.n	800ae8c <__libc_init_array+0x24>
 800ae78:	4d0b      	ldr	r5, [pc, #44]	@ (800aea8 <__libc_init_array+0x40>)
 800ae7a:	4c0c      	ldr	r4, [pc, #48]	@ (800aeac <__libc_init_array+0x44>)
 800ae7c:	f003 fb72 	bl	800e564 <_init>
 800ae80:	1b64      	subs	r4, r4, r5
 800ae82:	10a4      	asrs	r4, r4, #2
 800ae84:	2600      	movs	r6, #0
 800ae86:	42a6      	cmp	r6, r4
 800ae88:	d105      	bne.n	800ae96 <__libc_init_array+0x2e>
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae90:	4798      	blx	r3
 800ae92:	3601      	adds	r6, #1
 800ae94:	e7ee      	b.n	800ae74 <__libc_init_array+0xc>
 800ae96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9a:	4798      	blx	r3
 800ae9c:	3601      	adds	r6, #1
 800ae9e:	e7f2      	b.n	800ae86 <__libc_init_array+0x1e>
 800aea0:	0800edd0 	.word	0x0800edd0
 800aea4:	0800edd0 	.word	0x0800edd0
 800aea8:	0800edd0 	.word	0x0800edd0
 800aeac:	0800edd4 	.word	0x0800edd4

0800aeb0 <__retarget_lock_init_recursive>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__retarget_lock_acquire_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <__retarget_lock_release_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <memcpy>:
 800aeb6:	440a      	add	r2, r1
 800aeb8:	4291      	cmp	r1, r2
 800aeba:	f100 33ff 	add.w	r3, r0, #4294967295
 800aebe:	d100      	bne.n	800aec2 <memcpy+0xc>
 800aec0:	4770      	bx	lr
 800aec2:	b510      	push	{r4, lr}
 800aec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aecc:	4291      	cmp	r1, r2
 800aece:	d1f9      	bne.n	800aec4 <memcpy+0xe>
 800aed0:	bd10      	pop	{r4, pc}
	...

0800aed4 <nanf>:
 800aed4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800aedc <nanf+0x8>
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	7fc00000 	.word	0x7fc00000

0800aee0 <quorem>:
 800aee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	6903      	ldr	r3, [r0, #16]
 800aee6:	690c      	ldr	r4, [r1, #16]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	4607      	mov	r7, r0
 800aeec:	db7e      	blt.n	800afec <quorem+0x10c>
 800aeee:	3c01      	subs	r4, #1
 800aef0:	f101 0814 	add.w	r8, r1, #20
 800aef4:	00a3      	lsls	r3, r4, #2
 800aef6:	f100 0514 	add.w	r5, r0, #20
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af0a:	3301      	adds	r3, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af12:	fbb2 f6f3 	udiv	r6, r2, r3
 800af16:	d32e      	bcc.n	800af76 <quorem+0x96>
 800af18:	f04f 0a00 	mov.w	sl, #0
 800af1c:	46c4      	mov	ip, r8
 800af1e:	46ae      	mov	lr, r5
 800af20:	46d3      	mov	fp, sl
 800af22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800af26:	b298      	uxth	r0, r3
 800af28:	fb06 a000 	mla	r0, r6, r0, sl
 800af2c:	0c02      	lsrs	r2, r0, #16
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	fb06 2303 	mla	r3, r6, r3, r2
 800af34:	f8de 2000 	ldr.w	r2, [lr]
 800af38:	b280      	uxth	r0, r0
 800af3a:	b292      	uxth	r2, r2
 800af3c:	1a12      	subs	r2, r2, r0
 800af3e:	445a      	add	r2, fp
 800af40:	f8de 0000 	ldr.w	r0, [lr]
 800af44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af48:	b29b      	uxth	r3, r3
 800af4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800af4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800af52:	b292      	uxth	r2, r2
 800af54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800af58:	45e1      	cmp	r9, ip
 800af5a:	f84e 2b04 	str.w	r2, [lr], #4
 800af5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800af62:	d2de      	bcs.n	800af22 <quorem+0x42>
 800af64:	9b00      	ldr	r3, [sp, #0]
 800af66:	58eb      	ldr	r3, [r5, r3]
 800af68:	b92b      	cbnz	r3, 800af76 <quorem+0x96>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	429d      	cmp	r5, r3
 800af70:	461a      	mov	r2, r3
 800af72:	d32f      	bcc.n	800afd4 <quorem+0xf4>
 800af74:	613c      	str	r4, [r7, #16]
 800af76:	4638      	mov	r0, r7
 800af78:	f001 f9c2 	bl	800c300 <__mcmp>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	db25      	blt.n	800afcc <quorem+0xec>
 800af80:	4629      	mov	r1, r5
 800af82:	2000      	movs	r0, #0
 800af84:	f858 2b04 	ldr.w	r2, [r8], #4
 800af88:	f8d1 c000 	ldr.w	ip, [r1]
 800af8c:	fa1f fe82 	uxth.w	lr, r2
 800af90:	fa1f f38c 	uxth.w	r3, ip
 800af94:	eba3 030e 	sub.w	r3, r3, lr
 800af98:	4403      	add	r3, r0
 800af9a:	0c12      	lsrs	r2, r2, #16
 800af9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800afa0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afaa:	45c1      	cmp	r9, r8
 800afac:	f841 3b04 	str.w	r3, [r1], #4
 800afb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afb4:	d2e6      	bcs.n	800af84 <quorem+0xa4>
 800afb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afbe:	b922      	cbnz	r2, 800afca <quorem+0xea>
 800afc0:	3b04      	subs	r3, #4
 800afc2:	429d      	cmp	r5, r3
 800afc4:	461a      	mov	r2, r3
 800afc6:	d30b      	bcc.n	800afe0 <quorem+0x100>
 800afc8:	613c      	str	r4, [r7, #16]
 800afca:	3601      	adds	r6, #1
 800afcc:	4630      	mov	r0, r6
 800afce:	b003      	add	sp, #12
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	6812      	ldr	r2, [r2, #0]
 800afd6:	3b04      	subs	r3, #4
 800afd8:	2a00      	cmp	r2, #0
 800afda:	d1cb      	bne.n	800af74 <quorem+0x94>
 800afdc:	3c01      	subs	r4, #1
 800afde:	e7c6      	b.n	800af6e <quorem+0x8e>
 800afe0:	6812      	ldr	r2, [r2, #0]
 800afe2:	3b04      	subs	r3, #4
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d1ef      	bne.n	800afc8 <quorem+0xe8>
 800afe8:	3c01      	subs	r4, #1
 800afea:	e7ea      	b.n	800afc2 <quorem+0xe2>
 800afec:	2000      	movs	r0, #0
 800afee:	e7ee      	b.n	800afce <quorem+0xee>

0800aff0 <_dtoa_r>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	69c7      	ldr	r7, [r0, #28]
 800aff6:	b099      	sub	sp, #100	@ 0x64
 800aff8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800affc:	ec55 4b10 	vmov	r4, r5, d0
 800b000:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b002:	9109      	str	r1, [sp, #36]	@ 0x24
 800b004:	4683      	mov	fp, r0
 800b006:	920e      	str	r2, [sp, #56]	@ 0x38
 800b008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b00a:	b97f      	cbnz	r7, 800b02c <_dtoa_r+0x3c>
 800b00c:	2010      	movs	r0, #16
 800b00e:	f000 fdfd 	bl	800bc0c <malloc>
 800b012:	4602      	mov	r2, r0
 800b014:	f8cb 001c 	str.w	r0, [fp, #28]
 800b018:	b920      	cbnz	r0, 800b024 <_dtoa_r+0x34>
 800b01a:	4ba7      	ldr	r3, [pc, #668]	@ (800b2b8 <_dtoa_r+0x2c8>)
 800b01c:	21ef      	movs	r1, #239	@ 0xef
 800b01e:	48a7      	ldr	r0, [pc, #668]	@ (800b2bc <_dtoa_r+0x2cc>)
 800b020:	f002 fc2a 	bl	800d878 <__assert_func>
 800b024:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b028:	6007      	str	r7, [r0, #0]
 800b02a:	60c7      	str	r7, [r0, #12]
 800b02c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b030:	6819      	ldr	r1, [r3, #0]
 800b032:	b159      	cbz	r1, 800b04c <_dtoa_r+0x5c>
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	604a      	str	r2, [r1, #4]
 800b038:	2301      	movs	r3, #1
 800b03a:	4093      	lsls	r3, r2
 800b03c:	608b      	str	r3, [r1, #8]
 800b03e:	4658      	mov	r0, fp
 800b040:	f000 feda 	bl	800bdf8 <_Bfree>
 800b044:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	1e2b      	subs	r3, r5, #0
 800b04e:	bfb9      	ittee	lt
 800b050:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b054:	9303      	strlt	r3, [sp, #12]
 800b056:	2300      	movge	r3, #0
 800b058:	6033      	strge	r3, [r6, #0]
 800b05a:	9f03      	ldr	r7, [sp, #12]
 800b05c:	4b98      	ldr	r3, [pc, #608]	@ (800b2c0 <_dtoa_r+0x2d0>)
 800b05e:	bfbc      	itt	lt
 800b060:	2201      	movlt	r2, #1
 800b062:	6032      	strlt	r2, [r6, #0]
 800b064:	43bb      	bics	r3, r7
 800b066:	d112      	bne.n	800b08e <_dtoa_r+0x9e>
 800b068:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b06a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b074:	4323      	orrs	r3, r4
 800b076:	f000 854d 	beq.w	800bb14 <_dtoa_r+0xb24>
 800b07a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b07c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b2d4 <_dtoa_r+0x2e4>
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 854f 	beq.w	800bb24 <_dtoa_r+0xb34>
 800b086:	f10a 0303 	add.w	r3, sl, #3
 800b08a:	f000 bd49 	b.w	800bb20 <_dtoa_r+0xb30>
 800b08e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b092:	2200      	movs	r2, #0
 800b094:	ec51 0b17 	vmov	r0, r1, d7
 800b098:	2300      	movs	r3, #0
 800b09a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b09e:	f7f5 fceb 	bl	8000a78 <__aeabi_dcmpeq>
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	b158      	cbz	r0, 800b0be <_dtoa_r+0xce>
 800b0a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	6013      	str	r3, [r2, #0]
 800b0ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0ae:	b113      	cbz	r3, 800b0b6 <_dtoa_r+0xc6>
 800b0b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b0b2:	4b84      	ldr	r3, [pc, #528]	@ (800b2c4 <_dtoa_r+0x2d4>)
 800b0b4:	6013      	str	r3, [r2, #0]
 800b0b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b2d8 <_dtoa_r+0x2e8>
 800b0ba:	f000 bd33 	b.w	800bb24 <_dtoa_r+0xb34>
 800b0be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b0c2:	aa16      	add	r2, sp, #88	@ 0x58
 800b0c4:	a917      	add	r1, sp, #92	@ 0x5c
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f001 fa3a 	bl	800c540 <__d2b>
 800b0cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b0d0:	4681      	mov	r9, r0
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	d077      	beq.n	800b1c6 <_dtoa_r+0x1d6>
 800b0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b0e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b0ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4b74      	ldr	r3, [pc, #464]	@ (800b2c8 <_dtoa_r+0x2d8>)
 800b0f6:	f7f5 f89f 	bl	8000238 <__aeabi_dsub>
 800b0fa:	a369      	add	r3, pc, #420	@ (adr r3, 800b2a0 <_dtoa_r+0x2b0>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f7f5 fa52 	bl	80005a8 <__aeabi_dmul>
 800b104:	a368      	add	r3, pc, #416	@ (adr r3, 800b2a8 <_dtoa_r+0x2b8>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	f7f5 f897 	bl	800023c <__adddf3>
 800b10e:	4604      	mov	r4, r0
 800b110:	4630      	mov	r0, r6
 800b112:	460d      	mov	r5, r1
 800b114:	f7f5 f9de 	bl	80004d4 <__aeabi_i2d>
 800b118:	a365      	add	r3, pc, #404	@ (adr r3, 800b2b0 <_dtoa_r+0x2c0>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 fa43 	bl	80005a8 <__aeabi_dmul>
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4620      	mov	r0, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	f7f5 f887 	bl	800023c <__adddf3>
 800b12e:	4604      	mov	r4, r0
 800b130:	460d      	mov	r5, r1
 800b132:	f7f5 fce9 	bl	8000b08 <__aeabi_d2iz>
 800b136:	2200      	movs	r2, #0
 800b138:	4607      	mov	r7, r0
 800b13a:	2300      	movs	r3, #0
 800b13c:	4620      	mov	r0, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	f7f5 fca4 	bl	8000a8c <__aeabi_dcmplt>
 800b144:	b140      	cbz	r0, 800b158 <_dtoa_r+0x168>
 800b146:	4638      	mov	r0, r7
 800b148:	f7f5 f9c4 	bl	80004d4 <__aeabi_i2d>
 800b14c:	4622      	mov	r2, r4
 800b14e:	462b      	mov	r3, r5
 800b150:	f7f5 fc92 	bl	8000a78 <__aeabi_dcmpeq>
 800b154:	b900      	cbnz	r0, 800b158 <_dtoa_r+0x168>
 800b156:	3f01      	subs	r7, #1
 800b158:	2f16      	cmp	r7, #22
 800b15a:	d851      	bhi.n	800b200 <_dtoa_r+0x210>
 800b15c:	4b5b      	ldr	r3, [pc, #364]	@ (800b2cc <_dtoa_r+0x2dc>)
 800b15e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b16a:	f7f5 fc8f 	bl	8000a8c <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d048      	beq.n	800b204 <_dtoa_r+0x214>
 800b172:	3f01      	subs	r7, #1
 800b174:	2300      	movs	r3, #0
 800b176:	9312      	str	r3, [sp, #72]	@ 0x48
 800b178:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b17a:	1b9b      	subs	r3, r3, r6
 800b17c:	1e5a      	subs	r2, r3, #1
 800b17e:	bf44      	itt	mi
 800b180:	f1c3 0801 	rsbmi	r8, r3, #1
 800b184:	2300      	movmi	r3, #0
 800b186:	9208      	str	r2, [sp, #32]
 800b188:	bf54      	ite	pl
 800b18a:	f04f 0800 	movpl.w	r8, #0
 800b18e:	9308      	strmi	r3, [sp, #32]
 800b190:	2f00      	cmp	r7, #0
 800b192:	db39      	blt.n	800b208 <_dtoa_r+0x218>
 800b194:	9b08      	ldr	r3, [sp, #32]
 800b196:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b198:	443b      	add	r3, r7
 800b19a:	9308      	str	r3, [sp, #32]
 800b19c:	2300      	movs	r3, #0
 800b19e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a2:	2b09      	cmp	r3, #9
 800b1a4:	d864      	bhi.n	800b270 <_dtoa_r+0x280>
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	bfc4      	itt	gt
 800b1aa:	3b04      	subgt	r3, #4
 800b1ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b0:	f1a3 0302 	sub.w	r3, r3, #2
 800b1b4:	bfcc      	ite	gt
 800b1b6:	2400      	movgt	r4, #0
 800b1b8:	2401      	movle	r4, #1
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d863      	bhi.n	800b286 <_dtoa_r+0x296>
 800b1be:	e8df f003 	tbb	[pc, r3]
 800b1c2:	372a      	.short	0x372a
 800b1c4:	5535      	.short	0x5535
 800b1c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b1ca:	441e      	add	r6, r3
 800b1cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b1d0:	2b20      	cmp	r3, #32
 800b1d2:	bfc1      	itttt	gt
 800b1d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b1d8:	409f      	lslgt	r7, r3
 800b1da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b1de:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b1e2:	bfd6      	itet	le
 800b1e4:	f1c3 0320 	rsble	r3, r3, #32
 800b1e8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b1ec:	fa04 f003 	lslle.w	r0, r4, r3
 800b1f0:	f7f5 f960 	bl	80004b4 <__aeabi_ui2d>
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b1fa:	3e01      	subs	r6, #1
 800b1fc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b1fe:	e777      	b.n	800b0f0 <_dtoa_r+0x100>
 800b200:	2301      	movs	r3, #1
 800b202:	e7b8      	b.n	800b176 <_dtoa_r+0x186>
 800b204:	9012      	str	r0, [sp, #72]	@ 0x48
 800b206:	e7b7      	b.n	800b178 <_dtoa_r+0x188>
 800b208:	427b      	negs	r3, r7
 800b20a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b20c:	2300      	movs	r3, #0
 800b20e:	eba8 0807 	sub.w	r8, r8, r7
 800b212:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b214:	e7c4      	b.n	800b1a0 <_dtoa_r+0x1b0>
 800b216:	2300      	movs	r3, #0
 800b218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b21a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	dc35      	bgt.n	800b28c <_dtoa_r+0x29c>
 800b220:	2301      	movs	r3, #1
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	9307      	str	r3, [sp, #28]
 800b226:	461a      	mov	r2, r3
 800b228:	920e      	str	r2, [sp, #56]	@ 0x38
 800b22a:	e00b      	b.n	800b244 <_dtoa_r+0x254>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e7f3      	b.n	800b218 <_dtoa_r+0x228>
 800b230:	2300      	movs	r3, #0
 800b232:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b236:	18fb      	adds	r3, r7, r3
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	bfb8      	it	lt
 800b242:	2301      	movlt	r3, #1
 800b244:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b248:	2100      	movs	r1, #0
 800b24a:	2204      	movs	r2, #4
 800b24c:	f102 0514 	add.w	r5, r2, #20
 800b250:	429d      	cmp	r5, r3
 800b252:	d91f      	bls.n	800b294 <_dtoa_r+0x2a4>
 800b254:	6041      	str	r1, [r0, #4]
 800b256:	4658      	mov	r0, fp
 800b258:	f000 fd8e 	bl	800bd78 <_Balloc>
 800b25c:	4682      	mov	sl, r0
 800b25e:	2800      	cmp	r0, #0
 800b260:	d13c      	bne.n	800b2dc <_dtoa_r+0x2ec>
 800b262:	4b1b      	ldr	r3, [pc, #108]	@ (800b2d0 <_dtoa_r+0x2e0>)
 800b264:	4602      	mov	r2, r0
 800b266:	f240 11af 	movw	r1, #431	@ 0x1af
 800b26a:	e6d8      	b.n	800b01e <_dtoa_r+0x2e>
 800b26c:	2301      	movs	r3, #1
 800b26e:	e7e0      	b.n	800b232 <_dtoa_r+0x242>
 800b270:	2401      	movs	r4, #1
 800b272:	2300      	movs	r3, #0
 800b274:	9309      	str	r3, [sp, #36]	@ 0x24
 800b276:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b278:	f04f 33ff 	mov.w	r3, #4294967295
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	9307      	str	r3, [sp, #28]
 800b280:	2200      	movs	r2, #0
 800b282:	2312      	movs	r3, #18
 800b284:	e7d0      	b.n	800b228 <_dtoa_r+0x238>
 800b286:	2301      	movs	r3, #1
 800b288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b28a:	e7f5      	b.n	800b278 <_dtoa_r+0x288>
 800b28c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	e7d7      	b.n	800b244 <_dtoa_r+0x254>
 800b294:	3101      	adds	r1, #1
 800b296:	0052      	lsls	r2, r2, #1
 800b298:	e7d8      	b.n	800b24c <_dtoa_r+0x25c>
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w
 800b2a0:	636f4361 	.word	0x636f4361
 800b2a4:	3fd287a7 	.word	0x3fd287a7
 800b2a8:	8b60c8b3 	.word	0x8b60c8b3
 800b2ac:	3fc68a28 	.word	0x3fc68a28
 800b2b0:	509f79fb 	.word	0x509f79fb
 800b2b4:	3fd34413 	.word	0x3fd34413
 800b2b8:	0800e9e2 	.word	0x0800e9e2
 800b2bc:	0800e9f9 	.word	0x0800e9f9
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	0800e9ad 	.word	0x0800e9ad
 800b2c8:	3ff80000 	.word	0x3ff80000
 800b2cc:	0800eaf0 	.word	0x0800eaf0
 800b2d0:	0800ea51 	.word	0x0800ea51
 800b2d4:	0800e9de 	.word	0x0800e9de
 800b2d8:	0800e9ac 	.word	0x0800e9ac
 800b2dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b2e0:	6018      	str	r0, [r3, #0]
 800b2e2:	9b07      	ldr	r3, [sp, #28]
 800b2e4:	2b0e      	cmp	r3, #14
 800b2e6:	f200 80a4 	bhi.w	800b432 <_dtoa_r+0x442>
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	f000 80a1 	beq.w	800b432 <_dtoa_r+0x442>
 800b2f0:	2f00      	cmp	r7, #0
 800b2f2:	dd33      	ble.n	800b35c <_dtoa_r+0x36c>
 800b2f4:	4bad      	ldr	r3, [pc, #692]	@ (800b5ac <_dtoa_r+0x5bc>)
 800b2f6:	f007 020f 	and.w	r2, r7, #15
 800b2fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2fe:	ed93 7b00 	vldr	d7, [r3]
 800b302:	05f8      	lsls	r0, r7, #23
 800b304:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b308:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b30c:	d516      	bpl.n	800b33c <_dtoa_r+0x34c>
 800b30e:	4ba8      	ldr	r3, [pc, #672]	@ (800b5b0 <_dtoa_r+0x5c0>)
 800b310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b314:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b318:	f7f5 fa70 	bl	80007fc <__aeabi_ddiv>
 800b31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b320:	f004 040f 	and.w	r4, r4, #15
 800b324:	2603      	movs	r6, #3
 800b326:	4da2      	ldr	r5, [pc, #648]	@ (800b5b0 <_dtoa_r+0x5c0>)
 800b328:	b954      	cbnz	r4, 800b340 <_dtoa_r+0x350>
 800b32a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b332:	f7f5 fa63 	bl	80007fc <__aeabi_ddiv>
 800b336:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b33a:	e028      	b.n	800b38e <_dtoa_r+0x39e>
 800b33c:	2602      	movs	r6, #2
 800b33e:	e7f2      	b.n	800b326 <_dtoa_r+0x336>
 800b340:	07e1      	lsls	r1, r4, #31
 800b342:	d508      	bpl.n	800b356 <_dtoa_r+0x366>
 800b344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b348:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b34c:	f7f5 f92c 	bl	80005a8 <__aeabi_dmul>
 800b350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b354:	3601      	adds	r6, #1
 800b356:	1064      	asrs	r4, r4, #1
 800b358:	3508      	adds	r5, #8
 800b35a:	e7e5      	b.n	800b328 <_dtoa_r+0x338>
 800b35c:	f000 80d2 	beq.w	800b504 <_dtoa_r+0x514>
 800b360:	427c      	negs	r4, r7
 800b362:	4b92      	ldr	r3, [pc, #584]	@ (800b5ac <_dtoa_r+0x5bc>)
 800b364:	4d92      	ldr	r5, [pc, #584]	@ (800b5b0 <_dtoa_r+0x5c0>)
 800b366:	f004 020f 	and.w	r2, r4, #15
 800b36a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b376:	f7f5 f917 	bl	80005a8 <__aeabi_dmul>
 800b37a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b37e:	1124      	asrs	r4, r4, #4
 800b380:	2300      	movs	r3, #0
 800b382:	2602      	movs	r6, #2
 800b384:	2c00      	cmp	r4, #0
 800b386:	f040 80b2 	bne.w	800b4ee <_dtoa_r+0x4fe>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1d3      	bne.n	800b336 <_dtoa_r+0x346>
 800b38e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b390:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 80b7 	beq.w	800b508 <_dtoa_r+0x518>
 800b39a:	4b86      	ldr	r3, [pc, #536]	@ (800b5b4 <_dtoa_r+0x5c4>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7f5 fb73 	bl	8000a8c <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f000 80ae 	beq.w	800b508 <_dtoa_r+0x518>
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	f000 80aa 	beq.w	800b508 <_dtoa_r+0x518>
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dd37      	ble.n	800b42a <_dtoa_r+0x43a>
 800b3ba:	1e7b      	subs	r3, r7, #1
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	4b7d      	ldr	r3, [pc, #500]	@ (800b5b8 <_dtoa_r+0x5c8>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7f5 f8ef 	bl	80005a8 <__aeabi_dmul>
 800b3ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ce:	9c00      	ldr	r4, [sp, #0]
 800b3d0:	3601      	adds	r6, #1
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7f5 f87e 	bl	80004d4 <__aeabi_i2d>
 800b3d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3dc:	f7f5 f8e4 	bl	80005a8 <__aeabi_dmul>
 800b3e0:	4b76      	ldr	r3, [pc, #472]	@ (800b5bc <_dtoa_r+0x5cc>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f7f4 ff2a 	bl	800023c <__adddf3>
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b3ee:	2c00      	cmp	r4, #0
 800b3f0:	f040 808d 	bne.w	800b50e <_dtoa_r+0x51e>
 800b3f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3f8:	4b71      	ldr	r3, [pc, #452]	@ (800b5c0 <_dtoa_r+0x5d0>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f7f4 ff1c 	bl	8000238 <__aeabi_dsub>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b408:	462a      	mov	r2, r5
 800b40a:	4633      	mov	r3, r6
 800b40c:	f7f5 fb5c 	bl	8000ac8 <__aeabi_dcmpgt>
 800b410:	2800      	cmp	r0, #0
 800b412:	f040 828b 	bne.w	800b92c <_dtoa_r+0x93c>
 800b416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b41a:	462a      	mov	r2, r5
 800b41c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b420:	f7f5 fb34 	bl	8000a8c <__aeabi_dcmplt>
 800b424:	2800      	cmp	r0, #0
 800b426:	f040 8128 	bne.w	800b67a <_dtoa_r+0x68a>
 800b42a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b42e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b432:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b434:	2b00      	cmp	r3, #0
 800b436:	f2c0 815a 	blt.w	800b6ee <_dtoa_r+0x6fe>
 800b43a:	2f0e      	cmp	r7, #14
 800b43c:	f300 8157 	bgt.w	800b6ee <_dtoa_r+0x6fe>
 800b440:	4b5a      	ldr	r3, [pc, #360]	@ (800b5ac <_dtoa_r+0x5bc>)
 800b442:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b446:	ed93 7b00 	vldr	d7, [r3]
 800b44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	ed8d 7b00 	vstr	d7, [sp]
 800b452:	da03      	bge.n	800b45c <_dtoa_r+0x46c>
 800b454:	9b07      	ldr	r3, [sp, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	f340 8101 	ble.w	800b65e <_dtoa_r+0x66e>
 800b45c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b460:	4656      	mov	r6, sl
 800b462:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f5 f9c7 	bl	80007fc <__aeabi_ddiv>
 800b46e:	f7f5 fb4b 	bl	8000b08 <__aeabi_d2iz>
 800b472:	4680      	mov	r8, r0
 800b474:	f7f5 f82e 	bl	80004d4 <__aeabi_i2d>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	f7f5 f894 	bl	80005a8 <__aeabi_dmul>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4620      	mov	r0, r4
 800b486:	4629      	mov	r1, r5
 800b488:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b48c:	f7f4 fed4 	bl	8000238 <__aeabi_dsub>
 800b490:	f806 4b01 	strb.w	r4, [r6], #1
 800b494:	9d07      	ldr	r5, [sp, #28]
 800b496:	eba6 040a 	sub.w	r4, r6, sl
 800b49a:	42a5      	cmp	r5, r4
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	f040 8117 	bne.w	800b6d2 <_dtoa_r+0x6e2>
 800b4a4:	f7f4 feca 	bl	800023c <__adddf3>
 800b4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	f7f5 fb0a 	bl	8000ac8 <__aeabi_dcmpgt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f040 80f9 	bne.w	800b6ac <_dtoa_r+0x6bc>
 800b4ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f5 fad9 	bl	8000a78 <__aeabi_dcmpeq>
 800b4c6:	b118      	cbz	r0, 800b4d0 <_dtoa_r+0x4e0>
 800b4c8:	f018 0f01 	tst.w	r8, #1
 800b4cc:	f040 80ee 	bne.w	800b6ac <_dtoa_r+0x6bc>
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4658      	mov	r0, fp
 800b4d4:	f000 fc90 	bl	800bdf8 <_Bfree>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	7033      	strb	r3, [r6, #0]
 800b4dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b4de:	3701      	adds	r7, #1
 800b4e0:	601f      	str	r7, [r3, #0]
 800b4e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 831d 	beq.w	800bb24 <_dtoa_r+0xb34>
 800b4ea:	601e      	str	r6, [r3, #0]
 800b4ec:	e31a      	b.n	800bb24 <_dtoa_r+0xb34>
 800b4ee:	07e2      	lsls	r2, r4, #31
 800b4f0:	d505      	bpl.n	800b4fe <_dtoa_r+0x50e>
 800b4f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4f6:	f7f5 f857 	bl	80005a8 <__aeabi_dmul>
 800b4fa:	3601      	adds	r6, #1
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	1064      	asrs	r4, r4, #1
 800b500:	3508      	adds	r5, #8
 800b502:	e73f      	b.n	800b384 <_dtoa_r+0x394>
 800b504:	2602      	movs	r6, #2
 800b506:	e742      	b.n	800b38e <_dtoa_r+0x39e>
 800b508:	9c07      	ldr	r4, [sp, #28]
 800b50a:	9704      	str	r7, [sp, #16]
 800b50c:	e761      	b.n	800b3d2 <_dtoa_r+0x3e2>
 800b50e:	4b27      	ldr	r3, [pc, #156]	@ (800b5ac <_dtoa_r+0x5bc>)
 800b510:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b516:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b51a:	4454      	add	r4, sl
 800b51c:	2900      	cmp	r1, #0
 800b51e:	d053      	beq.n	800b5c8 <_dtoa_r+0x5d8>
 800b520:	4928      	ldr	r1, [pc, #160]	@ (800b5c4 <_dtoa_r+0x5d4>)
 800b522:	2000      	movs	r0, #0
 800b524:	f7f5 f96a 	bl	80007fc <__aeabi_ddiv>
 800b528:	4633      	mov	r3, r6
 800b52a:	462a      	mov	r2, r5
 800b52c:	f7f4 fe84 	bl	8000238 <__aeabi_dsub>
 800b530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b534:	4656      	mov	r6, sl
 800b536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b53a:	f7f5 fae5 	bl	8000b08 <__aeabi_d2iz>
 800b53e:	4605      	mov	r5, r0
 800b540:	f7f4 ffc8 	bl	80004d4 <__aeabi_i2d>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b54c:	f7f4 fe74 	bl	8000238 <__aeabi_dsub>
 800b550:	3530      	adds	r5, #48	@ 0x30
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b55a:	f806 5b01 	strb.w	r5, [r6], #1
 800b55e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b562:	f7f5 fa93 	bl	8000a8c <__aeabi_dcmplt>
 800b566:	2800      	cmp	r0, #0
 800b568:	d171      	bne.n	800b64e <_dtoa_r+0x65e>
 800b56a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b56e:	4911      	ldr	r1, [pc, #68]	@ (800b5b4 <_dtoa_r+0x5c4>)
 800b570:	2000      	movs	r0, #0
 800b572:	f7f4 fe61 	bl	8000238 <__aeabi_dsub>
 800b576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b57a:	f7f5 fa87 	bl	8000a8c <__aeabi_dcmplt>
 800b57e:	2800      	cmp	r0, #0
 800b580:	f040 8095 	bne.w	800b6ae <_dtoa_r+0x6be>
 800b584:	42a6      	cmp	r6, r4
 800b586:	f43f af50 	beq.w	800b42a <_dtoa_r+0x43a>
 800b58a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b58e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b8 <_dtoa_r+0x5c8>)
 800b590:	2200      	movs	r2, #0
 800b592:	f7f5 f809 	bl	80005a8 <__aeabi_dmul>
 800b596:	4b08      	ldr	r3, [pc, #32]	@ (800b5b8 <_dtoa_r+0x5c8>)
 800b598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b59c:	2200      	movs	r2, #0
 800b59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5a2:	f7f5 f801 	bl	80005a8 <__aeabi_dmul>
 800b5a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5aa:	e7c4      	b.n	800b536 <_dtoa_r+0x546>
 800b5ac:	0800eaf0 	.word	0x0800eaf0
 800b5b0:	0800eac8 	.word	0x0800eac8
 800b5b4:	3ff00000 	.word	0x3ff00000
 800b5b8:	40240000 	.word	0x40240000
 800b5bc:	401c0000 	.word	0x401c0000
 800b5c0:	40140000 	.word	0x40140000
 800b5c4:	3fe00000 	.word	0x3fe00000
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7f4 ffec 	bl	80005a8 <__aeabi_dmul>
 800b5d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b5d6:	4656      	mov	r6, sl
 800b5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5dc:	f7f5 fa94 	bl	8000b08 <__aeabi_d2iz>
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	f7f4 ff77 	bl	80004d4 <__aeabi_i2d>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ee:	f7f4 fe23 	bl	8000238 <__aeabi_dsub>
 800b5f2:	3530      	adds	r5, #48	@ 0x30
 800b5f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	42a6      	cmp	r6, r4
 800b5fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b602:	f04f 0200 	mov.w	r2, #0
 800b606:	d124      	bne.n	800b652 <_dtoa_r+0x662>
 800b608:	4bac      	ldr	r3, [pc, #688]	@ (800b8bc <_dtoa_r+0x8cc>)
 800b60a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b60e:	f7f4 fe15 	bl	800023c <__adddf3>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b61a:	f7f5 fa55 	bl	8000ac8 <__aeabi_dcmpgt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d145      	bne.n	800b6ae <_dtoa_r+0x6be>
 800b622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b626:	49a5      	ldr	r1, [pc, #660]	@ (800b8bc <_dtoa_r+0x8cc>)
 800b628:	2000      	movs	r0, #0
 800b62a:	f7f4 fe05 	bl	8000238 <__aeabi_dsub>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b636:	f7f5 fa29 	bl	8000a8c <__aeabi_dcmplt>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	f43f aef5 	beq.w	800b42a <_dtoa_r+0x43a>
 800b640:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b642:	1e73      	subs	r3, r6, #1
 800b644:	9315      	str	r3, [sp, #84]	@ 0x54
 800b646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b64a:	2b30      	cmp	r3, #48	@ 0x30
 800b64c:	d0f8      	beq.n	800b640 <_dtoa_r+0x650>
 800b64e:	9f04      	ldr	r7, [sp, #16]
 800b650:	e73e      	b.n	800b4d0 <_dtoa_r+0x4e0>
 800b652:	4b9b      	ldr	r3, [pc, #620]	@ (800b8c0 <_dtoa_r+0x8d0>)
 800b654:	f7f4 ffa8 	bl	80005a8 <__aeabi_dmul>
 800b658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b65c:	e7bc      	b.n	800b5d8 <_dtoa_r+0x5e8>
 800b65e:	d10c      	bne.n	800b67a <_dtoa_r+0x68a>
 800b660:	4b98      	ldr	r3, [pc, #608]	@ (800b8c4 <_dtoa_r+0x8d4>)
 800b662:	2200      	movs	r2, #0
 800b664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b668:	f7f4 ff9e 	bl	80005a8 <__aeabi_dmul>
 800b66c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b670:	f7f5 fa20 	bl	8000ab4 <__aeabi_dcmpge>
 800b674:	2800      	cmp	r0, #0
 800b676:	f000 8157 	beq.w	800b928 <_dtoa_r+0x938>
 800b67a:	2400      	movs	r4, #0
 800b67c:	4625      	mov	r5, r4
 800b67e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b680:	43db      	mvns	r3, r3
 800b682:	9304      	str	r3, [sp, #16]
 800b684:	4656      	mov	r6, sl
 800b686:	2700      	movs	r7, #0
 800b688:	4621      	mov	r1, r4
 800b68a:	4658      	mov	r0, fp
 800b68c:	f000 fbb4 	bl	800bdf8 <_Bfree>
 800b690:	2d00      	cmp	r5, #0
 800b692:	d0dc      	beq.n	800b64e <_dtoa_r+0x65e>
 800b694:	b12f      	cbz	r7, 800b6a2 <_dtoa_r+0x6b2>
 800b696:	42af      	cmp	r7, r5
 800b698:	d003      	beq.n	800b6a2 <_dtoa_r+0x6b2>
 800b69a:	4639      	mov	r1, r7
 800b69c:	4658      	mov	r0, fp
 800b69e:	f000 fbab 	bl	800bdf8 <_Bfree>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	f000 fba7 	bl	800bdf8 <_Bfree>
 800b6aa:	e7d0      	b.n	800b64e <_dtoa_r+0x65e>
 800b6ac:	9704      	str	r7, [sp, #16]
 800b6ae:	4633      	mov	r3, r6
 800b6b0:	461e      	mov	r6, r3
 800b6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6b6:	2a39      	cmp	r2, #57	@ 0x39
 800b6b8:	d107      	bne.n	800b6ca <_dtoa_r+0x6da>
 800b6ba:	459a      	cmp	sl, r3
 800b6bc:	d1f8      	bne.n	800b6b0 <_dtoa_r+0x6c0>
 800b6be:	9a04      	ldr	r2, [sp, #16]
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	9204      	str	r2, [sp, #16]
 800b6c4:	2230      	movs	r2, #48	@ 0x30
 800b6c6:	f88a 2000 	strb.w	r2, [sl]
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	3201      	adds	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	e7bd      	b.n	800b64e <_dtoa_r+0x65e>
 800b6d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b8c0 <_dtoa_r+0x8d0>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f7f4 ff67 	bl	80005a8 <__aeabi_dmul>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	f7f5 f9c9 	bl	8000a78 <__aeabi_dcmpeq>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f43f aebb 	beq.w	800b462 <_dtoa_r+0x472>
 800b6ec:	e6f0      	b.n	800b4d0 <_dtoa_r+0x4e0>
 800b6ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	f000 80db 	beq.w	800b8ac <_dtoa_r+0x8bc>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f8:	2a01      	cmp	r2, #1
 800b6fa:	f300 80bf 	bgt.w	800b87c <_dtoa_r+0x88c>
 800b6fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b700:	2a00      	cmp	r2, #0
 800b702:	f000 80b7 	beq.w	800b874 <_dtoa_r+0x884>
 800b706:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b70a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b70c:	4646      	mov	r6, r8
 800b70e:	9a08      	ldr	r2, [sp, #32]
 800b710:	2101      	movs	r1, #1
 800b712:	441a      	add	r2, r3
 800b714:	4658      	mov	r0, fp
 800b716:	4498      	add	r8, r3
 800b718:	9208      	str	r2, [sp, #32]
 800b71a:	f000 fc6b 	bl	800bff4 <__i2b>
 800b71e:	4605      	mov	r5, r0
 800b720:	b15e      	cbz	r6, 800b73a <_dtoa_r+0x74a>
 800b722:	9b08      	ldr	r3, [sp, #32]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd08      	ble.n	800b73a <_dtoa_r+0x74a>
 800b728:	42b3      	cmp	r3, r6
 800b72a:	9a08      	ldr	r2, [sp, #32]
 800b72c:	bfa8      	it	ge
 800b72e:	4633      	movge	r3, r6
 800b730:	eba8 0803 	sub.w	r8, r8, r3
 800b734:	1af6      	subs	r6, r6, r3
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	9308      	str	r3, [sp, #32]
 800b73a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b73c:	b1f3      	cbz	r3, 800b77c <_dtoa_r+0x78c>
 800b73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 80b7 	beq.w	800b8b4 <_dtoa_r+0x8c4>
 800b746:	b18c      	cbz	r4, 800b76c <_dtoa_r+0x77c>
 800b748:	4629      	mov	r1, r5
 800b74a:	4622      	mov	r2, r4
 800b74c:	4658      	mov	r0, fp
 800b74e:	f000 fd11 	bl	800c174 <__pow5mult>
 800b752:	464a      	mov	r2, r9
 800b754:	4601      	mov	r1, r0
 800b756:	4605      	mov	r5, r0
 800b758:	4658      	mov	r0, fp
 800b75a:	f000 fc61 	bl	800c020 <__multiply>
 800b75e:	4649      	mov	r1, r9
 800b760:	9004      	str	r0, [sp, #16]
 800b762:	4658      	mov	r0, fp
 800b764:	f000 fb48 	bl	800bdf8 <_Bfree>
 800b768:	9b04      	ldr	r3, [sp, #16]
 800b76a:	4699      	mov	r9, r3
 800b76c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b76e:	1b1a      	subs	r2, r3, r4
 800b770:	d004      	beq.n	800b77c <_dtoa_r+0x78c>
 800b772:	4649      	mov	r1, r9
 800b774:	4658      	mov	r0, fp
 800b776:	f000 fcfd 	bl	800c174 <__pow5mult>
 800b77a:	4681      	mov	r9, r0
 800b77c:	2101      	movs	r1, #1
 800b77e:	4658      	mov	r0, fp
 800b780:	f000 fc38 	bl	800bff4 <__i2b>
 800b784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b786:	4604      	mov	r4, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 81cf 	beq.w	800bb2c <_dtoa_r+0xb3c>
 800b78e:	461a      	mov	r2, r3
 800b790:	4601      	mov	r1, r0
 800b792:	4658      	mov	r0, fp
 800b794:	f000 fcee 	bl	800c174 <__pow5mult>
 800b798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	4604      	mov	r4, r0
 800b79e:	f300 8095 	bgt.w	800b8cc <_dtoa_r+0x8dc>
 800b7a2:	9b02      	ldr	r3, [sp, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f040 8087 	bne.w	800b8b8 <_dtoa_r+0x8c8>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f040 8089 	bne.w	800b8c8 <_dtoa_r+0x8d8>
 800b7b6:	9b03      	ldr	r3, [sp, #12]
 800b7b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7bc:	0d1b      	lsrs	r3, r3, #20
 800b7be:	051b      	lsls	r3, r3, #20
 800b7c0:	b12b      	cbz	r3, 800b7ce <_dtoa_r+0x7de>
 800b7c2:	9b08      	ldr	r3, [sp, #32]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	9308      	str	r3, [sp, #32]
 800b7c8:	f108 0801 	add.w	r8, r8, #1
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 81b0 	beq.w	800bb38 <_dtoa_r+0xb48>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7de:	6918      	ldr	r0, [r3, #16]
 800b7e0:	f000 fbbc 	bl	800bf5c <__hi0bits>
 800b7e4:	f1c0 0020 	rsb	r0, r0, #32
 800b7e8:	9b08      	ldr	r3, [sp, #32]
 800b7ea:	4418      	add	r0, r3
 800b7ec:	f010 001f 	ands.w	r0, r0, #31
 800b7f0:	d077      	beq.n	800b8e2 <_dtoa_r+0x8f2>
 800b7f2:	f1c0 0320 	rsb	r3, r0, #32
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	dd6b      	ble.n	800b8d2 <_dtoa_r+0x8e2>
 800b7fa:	9b08      	ldr	r3, [sp, #32]
 800b7fc:	f1c0 001c 	rsb	r0, r0, #28
 800b800:	4403      	add	r3, r0
 800b802:	4480      	add	r8, r0
 800b804:	4406      	add	r6, r0
 800b806:	9308      	str	r3, [sp, #32]
 800b808:	f1b8 0f00 	cmp.w	r8, #0
 800b80c:	dd05      	ble.n	800b81a <_dtoa_r+0x82a>
 800b80e:	4649      	mov	r1, r9
 800b810:	4642      	mov	r2, r8
 800b812:	4658      	mov	r0, fp
 800b814:	f000 fd08 	bl	800c228 <__lshift>
 800b818:	4681      	mov	r9, r0
 800b81a:	9b08      	ldr	r3, [sp, #32]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dd05      	ble.n	800b82c <_dtoa_r+0x83c>
 800b820:	4621      	mov	r1, r4
 800b822:	461a      	mov	r2, r3
 800b824:	4658      	mov	r0, fp
 800b826:	f000 fcff 	bl	800c228 <__lshift>
 800b82a:	4604      	mov	r4, r0
 800b82c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d059      	beq.n	800b8e6 <_dtoa_r+0x8f6>
 800b832:	4621      	mov	r1, r4
 800b834:	4648      	mov	r0, r9
 800b836:	f000 fd63 	bl	800c300 <__mcmp>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	da53      	bge.n	800b8e6 <_dtoa_r+0x8f6>
 800b83e:	1e7b      	subs	r3, r7, #1
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	4649      	mov	r1, r9
 800b844:	2300      	movs	r3, #0
 800b846:	220a      	movs	r2, #10
 800b848:	4658      	mov	r0, fp
 800b84a:	f000 faf7 	bl	800be3c <__multadd>
 800b84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b850:	4681      	mov	r9, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 8172 	beq.w	800bb3c <_dtoa_r+0xb4c>
 800b858:	2300      	movs	r3, #0
 800b85a:	4629      	mov	r1, r5
 800b85c:	220a      	movs	r2, #10
 800b85e:	4658      	mov	r0, fp
 800b860:	f000 faec 	bl	800be3c <__multadd>
 800b864:	9b00      	ldr	r3, [sp, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	4605      	mov	r5, r0
 800b86a:	dc67      	bgt.n	800b93c <_dtoa_r+0x94c>
 800b86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b86e:	2b02      	cmp	r3, #2
 800b870:	dc41      	bgt.n	800b8f6 <_dtoa_r+0x906>
 800b872:	e063      	b.n	800b93c <_dtoa_r+0x94c>
 800b874:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b876:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b87a:	e746      	b.n	800b70a <_dtoa_r+0x71a>
 800b87c:	9b07      	ldr	r3, [sp, #28]
 800b87e:	1e5c      	subs	r4, r3, #1
 800b880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b882:	42a3      	cmp	r3, r4
 800b884:	bfbf      	itttt	lt
 800b886:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b888:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b88a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b88c:	1ae3      	sublt	r3, r4, r3
 800b88e:	bfb4      	ite	lt
 800b890:	18d2      	addlt	r2, r2, r3
 800b892:	1b1c      	subge	r4, r3, r4
 800b894:	9b07      	ldr	r3, [sp, #28]
 800b896:	bfbc      	itt	lt
 800b898:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b89a:	2400      	movlt	r4, #0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bfb5      	itete	lt
 800b8a0:	eba8 0603 	sublt.w	r6, r8, r3
 800b8a4:	9b07      	ldrge	r3, [sp, #28]
 800b8a6:	2300      	movlt	r3, #0
 800b8a8:	4646      	movge	r6, r8
 800b8aa:	e730      	b.n	800b70e <_dtoa_r+0x71e>
 800b8ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b8b0:	4646      	mov	r6, r8
 800b8b2:	e735      	b.n	800b720 <_dtoa_r+0x730>
 800b8b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8b6:	e75c      	b.n	800b772 <_dtoa_r+0x782>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e788      	b.n	800b7ce <_dtoa_r+0x7de>
 800b8bc:	3fe00000 	.word	0x3fe00000
 800b8c0:	40240000 	.word	0x40240000
 800b8c4:	40140000 	.word	0x40140000
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	e780      	b.n	800b7ce <_dtoa_r+0x7de>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d0:	e782      	b.n	800b7d8 <_dtoa_r+0x7e8>
 800b8d2:	d099      	beq.n	800b808 <_dtoa_r+0x818>
 800b8d4:	9a08      	ldr	r2, [sp, #32]
 800b8d6:	331c      	adds	r3, #28
 800b8d8:	441a      	add	r2, r3
 800b8da:	4498      	add	r8, r3
 800b8dc:	441e      	add	r6, r3
 800b8de:	9208      	str	r2, [sp, #32]
 800b8e0:	e792      	b.n	800b808 <_dtoa_r+0x818>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	e7f6      	b.n	800b8d4 <_dtoa_r+0x8e4>
 800b8e6:	9b07      	ldr	r3, [sp, #28]
 800b8e8:	9704      	str	r7, [sp, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	dc20      	bgt.n	800b930 <_dtoa_r+0x940>
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	dd1e      	ble.n	800b934 <_dtoa_r+0x944>
 800b8f6:	9b00      	ldr	r3, [sp, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f47f aec0 	bne.w	800b67e <_dtoa_r+0x68e>
 800b8fe:	4621      	mov	r1, r4
 800b900:	2205      	movs	r2, #5
 800b902:	4658      	mov	r0, fp
 800b904:	f000 fa9a 	bl	800be3c <__multadd>
 800b908:	4601      	mov	r1, r0
 800b90a:	4604      	mov	r4, r0
 800b90c:	4648      	mov	r0, r9
 800b90e:	f000 fcf7 	bl	800c300 <__mcmp>
 800b912:	2800      	cmp	r0, #0
 800b914:	f77f aeb3 	ble.w	800b67e <_dtoa_r+0x68e>
 800b918:	4656      	mov	r6, sl
 800b91a:	2331      	movs	r3, #49	@ 0x31
 800b91c:	f806 3b01 	strb.w	r3, [r6], #1
 800b920:	9b04      	ldr	r3, [sp, #16]
 800b922:	3301      	adds	r3, #1
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	e6ae      	b.n	800b686 <_dtoa_r+0x696>
 800b928:	9c07      	ldr	r4, [sp, #28]
 800b92a:	9704      	str	r7, [sp, #16]
 800b92c:	4625      	mov	r5, r4
 800b92e:	e7f3      	b.n	800b918 <_dtoa_r+0x928>
 800b930:	9b07      	ldr	r3, [sp, #28]
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 8104 	beq.w	800bb44 <_dtoa_r+0xb54>
 800b93c:	2e00      	cmp	r6, #0
 800b93e:	dd05      	ble.n	800b94c <_dtoa_r+0x95c>
 800b940:	4629      	mov	r1, r5
 800b942:	4632      	mov	r2, r6
 800b944:	4658      	mov	r0, fp
 800b946:	f000 fc6f 	bl	800c228 <__lshift>
 800b94a:	4605      	mov	r5, r0
 800b94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d05a      	beq.n	800ba08 <_dtoa_r+0xa18>
 800b952:	6869      	ldr	r1, [r5, #4]
 800b954:	4658      	mov	r0, fp
 800b956:	f000 fa0f 	bl	800bd78 <_Balloc>
 800b95a:	4606      	mov	r6, r0
 800b95c:	b928      	cbnz	r0, 800b96a <_dtoa_r+0x97a>
 800b95e:	4b84      	ldr	r3, [pc, #528]	@ (800bb70 <_dtoa_r+0xb80>)
 800b960:	4602      	mov	r2, r0
 800b962:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b966:	f7ff bb5a 	b.w	800b01e <_dtoa_r+0x2e>
 800b96a:	692a      	ldr	r2, [r5, #16]
 800b96c:	3202      	adds	r2, #2
 800b96e:	0092      	lsls	r2, r2, #2
 800b970:	f105 010c 	add.w	r1, r5, #12
 800b974:	300c      	adds	r0, #12
 800b976:	f7ff fa9e 	bl	800aeb6 <memcpy>
 800b97a:	2201      	movs	r2, #1
 800b97c:	4631      	mov	r1, r6
 800b97e:	4658      	mov	r0, fp
 800b980:	f000 fc52 	bl	800c228 <__lshift>
 800b984:	f10a 0301 	add.w	r3, sl, #1
 800b988:	9307      	str	r3, [sp, #28]
 800b98a:	9b00      	ldr	r3, [sp, #0]
 800b98c:	4453      	add	r3, sl
 800b98e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b990:	9b02      	ldr	r3, [sp, #8]
 800b992:	f003 0301 	and.w	r3, r3, #1
 800b996:	462f      	mov	r7, r5
 800b998:	930a      	str	r3, [sp, #40]	@ 0x28
 800b99a:	4605      	mov	r5, r0
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	4621      	mov	r1, r4
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	4648      	mov	r0, r9
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	f7ff fa9b 	bl	800aee0 <quorem>
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	9002      	str	r0, [sp, #8]
 800b9ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9b2:	4648      	mov	r0, r9
 800b9b4:	f000 fca4 	bl	800c300 <__mcmp>
 800b9b8:	462a      	mov	r2, r5
 800b9ba:	9008      	str	r0, [sp, #32]
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4658      	mov	r0, fp
 800b9c0:	f000 fcba 	bl	800c338 <__mdiff>
 800b9c4:	68c2      	ldr	r2, [r0, #12]
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	bb02      	cbnz	r2, 800ba0c <_dtoa_r+0xa1c>
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	4648      	mov	r0, r9
 800b9ce:	f000 fc97 	bl	800c300 <__mcmp>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	4658      	mov	r0, fp
 800b9d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9da:	f000 fa0d 	bl	800bdf8 <_Bfree>
 800b9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9e2:	9e07      	ldr	r6, [sp, #28]
 800b9e4:	ea43 0102 	orr.w	r1, r3, r2
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ea:	4319      	orrs	r1, r3
 800b9ec:	d110      	bne.n	800ba10 <_dtoa_r+0xa20>
 800b9ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9f2:	d029      	beq.n	800ba48 <_dtoa_r+0xa58>
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dd02      	ble.n	800ba00 <_dtoa_r+0xa10>
 800b9fa:	9b02      	ldr	r3, [sp, #8]
 800b9fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba00:	9b00      	ldr	r3, [sp, #0]
 800ba02:	f883 8000 	strb.w	r8, [r3]
 800ba06:	e63f      	b.n	800b688 <_dtoa_r+0x698>
 800ba08:	4628      	mov	r0, r5
 800ba0a:	e7bb      	b.n	800b984 <_dtoa_r+0x994>
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	e7e1      	b.n	800b9d4 <_dtoa_r+0x9e4>
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	db04      	blt.n	800ba20 <_dtoa_r+0xa30>
 800ba16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba1c:	430b      	orrs	r3, r1
 800ba1e:	d120      	bne.n	800ba62 <_dtoa_r+0xa72>
 800ba20:	2a00      	cmp	r2, #0
 800ba22:	dded      	ble.n	800ba00 <_dtoa_r+0xa10>
 800ba24:	4649      	mov	r1, r9
 800ba26:	2201      	movs	r2, #1
 800ba28:	4658      	mov	r0, fp
 800ba2a:	f000 fbfd 	bl	800c228 <__lshift>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4681      	mov	r9, r0
 800ba32:	f000 fc65 	bl	800c300 <__mcmp>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	dc03      	bgt.n	800ba42 <_dtoa_r+0xa52>
 800ba3a:	d1e1      	bne.n	800ba00 <_dtoa_r+0xa10>
 800ba3c:	f018 0f01 	tst.w	r8, #1
 800ba40:	d0de      	beq.n	800ba00 <_dtoa_r+0xa10>
 800ba42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba46:	d1d8      	bne.n	800b9fa <_dtoa_r+0xa0a>
 800ba48:	9a00      	ldr	r2, [sp, #0]
 800ba4a:	2339      	movs	r3, #57	@ 0x39
 800ba4c:	7013      	strb	r3, [r2, #0]
 800ba4e:	4633      	mov	r3, r6
 800ba50:	461e      	mov	r6, r3
 800ba52:	3b01      	subs	r3, #1
 800ba54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ba58:	2a39      	cmp	r2, #57	@ 0x39
 800ba5a:	d052      	beq.n	800bb02 <_dtoa_r+0xb12>
 800ba5c:	3201      	adds	r2, #1
 800ba5e:	701a      	strb	r2, [r3, #0]
 800ba60:	e612      	b.n	800b688 <_dtoa_r+0x698>
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	dd07      	ble.n	800ba76 <_dtoa_r+0xa86>
 800ba66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba6a:	d0ed      	beq.n	800ba48 <_dtoa_r+0xa58>
 800ba6c:	9a00      	ldr	r2, [sp, #0]
 800ba6e:	f108 0301 	add.w	r3, r8, #1
 800ba72:	7013      	strb	r3, [r2, #0]
 800ba74:	e608      	b.n	800b688 <_dtoa_r+0x698>
 800ba76:	9b07      	ldr	r3, [sp, #28]
 800ba78:	9a07      	ldr	r2, [sp, #28]
 800ba7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ba7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d028      	beq.n	800bad6 <_dtoa_r+0xae6>
 800ba84:	4649      	mov	r1, r9
 800ba86:	2300      	movs	r3, #0
 800ba88:	220a      	movs	r2, #10
 800ba8a:	4658      	mov	r0, fp
 800ba8c:	f000 f9d6 	bl	800be3c <__multadd>
 800ba90:	42af      	cmp	r7, r5
 800ba92:	4681      	mov	r9, r0
 800ba94:	f04f 0300 	mov.w	r3, #0
 800ba98:	f04f 020a 	mov.w	r2, #10
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	4658      	mov	r0, fp
 800baa0:	d107      	bne.n	800bab2 <_dtoa_r+0xac2>
 800baa2:	f000 f9cb 	bl	800be3c <__multadd>
 800baa6:	4607      	mov	r7, r0
 800baa8:	4605      	mov	r5, r0
 800baaa:	9b07      	ldr	r3, [sp, #28]
 800baac:	3301      	adds	r3, #1
 800baae:	9307      	str	r3, [sp, #28]
 800bab0:	e774      	b.n	800b99c <_dtoa_r+0x9ac>
 800bab2:	f000 f9c3 	bl	800be3c <__multadd>
 800bab6:	4629      	mov	r1, r5
 800bab8:	4607      	mov	r7, r0
 800baba:	2300      	movs	r3, #0
 800babc:	220a      	movs	r2, #10
 800babe:	4658      	mov	r0, fp
 800bac0:	f000 f9bc 	bl	800be3c <__multadd>
 800bac4:	4605      	mov	r5, r0
 800bac6:	e7f0      	b.n	800baaa <_dtoa_r+0xaba>
 800bac8:	9b00      	ldr	r3, [sp, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	bfcc      	ite	gt
 800bace:	461e      	movgt	r6, r3
 800bad0:	2601      	movle	r6, #1
 800bad2:	4456      	add	r6, sl
 800bad4:	2700      	movs	r7, #0
 800bad6:	4649      	mov	r1, r9
 800bad8:	2201      	movs	r2, #1
 800bada:	4658      	mov	r0, fp
 800badc:	f000 fba4 	bl	800c228 <__lshift>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4681      	mov	r9, r0
 800bae4:	f000 fc0c 	bl	800c300 <__mcmp>
 800bae8:	2800      	cmp	r0, #0
 800baea:	dcb0      	bgt.n	800ba4e <_dtoa_r+0xa5e>
 800baec:	d102      	bne.n	800baf4 <_dtoa_r+0xb04>
 800baee:	f018 0f01 	tst.w	r8, #1
 800baf2:	d1ac      	bne.n	800ba4e <_dtoa_r+0xa5e>
 800baf4:	4633      	mov	r3, r6
 800baf6:	461e      	mov	r6, r3
 800baf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bafc:	2a30      	cmp	r2, #48	@ 0x30
 800bafe:	d0fa      	beq.n	800baf6 <_dtoa_r+0xb06>
 800bb00:	e5c2      	b.n	800b688 <_dtoa_r+0x698>
 800bb02:	459a      	cmp	sl, r3
 800bb04:	d1a4      	bne.n	800ba50 <_dtoa_r+0xa60>
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	9304      	str	r3, [sp, #16]
 800bb0c:	2331      	movs	r3, #49	@ 0x31
 800bb0e:	f88a 3000 	strb.w	r3, [sl]
 800bb12:	e5b9      	b.n	800b688 <_dtoa_r+0x698>
 800bb14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bb74 <_dtoa_r+0xb84>
 800bb1a:	b11b      	cbz	r3, 800bb24 <_dtoa_r+0xb34>
 800bb1c:	f10a 0308 	add.w	r3, sl, #8
 800bb20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	4650      	mov	r0, sl
 800bb26:	b019      	add	sp, #100	@ 0x64
 800bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	f77f ae37 	ble.w	800b7a2 <_dtoa_r+0x7b2>
 800bb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb36:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb38:	2001      	movs	r0, #1
 800bb3a:	e655      	b.n	800b7e8 <_dtoa_r+0x7f8>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f77f aed6 	ble.w	800b8f0 <_dtoa_r+0x900>
 800bb44:	4656      	mov	r6, sl
 800bb46:	4621      	mov	r1, r4
 800bb48:	4648      	mov	r0, r9
 800bb4a:	f7ff f9c9 	bl	800aee0 <quorem>
 800bb4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bb52:	f806 8b01 	strb.w	r8, [r6], #1
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	eba6 020a 	sub.w	r2, r6, sl
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	ddb3      	ble.n	800bac8 <_dtoa_r+0xad8>
 800bb60:	4649      	mov	r1, r9
 800bb62:	2300      	movs	r3, #0
 800bb64:	220a      	movs	r2, #10
 800bb66:	4658      	mov	r0, fp
 800bb68:	f000 f968 	bl	800be3c <__multadd>
 800bb6c:	4681      	mov	r9, r0
 800bb6e:	e7ea      	b.n	800bb46 <_dtoa_r+0xb56>
 800bb70:	0800ea51 	.word	0x0800ea51
 800bb74:	0800e9d5 	.word	0x0800e9d5

0800bb78 <_free_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	2900      	cmp	r1, #0
 800bb7e:	d041      	beq.n	800bc04 <_free_r+0x8c>
 800bb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb84:	1f0c      	subs	r4, r1, #4
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfb8      	it	lt
 800bb8a:	18e4      	addlt	r4, r4, r3
 800bb8c:	f000 f8e8 	bl	800bd60 <__malloc_lock>
 800bb90:	4a1d      	ldr	r2, [pc, #116]	@ (800bc08 <_free_r+0x90>)
 800bb92:	6813      	ldr	r3, [r2, #0]
 800bb94:	b933      	cbnz	r3, 800bba4 <_free_r+0x2c>
 800bb96:	6063      	str	r3, [r4, #4]
 800bb98:	6014      	str	r4, [r2, #0]
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bba0:	f000 b8e4 	b.w	800bd6c <__malloc_unlock>
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	d908      	bls.n	800bbba <_free_r+0x42>
 800bba8:	6820      	ldr	r0, [r4, #0]
 800bbaa:	1821      	adds	r1, r4, r0
 800bbac:	428b      	cmp	r3, r1
 800bbae:	bf01      	itttt	eq
 800bbb0:	6819      	ldreq	r1, [r3, #0]
 800bbb2:	685b      	ldreq	r3, [r3, #4]
 800bbb4:	1809      	addeq	r1, r1, r0
 800bbb6:	6021      	streq	r1, [r4, #0]
 800bbb8:	e7ed      	b.n	800bb96 <_free_r+0x1e>
 800bbba:	461a      	mov	r2, r3
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	b10b      	cbz	r3, 800bbc4 <_free_r+0x4c>
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d9fa      	bls.n	800bbba <_free_r+0x42>
 800bbc4:	6811      	ldr	r1, [r2, #0]
 800bbc6:	1850      	adds	r0, r2, r1
 800bbc8:	42a0      	cmp	r0, r4
 800bbca:	d10b      	bne.n	800bbe4 <_free_r+0x6c>
 800bbcc:	6820      	ldr	r0, [r4, #0]
 800bbce:	4401      	add	r1, r0
 800bbd0:	1850      	adds	r0, r2, r1
 800bbd2:	4283      	cmp	r3, r0
 800bbd4:	6011      	str	r1, [r2, #0]
 800bbd6:	d1e0      	bne.n	800bb9a <_free_r+0x22>
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	6053      	str	r3, [r2, #4]
 800bbde:	4408      	add	r0, r1
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	e7da      	b.n	800bb9a <_free_r+0x22>
 800bbe4:	d902      	bls.n	800bbec <_free_r+0x74>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	e7d6      	b.n	800bb9a <_free_r+0x22>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	1821      	adds	r1, r4, r0
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	bf04      	itt	eq
 800bbf4:	6819      	ldreq	r1, [r3, #0]
 800bbf6:	685b      	ldreq	r3, [r3, #4]
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	bf04      	itt	eq
 800bbfc:	1809      	addeq	r1, r1, r0
 800bbfe:	6021      	streq	r1, [r4, #0]
 800bc00:	6054      	str	r4, [r2, #4]
 800bc02:	e7ca      	b.n	800bb9a <_free_r+0x22>
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
 800bc06:	bf00      	nop
 800bc08:	20006f30 	.word	0x20006f30

0800bc0c <malloc>:
 800bc0c:	4b02      	ldr	r3, [pc, #8]	@ (800bc18 <malloc+0xc>)
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	f000 b825 	b.w	800bc60 <_malloc_r>
 800bc16:	bf00      	nop
 800bc18:	20000034 	.word	0x20000034

0800bc1c <sbrk_aligned>:
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	4e0f      	ldr	r6, [pc, #60]	@ (800bc5c <sbrk_aligned+0x40>)
 800bc20:	460c      	mov	r4, r1
 800bc22:	6831      	ldr	r1, [r6, #0]
 800bc24:	4605      	mov	r5, r0
 800bc26:	b911      	cbnz	r1, 800bc2e <sbrk_aligned+0x12>
 800bc28:	f001 fe0c 	bl	800d844 <_sbrk_r>
 800bc2c:	6030      	str	r0, [r6, #0]
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f001 fe07 	bl	800d844 <_sbrk_r>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d103      	bne.n	800bc42 <sbrk_aligned+0x26>
 800bc3a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc3e:	4620      	mov	r0, r4
 800bc40:	bd70      	pop	{r4, r5, r6, pc}
 800bc42:	1cc4      	adds	r4, r0, #3
 800bc44:	f024 0403 	bic.w	r4, r4, #3
 800bc48:	42a0      	cmp	r0, r4
 800bc4a:	d0f8      	beq.n	800bc3e <sbrk_aligned+0x22>
 800bc4c:	1a21      	subs	r1, r4, r0
 800bc4e:	4628      	mov	r0, r5
 800bc50:	f001 fdf8 	bl	800d844 <_sbrk_r>
 800bc54:	3001      	adds	r0, #1
 800bc56:	d1f2      	bne.n	800bc3e <sbrk_aligned+0x22>
 800bc58:	e7ef      	b.n	800bc3a <sbrk_aligned+0x1e>
 800bc5a:	bf00      	nop
 800bc5c:	20006f2c 	.word	0x20006f2c

0800bc60 <_malloc_r>:
 800bc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc64:	1ccd      	adds	r5, r1, #3
 800bc66:	f025 0503 	bic.w	r5, r5, #3
 800bc6a:	3508      	adds	r5, #8
 800bc6c:	2d0c      	cmp	r5, #12
 800bc6e:	bf38      	it	cc
 800bc70:	250c      	movcc	r5, #12
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	4606      	mov	r6, r0
 800bc76:	db01      	blt.n	800bc7c <_malloc_r+0x1c>
 800bc78:	42a9      	cmp	r1, r5
 800bc7a:	d904      	bls.n	800bc86 <_malloc_r+0x26>
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	6033      	str	r3, [r6, #0]
 800bc80:	2000      	movs	r0, #0
 800bc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd5c <_malloc_r+0xfc>
 800bc8a:	f000 f869 	bl	800bd60 <__malloc_lock>
 800bc8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bc92:	461c      	mov	r4, r3
 800bc94:	bb44      	cbnz	r4, 800bce8 <_malloc_r+0x88>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7ff ffbf 	bl	800bc1c <sbrk_aligned>
 800bc9e:	1c43      	adds	r3, r0, #1
 800bca0:	4604      	mov	r4, r0
 800bca2:	d158      	bne.n	800bd56 <_malloc_r+0xf6>
 800bca4:	f8d8 4000 	ldr.w	r4, [r8]
 800bca8:	4627      	mov	r7, r4
 800bcaa:	2f00      	cmp	r7, #0
 800bcac:	d143      	bne.n	800bd36 <_malloc_r+0xd6>
 800bcae:	2c00      	cmp	r4, #0
 800bcb0:	d04b      	beq.n	800bd4a <_malloc_r+0xea>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	eb04 0903 	add.w	r9, r4, r3
 800bcbc:	f001 fdc2 	bl	800d844 <_sbrk_r>
 800bcc0:	4581      	cmp	r9, r0
 800bcc2:	d142      	bne.n	800bd4a <_malloc_r+0xea>
 800bcc4:	6821      	ldr	r1, [r4, #0]
 800bcc6:	1a6d      	subs	r5, r5, r1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4630      	mov	r0, r6
 800bccc:	f7ff ffa6 	bl	800bc1c <sbrk_aligned>
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d03a      	beq.n	800bd4a <_malloc_r+0xea>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	442b      	add	r3, r5
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	f8d8 3000 	ldr.w	r3, [r8]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	bb62      	cbnz	r2, 800bd3c <_malloc_r+0xdc>
 800bce2:	f8c8 7000 	str.w	r7, [r8]
 800bce6:	e00f      	b.n	800bd08 <_malloc_r+0xa8>
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	1b52      	subs	r2, r2, r5
 800bcec:	d420      	bmi.n	800bd30 <_malloc_r+0xd0>
 800bcee:	2a0b      	cmp	r2, #11
 800bcf0:	d917      	bls.n	800bd22 <_malloc_r+0xc2>
 800bcf2:	1961      	adds	r1, r4, r5
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	6025      	str	r5, [r4, #0]
 800bcf8:	bf18      	it	ne
 800bcfa:	6059      	strne	r1, [r3, #4]
 800bcfc:	6863      	ldr	r3, [r4, #4]
 800bcfe:	bf08      	it	eq
 800bd00:	f8c8 1000 	streq.w	r1, [r8]
 800bd04:	5162      	str	r2, [r4, r5]
 800bd06:	604b      	str	r3, [r1, #4]
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f000 f82f 	bl	800bd6c <__malloc_unlock>
 800bd0e:	f104 000b 	add.w	r0, r4, #11
 800bd12:	1d23      	adds	r3, r4, #4
 800bd14:	f020 0007 	bic.w	r0, r0, #7
 800bd18:	1ac2      	subs	r2, r0, r3
 800bd1a:	bf1c      	itt	ne
 800bd1c:	1a1b      	subne	r3, r3, r0
 800bd1e:	50a3      	strne	r3, [r4, r2]
 800bd20:	e7af      	b.n	800bc82 <_malloc_r+0x22>
 800bd22:	6862      	ldr	r2, [r4, #4]
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	bf0c      	ite	eq
 800bd28:	f8c8 2000 	streq.w	r2, [r8]
 800bd2c:	605a      	strne	r2, [r3, #4]
 800bd2e:	e7eb      	b.n	800bd08 <_malloc_r+0xa8>
 800bd30:	4623      	mov	r3, r4
 800bd32:	6864      	ldr	r4, [r4, #4]
 800bd34:	e7ae      	b.n	800bc94 <_malloc_r+0x34>
 800bd36:	463c      	mov	r4, r7
 800bd38:	687f      	ldr	r7, [r7, #4]
 800bd3a:	e7b6      	b.n	800bcaa <_malloc_r+0x4a>
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	42a3      	cmp	r3, r4
 800bd42:	d1fb      	bne.n	800bd3c <_malloc_r+0xdc>
 800bd44:	2300      	movs	r3, #0
 800bd46:	6053      	str	r3, [r2, #4]
 800bd48:	e7de      	b.n	800bd08 <_malloc_r+0xa8>
 800bd4a:	230c      	movs	r3, #12
 800bd4c:	6033      	str	r3, [r6, #0]
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f80c 	bl	800bd6c <__malloc_unlock>
 800bd54:	e794      	b.n	800bc80 <_malloc_r+0x20>
 800bd56:	6005      	str	r5, [r0, #0]
 800bd58:	e7d6      	b.n	800bd08 <_malloc_r+0xa8>
 800bd5a:	bf00      	nop
 800bd5c:	20006f30 	.word	0x20006f30

0800bd60 <__malloc_lock>:
 800bd60:	4801      	ldr	r0, [pc, #4]	@ (800bd68 <__malloc_lock+0x8>)
 800bd62:	f7ff b8a6 	b.w	800aeb2 <__retarget_lock_acquire_recursive>
 800bd66:	bf00      	nop
 800bd68:	20006f28 	.word	0x20006f28

0800bd6c <__malloc_unlock>:
 800bd6c:	4801      	ldr	r0, [pc, #4]	@ (800bd74 <__malloc_unlock+0x8>)
 800bd6e:	f7ff b8a1 	b.w	800aeb4 <__retarget_lock_release_recursive>
 800bd72:	bf00      	nop
 800bd74:	20006f28 	.word	0x20006f28

0800bd78 <_Balloc>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	69c6      	ldr	r6, [r0, #28]
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	b976      	cbnz	r6, 800bda0 <_Balloc+0x28>
 800bd82:	2010      	movs	r0, #16
 800bd84:	f7ff ff42 	bl	800bc0c <malloc>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	61e0      	str	r0, [r4, #28]
 800bd8c:	b920      	cbnz	r0, 800bd98 <_Balloc+0x20>
 800bd8e:	4b18      	ldr	r3, [pc, #96]	@ (800bdf0 <_Balloc+0x78>)
 800bd90:	4818      	ldr	r0, [pc, #96]	@ (800bdf4 <_Balloc+0x7c>)
 800bd92:	216b      	movs	r1, #107	@ 0x6b
 800bd94:	f001 fd70 	bl	800d878 <__assert_func>
 800bd98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd9c:	6006      	str	r6, [r0, #0]
 800bd9e:	60c6      	str	r6, [r0, #12]
 800bda0:	69e6      	ldr	r6, [r4, #28]
 800bda2:	68f3      	ldr	r3, [r6, #12]
 800bda4:	b183      	cbz	r3, 800bdc8 <_Balloc+0x50>
 800bda6:	69e3      	ldr	r3, [r4, #28]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdae:	b9b8      	cbnz	r0, 800bde0 <_Balloc+0x68>
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	fa01 f605 	lsl.w	r6, r1, r5
 800bdb6:	1d72      	adds	r2, r6, #5
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f001 fd7a 	bl	800d8b4 <_calloc_r>
 800bdc0:	b160      	cbz	r0, 800bddc <_Balloc+0x64>
 800bdc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdc6:	e00e      	b.n	800bde6 <_Balloc+0x6e>
 800bdc8:	2221      	movs	r2, #33	@ 0x21
 800bdca:	2104      	movs	r1, #4
 800bdcc:	4620      	mov	r0, r4
 800bdce:	f001 fd71 	bl	800d8b4 <_calloc_r>
 800bdd2:	69e3      	ldr	r3, [r4, #28]
 800bdd4:	60f0      	str	r0, [r6, #12]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e4      	bne.n	800bda6 <_Balloc+0x2e>
 800bddc:	2000      	movs	r0, #0
 800bdde:	bd70      	pop	{r4, r5, r6, pc}
 800bde0:	6802      	ldr	r2, [r0, #0]
 800bde2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bde6:	2300      	movs	r3, #0
 800bde8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bdec:	e7f7      	b.n	800bdde <_Balloc+0x66>
 800bdee:	bf00      	nop
 800bdf0:	0800e9e2 	.word	0x0800e9e2
 800bdf4:	0800ea62 	.word	0x0800ea62

0800bdf8 <_Bfree>:
 800bdf8:	b570      	push	{r4, r5, r6, lr}
 800bdfa:	69c6      	ldr	r6, [r0, #28]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b976      	cbnz	r6, 800be20 <_Bfree+0x28>
 800be02:	2010      	movs	r0, #16
 800be04:	f7ff ff02 	bl	800bc0c <malloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	61e8      	str	r0, [r5, #28]
 800be0c:	b920      	cbnz	r0, 800be18 <_Bfree+0x20>
 800be0e:	4b09      	ldr	r3, [pc, #36]	@ (800be34 <_Bfree+0x3c>)
 800be10:	4809      	ldr	r0, [pc, #36]	@ (800be38 <_Bfree+0x40>)
 800be12:	218f      	movs	r1, #143	@ 0x8f
 800be14:	f001 fd30 	bl	800d878 <__assert_func>
 800be18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be1c:	6006      	str	r6, [r0, #0]
 800be1e:	60c6      	str	r6, [r0, #12]
 800be20:	b13c      	cbz	r4, 800be32 <_Bfree+0x3a>
 800be22:	69eb      	ldr	r3, [r5, #28]
 800be24:	6862      	ldr	r2, [r4, #4]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be2c:	6021      	str	r1, [r4, #0]
 800be2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	0800e9e2 	.word	0x0800e9e2
 800be38:	0800ea62 	.word	0x0800ea62

0800be3c <__multadd>:
 800be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	690d      	ldr	r5, [r1, #16]
 800be42:	4607      	mov	r7, r0
 800be44:	460c      	mov	r4, r1
 800be46:	461e      	mov	r6, r3
 800be48:	f101 0c14 	add.w	ip, r1, #20
 800be4c:	2000      	movs	r0, #0
 800be4e:	f8dc 3000 	ldr.w	r3, [ip]
 800be52:	b299      	uxth	r1, r3
 800be54:	fb02 6101 	mla	r1, r2, r1, r6
 800be58:	0c1e      	lsrs	r6, r3, #16
 800be5a:	0c0b      	lsrs	r3, r1, #16
 800be5c:	fb02 3306 	mla	r3, r2, r6, r3
 800be60:	b289      	uxth	r1, r1
 800be62:	3001      	adds	r0, #1
 800be64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800be68:	4285      	cmp	r5, r0
 800be6a:	f84c 1b04 	str.w	r1, [ip], #4
 800be6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800be72:	dcec      	bgt.n	800be4e <__multadd+0x12>
 800be74:	b30e      	cbz	r6, 800beba <__multadd+0x7e>
 800be76:	68a3      	ldr	r3, [r4, #8]
 800be78:	42ab      	cmp	r3, r5
 800be7a:	dc19      	bgt.n	800beb0 <__multadd+0x74>
 800be7c:	6861      	ldr	r1, [r4, #4]
 800be7e:	4638      	mov	r0, r7
 800be80:	3101      	adds	r1, #1
 800be82:	f7ff ff79 	bl	800bd78 <_Balloc>
 800be86:	4680      	mov	r8, r0
 800be88:	b928      	cbnz	r0, 800be96 <__multadd+0x5a>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bec0 <__multadd+0x84>)
 800be8e:	480d      	ldr	r0, [pc, #52]	@ (800bec4 <__multadd+0x88>)
 800be90:	21ba      	movs	r1, #186	@ 0xba
 800be92:	f001 fcf1 	bl	800d878 <__assert_func>
 800be96:	6922      	ldr	r2, [r4, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	f104 010c 	add.w	r1, r4, #12
 800be9e:	0092      	lsls	r2, r2, #2
 800bea0:	300c      	adds	r0, #12
 800bea2:	f7ff f808 	bl	800aeb6 <memcpy>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ffa5 	bl	800bdf8 <_Bfree>
 800beae:	4644      	mov	r4, r8
 800beb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beb4:	3501      	adds	r5, #1
 800beb6:	615e      	str	r6, [r3, #20]
 800beb8:	6125      	str	r5, [r4, #16]
 800beba:	4620      	mov	r0, r4
 800bebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec0:	0800ea51 	.word	0x0800ea51
 800bec4:	0800ea62 	.word	0x0800ea62

0800bec8 <__s2b>:
 800bec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	4615      	mov	r5, r2
 800bed0:	461f      	mov	r7, r3
 800bed2:	2209      	movs	r2, #9
 800bed4:	3308      	adds	r3, #8
 800bed6:	4606      	mov	r6, r0
 800bed8:	fb93 f3f2 	sdiv	r3, r3, r2
 800bedc:	2100      	movs	r1, #0
 800bede:	2201      	movs	r2, #1
 800bee0:	429a      	cmp	r2, r3
 800bee2:	db09      	blt.n	800bef8 <__s2b+0x30>
 800bee4:	4630      	mov	r0, r6
 800bee6:	f7ff ff47 	bl	800bd78 <_Balloc>
 800beea:	b940      	cbnz	r0, 800befe <__s2b+0x36>
 800beec:	4602      	mov	r2, r0
 800beee:	4b19      	ldr	r3, [pc, #100]	@ (800bf54 <__s2b+0x8c>)
 800bef0:	4819      	ldr	r0, [pc, #100]	@ (800bf58 <__s2b+0x90>)
 800bef2:	21d3      	movs	r1, #211	@ 0xd3
 800bef4:	f001 fcc0 	bl	800d878 <__assert_func>
 800bef8:	0052      	lsls	r2, r2, #1
 800befa:	3101      	adds	r1, #1
 800befc:	e7f0      	b.n	800bee0 <__s2b+0x18>
 800befe:	9b08      	ldr	r3, [sp, #32]
 800bf00:	6143      	str	r3, [r0, #20]
 800bf02:	2d09      	cmp	r5, #9
 800bf04:	f04f 0301 	mov.w	r3, #1
 800bf08:	6103      	str	r3, [r0, #16]
 800bf0a:	dd16      	ble.n	800bf3a <__s2b+0x72>
 800bf0c:	f104 0909 	add.w	r9, r4, #9
 800bf10:	46c8      	mov	r8, r9
 800bf12:	442c      	add	r4, r5
 800bf14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bf18:	4601      	mov	r1, r0
 800bf1a:	3b30      	subs	r3, #48	@ 0x30
 800bf1c:	220a      	movs	r2, #10
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7ff ff8c 	bl	800be3c <__multadd>
 800bf24:	45a0      	cmp	r8, r4
 800bf26:	d1f5      	bne.n	800bf14 <__s2b+0x4c>
 800bf28:	f1a5 0408 	sub.w	r4, r5, #8
 800bf2c:	444c      	add	r4, r9
 800bf2e:	1b2d      	subs	r5, r5, r4
 800bf30:	1963      	adds	r3, r4, r5
 800bf32:	42bb      	cmp	r3, r7
 800bf34:	db04      	blt.n	800bf40 <__s2b+0x78>
 800bf36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf3a:	340a      	adds	r4, #10
 800bf3c:	2509      	movs	r5, #9
 800bf3e:	e7f6      	b.n	800bf2e <__s2b+0x66>
 800bf40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bf44:	4601      	mov	r1, r0
 800bf46:	3b30      	subs	r3, #48	@ 0x30
 800bf48:	220a      	movs	r2, #10
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7ff ff76 	bl	800be3c <__multadd>
 800bf50:	e7ee      	b.n	800bf30 <__s2b+0x68>
 800bf52:	bf00      	nop
 800bf54:	0800ea51 	.word	0x0800ea51
 800bf58:	0800ea62 	.word	0x0800ea62

0800bf5c <__hi0bits>:
 800bf5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bf60:	4603      	mov	r3, r0
 800bf62:	bf36      	itet	cc
 800bf64:	0403      	lslcc	r3, r0, #16
 800bf66:	2000      	movcs	r0, #0
 800bf68:	2010      	movcc	r0, #16
 800bf6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bf6e:	bf3c      	itt	cc
 800bf70:	021b      	lslcc	r3, r3, #8
 800bf72:	3008      	addcc	r0, #8
 800bf74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf78:	bf3c      	itt	cc
 800bf7a:	011b      	lslcc	r3, r3, #4
 800bf7c:	3004      	addcc	r0, #4
 800bf7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf82:	bf3c      	itt	cc
 800bf84:	009b      	lslcc	r3, r3, #2
 800bf86:	3002      	addcc	r0, #2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	db05      	blt.n	800bf98 <__hi0bits+0x3c>
 800bf8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf90:	f100 0001 	add.w	r0, r0, #1
 800bf94:	bf08      	it	eq
 800bf96:	2020      	moveq	r0, #32
 800bf98:	4770      	bx	lr

0800bf9a <__lo0bits>:
 800bf9a:	6803      	ldr	r3, [r0, #0]
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	f013 0007 	ands.w	r0, r3, #7
 800bfa2:	d00b      	beq.n	800bfbc <__lo0bits+0x22>
 800bfa4:	07d9      	lsls	r1, r3, #31
 800bfa6:	d421      	bmi.n	800bfec <__lo0bits+0x52>
 800bfa8:	0798      	lsls	r0, r3, #30
 800bfaa:	bf49      	itett	mi
 800bfac:	085b      	lsrmi	r3, r3, #1
 800bfae:	089b      	lsrpl	r3, r3, #2
 800bfb0:	2001      	movmi	r0, #1
 800bfb2:	6013      	strmi	r3, [r2, #0]
 800bfb4:	bf5c      	itt	pl
 800bfb6:	6013      	strpl	r3, [r2, #0]
 800bfb8:	2002      	movpl	r0, #2
 800bfba:	4770      	bx	lr
 800bfbc:	b299      	uxth	r1, r3
 800bfbe:	b909      	cbnz	r1, 800bfc4 <__lo0bits+0x2a>
 800bfc0:	0c1b      	lsrs	r3, r3, #16
 800bfc2:	2010      	movs	r0, #16
 800bfc4:	b2d9      	uxtb	r1, r3
 800bfc6:	b909      	cbnz	r1, 800bfcc <__lo0bits+0x32>
 800bfc8:	3008      	adds	r0, #8
 800bfca:	0a1b      	lsrs	r3, r3, #8
 800bfcc:	0719      	lsls	r1, r3, #28
 800bfce:	bf04      	itt	eq
 800bfd0:	091b      	lsreq	r3, r3, #4
 800bfd2:	3004      	addeq	r0, #4
 800bfd4:	0799      	lsls	r1, r3, #30
 800bfd6:	bf04      	itt	eq
 800bfd8:	089b      	lsreq	r3, r3, #2
 800bfda:	3002      	addeq	r0, #2
 800bfdc:	07d9      	lsls	r1, r3, #31
 800bfde:	d403      	bmi.n	800bfe8 <__lo0bits+0x4e>
 800bfe0:	085b      	lsrs	r3, r3, #1
 800bfe2:	f100 0001 	add.w	r0, r0, #1
 800bfe6:	d003      	beq.n	800bff0 <__lo0bits+0x56>
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	4770      	bx	lr
 800bfec:	2000      	movs	r0, #0
 800bfee:	4770      	bx	lr
 800bff0:	2020      	movs	r0, #32
 800bff2:	4770      	bx	lr

0800bff4 <__i2b>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	2101      	movs	r1, #1
 800bffa:	f7ff febd 	bl	800bd78 <_Balloc>
 800bffe:	4602      	mov	r2, r0
 800c000:	b928      	cbnz	r0, 800c00e <__i2b+0x1a>
 800c002:	4b05      	ldr	r3, [pc, #20]	@ (800c018 <__i2b+0x24>)
 800c004:	4805      	ldr	r0, [pc, #20]	@ (800c01c <__i2b+0x28>)
 800c006:	f240 1145 	movw	r1, #325	@ 0x145
 800c00a:	f001 fc35 	bl	800d878 <__assert_func>
 800c00e:	2301      	movs	r3, #1
 800c010:	6144      	str	r4, [r0, #20]
 800c012:	6103      	str	r3, [r0, #16]
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	0800ea51 	.word	0x0800ea51
 800c01c:	0800ea62 	.word	0x0800ea62

0800c020 <__multiply>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	4614      	mov	r4, r2
 800c026:	690a      	ldr	r2, [r1, #16]
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	bfa8      	it	ge
 800c02e:	4623      	movge	r3, r4
 800c030:	460f      	mov	r7, r1
 800c032:	bfa4      	itt	ge
 800c034:	460c      	movge	r4, r1
 800c036:	461f      	movge	r7, r3
 800c038:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c03c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c040:	68a3      	ldr	r3, [r4, #8]
 800c042:	6861      	ldr	r1, [r4, #4]
 800c044:	eb0a 0609 	add.w	r6, sl, r9
 800c048:	42b3      	cmp	r3, r6
 800c04a:	b085      	sub	sp, #20
 800c04c:	bfb8      	it	lt
 800c04e:	3101      	addlt	r1, #1
 800c050:	f7ff fe92 	bl	800bd78 <_Balloc>
 800c054:	b930      	cbnz	r0, 800c064 <__multiply+0x44>
 800c056:	4602      	mov	r2, r0
 800c058:	4b44      	ldr	r3, [pc, #272]	@ (800c16c <__multiply+0x14c>)
 800c05a:	4845      	ldr	r0, [pc, #276]	@ (800c170 <__multiply+0x150>)
 800c05c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c060:	f001 fc0a 	bl	800d878 <__assert_func>
 800c064:	f100 0514 	add.w	r5, r0, #20
 800c068:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c06c:	462b      	mov	r3, r5
 800c06e:	2200      	movs	r2, #0
 800c070:	4543      	cmp	r3, r8
 800c072:	d321      	bcc.n	800c0b8 <__multiply+0x98>
 800c074:	f107 0114 	add.w	r1, r7, #20
 800c078:	f104 0214 	add.w	r2, r4, #20
 800c07c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c080:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c084:	9302      	str	r3, [sp, #8]
 800c086:	1b13      	subs	r3, r2, r4
 800c088:	3b15      	subs	r3, #21
 800c08a:	f023 0303 	bic.w	r3, r3, #3
 800c08e:	3304      	adds	r3, #4
 800c090:	f104 0715 	add.w	r7, r4, #21
 800c094:	42ba      	cmp	r2, r7
 800c096:	bf38      	it	cc
 800c098:	2304      	movcc	r3, #4
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	9b02      	ldr	r3, [sp, #8]
 800c09e:	9103      	str	r1, [sp, #12]
 800c0a0:	428b      	cmp	r3, r1
 800c0a2:	d80c      	bhi.n	800c0be <__multiply+0x9e>
 800c0a4:	2e00      	cmp	r6, #0
 800c0a6:	dd03      	ble.n	800c0b0 <__multiply+0x90>
 800c0a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d05b      	beq.n	800c168 <__multiply+0x148>
 800c0b0:	6106      	str	r6, [r0, #16]
 800c0b2:	b005      	add	sp, #20
 800c0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b8:	f843 2b04 	str.w	r2, [r3], #4
 800c0bc:	e7d8      	b.n	800c070 <__multiply+0x50>
 800c0be:	f8b1 a000 	ldrh.w	sl, [r1]
 800c0c2:	f1ba 0f00 	cmp.w	sl, #0
 800c0c6:	d024      	beq.n	800c112 <__multiply+0xf2>
 800c0c8:	f104 0e14 	add.w	lr, r4, #20
 800c0cc:	46a9      	mov	r9, r5
 800c0ce:	f04f 0c00 	mov.w	ip, #0
 800c0d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0d6:	f8d9 3000 	ldr.w	r3, [r9]
 800c0da:	fa1f fb87 	uxth.w	fp, r7
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c0e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c0e8:	f8d9 7000 	ldr.w	r7, [r9]
 800c0ec:	4463      	add	r3, ip
 800c0ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c0f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800c0f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c100:	4572      	cmp	r2, lr
 800c102:	f849 3b04 	str.w	r3, [r9], #4
 800c106:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c10a:	d8e2      	bhi.n	800c0d2 <__multiply+0xb2>
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	f845 c003 	str.w	ip, [r5, r3]
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c118:	3104      	adds	r1, #4
 800c11a:	f1b9 0f00 	cmp.w	r9, #0
 800c11e:	d021      	beq.n	800c164 <__multiply+0x144>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	f104 0c14 	add.w	ip, r4, #20
 800c126:	46ae      	mov	lr, r5
 800c128:	f04f 0a00 	mov.w	sl, #0
 800c12c:	f8bc b000 	ldrh.w	fp, [ip]
 800c130:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c134:	fb09 770b 	mla	r7, r9, fp, r7
 800c138:	4457      	add	r7, sl
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c140:	f84e 3b04 	str.w	r3, [lr], #4
 800c144:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c14c:	f8be 3000 	ldrh.w	r3, [lr]
 800c150:	fb09 330a 	mla	r3, r9, sl, r3
 800c154:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c158:	4562      	cmp	r2, ip
 800c15a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c15e:	d8e5      	bhi.n	800c12c <__multiply+0x10c>
 800c160:	9f01      	ldr	r7, [sp, #4]
 800c162:	51eb      	str	r3, [r5, r7]
 800c164:	3504      	adds	r5, #4
 800c166:	e799      	b.n	800c09c <__multiply+0x7c>
 800c168:	3e01      	subs	r6, #1
 800c16a:	e79b      	b.n	800c0a4 <__multiply+0x84>
 800c16c:	0800ea51 	.word	0x0800ea51
 800c170:	0800ea62 	.word	0x0800ea62

0800c174 <__pow5mult>:
 800c174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c178:	4615      	mov	r5, r2
 800c17a:	f012 0203 	ands.w	r2, r2, #3
 800c17e:	4607      	mov	r7, r0
 800c180:	460e      	mov	r6, r1
 800c182:	d007      	beq.n	800c194 <__pow5mult+0x20>
 800c184:	4c25      	ldr	r4, [pc, #148]	@ (800c21c <__pow5mult+0xa8>)
 800c186:	3a01      	subs	r2, #1
 800c188:	2300      	movs	r3, #0
 800c18a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c18e:	f7ff fe55 	bl	800be3c <__multadd>
 800c192:	4606      	mov	r6, r0
 800c194:	10ad      	asrs	r5, r5, #2
 800c196:	d03d      	beq.n	800c214 <__pow5mult+0xa0>
 800c198:	69fc      	ldr	r4, [r7, #28]
 800c19a:	b97c      	cbnz	r4, 800c1bc <__pow5mult+0x48>
 800c19c:	2010      	movs	r0, #16
 800c19e:	f7ff fd35 	bl	800bc0c <malloc>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	61f8      	str	r0, [r7, #28]
 800c1a6:	b928      	cbnz	r0, 800c1b4 <__pow5mult+0x40>
 800c1a8:	4b1d      	ldr	r3, [pc, #116]	@ (800c220 <__pow5mult+0xac>)
 800c1aa:	481e      	ldr	r0, [pc, #120]	@ (800c224 <__pow5mult+0xb0>)
 800c1ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c1b0:	f001 fb62 	bl	800d878 <__assert_func>
 800c1b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1b8:	6004      	str	r4, [r0, #0]
 800c1ba:	60c4      	str	r4, [r0, #12]
 800c1bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c1c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1c4:	b94c      	cbnz	r4, 800c1da <__pow5mult+0x66>
 800c1c6:	f240 2171 	movw	r1, #625	@ 0x271
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	f7ff ff12 	bl	800bff4 <__i2b>
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	f04f 0900 	mov.w	r9, #0
 800c1de:	07eb      	lsls	r3, r5, #31
 800c1e0:	d50a      	bpl.n	800c1f8 <__pow5mult+0x84>
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	4638      	mov	r0, r7
 800c1e8:	f7ff ff1a 	bl	800c020 <__multiply>
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4680      	mov	r8, r0
 800c1f0:	4638      	mov	r0, r7
 800c1f2:	f7ff fe01 	bl	800bdf8 <_Bfree>
 800c1f6:	4646      	mov	r6, r8
 800c1f8:	106d      	asrs	r5, r5, #1
 800c1fa:	d00b      	beq.n	800c214 <__pow5mult+0xa0>
 800c1fc:	6820      	ldr	r0, [r4, #0]
 800c1fe:	b938      	cbnz	r0, 800c210 <__pow5mult+0x9c>
 800c200:	4622      	mov	r2, r4
 800c202:	4621      	mov	r1, r4
 800c204:	4638      	mov	r0, r7
 800c206:	f7ff ff0b 	bl	800c020 <__multiply>
 800c20a:	6020      	str	r0, [r4, #0]
 800c20c:	f8c0 9000 	str.w	r9, [r0]
 800c210:	4604      	mov	r4, r0
 800c212:	e7e4      	b.n	800c1de <__pow5mult+0x6a>
 800c214:	4630      	mov	r0, r6
 800c216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c21a:	bf00      	nop
 800c21c:	0800eabc 	.word	0x0800eabc
 800c220:	0800e9e2 	.word	0x0800e9e2
 800c224:	0800ea62 	.word	0x0800ea62

0800c228 <__lshift>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	6849      	ldr	r1, [r1, #4]
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	4607      	mov	r7, r0
 800c23a:	4691      	mov	r9, r2
 800c23c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c240:	f108 0601 	add.w	r6, r8, #1
 800c244:	42b3      	cmp	r3, r6
 800c246:	db0b      	blt.n	800c260 <__lshift+0x38>
 800c248:	4638      	mov	r0, r7
 800c24a:	f7ff fd95 	bl	800bd78 <_Balloc>
 800c24e:	4605      	mov	r5, r0
 800c250:	b948      	cbnz	r0, 800c266 <__lshift+0x3e>
 800c252:	4602      	mov	r2, r0
 800c254:	4b28      	ldr	r3, [pc, #160]	@ (800c2f8 <__lshift+0xd0>)
 800c256:	4829      	ldr	r0, [pc, #164]	@ (800c2fc <__lshift+0xd4>)
 800c258:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c25c:	f001 fb0c 	bl	800d878 <__assert_func>
 800c260:	3101      	adds	r1, #1
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	e7ee      	b.n	800c244 <__lshift+0x1c>
 800c266:	2300      	movs	r3, #0
 800c268:	f100 0114 	add.w	r1, r0, #20
 800c26c:	f100 0210 	add.w	r2, r0, #16
 800c270:	4618      	mov	r0, r3
 800c272:	4553      	cmp	r3, sl
 800c274:	db33      	blt.n	800c2de <__lshift+0xb6>
 800c276:	6920      	ldr	r0, [r4, #16]
 800c278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c27c:	f104 0314 	add.w	r3, r4, #20
 800c280:	f019 091f 	ands.w	r9, r9, #31
 800c284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c288:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c28c:	d02b      	beq.n	800c2e6 <__lshift+0xbe>
 800c28e:	f1c9 0e20 	rsb	lr, r9, #32
 800c292:	468a      	mov	sl, r1
 800c294:	2200      	movs	r2, #0
 800c296:	6818      	ldr	r0, [r3, #0]
 800c298:	fa00 f009 	lsl.w	r0, r0, r9
 800c29c:	4310      	orrs	r0, r2
 800c29e:	f84a 0b04 	str.w	r0, [sl], #4
 800c2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a6:	459c      	cmp	ip, r3
 800c2a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2ac:	d8f3      	bhi.n	800c296 <__lshift+0x6e>
 800c2ae:	ebac 0304 	sub.w	r3, ip, r4
 800c2b2:	3b15      	subs	r3, #21
 800c2b4:	f023 0303 	bic.w	r3, r3, #3
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	f104 0015 	add.w	r0, r4, #21
 800c2be:	4584      	cmp	ip, r0
 800c2c0:	bf38      	it	cc
 800c2c2:	2304      	movcc	r3, #4
 800c2c4:	50ca      	str	r2, [r1, r3]
 800c2c6:	b10a      	cbz	r2, 800c2cc <__lshift+0xa4>
 800c2c8:	f108 0602 	add.w	r6, r8, #2
 800c2cc:	3e01      	subs	r6, #1
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	612e      	str	r6, [r5, #16]
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	f7ff fd90 	bl	800bdf8 <_Bfree>
 800c2d8:	4628      	mov	r0, r5
 800c2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2de:	f842 0f04 	str.w	r0, [r2, #4]!
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	e7c5      	b.n	800c272 <__lshift+0x4a>
 800c2e6:	3904      	subs	r1, #4
 800c2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800c2f0:	459c      	cmp	ip, r3
 800c2f2:	d8f9      	bhi.n	800c2e8 <__lshift+0xc0>
 800c2f4:	e7ea      	b.n	800c2cc <__lshift+0xa4>
 800c2f6:	bf00      	nop
 800c2f8:	0800ea51 	.word	0x0800ea51
 800c2fc:	0800ea62 	.word	0x0800ea62

0800c300 <__mcmp>:
 800c300:	690a      	ldr	r2, [r1, #16]
 800c302:	4603      	mov	r3, r0
 800c304:	6900      	ldr	r0, [r0, #16]
 800c306:	1a80      	subs	r0, r0, r2
 800c308:	b530      	push	{r4, r5, lr}
 800c30a:	d10e      	bne.n	800c32a <__mcmp+0x2a>
 800c30c:	3314      	adds	r3, #20
 800c30e:	3114      	adds	r1, #20
 800c310:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c314:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c318:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c31c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c320:	4295      	cmp	r5, r2
 800c322:	d003      	beq.n	800c32c <__mcmp+0x2c>
 800c324:	d205      	bcs.n	800c332 <__mcmp+0x32>
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	bd30      	pop	{r4, r5, pc}
 800c32c:	42a3      	cmp	r3, r4
 800c32e:	d3f3      	bcc.n	800c318 <__mcmp+0x18>
 800c330:	e7fb      	b.n	800c32a <__mcmp+0x2a>
 800c332:	2001      	movs	r0, #1
 800c334:	e7f9      	b.n	800c32a <__mcmp+0x2a>
	...

0800c338 <__mdiff>:
 800c338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4689      	mov	r9, r1
 800c33e:	4606      	mov	r6, r0
 800c340:	4611      	mov	r1, r2
 800c342:	4648      	mov	r0, r9
 800c344:	4614      	mov	r4, r2
 800c346:	f7ff ffdb 	bl	800c300 <__mcmp>
 800c34a:	1e05      	subs	r5, r0, #0
 800c34c:	d112      	bne.n	800c374 <__mdiff+0x3c>
 800c34e:	4629      	mov	r1, r5
 800c350:	4630      	mov	r0, r6
 800c352:	f7ff fd11 	bl	800bd78 <_Balloc>
 800c356:	4602      	mov	r2, r0
 800c358:	b928      	cbnz	r0, 800c366 <__mdiff+0x2e>
 800c35a:	4b3f      	ldr	r3, [pc, #252]	@ (800c458 <__mdiff+0x120>)
 800c35c:	f240 2137 	movw	r1, #567	@ 0x237
 800c360:	483e      	ldr	r0, [pc, #248]	@ (800c45c <__mdiff+0x124>)
 800c362:	f001 fa89 	bl	800d878 <__assert_func>
 800c366:	2301      	movs	r3, #1
 800c368:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c36c:	4610      	mov	r0, r2
 800c36e:	b003      	add	sp, #12
 800c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c374:	bfbc      	itt	lt
 800c376:	464b      	movlt	r3, r9
 800c378:	46a1      	movlt	r9, r4
 800c37a:	4630      	mov	r0, r6
 800c37c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c380:	bfba      	itte	lt
 800c382:	461c      	movlt	r4, r3
 800c384:	2501      	movlt	r5, #1
 800c386:	2500      	movge	r5, #0
 800c388:	f7ff fcf6 	bl	800bd78 <_Balloc>
 800c38c:	4602      	mov	r2, r0
 800c38e:	b918      	cbnz	r0, 800c398 <__mdiff+0x60>
 800c390:	4b31      	ldr	r3, [pc, #196]	@ (800c458 <__mdiff+0x120>)
 800c392:	f240 2145 	movw	r1, #581	@ 0x245
 800c396:	e7e3      	b.n	800c360 <__mdiff+0x28>
 800c398:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c39c:	6926      	ldr	r6, [r4, #16]
 800c39e:	60c5      	str	r5, [r0, #12]
 800c3a0:	f109 0310 	add.w	r3, r9, #16
 800c3a4:	f109 0514 	add.w	r5, r9, #20
 800c3a8:	f104 0e14 	add.w	lr, r4, #20
 800c3ac:	f100 0b14 	add.w	fp, r0, #20
 800c3b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c3b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c3b8:	9301      	str	r3, [sp, #4]
 800c3ba:	46d9      	mov	r9, fp
 800c3bc:	f04f 0c00 	mov.w	ip, #0
 800c3c0:	9b01      	ldr	r3, [sp, #4]
 800c3c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c3c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c3ca:	9301      	str	r3, [sp, #4]
 800c3cc:	fa1f f38a 	uxth.w	r3, sl
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	b283      	uxth	r3, r0
 800c3d4:	1acb      	subs	r3, r1, r3
 800c3d6:	0c00      	lsrs	r0, r0, #16
 800c3d8:	4463      	add	r3, ip
 800c3da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c3de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c3e8:	4576      	cmp	r6, lr
 800c3ea:	f849 3b04 	str.w	r3, [r9], #4
 800c3ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3f2:	d8e5      	bhi.n	800c3c0 <__mdiff+0x88>
 800c3f4:	1b33      	subs	r3, r6, r4
 800c3f6:	3b15      	subs	r3, #21
 800c3f8:	f023 0303 	bic.w	r3, r3, #3
 800c3fc:	3415      	adds	r4, #21
 800c3fe:	3304      	adds	r3, #4
 800c400:	42a6      	cmp	r6, r4
 800c402:	bf38      	it	cc
 800c404:	2304      	movcc	r3, #4
 800c406:	441d      	add	r5, r3
 800c408:	445b      	add	r3, fp
 800c40a:	461e      	mov	r6, r3
 800c40c:	462c      	mov	r4, r5
 800c40e:	4544      	cmp	r4, r8
 800c410:	d30e      	bcc.n	800c430 <__mdiff+0xf8>
 800c412:	f108 0103 	add.w	r1, r8, #3
 800c416:	1b49      	subs	r1, r1, r5
 800c418:	f021 0103 	bic.w	r1, r1, #3
 800c41c:	3d03      	subs	r5, #3
 800c41e:	45a8      	cmp	r8, r5
 800c420:	bf38      	it	cc
 800c422:	2100      	movcc	r1, #0
 800c424:	440b      	add	r3, r1
 800c426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c42a:	b191      	cbz	r1, 800c452 <__mdiff+0x11a>
 800c42c:	6117      	str	r7, [r2, #16]
 800c42e:	e79d      	b.n	800c36c <__mdiff+0x34>
 800c430:	f854 1b04 	ldr.w	r1, [r4], #4
 800c434:	46e6      	mov	lr, ip
 800c436:	0c08      	lsrs	r0, r1, #16
 800c438:	fa1c fc81 	uxtah	ip, ip, r1
 800c43c:	4471      	add	r1, lr
 800c43e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c442:	b289      	uxth	r1, r1
 800c444:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c448:	f846 1b04 	str.w	r1, [r6], #4
 800c44c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c450:	e7dd      	b.n	800c40e <__mdiff+0xd6>
 800c452:	3f01      	subs	r7, #1
 800c454:	e7e7      	b.n	800c426 <__mdiff+0xee>
 800c456:	bf00      	nop
 800c458:	0800ea51 	.word	0x0800ea51
 800c45c:	0800ea62 	.word	0x0800ea62

0800c460 <__ulp>:
 800c460:	b082      	sub	sp, #8
 800c462:	ed8d 0b00 	vstr	d0, [sp]
 800c466:	9a01      	ldr	r2, [sp, #4]
 800c468:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a8 <__ulp+0x48>)
 800c46a:	4013      	ands	r3, r2
 800c46c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c470:	2b00      	cmp	r3, #0
 800c472:	dc08      	bgt.n	800c486 <__ulp+0x26>
 800c474:	425b      	negs	r3, r3
 800c476:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c47a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c47e:	da04      	bge.n	800c48a <__ulp+0x2a>
 800c480:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c484:	4113      	asrs	r3, r2
 800c486:	2200      	movs	r2, #0
 800c488:	e008      	b.n	800c49c <__ulp+0x3c>
 800c48a:	f1a2 0314 	sub.w	r3, r2, #20
 800c48e:	2b1e      	cmp	r3, #30
 800c490:	bfda      	itte	le
 800c492:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c496:	40da      	lsrle	r2, r3
 800c498:	2201      	movgt	r2, #1
 800c49a:	2300      	movs	r3, #0
 800c49c:	4619      	mov	r1, r3
 800c49e:	4610      	mov	r0, r2
 800c4a0:	ec41 0b10 	vmov	d0, r0, r1
 800c4a4:	b002      	add	sp, #8
 800c4a6:	4770      	bx	lr
 800c4a8:	7ff00000 	.word	0x7ff00000

0800c4ac <__b2d>:
 800c4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b0:	6906      	ldr	r6, [r0, #16]
 800c4b2:	f100 0814 	add.w	r8, r0, #20
 800c4b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c4ba:	1f37      	subs	r7, r6, #4
 800c4bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c4c0:	4610      	mov	r0, r2
 800c4c2:	f7ff fd4b 	bl	800bf5c <__hi0bits>
 800c4c6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ca:	280a      	cmp	r0, #10
 800c4cc:	600b      	str	r3, [r1, #0]
 800c4ce:	491b      	ldr	r1, [pc, #108]	@ (800c53c <__b2d+0x90>)
 800c4d0:	dc15      	bgt.n	800c4fe <__b2d+0x52>
 800c4d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c4d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c4da:	45b8      	cmp	r8, r7
 800c4dc:	ea43 0501 	orr.w	r5, r3, r1
 800c4e0:	bf34      	ite	cc
 800c4e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c4e6:	2300      	movcs	r3, #0
 800c4e8:	3015      	adds	r0, #21
 800c4ea:	fa02 f000 	lsl.w	r0, r2, r0
 800c4ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800c4f2:	4303      	orrs	r3, r0
 800c4f4:	461c      	mov	r4, r3
 800c4f6:	ec45 4b10 	vmov	d0, r4, r5
 800c4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4fe:	45b8      	cmp	r8, r7
 800c500:	bf3a      	itte	cc
 800c502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c506:	f1a6 0708 	subcc.w	r7, r6, #8
 800c50a:	2300      	movcs	r3, #0
 800c50c:	380b      	subs	r0, #11
 800c50e:	d012      	beq.n	800c536 <__b2d+0x8a>
 800c510:	f1c0 0120 	rsb	r1, r0, #32
 800c514:	fa23 f401 	lsr.w	r4, r3, r1
 800c518:	4082      	lsls	r2, r0
 800c51a:	4322      	orrs	r2, r4
 800c51c:	4547      	cmp	r7, r8
 800c51e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c522:	bf8c      	ite	hi
 800c524:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c528:	2200      	movls	r2, #0
 800c52a:	4083      	lsls	r3, r0
 800c52c:	40ca      	lsrs	r2, r1
 800c52e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c532:	4313      	orrs	r3, r2
 800c534:	e7de      	b.n	800c4f4 <__b2d+0x48>
 800c536:	ea42 0501 	orr.w	r5, r2, r1
 800c53a:	e7db      	b.n	800c4f4 <__b2d+0x48>
 800c53c:	3ff00000 	.word	0x3ff00000

0800c540 <__d2b>:
 800c540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c544:	460f      	mov	r7, r1
 800c546:	2101      	movs	r1, #1
 800c548:	ec59 8b10 	vmov	r8, r9, d0
 800c54c:	4616      	mov	r6, r2
 800c54e:	f7ff fc13 	bl	800bd78 <_Balloc>
 800c552:	4604      	mov	r4, r0
 800c554:	b930      	cbnz	r0, 800c564 <__d2b+0x24>
 800c556:	4602      	mov	r2, r0
 800c558:	4b23      	ldr	r3, [pc, #140]	@ (800c5e8 <__d2b+0xa8>)
 800c55a:	4824      	ldr	r0, [pc, #144]	@ (800c5ec <__d2b+0xac>)
 800c55c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c560:	f001 f98a 	bl	800d878 <__assert_func>
 800c564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c56c:	b10d      	cbz	r5, 800c572 <__d2b+0x32>
 800c56e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c572:	9301      	str	r3, [sp, #4]
 800c574:	f1b8 0300 	subs.w	r3, r8, #0
 800c578:	d023      	beq.n	800c5c2 <__d2b+0x82>
 800c57a:	4668      	mov	r0, sp
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	f7ff fd0c 	bl	800bf9a <__lo0bits>
 800c582:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c586:	b1d0      	cbz	r0, 800c5be <__d2b+0x7e>
 800c588:	f1c0 0320 	rsb	r3, r0, #32
 800c58c:	fa02 f303 	lsl.w	r3, r2, r3
 800c590:	430b      	orrs	r3, r1
 800c592:	40c2      	lsrs	r2, r0
 800c594:	6163      	str	r3, [r4, #20]
 800c596:	9201      	str	r2, [sp, #4]
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	61a3      	str	r3, [r4, #24]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bf0c      	ite	eq
 800c5a0:	2201      	moveq	r2, #1
 800c5a2:	2202      	movne	r2, #2
 800c5a4:	6122      	str	r2, [r4, #16]
 800c5a6:	b1a5      	cbz	r5, 800c5d2 <__d2b+0x92>
 800c5a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5ac:	4405      	add	r5, r0
 800c5ae:	603d      	str	r5, [r7, #0]
 800c5b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5b4:	6030      	str	r0, [r6, #0]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	b003      	add	sp, #12
 800c5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5be:	6161      	str	r1, [r4, #20]
 800c5c0:	e7ea      	b.n	800c598 <__d2b+0x58>
 800c5c2:	a801      	add	r0, sp, #4
 800c5c4:	f7ff fce9 	bl	800bf9a <__lo0bits>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	6163      	str	r3, [r4, #20]
 800c5cc:	3020      	adds	r0, #32
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	e7e8      	b.n	800c5a4 <__d2b+0x64>
 800c5d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5da:	6038      	str	r0, [r7, #0]
 800c5dc:	6918      	ldr	r0, [r3, #16]
 800c5de:	f7ff fcbd 	bl	800bf5c <__hi0bits>
 800c5e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5e6:	e7e5      	b.n	800c5b4 <__d2b+0x74>
 800c5e8:	0800ea51 	.word	0x0800ea51
 800c5ec:	0800ea62 	.word	0x0800ea62

0800c5f0 <__ratio>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	e9cd 1000 	strd	r1, r0, [sp]
 800c5fa:	a902      	add	r1, sp, #8
 800c5fc:	f7ff ff56 	bl	800c4ac <__b2d>
 800c600:	9800      	ldr	r0, [sp, #0]
 800c602:	a903      	add	r1, sp, #12
 800c604:	ec55 4b10 	vmov	r4, r5, d0
 800c608:	f7ff ff50 	bl	800c4ac <__b2d>
 800c60c:	9b01      	ldr	r3, [sp, #4]
 800c60e:	6919      	ldr	r1, [r3, #16]
 800c610:	9b00      	ldr	r3, [sp, #0]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	1ac9      	subs	r1, r1, r3
 800c616:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c61a:	1a9b      	subs	r3, r3, r2
 800c61c:	ec5b ab10 	vmov	sl, fp, d0
 800c620:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfce      	itee	gt
 800c628:	462a      	movgt	r2, r5
 800c62a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c62e:	465a      	movle	r2, fp
 800c630:	462f      	mov	r7, r5
 800c632:	46d9      	mov	r9, fp
 800c634:	bfcc      	ite	gt
 800c636:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c63a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c63e:	464b      	mov	r3, r9
 800c640:	4652      	mov	r2, sl
 800c642:	4620      	mov	r0, r4
 800c644:	4639      	mov	r1, r7
 800c646:	f7f4 f8d9 	bl	80007fc <__aeabi_ddiv>
 800c64a:	ec41 0b10 	vmov	d0, r0, r1
 800c64e:	b005      	add	sp, #20
 800c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c654 <__copybits>:
 800c654:	3901      	subs	r1, #1
 800c656:	b570      	push	{r4, r5, r6, lr}
 800c658:	1149      	asrs	r1, r1, #5
 800c65a:	6914      	ldr	r4, [r2, #16]
 800c65c:	3101      	adds	r1, #1
 800c65e:	f102 0314 	add.w	r3, r2, #20
 800c662:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c666:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c66a:	1f05      	subs	r5, r0, #4
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d30c      	bcc.n	800c68a <__copybits+0x36>
 800c670:	1aa3      	subs	r3, r4, r2
 800c672:	3b11      	subs	r3, #17
 800c674:	f023 0303 	bic.w	r3, r3, #3
 800c678:	3211      	adds	r2, #17
 800c67a:	42a2      	cmp	r2, r4
 800c67c:	bf88      	it	hi
 800c67e:	2300      	movhi	r3, #0
 800c680:	4418      	add	r0, r3
 800c682:	2300      	movs	r3, #0
 800c684:	4288      	cmp	r0, r1
 800c686:	d305      	bcc.n	800c694 <__copybits+0x40>
 800c688:	bd70      	pop	{r4, r5, r6, pc}
 800c68a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c68e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c692:	e7eb      	b.n	800c66c <__copybits+0x18>
 800c694:	f840 3b04 	str.w	r3, [r0], #4
 800c698:	e7f4      	b.n	800c684 <__copybits+0x30>

0800c69a <__any_on>:
 800c69a:	f100 0214 	add.w	r2, r0, #20
 800c69e:	6900      	ldr	r0, [r0, #16]
 800c6a0:	114b      	asrs	r3, r1, #5
 800c6a2:	4298      	cmp	r0, r3
 800c6a4:	b510      	push	{r4, lr}
 800c6a6:	db11      	blt.n	800c6cc <__any_on+0x32>
 800c6a8:	dd0a      	ble.n	800c6c0 <__any_on+0x26>
 800c6aa:	f011 011f 	ands.w	r1, r1, #31
 800c6ae:	d007      	beq.n	800c6c0 <__any_on+0x26>
 800c6b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c6b4:	fa24 f001 	lsr.w	r0, r4, r1
 800c6b8:	fa00 f101 	lsl.w	r1, r0, r1
 800c6bc:	428c      	cmp	r4, r1
 800c6be:	d10b      	bne.n	800c6d8 <__any_on+0x3e>
 800c6c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d803      	bhi.n	800c6d0 <__any_on+0x36>
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	bd10      	pop	{r4, pc}
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	e7f7      	b.n	800c6c0 <__any_on+0x26>
 800c6d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	d0f5      	beq.n	800c6c4 <__any_on+0x2a>
 800c6d8:	2001      	movs	r0, #1
 800c6da:	e7f6      	b.n	800c6ca <__any_on+0x30>

0800c6dc <sulp>:
 800c6dc:	b570      	push	{r4, r5, r6, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	ec45 4b10 	vmov	d0, r4, r5
 800c6e6:	4616      	mov	r6, r2
 800c6e8:	f7ff feba 	bl	800c460 <__ulp>
 800c6ec:	ec51 0b10 	vmov	r0, r1, d0
 800c6f0:	b17e      	cbz	r6, 800c712 <sulp+0x36>
 800c6f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	dd09      	ble.n	800c712 <sulp+0x36>
 800c6fe:	051b      	lsls	r3, r3, #20
 800c700:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c704:	2400      	movs	r4, #0
 800c706:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c70a:	4622      	mov	r2, r4
 800c70c:	462b      	mov	r3, r5
 800c70e:	f7f3 ff4b 	bl	80005a8 <__aeabi_dmul>
 800c712:	ec41 0b10 	vmov	d0, r0, r1
 800c716:	bd70      	pop	{r4, r5, r6, pc}

0800c718 <_strtod_l>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	b09f      	sub	sp, #124	@ 0x7c
 800c71e:	460c      	mov	r4, r1
 800c720:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c722:	2200      	movs	r2, #0
 800c724:	921a      	str	r2, [sp, #104]	@ 0x68
 800c726:	9005      	str	r0, [sp, #20]
 800c728:	f04f 0a00 	mov.w	sl, #0
 800c72c:	f04f 0b00 	mov.w	fp, #0
 800c730:	460a      	mov	r2, r1
 800c732:	9219      	str	r2, [sp, #100]	@ 0x64
 800c734:	7811      	ldrb	r1, [r2, #0]
 800c736:	292b      	cmp	r1, #43	@ 0x2b
 800c738:	d04a      	beq.n	800c7d0 <_strtod_l+0xb8>
 800c73a:	d838      	bhi.n	800c7ae <_strtod_l+0x96>
 800c73c:	290d      	cmp	r1, #13
 800c73e:	d832      	bhi.n	800c7a6 <_strtod_l+0x8e>
 800c740:	2908      	cmp	r1, #8
 800c742:	d832      	bhi.n	800c7aa <_strtod_l+0x92>
 800c744:	2900      	cmp	r1, #0
 800c746:	d03b      	beq.n	800c7c0 <_strtod_l+0xa8>
 800c748:	2200      	movs	r2, #0
 800c74a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c74c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c74e:	782a      	ldrb	r2, [r5, #0]
 800c750:	2a30      	cmp	r2, #48	@ 0x30
 800c752:	f040 80b3 	bne.w	800c8bc <_strtod_l+0x1a4>
 800c756:	786a      	ldrb	r2, [r5, #1]
 800c758:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c75c:	2a58      	cmp	r2, #88	@ 0x58
 800c75e:	d16e      	bne.n	800c83e <_strtod_l+0x126>
 800c760:	9302      	str	r3, [sp, #8]
 800c762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	ab1a      	add	r3, sp, #104	@ 0x68
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	4a8e      	ldr	r2, [pc, #568]	@ (800c9a4 <_strtod_l+0x28c>)
 800c76c:	9805      	ldr	r0, [sp, #20]
 800c76e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c770:	a919      	add	r1, sp, #100	@ 0x64
 800c772:	f001 f91b 	bl	800d9ac <__gethex>
 800c776:	f010 060f 	ands.w	r6, r0, #15
 800c77a:	4604      	mov	r4, r0
 800c77c:	d005      	beq.n	800c78a <_strtod_l+0x72>
 800c77e:	2e06      	cmp	r6, #6
 800c780:	d128      	bne.n	800c7d4 <_strtod_l+0xbc>
 800c782:	3501      	adds	r5, #1
 800c784:	2300      	movs	r3, #0
 800c786:	9519      	str	r5, [sp, #100]	@ 0x64
 800c788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c78a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f040 858e 	bne.w	800d2ae <_strtod_l+0xb96>
 800c792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c794:	b1cb      	cbz	r3, 800c7ca <_strtod_l+0xb2>
 800c796:	4652      	mov	r2, sl
 800c798:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c79c:	ec43 2b10 	vmov	d0, r2, r3
 800c7a0:	b01f      	add	sp, #124	@ 0x7c
 800c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a6:	2920      	cmp	r1, #32
 800c7a8:	d1ce      	bne.n	800c748 <_strtod_l+0x30>
 800c7aa:	3201      	adds	r2, #1
 800c7ac:	e7c1      	b.n	800c732 <_strtod_l+0x1a>
 800c7ae:	292d      	cmp	r1, #45	@ 0x2d
 800c7b0:	d1ca      	bne.n	800c748 <_strtod_l+0x30>
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c7b6:	1c51      	adds	r1, r2, #1
 800c7b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c7ba:	7852      	ldrb	r2, [r2, #1]
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	d1c5      	bne.n	800c74c <_strtod_l+0x34>
 800c7c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c7c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f040 8570 	bne.w	800d2aa <_strtod_l+0xb92>
 800c7ca:	4652      	mov	r2, sl
 800c7cc:	465b      	mov	r3, fp
 800c7ce:	e7e5      	b.n	800c79c <_strtod_l+0x84>
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	e7ef      	b.n	800c7b4 <_strtod_l+0x9c>
 800c7d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c7d6:	b13a      	cbz	r2, 800c7e8 <_strtod_l+0xd0>
 800c7d8:	2135      	movs	r1, #53	@ 0x35
 800c7da:	a81c      	add	r0, sp, #112	@ 0x70
 800c7dc:	f7ff ff3a 	bl	800c654 <__copybits>
 800c7e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c7e2:	9805      	ldr	r0, [sp, #20]
 800c7e4:	f7ff fb08 	bl	800bdf8 <_Bfree>
 800c7e8:	3e01      	subs	r6, #1
 800c7ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c7ec:	2e04      	cmp	r6, #4
 800c7ee:	d806      	bhi.n	800c7fe <_strtod_l+0xe6>
 800c7f0:	e8df f006 	tbb	[pc, r6]
 800c7f4:	201d0314 	.word	0x201d0314
 800c7f8:	14          	.byte	0x14
 800c7f9:	00          	.byte	0x00
 800c7fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c7fe:	05e1      	lsls	r1, r4, #23
 800c800:	bf48      	it	mi
 800c802:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c80a:	0d1b      	lsrs	r3, r3, #20
 800c80c:	051b      	lsls	r3, r3, #20
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1bb      	bne.n	800c78a <_strtod_l+0x72>
 800c812:	f7fe fb23 	bl	800ae5c <__errno>
 800c816:	2322      	movs	r3, #34	@ 0x22
 800c818:	6003      	str	r3, [r0, #0]
 800c81a:	e7b6      	b.n	800c78a <_strtod_l+0x72>
 800c81c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c820:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c824:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c828:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c82c:	e7e7      	b.n	800c7fe <_strtod_l+0xe6>
 800c82e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c9ac <_strtod_l+0x294>
 800c832:	e7e4      	b.n	800c7fe <_strtod_l+0xe6>
 800c834:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c838:	f04f 3aff 	mov.w	sl, #4294967295
 800c83c:	e7df      	b.n	800c7fe <_strtod_l+0xe6>
 800c83e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	9219      	str	r2, [sp, #100]	@ 0x64
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	2b30      	cmp	r3, #48	@ 0x30
 800c848:	d0f9      	beq.n	800c83e <_strtod_l+0x126>
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d09d      	beq.n	800c78a <_strtod_l+0x72>
 800c84e:	2301      	movs	r3, #1
 800c850:	9309      	str	r3, [sp, #36]	@ 0x24
 800c852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c854:	930c      	str	r3, [sp, #48]	@ 0x30
 800c856:	2300      	movs	r3, #0
 800c858:	9308      	str	r3, [sp, #32]
 800c85a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c85c:	461f      	mov	r7, r3
 800c85e:	220a      	movs	r2, #10
 800c860:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c862:	7805      	ldrb	r5, [r0, #0]
 800c864:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c868:	b2d9      	uxtb	r1, r3
 800c86a:	2909      	cmp	r1, #9
 800c86c:	d928      	bls.n	800c8c0 <_strtod_l+0x1a8>
 800c86e:	494e      	ldr	r1, [pc, #312]	@ (800c9a8 <_strtod_l+0x290>)
 800c870:	2201      	movs	r2, #1
 800c872:	f000 ffd5 	bl	800d820 <strncmp>
 800c876:	2800      	cmp	r0, #0
 800c878:	d032      	beq.n	800c8e0 <_strtod_l+0x1c8>
 800c87a:	2000      	movs	r0, #0
 800c87c:	462a      	mov	r2, r5
 800c87e:	4681      	mov	r9, r0
 800c880:	463d      	mov	r5, r7
 800c882:	4603      	mov	r3, r0
 800c884:	2a65      	cmp	r2, #101	@ 0x65
 800c886:	d001      	beq.n	800c88c <_strtod_l+0x174>
 800c888:	2a45      	cmp	r2, #69	@ 0x45
 800c88a:	d114      	bne.n	800c8b6 <_strtod_l+0x19e>
 800c88c:	b91d      	cbnz	r5, 800c896 <_strtod_l+0x17e>
 800c88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c890:	4302      	orrs	r2, r0
 800c892:	d095      	beq.n	800c7c0 <_strtod_l+0xa8>
 800c894:	2500      	movs	r5, #0
 800c896:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c898:	1c62      	adds	r2, r4, #1
 800c89a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c89c:	7862      	ldrb	r2, [r4, #1]
 800c89e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c8a0:	d077      	beq.n	800c992 <_strtod_l+0x27a>
 800c8a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c8a4:	d07b      	beq.n	800c99e <_strtod_l+0x286>
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c8ae:	2909      	cmp	r1, #9
 800c8b0:	f240 8082 	bls.w	800c9b8 <_strtod_l+0x2a0>
 800c8b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c8b6:	f04f 0800 	mov.w	r8, #0
 800c8ba:	e0a2      	b.n	800ca02 <_strtod_l+0x2ea>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e7c7      	b.n	800c850 <_strtod_l+0x138>
 800c8c0:	2f08      	cmp	r7, #8
 800c8c2:	bfd5      	itete	le
 800c8c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c8c6:	9908      	ldrgt	r1, [sp, #32]
 800c8c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c8d0:	f100 0001 	add.w	r0, r0, #1
 800c8d4:	bfd4      	ite	le
 800c8d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c8d8:	9308      	strgt	r3, [sp, #32]
 800c8da:	3701      	adds	r7, #1
 800c8dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c8de:	e7bf      	b.n	800c860 <_strtod_l+0x148>
 800c8e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8e6:	785a      	ldrb	r2, [r3, #1]
 800c8e8:	b37f      	cbz	r7, 800c94a <_strtod_l+0x232>
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	463d      	mov	r5, r7
 800c8ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c8f2:	2b09      	cmp	r3, #9
 800c8f4:	d912      	bls.n	800c91c <_strtod_l+0x204>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7c4      	b.n	800c884 <_strtod_l+0x16c>
 800c8fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800c900:	785a      	ldrb	r2, [r3, #1]
 800c902:	3001      	adds	r0, #1
 800c904:	2a30      	cmp	r2, #48	@ 0x30
 800c906:	d0f8      	beq.n	800c8fa <_strtod_l+0x1e2>
 800c908:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c90c:	2b08      	cmp	r3, #8
 800c90e:	f200 84d3 	bhi.w	800d2b8 <_strtod_l+0xba0>
 800c912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c914:	930c      	str	r3, [sp, #48]	@ 0x30
 800c916:	4681      	mov	r9, r0
 800c918:	2000      	movs	r0, #0
 800c91a:	4605      	mov	r5, r0
 800c91c:	3a30      	subs	r2, #48	@ 0x30
 800c91e:	f100 0301 	add.w	r3, r0, #1
 800c922:	d02a      	beq.n	800c97a <_strtod_l+0x262>
 800c924:	4499      	add	r9, r3
 800c926:	eb00 0c05 	add.w	ip, r0, r5
 800c92a:	462b      	mov	r3, r5
 800c92c:	210a      	movs	r1, #10
 800c92e:	4563      	cmp	r3, ip
 800c930:	d10d      	bne.n	800c94e <_strtod_l+0x236>
 800c932:	1c69      	adds	r1, r5, #1
 800c934:	4401      	add	r1, r0
 800c936:	4428      	add	r0, r5
 800c938:	2808      	cmp	r0, #8
 800c93a:	dc16      	bgt.n	800c96a <_strtod_l+0x252>
 800c93c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c93e:	230a      	movs	r3, #10
 800c940:	fb03 2300 	mla	r3, r3, r0, r2
 800c944:	930a      	str	r3, [sp, #40]	@ 0x28
 800c946:	2300      	movs	r3, #0
 800c948:	e018      	b.n	800c97c <_strtod_l+0x264>
 800c94a:	4638      	mov	r0, r7
 800c94c:	e7da      	b.n	800c904 <_strtod_l+0x1ec>
 800c94e:	2b08      	cmp	r3, #8
 800c950:	f103 0301 	add.w	r3, r3, #1
 800c954:	dc03      	bgt.n	800c95e <_strtod_l+0x246>
 800c956:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c958:	434e      	muls	r6, r1
 800c95a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c95c:	e7e7      	b.n	800c92e <_strtod_l+0x216>
 800c95e:	2b10      	cmp	r3, #16
 800c960:	bfde      	ittt	le
 800c962:	9e08      	ldrle	r6, [sp, #32]
 800c964:	434e      	mulle	r6, r1
 800c966:	9608      	strle	r6, [sp, #32]
 800c968:	e7e1      	b.n	800c92e <_strtod_l+0x216>
 800c96a:	280f      	cmp	r0, #15
 800c96c:	dceb      	bgt.n	800c946 <_strtod_l+0x22e>
 800c96e:	9808      	ldr	r0, [sp, #32]
 800c970:	230a      	movs	r3, #10
 800c972:	fb03 2300 	mla	r3, r3, r0, r2
 800c976:	9308      	str	r3, [sp, #32]
 800c978:	e7e5      	b.n	800c946 <_strtod_l+0x22e>
 800c97a:	4629      	mov	r1, r5
 800c97c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c97e:	1c50      	adds	r0, r2, #1
 800c980:	9019      	str	r0, [sp, #100]	@ 0x64
 800c982:	7852      	ldrb	r2, [r2, #1]
 800c984:	4618      	mov	r0, r3
 800c986:	460d      	mov	r5, r1
 800c988:	e7b1      	b.n	800c8ee <_strtod_l+0x1d6>
 800c98a:	f04f 0900 	mov.w	r9, #0
 800c98e:	2301      	movs	r3, #1
 800c990:	e77d      	b.n	800c88e <_strtod_l+0x176>
 800c992:	f04f 0c00 	mov.w	ip, #0
 800c996:	1ca2      	adds	r2, r4, #2
 800c998:	9219      	str	r2, [sp, #100]	@ 0x64
 800c99a:	78a2      	ldrb	r2, [r4, #2]
 800c99c:	e785      	b.n	800c8aa <_strtod_l+0x192>
 800c99e:	f04f 0c01 	mov.w	ip, #1
 800c9a2:	e7f8      	b.n	800c996 <_strtod_l+0x27e>
 800c9a4:	0800ebd0 	.word	0x0800ebd0
 800c9a8:	0800ebb8 	.word	0x0800ebb8
 800c9ac:	7ff00000 	.word	0x7ff00000
 800c9b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9b2:	1c51      	adds	r1, r2, #1
 800c9b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9b6:	7852      	ldrb	r2, [r2, #1]
 800c9b8:	2a30      	cmp	r2, #48	@ 0x30
 800c9ba:	d0f9      	beq.n	800c9b0 <_strtod_l+0x298>
 800c9bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c9c0:	2908      	cmp	r1, #8
 800c9c2:	f63f af78 	bhi.w	800c8b6 <_strtod_l+0x19e>
 800c9c6:	3a30      	subs	r2, #48	@ 0x30
 800c9c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c9ce:	f04f 080a 	mov.w	r8, #10
 800c9d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c9d4:	1c56      	adds	r6, r2, #1
 800c9d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c9d8:	7852      	ldrb	r2, [r2, #1]
 800c9da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c9de:	f1be 0f09 	cmp.w	lr, #9
 800c9e2:	d939      	bls.n	800ca58 <_strtod_l+0x340>
 800c9e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c9e6:	1a76      	subs	r6, r6, r1
 800c9e8:	2e08      	cmp	r6, #8
 800c9ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c9ee:	dc03      	bgt.n	800c9f8 <_strtod_l+0x2e0>
 800c9f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c9f2:	4588      	cmp	r8, r1
 800c9f4:	bfa8      	it	ge
 800c9f6:	4688      	movge	r8, r1
 800c9f8:	f1bc 0f00 	cmp.w	ip, #0
 800c9fc:	d001      	beq.n	800ca02 <_strtod_l+0x2ea>
 800c9fe:	f1c8 0800 	rsb	r8, r8, #0
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	d14e      	bne.n	800caa4 <_strtod_l+0x38c>
 800ca06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca08:	4308      	orrs	r0, r1
 800ca0a:	f47f aebe 	bne.w	800c78a <_strtod_l+0x72>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f47f aed6 	bne.w	800c7c0 <_strtod_l+0xa8>
 800ca14:	2a69      	cmp	r2, #105	@ 0x69
 800ca16:	d028      	beq.n	800ca6a <_strtod_l+0x352>
 800ca18:	dc25      	bgt.n	800ca66 <_strtod_l+0x34e>
 800ca1a:	2a49      	cmp	r2, #73	@ 0x49
 800ca1c:	d025      	beq.n	800ca6a <_strtod_l+0x352>
 800ca1e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ca20:	f47f aece 	bne.w	800c7c0 <_strtod_l+0xa8>
 800ca24:	499b      	ldr	r1, [pc, #620]	@ (800cc94 <_strtod_l+0x57c>)
 800ca26:	a819      	add	r0, sp, #100	@ 0x64
 800ca28:	f001 f9e2 	bl	800ddf0 <__match>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	f43f aec7 	beq.w	800c7c0 <_strtod_l+0xa8>
 800ca32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b28      	cmp	r3, #40	@ 0x28
 800ca38:	d12e      	bne.n	800ca98 <_strtod_l+0x380>
 800ca3a:	4997      	ldr	r1, [pc, #604]	@ (800cc98 <_strtod_l+0x580>)
 800ca3c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ca3e:	a819      	add	r0, sp, #100	@ 0x64
 800ca40:	f001 f9ea 	bl	800de18 <__hexnan>
 800ca44:	2805      	cmp	r0, #5
 800ca46:	d127      	bne.n	800ca98 <_strtod_l+0x380>
 800ca48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ca4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ca4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ca52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ca56:	e698      	b.n	800c78a <_strtod_l+0x72>
 800ca58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ca5a:	fb08 2101 	mla	r1, r8, r1, r2
 800ca5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ca62:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca64:	e7b5      	b.n	800c9d2 <_strtod_l+0x2ba>
 800ca66:	2a6e      	cmp	r2, #110	@ 0x6e
 800ca68:	e7da      	b.n	800ca20 <_strtod_l+0x308>
 800ca6a:	498c      	ldr	r1, [pc, #560]	@ (800cc9c <_strtod_l+0x584>)
 800ca6c:	a819      	add	r0, sp, #100	@ 0x64
 800ca6e:	f001 f9bf 	bl	800ddf0 <__match>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f43f aea4 	beq.w	800c7c0 <_strtod_l+0xa8>
 800ca78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca7a:	4989      	ldr	r1, [pc, #548]	@ (800cca0 <_strtod_l+0x588>)
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	a819      	add	r0, sp, #100	@ 0x64
 800ca80:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca82:	f001 f9b5 	bl	800ddf0 <__match>
 800ca86:	b910      	cbnz	r0, 800ca8e <_strtod_l+0x376>
 800ca88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ccb0 <_strtod_l+0x598>
 800ca92:	f04f 0a00 	mov.w	sl, #0
 800ca96:	e678      	b.n	800c78a <_strtod_l+0x72>
 800ca98:	4882      	ldr	r0, [pc, #520]	@ (800cca4 <_strtod_l+0x58c>)
 800ca9a:	f000 fee5 	bl	800d868 <nan>
 800ca9e:	ec5b ab10 	vmov	sl, fp, d0
 800caa2:	e672      	b.n	800c78a <_strtod_l+0x72>
 800caa4:	eba8 0309 	sub.w	r3, r8, r9
 800caa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800caaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800caac:	2f00      	cmp	r7, #0
 800caae:	bf08      	it	eq
 800cab0:	462f      	moveq	r7, r5
 800cab2:	2d10      	cmp	r5, #16
 800cab4:	462c      	mov	r4, r5
 800cab6:	bfa8      	it	ge
 800cab8:	2410      	movge	r4, #16
 800caba:	f7f3 fcfb 	bl	80004b4 <__aeabi_ui2d>
 800cabe:	2d09      	cmp	r5, #9
 800cac0:	4682      	mov	sl, r0
 800cac2:	468b      	mov	fp, r1
 800cac4:	dc13      	bgt.n	800caee <_strtod_l+0x3d6>
 800cac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f43f ae5e 	beq.w	800c78a <_strtod_l+0x72>
 800cace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cad0:	dd78      	ble.n	800cbc4 <_strtod_l+0x4ac>
 800cad2:	2b16      	cmp	r3, #22
 800cad4:	dc5f      	bgt.n	800cb96 <_strtod_l+0x47e>
 800cad6:	4974      	ldr	r1, [pc, #464]	@ (800cca8 <_strtod_l+0x590>)
 800cad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cae0:	4652      	mov	r2, sl
 800cae2:	465b      	mov	r3, fp
 800cae4:	f7f3 fd60 	bl	80005a8 <__aeabi_dmul>
 800cae8:	4682      	mov	sl, r0
 800caea:	468b      	mov	fp, r1
 800caec:	e64d      	b.n	800c78a <_strtod_l+0x72>
 800caee:	4b6e      	ldr	r3, [pc, #440]	@ (800cca8 <_strtod_l+0x590>)
 800caf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800caf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800caf8:	f7f3 fd56 	bl	80005a8 <__aeabi_dmul>
 800cafc:	4682      	mov	sl, r0
 800cafe:	9808      	ldr	r0, [sp, #32]
 800cb00:	468b      	mov	fp, r1
 800cb02:	f7f3 fcd7 	bl	80004b4 <__aeabi_ui2d>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	4659      	mov	r1, fp
 800cb0e:	f7f3 fb95 	bl	800023c <__adddf3>
 800cb12:	2d0f      	cmp	r5, #15
 800cb14:	4682      	mov	sl, r0
 800cb16:	468b      	mov	fp, r1
 800cb18:	ddd5      	ble.n	800cac6 <_strtod_l+0x3ae>
 800cb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb1c:	1b2c      	subs	r4, r5, r4
 800cb1e:	441c      	add	r4, r3
 800cb20:	2c00      	cmp	r4, #0
 800cb22:	f340 8096 	ble.w	800cc52 <_strtod_l+0x53a>
 800cb26:	f014 030f 	ands.w	r3, r4, #15
 800cb2a:	d00a      	beq.n	800cb42 <_strtod_l+0x42a>
 800cb2c:	495e      	ldr	r1, [pc, #376]	@ (800cca8 <_strtod_l+0x590>)
 800cb2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb32:	4652      	mov	r2, sl
 800cb34:	465b      	mov	r3, fp
 800cb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb3a:	f7f3 fd35 	bl	80005a8 <__aeabi_dmul>
 800cb3e:	4682      	mov	sl, r0
 800cb40:	468b      	mov	fp, r1
 800cb42:	f034 040f 	bics.w	r4, r4, #15
 800cb46:	d073      	beq.n	800cc30 <_strtod_l+0x518>
 800cb48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cb4c:	dd48      	ble.n	800cbe0 <_strtod_l+0x4c8>
 800cb4e:	2400      	movs	r4, #0
 800cb50:	46a0      	mov	r8, r4
 800cb52:	940a      	str	r4, [sp, #40]	@ 0x28
 800cb54:	46a1      	mov	r9, r4
 800cb56:	9a05      	ldr	r2, [sp, #20]
 800cb58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ccb0 <_strtod_l+0x598>
 800cb5c:	2322      	movs	r3, #34	@ 0x22
 800cb5e:	6013      	str	r3, [r2, #0]
 800cb60:	f04f 0a00 	mov.w	sl, #0
 800cb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f43f ae0f 	beq.w	800c78a <_strtod_l+0x72>
 800cb6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb6e:	9805      	ldr	r0, [sp, #20]
 800cb70:	f7ff f942 	bl	800bdf8 <_Bfree>
 800cb74:	9805      	ldr	r0, [sp, #20]
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7ff f93e 	bl	800bdf8 <_Bfree>
 800cb7c:	9805      	ldr	r0, [sp, #20]
 800cb7e:	4641      	mov	r1, r8
 800cb80:	f7ff f93a 	bl	800bdf8 <_Bfree>
 800cb84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb86:	9805      	ldr	r0, [sp, #20]
 800cb88:	f7ff f936 	bl	800bdf8 <_Bfree>
 800cb8c:	9805      	ldr	r0, [sp, #20]
 800cb8e:	4621      	mov	r1, r4
 800cb90:	f7ff f932 	bl	800bdf8 <_Bfree>
 800cb94:	e5f9      	b.n	800c78a <_strtod_l+0x72>
 800cb96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	dbbc      	blt.n	800cb1a <_strtod_l+0x402>
 800cba0:	4c41      	ldr	r4, [pc, #260]	@ (800cca8 <_strtod_l+0x590>)
 800cba2:	f1c5 050f 	rsb	r5, r5, #15
 800cba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbb2:	f7f3 fcf9 	bl	80005a8 <__aeabi_dmul>
 800cbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb8:	1b5d      	subs	r5, r3, r5
 800cbba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cbbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cbc2:	e78f      	b.n	800cae4 <_strtod_l+0x3cc>
 800cbc4:	3316      	adds	r3, #22
 800cbc6:	dba8      	blt.n	800cb1a <_strtod_l+0x402>
 800cbc8:	4b37      	ldr	r3, [pc, #220]	@ (800cca8 <_strtod_l+0x590>)
 800cbca:	eba9 0808 	sub.w	r8, r9, r8
 800cbce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cbd2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	f7f3 fe0f 	bl	80007fc <__aeabi_ddiv>
 800cbde:	e783      	b.n	800cae8 <_strtod_l+0x3d0>
 800cbe0:	4b32      	ldr	r3, [pc, #200]	@ (800ccac <_strtod_l+0x594>)
 800cbe2:	9308      	str	r3, [sp, #32]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	1124      	asrs	r4, r4, #4
 800cbe8:	4650      	mov	r0, sl
 800cbea:	4659      	mov	r1, fp
 800cbec:	461e      	mov	r6, r3
 800cbee:	2c01      	cmp	r4, #1
 800cbf0:	dc21      	bgt.n	800cc36 <_strtod_l+0x51e>
 800cbf2:	b10b      	cbz	r3, 800cbf8 <_strtod_l+0x4e0>
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	468b      	mov	fp, r1
 800cbf8:	492c      	ldr	r1, [pc, #176]	@ (800ccac <_strtod_l+0x594>)
 800cbfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cbfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cc02:	4652      	mov	r2, sl
 800cc04:	465b      	mov	r3, fp
 800cc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc0a:	f7f3 fccd 	bl	80005a8 <__aeabi_dmul>
 800cc0e:	4b28      	ldr	r3, [pc, #160]	@ (800ccb0 <_strtod_l+0x598>)
 800cc10:	460a      	mov	r2, r1
 800cc12:	400b      	ands	r3, r1
 800cc14:	4927      	ldr	r1, [pc, #156]	@ (800ccb4 <_strtod_l+0x59c>)
 800cc16:	428b      	cmp	r3, r1
 800cc18:	4682      	mov	sl, r0
 800cc1a:	d898      	bhi.n	800cb4e <_strtod_l+0x436>
 800cc1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cc20:	428b      	cmp	r3, r1
 800cc22:	bf86      	itte	hi
 800cc24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ccb8 <_strtod_l+0x5a0>
 800cc28:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cc30:	2300      	movs	r3, #0
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	e07a      	b.n	800cd2c <_strtod_l+0x614>
 800cc36:	07e2      	lsls	r2, r4, #31
 800cc38:	d505      	bpl.n	800cc46 <_strtod_l+0x52e>
 800cc3a:	9b08      	ldr	r3, [sp, #32]
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fcb2 	bl	80005a8 <__aeabi_dmul>
 800cc44:	2301      	movs	r3, #1
 800cc46:	9a08      	ldr	r2, [sp, #32]
 800cc48:	3208      	adds	r2, #8
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	1064      	asrs	r4, r4, #1
 800cc4e:	9208      	str	r2, [sp, #32]
 800cc50:	e7cd      	b.n	800cbee <_strtod_l+0x4d6>
 800cc52:	d0ed      	beq.n	800cc30 <_strtod_l+0x518>
 800cc54:	4264      	negs	r4, r4
 800cc56:	f014 020f 	ands.w	r2, r4, #15
 800cc5a:	d00a      	beq.n	800cc72 <_strtod_l+0x55a>
 800cc5c:	4b12      	ldr	r3, [pc, #72]	@ (800cca8 <_strtod_l+0x590>)
 800cc5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc62:	4650      	mov	r0, sl
 800cc64:	4659      	mov	r1, fp
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f7f3 fdc7 	bl	80007fc <__aeabi_ddiv>
 800cc6e:	4682      	mov	sl, r0
 800cc70:	468b      	mov	fp, r1
 800cc72:	1124      	asrs	r4, r4, #4
 800cc74:	d0dc      	beq.n	800cc30 <_strtod_l+0x518>
 800cc76:	2c1f      	cmp	r4, #31
 800cc78:	dd20      	ble.n	800ccbc <_strtod_l+0x5a4>
 800cc7a:	2400      	movs	r4, #0
 800cc7c:	46a0      	mov	r8, r4
 800cc7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc80:	46a1      	mov	r9, r4
 800cc82:	9a05      	ldr	r2, [sp, #20]
 800cc84:	2322      	movs	r3, #34	@ 0x22
 800cc86:	f04f 0a00 	mov.w	sl, #0
 800cc8a:	f04f 0b00 	mov.w	fp, #0
 800cc8e:	6013      	str	r3, [r2, #0]
 800cc90:	e768      	b.n	800cb64 <_strtod_l+0x44c>
 800cc92:	bf00      	nop
 800cc94:	0800e9a9 	.word	0x0800e9a9
 800cc98:	0800ebbc 	.word	0x0800ebbc
 800cc9c:	0800e9a1 	.word	0x0800e9a1
 800cca0:	0800e9d8 	.word	0x0800e9d8
 800cca4:	0800ed65 	.word	0x0800ed65
 800cca8:	0800eaf0 	.word	0x0800eaf0
 800ccac:	0800eac8 	.word	0x0800eac8
 800ccb0:	7ff00000 	.word	0x7ff00000
 800ccb4:	7ca00000 	.word	0x7ca00000
 800ccb8:	7fefffff 	.word	0x7fefffff
 800ccbc:	f014 0310 	ands.w	r3, r4, #16
 800ccc0:	bf18      	it	ne
 800ccc2:	236a      	movne	r3, #106	@ 0x6a
 800ccc4:	4ea9      	ldr	r6, [pc, #676]	@ (800cf6c <_strtod_l+0x854>)
 800ccc6:	9308      	str	r3, [sp, #32]
 800ccc8:	4650      	mov	r0, sl
 800ccca:	4659      	mov	r1, fp
 800cccc:	2300      	movs	r3, #0
 800ccce:	07e2      	lsls	r2, r4, #31
 800ccd0:	d504      	bpl.n	800ccdc <_strtod_l+0x5c4>
 800ccd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccd6:	f7f3 fc67 	bl	80005a8 <__aeabi_dmul>
 800ccda:	2301      	movs	r3, #1
 800ccdc:	1064      	asrs	r4, r4, #1
 800ccde:	f106 0608 	add.w	r6, r6, #8
 800cce2:	d1f4      	bne.n	800ccce <_strtod_l+0x5b6>
 800cce4:	b10b      	cbz	r3, 800ccea <_strtod_l+0x5d2>
 800cce6:	4682      	mov	sl, r0
 800cce8:	468b      	mov	fp, r1
 800ccea:	9b08      	ldr	r3, [sp, #32]
 800ccec:	b1b3      	cbz	r3, 800cd1c <_strtod_l+0x604>
 800ccee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ccf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	4659      	mov	r1, fp
 800ccfa:	dd0f      	ble.n	800cd1c <_strtod_l+0x604>
 800ccfc:	2b1f      	cmp	r3, #31
 800ccfe:	dd55      	ble.n	800cdac <_strtod_l+0x694>
 800cd00:	2b34      	cmp	r3, #52	@ 0x34
 800cd02:	bfde      	ittt	le
 800cd04:	f04f 33ff 	movle.w	r3, #4294967295
 800cd08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cd0c:	4093      	lslle	r3, r2
 800cd0e:	f04f 0a00 	mov.w	sl, #0
 800cd12:	bfcc      	ite	gt
 800cd14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cd18:	ea03 0b01 	andle.w	fp, r3, r1
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4650      	mov	r0, sl
 800cd22:	4659      	mov	r1, fp
 800cd24:	f7f3 fea8 	bl	8000a78 <__aeabi_dcmpeq>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d1a6      	bne.n	800cc7a <_strtod_l+0x562>
 800cd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd32:	9805      	ldr	r0, [sp, #20]
 800cd34:	462b      	mov	r3, r5
 800cd36:	463a      	mov	r2, r7
 800cd38:	f7ff f8c6 	bl	800bec8 <__s2b>
 800cd3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f af05 	beq.w	800cb4e <_strtod_l+0x436>
 800cd44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	eba9 0308 	sub.w	r3, r9, r8
 800cd4c:	bfa8      	it	ge
 800cd4e:	2300      	movge	r3, #0
 800cd50:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd52:	2400      	movs	r4, #0
 800cd54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cd58:	9316      	str	r3, [sp, #88]	@ 0x58
 800cd5a:	46a0      	mov	r8, r4
 800cd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd5e:	9805      	ldr	r0, [sp, #20]
 800cd60:	6859      	ldr	r1, [r3, #4]
 800cd62:	f7ff f809 	bl	800bd78 <_Balloc>
 800cd66:	4681      	mov	r9, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	f43f aef4 	beq.w	800cb56 <_strtod_l+0x43e>
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd70:	691a      	ldr	r2, [r3, #16]
 800cd72:	3202      	adds	r2, #2
 800cd74:	f103 010c 	add.w	r1, r3, #12
 800cd78:	0092      	lsls	r2, r2, #2
 800cd7a:	300c      	adds	r0, #12
 800cd7c:	f7fe f89b 	bl	800aeb6 <memcpy>
 800cd80:	ec4b ab10 	vmov	d0, sl, fp
 800cd84:	9805      	ldr	r0, [sp, #20]
 800cd86:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd88:	a91b      	add	r1, sp, #108	@ 0x6c
 800cd8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cd8e:	f7ff fbd7 	bl	800c540 <__d2b>
 800cd92:	901a      	str	r0, [sp, #104]	@ 0x68
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f43f aede 	beq.w	800cb56 <_strtod_l+0x43e>
 800cd9a:	9805      	ldr	r0, [sp, #20]
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	f7ff f929 	bl	800bff4 <__i2b>
 800cda2:	4680      	mov	r8, r0
 800cda4:	b948      	cbnz	r0, 800cdba <_strtod_l+0x6a2>
 800cda6:	f04f 0800 	mov.w	r8, #0
 800cdaa:	e6d4      	b.n	800cb56 <_strtod_l+0x43e>
 800cdac:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb4:	ea03 0a0a 	and.w	sl, r3, sl
 800cdb8:	e7b0      	b.n	800cd1c <_strtod_l+0x604>
 800cdba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cdbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cdbe:	2d00      	cmp	r5, #0
 800cdc0:	bfab      	itete	ge
 800cdc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cdc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cdc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cdc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cdca:	bfac      	ite	ge
 800cdcc:	18ef      	addge	r7, r5, r3
 800cdce:	1b5e      	sublt	r6, r3, r5
 800cdd0:	9b08      	ldr	r3, [sp, #32]
 800cdd2:	1aed      	subs	r5, r5, r3
 800cdd4:	4415      	add	r5, r2
 800cdd6:	4b66      	ldr	r3, [pc, #408]	@ (800cf70 <_strtod_l+0x858>)
 800cdd8:	3d01      	subs	r5, #1
 800cdda:	429d      	cmp	r5, r3
 800cddc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cde0:	da50      	bge.n	800ce84 <_strtod_l+0x76c>
 800cde2:	1b5b      	subs	r3, r3, r5
 800cde4:	2b1f      	cmp	r3, #31
 800cde6:	eba2 0203 	sub.w	r2, r2, r3
 800cdea:	f04f 0101 	mov.w	r1, #1
 800cdee:	dc3d      	bgt.n	800ce6c <_strtod_l+0x754>
 800cdf0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdfa:	18bd      	adds	r5, r7, r2
 800cdfc:	9b08      	ldr	r3, [sp, #32]
 800cdfe:	42af      	cmp	r7, r5
 800ce00:	4416      	add	r6, r2
 800ce02:	441e      	add	r6, r3
 800ce04:	463b      	mov	r3, r7
 800ce06:	bfa8      	it	ge
 800ce08:	462b      	movge	r3, r5
 800ce0a:	42b3      	cmp	r3, r6
 800ce0c:	bfa8      	it	ge
 800ce0e:	4633      	movge	r3, r6
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	bfc2      	ittt	gt
 800ce14:	1aed      	subgt	r5, r5, r3
 800ce16:	1af6      	subgt	r6, r6, r3
 800ce18:	1aff      	subgt	r7, r7, r3
 800ce1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	dd16      	ble.n	800ce4e <_strtod_l+0x736>
 800ce20:	4641      	mov	r1, r8
 800ce22:	9805      	ldr	r0, [sp, #20]
 800ce24:	461a      	mov	r2, r3
 800ce26:	f7ff f9a5 	bl	800c174 <__pow5mult>
 800ce2a:	4680      	mov	r8, r0
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d0ba      	beq.n	800cda6 <_strtod_l+0x68e>
 800ce30:	4601      	mov	r1, r0
 800ce32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce34:	9805      	ldr	r0, [sp, #20]
 800ce36:	f7ff f8f3 	bl	800c020 <__multiply>
 800ce3a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f43f ae8a 	beq.w	800cb56 <_strtod_l+0x43e>
 800ce42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce44:	9805      	ldr	r0, [sp, #20]
 800ce46:	f7fe ffd7 	bl	800bdf8 <_Bfree>
 800ce4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce4e:	2d00      	cmp	r5, #0
 800ce50:	dc1d      	bgt.n	800ce8e <_strtod_l+0x776>
 800ce52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dd23      	ble.n	800cea0 <_strtod_l+0x788>
 800ce58:	4649      	mov	r1, r9
 800ce5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ce5c:	9805      	ldr	r0, [sp, #20]
 800ce5e:	f7ff f989 	bl	800c174 <__pow5mult>
 800ce62:	4681      	mov	r9, r0
 800ce64:	b9e0      	cbnz	r0, 800cea0 <_strtod_l+0x788>
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	e674      	b.n	800cb56 <_strtod_l+0x43e>
 800ce6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ce70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ce74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ce78:	35e2      	adds	r5, #226	@ 0xe2
 800ce7a:	fa01 f305 	lsl.w	r3, r1, r5
 800ce7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce80:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ce82:	e7ba      	b.n	800cdfa <_strtod_l+0x6e2>
 800ce84:	2300      	movs	r3, #0
 800ce86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce88:	2301      	movs	r3, #1
 800ce8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce8c:	e7b5      	b.n	800cdfa <_strtod_l+0x6e2>
 800ce8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce90:	9805      	ldr	r0, [sp, #20]
 800ce92:	462a      	mov	r2, r5
 800ce94:	f7ff f9c8 	bl	800c228 <__lshift>
 800ce98:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d1d9      	bne.n	800ce52 <_strtod_l+0x73a>
 800ce9e:	e65a      	b.n	800cb56 <_strtod_l+0x43e>
 800cea0:	2e00      	cmp	r6, #0
 800cea2:	dd07      	ble.n	800ceb4 <_strtod_l+0x79c>
 800cea4:	4649      	mov	r1, r9
 800cea6:	9805      	ldr	r0, [sp, #20]
 800cea8:	4632      	mov	r2, r6
 800ceaa:	f7ff f9bd 	bl	800c228 <__lshift>
 800ceae:	4681      	mov	r9, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d0d8      	beq.n	800ce66 <_strtod_l+0x74e>
 800ceb4:	2f00      	cmp	r7, #0
 800ceb6:	dd08      	ble.n	800ceca <_strtod_l+0x7b2>
 800ceb8:	4641      	mov	r1, r8
 800ceba:	9805      	ldr	r0, [sp, #20]
 800cebc:	463a      	mov	r2, r7
 800cebe:	f7ff f9b3 	bl	800c228 <__lshift>
 800cec2:	4680      	mov	r8, r0
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f43f ae46 	beq.w	800cb56 <_strtod_l+0x43e>
 800ceca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cecc:	9805      	ldr	r0, [sp, #20]
 800cece:	464a      	mov	r2, r9
 800ced0:	f7ff fa32 	bl	800c338 <__mdiff>
 800ced4:	4604      	mov	r4, r0
 800ced6:	2800      	cmp	r0, #0
 800ced8:	f43f ae3d 	beq.w	800cb56 <_strtod_l+0x43e>
 800cedc:	68c3      	ldr	r3, [r0, #12]
 800cede:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cee0:	2300      	movs	r3, #0
 800cee2:	60c3      	str	r3, [r0, #12]
 800cee4:	4641      	mov	r1, r8
 800cee6:	f7ff fa0b 	bl	800c300 <__mcmp>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	da46      	bge.n	800cf7c <_strtod_l+0x864>
 800ceee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef0:	ea53 030a 	orrs.w	r3, r3, sl
 800cef4:	d16c      	bne.n	800cfd0 <_strtod_l+0x8b8>
 800cef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d168      	bne.n	800cfd0 <_strtod_l+0x8b8>
 800cefe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf02:	0d1b      	lsrs	r3, r3, #20
 800cf04:	051b      	lsls	r3, r3, #20
 800cf06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf0a:	d961      	bls.n	800cfd0 <_strtod_l+0x8b8>
 800cf0c:	6963      	ldr	r3, [r4, #20]
 800cf0e:	b913      	cbnz	r3, 800cf16 <_strtod_l+0x7fe>
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	dd5c      	ble.n	800cfd0 <_strtod_l+0x8b8>
 800cf16:	4621      	mov	r1, r4
 800cf18:	2201      	movs	r2, #1
 800cf1a:	9805      	ldr	r0, [sp, #20]
 800cf1c:	f7ff f984 	bl	800c228 <__lshift>
 800cf20:	4641      	mov	r1, r8
 800cf22:	4604      	mov	r4, r0
 800cf24:	f7ff f9ec 	bl	800c300 <__mcmp>
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	dd51      	ble.n	800cfd0 <_strtod_l+0x8b8>
 800cf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cf30:	9a08      	ldr	r2, [sp, #32]
 800cf32:	0d1b      	lsrs	r3, r3, #20
 800cf34:	051b      	lsls	r3, r3, #20
 800cf36:	2a00      	cmp	r2, #0
 800cf38:	d06b      	beq.n	800d012 <_strtod_l+0x8fa>
 800cf3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cf3e:	d868      	bhi.n	800d012 <_strtod_l+0x8fa>
 800cf40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cf44:	f67f ae9d 	bls.w	800cc82 <_strtod_l+0x56a>
 800cf48:	4b0a      	ldr	r3, [pc, #40]	@ (800cf74 <_strtod_l+0x85c>)
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	4659      	mov	r1, fp
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f7f3 fb2a 	bl	80005a8 <__aeabi_dmul>
 800cf54:	4b08      	ldr	r3, [pc, #32]	@ (800cf78 <_strtod_l+0x860>)
 800cf56:	400b      	ands	r3, r1
 800cf58:	4682      	mov	sl, r0
 800cf5a:	468b      	mov	fp, r1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f47f ae05 	bne.w	800cb6c <_strtod_l+0x454>
 800cf62:	9a05      	ldr	r2, [sp, #20]
 800cf64:	2322      	movs	r3, #34	@ 0x22
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	e600      	b.n	800cb6c <_strtod_l+0x454>
 800cf6a:	bf00      	nop
 800cf6c:	0800ebe8 	.word	0x0800ebe8
 800cf70:	fffffc02 	.word	0xfffffc02
 800cf74:	39500000 	.word	0x39500000
 800cf78:	7ff00000 	.word	0x7ff00000
 800cf7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cf80:	d165      	bne.n	800d04e <_strtod_l+0x936>
 800cf82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cf84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf88:	b35a      	cbz	r2, 800cfe2 <_strtod_l+0x8ca>
 800cf8a:	4a9f      	ldr	r2, [pc, #636]	@ (800d208 <_strtod_l+0xaf0>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d12b      	bne.n	800cfe8 <_strtod_l+0x8d0>
 800cf90:	9b08      	ldr	r3, [sp, #32]
 800cf92:	4651      	mov	r1, sl
 800cf94:	b303      	cbz	r3, 800cfd8 <_strtod_l+0x8c0>
 800cf96:	4b9d      	ldr	r3, [pc, #628]	@ (800d20c <_strtod_l+0xaf4>)
 800cf98:	465a      	mov	r2, fp
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa4:	d81b      	bhi.n	800cfde <_strtod_l+0x8c6>
 800cfa6:	0d1b      	lsrs	r3, r3, #20
 800cfa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cfac:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb0:	4299      	cmp	r1, r3
 800cfb2:	d119      	bne.n	800cfe8 <_strtod_l+0x8d0>
 800cfb4:	4b96      	ldr	r3, [pc, #600]	@ (800d210 <_strtod_l+0xaf8>)
 800cfb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d102      	bne.n	800cfc2 <_strtod_l+0x8aa>
 800cfbc:	3101      	adds	r1, #1
 800cfbe:	f43f adca 	beq.w	800cb56 <_strtod_l+0x43e>
 800cfc2:	4b92      	ldr	r3, [pc, #584]	@ (800d20c <_strtod_l+0xaf4>)
 800cfc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfc6:	401a      	ands	r2, r3
 800cfc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cfcc:	f04f 0a00 	mov.w	sl, #0
 800cfd0:	9b08      	ldr	r3, [sp, #32]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1b8      	bne.n	800cf48 <_strtod_l+0x830>
 800cfd6:	e5c9      	b.n	800cb6c <_strtod_l+0x454>
 800cfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfdc:	e7e8      	b.n	800cfb0 <_strtod_l+0x898>
 800cfde:	4613      	mov	r3, r2
 800cfe0:	e7e6      	b.n	800cfb0 <_strtod_l+0x898>
 800cfe2:	ea53 030a 	orrs.w	r3, r3, sl
 800cfe6:	d0a1      	beq.n	800cf2c <_strtod_l+0x814>
 800cfe8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfea:	b1db      	cbz	r3, 800d024 <_strtod_l+0x90c>
 800cfec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfee:	4213      	tst	r3, r2
 800cff0:	d0ee      	beq.n	800cfd0 <_strtod_l+0x8b8>
 800cff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cff4:	9a08      	ldr	r2, [sp, #32]
 800cff6:	4650      	mov	r0, sl
 800cff8:	4659      	mov	r1, fp
 800cffa:	b1bb      	cbz	r3, 800d02c <_strtod_l+0x914>
 800cffc:	f7ff fb6e 	bl	800c6dc <sulp>
 800d000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d004:	ec53 2b10 	vmov	r2, r3, d0
 800d008:	f7f3 f918 	bl	800023c <__adddf3>
 800d00c:	4682      	mov	sl, r0
 800d00e:	468b      	mov	fp, r1
 800d010:	e7de      	b.n	800cfd0 <_strtod_l+0x8b8>
 800d012:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d016:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d01a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d01e:	f04f 3aff 	mov.w	sl, #4294967295
 800d022:	e7d5      	b.n	800cfd0 <_strtod_l+0x8b8>
 800d024:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d026:	ea13 0f0a 	tst.w	r3, sl
 800d02a:	e7e1      	b.n	800cff0 <_strtod_l+0x8d8>
 800d02c:	f7ff fb56 	bl	800c6dc <sulp>
 800d030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d034:	ec53 2b10 	vmov	r2, r3, d0
 800d038:	f7f3 f8fe 	bl	8000238 <__aeabi_dsub>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	4682      	mov	sl, r0
 800d042:	468b      	mov	fp, r1
 800d044:	f7f3 fd18 	bl	8000a78 <__aeabi_dcmpeq>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d0c1      	beq.n	800cfd0 <_strtod_l+0x8b8>
 800d04c:	e619      	b.n	800cc82 <_strtod_l+0x56a>
 800d04e:	4641      	mov	r1, r8
 800d050:	4620      	mov	r0, r4
 800d052:	f7ff facd 	bl	800c5f0 <__ratio>
 800d056:	ec57 6b10 	vmov	r6, r7, d0
 800d05a:	2200      	movs	r2, #0
 800d05c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d060:	4630      	mov	r0, r6
 800d062:	4639      	mov	r1, r7
 800d064:	f7f3 fd1c 	bl	8000aa0 <__aeabi_dcmple>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d06f      	beq.n	800d14c <_strtod_l+0xa34>
 800d06c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d17a      	bne.n	800d168 <_strtod_l+0xa50>
 800d072:	f1ba 0f00 	cmp.w	sl, #0
 800d076:	d158      	bne.n	800d12a <_strtod_l+0xa12>
 800d078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d15a      	bne.n	800d138 <_strtod_l+0xa20>
 800d082:	4b64      	ldr	r3, [pc, #400]	@ (800d214 <_strtod_l+0xafc>)
 800d084:	2200      	movs	r2, #0
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 fcff 	bl	8000a8c <__aeabi_dcmplt>
 800d08e:	2800      	cmp	r0, #0
 800d090:	d159      	bne.n	800d146 <_strtod_l+0xa2e>
 800d092:	4630      	mov	r0, r6
 800d094:	4639      	mov	r1, r7
 800d096:	4b60      	ldr	r3, [pc, #384]	@ (800d218 <_strtod_l+0xb00>)
 800d098:	2200      	movs	r2, #0
 800d09a:	f7f3 fa85 	bl	80005a8 <__aeabi_dmul>
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460f      	mov	r7, r1
 800d0a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d0a6:	9606      	str	r6, [sp, #24]
 800d0a8:	9307      	str	r3, [sp, #28]
 800d0aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0ae:	4d57      	ldr	r5, [pc, #348]	@ (800d20c <_strtod_l+0xaf4>)
 800d0b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0b6:	401d      	ands	r5, r3
 800d0b8:	4b58      	ldr	r3, [pc, #352]	@ (800d21c <_strtod_l+0xb04>)
 800d0ba:	429d      	cmp	r5, r3
 800d0bc:	f040 80b2 	bne.w	800d224 <_strtod_l+0xb0c>
 800d0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d0c6:	ec4b ab10 	vmov	d0, sl, fp
 800d0ca:	f7ff f9c9 	bl	800c460 <__ulp>
 800d0ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d0d2:	ec51 0b10 	vmov	r0, r1, d0
 800d0d6:	f7f3 fa67 	bl	80005a8 <__aeabi_dmul>
 800d0da:	4652      	mov	r2, sl
 800d0dc:	465b      	mov	r3, fp
 800d0de:	f7f3 f8ad 	bl	800023c <__adddf3>
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4949      	ldr	r1, [pc, #292]	@ (800d20c <_strtod_l+0xaf4>)
 800d0e6:	4a4e      	ldr	r2, [pc, #312]	@ (800d220 <_strtod_l+0xb08>)
 800d0e8:	4019      	ands	r1, r3
 800d0ea:	4291      	cmp	r1, r2
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	d942      	bls.n	800d176 <_strtod_l+0xa5e>
 800d0f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0f2:	4b47      	ldr	r3, [pc, #284]	@ (800d210 <_strtod_l+0xaf8>)
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d103      	bne.n	800d100 <_strtod_l+0x9e8>
 800d0f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	f43f ad2b 	beq.w	800cb56 <_strtod_l+0x43e>
 800d100:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d210 <_strtod_l+0xaf8>
 800d104:	f04f 3aff 	mov.w	sl, #4294967295
 800d108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d10a:	9805      	ldr	r0, [sp, #20]
 800d10c:	f7fe fe74 	bl	800bdf8 <_Bfree>
 800d110:	9805      	ldr	r0, [sp, #20]
 800d112:	4649      	mov	r1, r9
 800d114:	f7fe fe70 	bl	800bdf8 <_Bfree>
 800d118:	9805      	ldr	r0, [sp, #20]
 800d11a:	4641      	mov	r1, r8
 800d11c:	f7fe fe6c 	bl	800bdf8 <_Bfree>
 800d120:	9805      	ldr	r0, [sp, #20]
 800d122:	4621      	mov	r1, r4
 800d124:	f7fe fe68 	bl	800bdf8 <_Bfree>
 800d128:	e618      	b.n	800cd5c <_strtod_l+0x644>
 800d12a:	f1ba 0f01 	cmp.w	sl, #1
 800d12e:	d103      	bne.n	800d138 <_strtod_l+0xa20>
 800d130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d132:	2b00      	cmp	r3, #0
 800d134:	f43f ada5 	beq.w	800cc82 <_strtod_l+0x56a>
 800d138:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d1e8 <_strtod_l+0xad0>
 800d13c:	4f35      	ldr	r7, [pc, #212]	@ (800d214 <_strtod_l+0xafc>)
 800d13e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d142:	2600      	movs	r6, #0
 800d144:	e7b1      	b.n	800d0aa <_strtod_l+0x992>
 800d146:	4f34      	ldr	r7, [pc, #208]	@ (800d218 <_strtod_l+0xb00>)
 800d148:	2600      	movs	r6, #0
 800d14a:	e7aa      	b.n	800d0a2 <_strtod_l+0x98a>
 800d14c:	4b32      	ldr	r3, [pc, #200]	@ (800d218 <_strtod_l+0xb00>)
 800d14e:	4630      	mov	r0, r6
 800d150:	4639      	mov	r1, r7
 800d152:	2200      	movs	r2, #0
 800d154:	f7f3 fa28 	bl	80005a8 <__aeabi_dmul>
 800d158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d15a:	4606      	mov	r6, r0
 800d15c:	460f      	mov	r7, r1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d09f      	beq.n	800d0a2 <_strtod_l+0x98a>
 800d162:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d166:	e7a0      	b.n	800d0aa <_strtod_l+0x992>
 800d168:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d1f0 <_strtod_l+0xad8>
 800d16c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d170:	ec57 6b17 	vmov	r6, r7, d7
 800d174:	e799      	b.n	800d0aa <_strtod_l+0x992>
 800d176:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d17a:	9b08      	ldr	r3, [sp, #32]
 800d17c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1c1      	bne.n	800d108 <_strtod_l+0x9f0>
 800d184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d188:	0d1b      	lsrs	r3, r3, #20
 800d18a:	051b      	lsls	r3, r3, #20
 800d18c:	429d      	cmp	r5, r3
 800d18e:	d1bb      	bne.n	800d108 <_strtod_l+0x9f0>
 800d190:	4630      	mov	r0, r6
 800d192:	4639      	mov	r1, r7
 800d194:	f7f3 fd68 	bl	8000c68 <__aeabi_d2lz>
 800d198:	f7f3 f9d8 	bl	800054c <__aeabi_l2d>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 f848 	bl	8000238 <__aeabi_dsub>
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d1b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1b6:	ea46 060a 	orr.w	r6, r6, sl
 800d1ba:	431e      	orrs	r6, r3
 800d1bc:	d06f      	beq.n	800d29e <_strtod_l+0xb86>
 800d1be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d1f8 <_strtod_l+0xae0>)
 800d1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c4:	f7f3 fc62 	bl	8000a8c <__aeabi_dcmplt>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	f47f accf 	bne.w	800cb6c <_strtod_l+0x454>
 800d1ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800d200 <_strtod_l+0xae8>)
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1d8:	f7f3 fc76 	bl	8000ac8 <__aeabi_dcmpgt>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d093      	beq.n	800d108 <_strtod_l+0x9f0>
 800d1e0:	e4c4      	b.n	800cb6c <_strtod_l+0x454>
 800d1e2:	bf00      	nop
 800d1e4:	f3af 8000 	nop.w
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	bff00000 	.word	0xbff00000
 800d1f0:	00000000 	.word	0x00000000
 800d1f4:	3ff00000 	.word	0x3ff00000
 800d1f8:	94a03595 	.word	0x94a03595
 800d1fc:	3fdfffff 	.word	0x3fdfffff
 800d200:	35afe535 	.word	0x35afe535
 800d204:	3fe00000 	.word	0x3fe00000
 800d208:	000fffff 	.word	0x000fffff
 800d20c:	7ff00000 	.word	0x7ff00000
 800d210:	7fefffff 	.word	0x7fefffff
 800d214:	3ff00000 	.word	0x3ff00000
 800d218:	3fe00000 	.word	0x3fe00000
 800d21c:	7fe00000 	.word	0x7fe00000
 800d220:	7c9fffff 	.word	0x7c9fffff
 800d224:	9b08      	ldr	r3, [sp, #32]
 800d226:	b323      	cbz	r3, 800d272 <_strtod_l+0xb5a>
 800d228:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d22c:	d821      	bhi.n	800d272 <_strtod_l+0xb5a>
 800d22e:	a328      	add	r3, pc, #160	@ (adr r3, 800d2d0 <_strtod_l+0xbb8>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	4630      	mov	r0, r6
 800d236:	4639      	mov	r1, r7
 800d238:	f7f3 fc32 	bl	8000aa0 <__aeabi_dcmple>
 800d23c:	b1a0      	cbz	r0, 800d268 <_strtod_l+0xb50>
 800d23e:	4639      	mov	r1, r7
 800d240:	4630      	mov	r0, r6
 800d242:	f7f3 fc89 	bl	8000b58 <__aeabi_d2uiz>
 800d246:	2801      	cmp	r0, #1
 800d248:	bf38      	it	cc
 800d24a:	2001      	movcc	r0, #1
 800d24c:	f7f3 f932 	bl	80004b4 <__aeabi_ui2d>
 800d250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d252:	4606      	mov	r6, r0
 800d254:	460f      	mov	r7, r1
 800d256:	b9fb      	cbnz	r3, 800d298 <_strtod_l+0xb80>
 800d258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d25c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d25e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d260:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d264:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d268:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d26a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d26e:	1b5b      	subs	r3, r3, r5
 800d270:	9311      	str	r3, [sp, #68]	@ 0x44
 800d272:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d276:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d27a:	f7ff f8f1 	bl	800c460 <__ulp>
 800d27e:	4650      	mov	r0, sl
 800d280:	ec53 2b10 	vmov	r2, r3, d0
 800d284:	4659      	mov	r1, fp
 800d286:	f7f3 f98f 	bl	80005a8 <__aeabi_dmul>
 800d28a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d28e:	f7f2 ffd5 	bl	800023c <__adddf3>
 800d292:	4682      	mov	sl, r0
 800d294:	468b      	mov	fp, r1
 800d296:	e770      	b.n	800d17a <_strtod_l+0xa62>
 800d298:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d29c:	e7e0      	b.n	800d260 <_strtod_l+0xb48>
 800d29e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2d8 <_strtod_l+0xbc0>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f7f3 fbf2 	bl	8000a8c <__aeabi_dcmplt>
 800d2a8:	e798      	b.n	800d1dc <_strtod_l+0xac4>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d2b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2b2:	6013      	str	r3, [r2, #0]
 800d2b4:	f7ff ba6d 	b.w	800c792 <_strtod_l+0x7a>
 800d2b8:	2a65      	cmp	r2, #101	@ 0x65
 800d2ba:	f43f ab66 	beq.w	800c98a <_strtod_l+0x272>
 800d2be:	2a45      	cmp	r2, #69	@ 0x45
 800d2c0:	f43f ab63 	beq.w	800c98a <_strtod_l+0x272>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f7ff bb9e 	b.w	800ca06 <_strtod_l+0x2ee>
 800d2ca:	bf00      	nop
 800d2cc:	f3af 8000 	nop.w
 800d2d0:	ffc00000 	.word	0xffc00000
 800d2d4:	41dfffff 	.word	0x41dfffff
 800d2d8:	94a03595 	.word	0x94a03595
 800d2dc:	3fcfffff 	.word	0x3fcfffff

0800d2e0 <_strtod_r>:
 800d2e0:	4b01      	ldr	r3, [pc, #4]	@ (800d2e8 <_strtod_r+0x8>)
 800d2e2:	f7ff ba19 	b.w	800c718 <_strtod_l>
 800d2e6:	bf00      	nop
 800d2e8:	20000084 	.word	0x20000084

0800d2ec <_strtol_l.constprop.0>:
 800d2ec:	2b24      	cmp	r3, #36	@ 0x24
 800d2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f2:	4686      	mov	lr, r0
 800d2f4:	4690      	mov	r8, r2
 800d2f6:	d801      	bhi.n	800d2fc <_strtol_l.constprop.0+0x10>
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d106      	bne.n	800d30a <_strtol_l.constprop.0+0x1e>
 800d2fc:	f7fd fdae 	bl	800ae5c <__errno>
 800d300:	2316      	movs	r3, #22
 800d302:	6003      	str	r3, [r0, #0]
 800d304:	2000      	movs	r0, #0
 800d306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d30a:	4834      	ldr	r0, [pc, #208]	@ (800d3dc <_strtol_l.constprop.0+0xf0>)
 800d30c:	460d      	mov	r5, r1
 800d30e:	462a      	mov	r2, r5
 800d310:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d314:	5d06      	ldrb	r6, [r0, r4]
 800d316:	f016 0608 	ands.w	r6, r6, #8
 800d31a:	d1f8      	bne.n	800d30e <_strtol_l.constprop.0+0x22>
 800d31c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d31e:	d12d      	bne.n	800d37c <_strtol_l.constprop.0+0x90>
 800d320:	782c      	ldrb	r4, [r5, #0]
 800d322:	2601      	movs	r6, #1
 800d324:	1c95      	adds	r5, r2, #2
 800d326:	f033 0210 	bics.w	r2, r3, #16
 800d32a:	d109      	bne.n	800d340 <_strtol_l.constprop.0+0x54>
 800d32c:	2c30      	cmp	r4, #48	@ 0x30
 800d32e:	d12a      	bne.n	800d386 <_strtol_l.constprop.0+0x9a>
 800d330:	782a      	ldrb	r2, [r5, #0]
 800d332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d336:	2a58      	cmp	r2, #88	@ 0x58
 800d338:	d125      	bne.n	800d386 <_strtol_l.constprop.0+0x9a>
 800d33a:	786c      	ldrb	r4, [r5, #1]
 800d33c:	2310      	movs	r3, #16
 800d33e:	3502      	adds	r5, #2
 800d340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d344:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d348:	2200      	movs	r2, #0
 800d34a:	fbbc f9f3 	udiv	r9, ip, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	fb03 ca19 	mls	sl, r3, r9, ip
 800d354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d358:	2f09      	cmp	r7, #9
 800d35a:	d81b      	bhi.n	800d394 <_strtol_l.constprop.0+0xa8>
 800d35c:	463c      	mov	r4, r7
 800d35e:	42a3      	cmp	r3, r4
 800d360:	dd27      	ble.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d362:	1c57      	adds	r7, r2, #1
 800d364:	d007      	beq.n	800d376 <_strtol_l.constprop.0+0x8a>
 800d366:	4581      	cmp	r9, r0
 800d368:	d320      	bcc.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d36a:	d101      	bne.n	800d370 <_strtol_l.constprop.0+0x84>
 800d36c:	45a2      	cmp	sl, r4
 800d36e:	db1d      	blt.n	800d3ac <_strtol_l.constprop.0+0xc0>
 800d370:	fb00 4003 	mla	r0, r0, r3, r4
 800d374:	2201      	movs	r2, #1
 800d376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d37a:	e7eb      	b.n	800d354 <_strtol_l.constprop.0+0x68>
 800d37c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d37e:	bf04      	itt	eq
 800d380:	782c      	ldrbeq	r4, [r5, #0]
 800d382:	1c95      	addeq	r5, r2, #2
 800d384:	e7cf      	b.n	800d326 <_strtol_l.constprop.0+0x3a>
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1da      	bne.n	800d340 <_strtol_l.constprop.0+0x54>
 800d38a:	2c30      	cmp	r4, #48	@ 0x30
 800d38c:	bf0c      	ite	eq
 800d38e:	2308      	moveq	r3, #8
 800d390:	230a      	movne	r3, #10
 800d392:	e7d5      	b.n	800d340 <_strtol_l.constprop.0+0x54>
 800d394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d398:	2f19      	cmp	r7, #25
 800d39a:	d801      	bhi.n	800d3a0 <_strtol_l.constprop.0+0xb4>
 800d39c:	3c37      	subs	r4, #55	@ 0x37
 800d39e:	e7de      	b.n	800d35e <_strtol_l.constprop.0+0x72>
 800d3a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d3a4:	2f19      	cmp	r7, #25
 800d3a6:	d804      	bhi.n	800d3b2 <_strtol_l.constprop.0+0xc6>
 800d3a8:	3c57      	subs	r4, #87	@ 0x57
 800d3aa:	e7d8      	b.n	800d35e <_strtol_l.constprop.0+0x72>
 800d3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b0:	e7e1      	b.n	800d376 <_strtol_l.constprop.0+0x8a>
 800d3b2:	1c53      	adds	r3, r2, #1
 800d3b4:	d108      	bne.n	800d3c8 <_strtol_l.constprop.0+0xdc>
 800d3b6:	2322      	movs	r3, #34	@ 0x22
 800d3b8:	f8ce 3000 	str.w	r3, [lr]
 800d3bc:	4660      	mov	r0, ip
 800d3be:	f1b8 0f00 	cmp.w	r8, #0
 800d3c2:	d0a0      	beq.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3c4:	1e69      	subs	r1, r5, #1
 800d3c6:	e006      	b.n	800d3d6 <_strtol_l.constprop.0+0xea>
 800d3c8:	b106      	cbz	r6, 800d3cc <_strtol_l.constprop.0+0xe0>
 800d3ca:	4240      	negs	r0, r0
 800d3cc:	f1b8 0f00 	cmp.w	r8, #0
 800d3d0:	d099      	beq.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3d2:	2a00      	cmp	r2, #0
 800d3d4:	d1f6      	bne.n	800d3c4 <_strtol_l.constprop.0+0xd8>
 800d3d6:	f8c8 1000 	str.w	r1, [r8]
 800d3da:	e794      	b.n	800d306 <_strtol_l.constprop.0+0x1a>
 800d3dc:	0800ec11 	.word	0x0800ec11

0800d3e0 <_strtol_r>:
 800d3e0:	f7ff bf84 	b.w	800d2ec <_strtol_l.constprop.0>

0800d3e4 <__ssputs_r>:
 800d3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e8:	688e      	ldr	r6, [r1, #8]
 800d3ea:	461f      	mov	r7, r3
 800d3ec:	42be      	cmp	r6, r7
 800d3ee:	680b      	ldr	r3, [r1, #0]
 800d3f0:	4682      	mov	sl, r0
 800d3f2:	460c      	mov	r4, r1
 800d3f4:	4690      	mov	r8, r2
 800d3f6:	d82d      	bhi.n	800d454 <__ssputs_r+0x70>
 800d3f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d400:	d026      	beq.n	800d450 <__ssputs_r+0x6c>
 800d402:	6965      	ldr	r5, [r4, #20]
 800d404:	6909      	ldr	r1, [r1, #16]
 800d406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d40a:	eba3 0901 	sub.w	r9, r3, r1
 800d40e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d412:	1c7b      	adds	r3, r7, #1
 800d414:	444b      	add	r3, r9
 800d416:	106d      	asrs	r5, r5, #1
 800d418:	429d      	cmp	r5, r3
 800d41a:	bf38      	it	cc
 800d41c:	461d      	movcc	r5, r3
 800d41e:	0553      	lsls	r3, r2, #21
 800d420:	d527      	bpl.n	800d472 <__ssputs_r+0x8e>
 800d422:	4629      	mov	r1, r5
 800d424:	f7fe fc1c 	bl	800bc60 <_malloc_r>
 800d428:	4606      	mov	r6, r0
 800d42a:	b360      	cbz	r0, 800d486 <__ssputs_r+0xa2>
 800d42c:	6921      	ldr	r1, [r4, #16]
 800d42e:	464a      	mov	r2, r9
 800d430:	f7fd fd41 	bl	800aeb6 <memcpy>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d43a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	6126      	str	r6, [r4, #16]
 800d442:	6165      	str	r5, [r4, #20]
 800d444:	444e      	add	r6, r9
 800d446:	eba5 0509 	sub.w	r5, r5, r9
 800d44a:	6026      	str	r6, [r4, #0]
 800d44c:	60a5      	str	r5, [r4, #8]
 800d44e:	463e      	mov	r6, r7
 800d450:	42be      	cmp	r6, r7
 800d452:	d900      	bls.n	800d456 <__ssputs_r+0x72>
 800d454:	463e      	mov	r6, r7
 800d456:	6820      	ldr	r0, [r4, #0]
 800d458:	4632      	mov	r2, r6
 800d45a:	4641      	mov	r1, r8
 800d45c:	f000 f9c6 	bl	800d7ec <memmove>
 800d460:	68a3      	ldr	r3, [r4, #8]
 800d462:	1b9b      	subs	r3, r3, r6
 800d464:	60a3      	str	r3, [r4, #8]
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	4433      	add	r3, r6
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	2000      	movs	r0, #0
 800d46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d472:	462a      	mov	r2, r5
 800d474:	f000 fd7d 	bl	800df72 <_realloc_r>
 800d478:	4606      	mov	r6, r0
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d1e0      	bne.n	800d440 <__ssputs_r+0x5c>
 800d47e:	6921      	ldr	r1, [r4, #16]
 800d480:	4650      	mov	r0, sl
 800d482:	f7fe fb79 	bl	800bb78 <_free_r>
 800d486:	230c      	movs	r3, #12
 800d488:	f8ca 3000 	str.w	r3, [sl]
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d492:	81a3      	strh	r3, [r4, #12]
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	e7e9      	b.n	800d46e <__ssputs_r+0x8a>
	...

0800d49c <_svfiprintf_r>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	4698      	mov	r8, r3
 800d4a2:	898b      	ldrh	r3, [r1, #12]
 800d4a4:	061b      	lsls	r3, r3, #24
 800d4a6:	b09d      	sub	sp, #116	@ 0x74
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460d      	mov	r5, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	d510      	bpl.n	800d4d2 <_svfiprintf_r+0x36>
 800d4b0:	690b      	ldr	r3, [r1, #16]
 800d4b2:	b973      	cbnz	r3, 800d4d2 <_svfiprintf_r+0x36>
 800d4b4:	2140      	movs	r1, #64	@ 0x40
 800d4b6:	f7fe fbd3 	bl	800bc60 <_malloc_r>
 800d4ba:	6028      	str	r0, [r5, #0]
 800d4bc:	6128      	str	r0, [r5, #16]
 800d4be:	b930      	cbnz	r0, 800d4ce <_svfiprintf_r+0x32>
 800d4c0:	230c      	movs	r3, #12
 800d4c2:	603b      	str	r3, [r7, #0]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	b01d      	add	sp, #116	@ 0x74
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	2340      	movs	r3, #64	@ 0x40
 800d4d0:	616b      	str	r3, [r5, #20]
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4d6:	2320      	movs	r3, #32
 800d4d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4e0:	2330      	movs	r3, #48	@ 0x30
 800d4e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d680 <_svfiprintf_r+0x1e4>
 800d4e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4ea:	f04f 0901 	mov.w	r9, #1
 800d4ee:	4623      	mov	r3, r4
 800d4f0:	469a      	mov	sl, r3
 800d4f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4f6:	b10a      	cbz	r2, 800d4fc <_svfiprintf_r+0x60>
 800d4f8:	2a25      	cmp	r2, #37	@ 0x25
 800d4fa:	d1f9      	bne.n	800d4f0 <_svfiprintf_r+0x54>
 800d4fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d500:	d00b      	beq.n	800d51a <_svfiprintf_r+0x7e>
 800d502:	465b      	mov	r3, fp
 800d504:	4622      	mov	r2, r4
 800d506:	4629      	mov	r1, r5
 800d508:	4638      	mov	r0, r7
 800d50a:	f7ff ff6b 	bl	800d3e4 <__ssputs_r>
 800d50e:	3001      	adds	r0, #1
 800d510:	f000 80a7 	beq.w	800d662 <_svfiprintf_r+0x1c6>
 800d514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d516:	445a      	add	r2, fp
 800d518:	9209      	str	r2, [sp, #36]	@ 0x24
 800d51a:	f89a 3000 	ldrb.w	r3, [sl]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 809f 	beq.w	800d662 <_svfiprintf_r+0x1c6>
 800d524:	2300      	movs	r3, #0
 800d526:	f04f 32ff 	mov.w	r2, #4294967295
 800d52a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d52e:	f10a 0a01 	add.w	sl, sl, #1
 800d532:	9304      	str	r3, [sp, #16]
 800d534:	9307      	str	r3, [sp, #28]
 800d536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d53a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d53c:	4654      	mov	r4, sl
 800d53e:	2205      	movs	r2, #5
 800d540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d544:	484e      	ldr	r0, [pc, #312]	@ (800d680 <_svfiprintf_r+0x1e4>)
 800d546:	f7f2 fe1b 	bl	8000180 <memchr>
 800d54a:	9a04      	ldr	r2, [sp, #16]
 800d54c:	b9d8      	cbnz	r0, 800d586 <_svfiprintf_r+0xea>
 800d54e:	06d0      	lsls	r0, r2, #27
 800d550:	bf44      	itt	mi
 800d552:	2320      	movmi	r3, #32
 800d554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d558:	0711      	lsls	r1, r2, #28
 800d55a:	bf44      	itt	mi
 800d55c:	232b      	movmi	r3, #43	@ 0x2b
 800d55e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d562:	f89a 3000 	ldrb.w	r3, [sl]
 800d566:	2b2a      	cmp	r3, #42	@ 0x2a
 800d568:	d015      	beq.n	800d596 <_svfiprintf_r+0xfa>
 800d56a:	9a07      	ldr	r2, [sp, #28]
 800d56c:	4654      	mov	r4, sl
 800d56e:	2000      	movs	r0, #0
 800d570:	f04f 0c0a 	mov.w	ip, #10
 800d574:	4621      	mov	r1, r4
 800d576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d57a:	3b30      	subs	r3, #48	@ 0x30
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	d94b      	bls.n	800d618 <_svfiprintf_r+0x17c>
 800d580:	b1b0      	cbz	r0, 800d5b0 <_svfiprintf_r+0x114>
 800d582:	9207      	str	r2, [sp, #28]
 800d584:	e014      	b.n	800d5b0 <_svfiprintf_r+0x114>
 800d586:	eba0 0308 	sub.w	r3, r0, r8
 800d58a:	fa09 f303 	lsl.w	r3, r9, r3
 800d58e:	4313      	orrs	r3, r2
 800d590:	9304      	str	r3, [sp, #16]
 800d592:	46a2      	mov	sl, r4
 800d594:	e7d2      	b.n	800d53c <_svfiprintf_r+0xa0>
 800d596:	9b03      	ldr	r3, [sp, #12]
 800d598:	1d19      	adds	r1, r3, #4
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	9103      	str	r1, [sp, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	bfbb      	ittet	lt
 800d5a2:	425b      	neglt	r3, r3
 800d5a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5a8:	9307      	strge	r3, [sp, #28]
 800d5aa:	9307      	strlt	r3, [sp, #28]
 800d5ac:	bfb8      	it	lt
 800d5ae:	9204      	strlt	r2, [sp, #16]
 800d5b0:	7823      	ldrb	r3, [r4, #0]
 800d5b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5b4:	d10a      	bne.n	800d5cc <_svfiprintf_r+0x130>
 800d5b6:	7863      	ldrb	r3, [r4, #1]
 800d5b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ba:	d132      	bne.n	800d622 <_svfiprintf_r+0x186>
 800d5bc:	9b03      	ldr	r3, [sp, #12]
 800d5be:	1d1a      	adds	r2, r3, #4
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	9203      	str	r2, [sp, #12]
 800d5c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5c8:	3402      	adds	r4, #2
 800d5ca:	9305      	str	r3, [sp, #20]
 800d5cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d690 <_svfiprintf_r+0x1f4>
 800d5d0:	7821      	ldrb	r1, [r4, #0]
 800d5d2:	2203      	movs	r2, #3
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	f7f2 fdd3 	bl	8000180 <memchr>
 800d5da:	b138      	cbz	r0, 800d5ec <_svfiprintf_r+0x150>
 800d5dc:	9b04      	ldr	r3, [sp, #16]
 800d5de:	eba0 000a 	sub.w	r0, r0, sl
 800d5e2:	2240      	movs	r2, #64	@ 0x40
 800d5e4:	4082      	lsls	r2, r0
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	3401      	adds	r4, #1
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f0:	4824      	ldr	r0, [pc, #144]	@ (800d684 <_svfiprintf_r+0x1e8>)
 800d5f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5f6:	2206      	movs	r2, #6
 800d5f8:	f7f2 fdc2 	bl	8000180 <memchr>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d036      	beq.n	800d66e <_svfiprintf_r+0x1d2>
 800d600:	4b21      	ldr	r3, [pc, #132]	@ (800d688 <_svfiprintf_r+0x1ec>)
 800d602:	bb1b      	cbnz	r3, 800d64c <_svfiprintf_r+0x1b0>
 800d604:	9b03      	ldr	r3, [sp, #12]
 800d606:	3307      	adds	r3, #7
 800d608:	f023 0307 	bic.w	r3, r3, #7
 800d60c:	3308      	adds	r3, #8
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d612:	4433      	add	r3, r6
 800d614:	9309      	str	r3, [sp, #36]	@ 0x24
 800d616:	e76a      	b.n	800d4ee <_svfiprintf_r+0x52>
 800d618:	fb0c 3202 	mla	r2, ip, r2, r3
 800d61c:	460c      	mov	r4, r1
 800d61e:	2001      	movs	r0, #1
 800d620:	e7a8      	b.n	800d574 <_svfiprintf_r+0xd8>
 800d622:	2300      	movs	r3, #0
 800d624:	3401      	adds	r4, #1
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	4619      	mov	r1, r3
 800d62a:	f04f 0c0a 	mov.w	ip, #10
 800d62e:	4620      	mov	r0, r4
 800d630:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d634:	3a30      	subs	r2, #48	@ 0x30
 800d636:	2a09      	cmp	r2, #9
 800d638:	d903      	bls.n	800d642 <_svfiprintf_r+0x1a6>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0c6      	beq.n	800d5cc <_svfiprintf_r+0x130>
 800d63e:	9105      	str	r1, [sp, #20]
 800d640:	e7c4      	b.n	800d5cc <_svfiprintf_r+0x130>
 800d642:	fb0c 2101 	mla	r1, ip, r1, r2
 800d646:	4604      	mov	r4, r0
 800d648:	2301      	movs	r3, #1
 800d64a:	e7f0      	b.n	800d62e <_svfiprintf_r+0x192>
 800d64c:	ab03      	add	r3, sp, #12
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	462a      	mov	r2, r5
 800d652:	4b0e      	ldr	r3, [pc, #56]	@ (800d68c <_svfiprintf_r+0x1f0>)
 800d654:	a904      	add	r1, sp, #16
 800d656:	4638      	mov	r0, r7
 800d658:	f7fc fc88 	bl	8009f6c <_printf_float>
 800d65c:	1c42      	adds	r2, r0, #1
 800d65e:	4606      	mov	r6, r0
 800d660:	d1d6      	bne.n	800d610 <_svfiprintf_r+0x174>
 800d662:	89ab      	ldrh	r3, [r5, #12]
 800d664:	065b      	lsls	r3, r3, #25
 800d666:	f53f af2d 	bmi.w	800d4c4 <_svfiprintf_r+0x28>
 800d66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d66c:	e72c      	b.n	800d4c8 <_svfiprintf_r+0x2c>
 800d66e:	ab03      	add	r3, sp, #12
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	462a      	mov	r2, r5
 800d674:	4b05      	ldr	r3, [pc, #20]	@ (800d68c <_svfiprintf_r+0x1f0>)
 800d676:	a904      	add	r1, sp, #16
 800d678:	4638      	mov	r0, r7
 800d67a:	f7fc ff0f 	bl	800a49c <_printf_i>
 800d67e:	e7ed      	b.n	800d65c <_svfiprintf_r+0x1c0>
 800d680:	0800ed11 	.word	0x0800ed11
 800d684:	0800ed1b 	.word	0x0800ed1b
 800d688:	08009f6d 	.word	0x08009f6d
 800d68c:	0800d3e5 	.word	0x0800d3e5
 800d690:	0800ed17 	.word	0x0800ed17

0800d694 <__sflush_r>:
 800d694:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	0716      	lsls	r6, r2, #28
 800d69e:	4605      	mov	r5, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	d454      	bmi.n	800d74e <__sflush_r+0xba>
 800d6a4:	684b      	ldr	r3, [r1, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dc02      	bgt.n	800d6b0 <__sflush_r+0x1c>
 800d6aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	dd48      	ble.n	800d742 <__sflush_r+0xae>
 800d6b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	d045      	beq.n	800d742 <__sflush_r+0xae>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6bc:	682f      	ldr	r7, [r5, #0]
 800d6be:	6a21      	ldr	r1, [r4, #32]
 800d6c0:	602b      	str	r3, [r5, #0]
 800d6c2:	d030      	beq.n	800d726 <__sflush_r+0x92>
 800d6c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	0759      	lsls	r1, r3, #29
 800d6ca:	d505      	bpl.n	800d6d8 <__sflush_r+0x44>
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	1ad2      	subs	r2, r2, r3
 800d6d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6d2:	b10b      	cbz	r3, 800d6d8 <__sflush_r+0x44>
 800d6d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6d6:	1ad2      	subs	r2, r2, r3
 800d6d8:	2300      	movs	r3, #0
 800d6da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6dc:	6a21      	ldr	r1, [r4, #32]
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b0      	blx	r6
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	d106      	bne.n	800d6f6 <__sflush_r+0x62>
 800d6e8:	6829      	ldr	r1, [r5, #0]
 800d6ea:	291d      	cmp	r1, #29
 800d6ec:	d82b      	bhi.n	800d746 <__sflush_r+0xb2>
 800d6ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d798 <__sflush_r+0x104>)
 800d6f0:	410a      	asrs	r2, r1
 800d6f2:	07d6      	lsls	r6, r2, #31
 800d6f4:	d427      	bmi.n	800d746 <__sflush_r+0xb2>
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	6062      	str	r2, [r4, #4]
 800d6fa:	04d9      	lsls	r1, r3, #19
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	d504      	bpl.n	800d70c <__sflush_r+0x78>
 800d702:	1c42      	adds	r2, r0, #1
 800d704:	d101      	bne.n	800d70a <__sflush_r+0x76>
 800d706:	682b      	ldr	r3, [r5, #0]
 800d708:	b903      	cbnz	r3, 800d70c <__sflush_r+0x78>
 800d70a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d70e:	602f      	str	r7, [r5, #0]
 800d710:	b1b9      	cbz	r1, 800d742 <__sflush_r+0xae>
 800d712:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d716:	4299      	cmp	r1, r3
 800d718:	d002      	beq.n	800d720 <__sflush_r+0x8c>
 800d71a:	4628      	mov	r0, r5
 800d71c:	f7fe fa2c 	bl	800bb78 <_free_r>
 800d720:	2300      	movs	r3, #0
 800d722:	6363      	str	r3, [r4, #52]	@ 0x34
 800d724:	e00d      	b.n	800d742 <__sflush_r+0xae>
 800d726:	2301      	movs	r3, #1
 800d728:	4628      	mov	r0, r5
 800d72a:	47b0      	blx	r6
 800d72c:	4602      	mov	r2, r0
 800d72e:	1c50      	adds	r0, r2, #1
 800d730:	d1c9      	bne.n	800d6c6 <__sflush_r+0x32>
 800d732:	682b      	ldr	r3, [r5, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d0c6      	beq.n	800d6c6 <__sflush_r+0x32>
 800d738:	2b1d      	cmp	r3, #29
 800d73a:	d001      	beq.n	800d740 <__sflush_r+0xac>
 800d73c:	2b16      	cmp	r3, #22
 800d73e:	d11e      	bne.n	800d77e <__sflush_r+0xea>
 800d740:	602f      	str	r7, [r5, #0]
 800d742:	2000      	movs	r0, #0
 800d744:	e022      	b.n	800d78c <__sflush_r+0xf8>
 800d746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d74a:	b21b      	sxth	r3, r3
 800d74c:	e01b      	b.n	800d786 <__sflush_r+0xf2>
 800d74e:	690f      	ldr	r7, [r1, #16]
 800d750:	2f00      	cmp	r7, #0
 800d752:	d0f6      	beq.n	800d742 <__sflush_r+0xae>
 800d754:	0793      	lsls	r3, r2, #30
 800d756:	680e      	ldr	r6, [r1, #0]
 800d758:	bf08      	it	eq
 800d75a:	694b      	ldreq	r3, [r1, #20]
 800d75c:	600f      	str	r7, [r1, #0]
 800d75e:	bf18      	it	ne
 800d760:	2300      	movne	r3, #0
 800d762:	eba6 0807 	sub.w	r8, r6, r7
 800d766:	608b      	str	r3, [r1, #8]
 800d768:	f1b8 0f00 	cmp.w	r8, #0
 800d76c:	dde9      	ble.n	800d742 <__sflush_r+0xae>
 800d76e:	6a21      	ldr	r1, [r4, #32]
 800d770:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d772:	4643      	mov	r3, r8
 800d774:	463a      	mov	r2, r7
 800d776:	4628      	mov	r0, r5
 800d778:	47b0      	blx	r6
 800d77a:	2800      	cmp	r0, #0
 800d77c:	dc08      	bgt.n	800d790 <__sflush_r+0xfc>
 800d77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d786:	81a3      	strh	r3, [r4, #12]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d790:	4407      	add	r7, r0
 800d792:	eba8 0800 	sub.w	r8, r8, r0
 800d796:	e7e7      	b.n	800d768 <__sflush_r+0xd4>
 800d798:	dfbffffe 	.word	0xdfbffffe

0800d79c <_fflush_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	690b      	ldr	r3, [r1, #16]
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	b913      	cbnz	r3, 800d7ac <_fflush_r+0x10>
 800d7a6:	2500      	movs	r5, #0
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	b118      	cbz	r0, 800d7b6 <_fflush_r+0x1a>
 800d7ae:	6a03      	ldr	r3, [r0, #32]
 800d7b0:	b90b      	cbnz	r3, 800d7b6 <_fflush_r+0x1a>
 800d7b2:	f7fd fa33 	bl	800ac1c <__sinit>
 800d7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d0f3      	beq.n	800d7a6 <_fflush_r+0xa>
 800d7be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7c0:	07d0      	lsls	r0, r2, #31
 800d7c2:	d404      	bmi.n	800d7ce <_fflush_r+0x32>
 800d7c4:	0599      	lsls	r1, r3, #22
 800d7c6:	d402      	bmi.n	800d7ce <_fflush_r+0x32>
 800d7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ca:	f7fd fb72 	bl	800aeb2 <__retarget_lock_acquire_recursive>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	4621      	mov	r1, r4
 800d7d2:	f7ff ff5f 	bl	800d694 <__sflush_r>
 800d7d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7d8:	07da      	lsls	r2, r3, #31
 800d7da:	4605      	mov	r5, r0
 800d7dc:	d4e4      	bmi.n	800d7a8 <_fflush_r+0xc>
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	059b      	lsls	r3, r3, #22
 800d7e2:	d4e1      	bmi.n	800d7a8 <_fflush_r+0xc>
 800d7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7e6:	f7fd fb65 	bl	800aeb4 <__retarget_lock_release_recursive>
 800d7ea:	e7dd      	b.n	800d7a8 <_fflush_r+0xc>

0800d7ec <memmove>:
 800d7ec:	4288      	cmp	r0, r1
 800d7ee:	b510      	push	{r4, lr}
 800d7f0:	eb01 0402 	add.w	r4, r1, r2
 800d7f4:	d902      	bls.n	800d7fc <memmove+0x10>
 800d7f6:	4284      	cmp	r4, r0
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	d807      	bhi.n	800d80c <memmove+0x20>
 800d7fc:	1e43      	subs	r3, r0, #1
 800d7fe:	42a1      	cmp	r1, r4
 800d800:	d008      	beq.n	800d814 <memmove+0x28>
 800d802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d80a:	e7f8      	b.n	800d7fe <memmove+0x12>
 800d80c:	4402      	add	r2, r0
 800d80e:	4601      	mov	r1, r0
 800d810:	428a      	cmp	r2, r1
 800d812:	d100      	bne.n	800d816 <memmove+0x2a>
 800d814:	bd10      	pop	{r4, pc}
 800d816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d81e:	e7f7      	b.n	800d810 <memmove+0x24>

0800d820 <strncmp>:
 800d820:	b510      	push	{r4, lr}
 800d822:	b16a      	cbz	r2, 800d840 <strncmp+0x20>
 800d824:	3901      	subs	r1, #1
 800d826:	1884      	adds	r4, r0, r2
 800d828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d82c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d830:	429a      	cmp	r2, r3
 800d832:	d103      	bne.n	800d83c <strncmp+0x1c>
 800d834:	42a0      	cmp	r0, r4
 800d836:	d001      	beq.n	800d83c <strncmp+0x1c>
 800d838:	2a00      	cmp	r2, #0
 800d83a:	d1f5      	bne.n	800d828 <strncmp+0x8>
 800d83c:	1ad0      	subs	r0, r2, r3
 800d83e:	bd10      	pop	{r4, pc}
 800d840:	4610      	mov	r0, r2
 800d842:	e7fc      	b.n	800d83e <strncmp+0x1e>

0800d844 <_sbrk_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4d06      	ldr	r5, [pc, #24]	@ (800d860 <_sbrk_r+0x1c>)
 800d848:	2300      	movs	r3, #0
 800d84a:	4604      	mov	r4, r0
 800d84c:	4608      	mov	r0, r1
 800d84e:	602b      	str	r3, [r5, #0]
 800d850:	f7f5 fa18 	bl	8002c84 <_sbrk>
 800d854:	1c43      	adds	r3, r0, #1
 800d856:	d102      	bne.n	800d85e <_sbrk_r+0x1a>
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	b103      	cbz	r3, 800d85e <_sbrk_r+0x1a>
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	20006f24 	.word	0x20006f24
 800d864:	00000000 	.word	0x00000000

0800d868 <nan>:
 800d868:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d870 <nan+0x8>
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	00000000 	.word	0x00000000
 800d874:	7ff80000 	.word	0x7ff80000

0800d878 <__assert_func>:
 800d878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d87a:	4614      	mov	r4, r2
 800d87c:	461a      	mov	r2, r3
 800d87e:	4b09      	ldr	r3, [pc, #36]	@ (800d8a4 <__assert_func+0x2c>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4605      	mov	r5, r0
 800d884:	68d8      	ldr	r0, [r3, #12]
 800d886:	b954      	cbnz	r4, 800d89e <__assert_func+0x26>
 800d888:	4b07      	ldr	r3, [pc, #28]	@ (800d8a8 <__assert_func+0x30>)
 800d88a:	461c      	mov	r4, r3
 800d88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d890:	9100      	str	r1, [sp, #0]
 800d892:	462b      	mov	r3, r5
 800d894:	4905      	ldr	r1, [pc, #20]	@ (800d8ac <__assert_func+0x34>)
 800d896:	f000 fba7 	bl	800dfe8 <fiprintf>
 800d89a:	f000 fbb7 	bl	800e00c <abort>
 800d89e:	4b04      	ldr	r3, [pc, #16]	@ (800d8b0 <__assert_func+0x38>)
 800d8a0:	e7f4      	b.n	800d88c <__assert_func+0x14>
 800d8a2:	bf00      	nop
 800d8a4:	20000034 	.word	0x20000034
 800d8a8:	0800ed65 	.word	0x0800ed65
 800d8ac:	0800ed37 	.word	0x0800ed37
 800d8b0:	0800ed2a 	.word	0x0800ed2a

0800d8b4 <_calloc_r>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	fba1 5402 	umull	r5, r4, r1, r2
 800d8ba:	b93c      	cbnz	r4, 800d8cc <_calloc_r+0x18>
 800d8bc:	4629      	mov	r1, r5
 800d8be:	f7fe f9cf 	bl	800bc60 <_malloc_r>
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	b928      	cbnz	r0, 800d8d2 <_calloc_r+0x1e>
 800d8c6:	2600      	movs	r6, #0
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	220c      	movs	r2, #12
 800d8ce:	6002      	str	r2, [r0, #0]
 800d8d0:	e7f9      	b.n	800d8c6 <_calloc_r+0x12>
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	f7fd fa6e 	bl	800adb6 <memset>
 800d8da:	e7f5      	b.n	800d8c8 <_calloc_r+0x14>

0800d8dc <rshift>:
 800d8dc:	6903      	ldr	r3, [r0, #16]
 800d8de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d8e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d8ea:	f100 0414 	add.w	r4, r0, #20
 800d8ee:	dd45      	ble.n	800d97c <rshift+0xa0>
 800d8f0:	f011 011f 	ands.w	r1, r1, #31
 800d8f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d8f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d8fc:	d10c      	bne.n	800d918 <rshift+0x3c>
 800d8fe:	f100 0710 	add.w	r7, r0, #16
 800d902:	4629      	mov	r1, r5
 800d904:	42b1      	cmp	r1, r6
 800d906:	d334      	bcc.n	800d972 <rshift+0x96>
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	1eea      	subs	r2, r5, #3
 800d90e:	4296      	cmp	r6, r2
 800d910:	bf38      	it	cc
 800d912:	2300      	movcc	r3, #0
 800d914:	4423      	add	r3, r4
 800d916:	e015      	b.n	800d944 <rshift+0x68>
 800d918:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d91c:	f1c1 0820 	rsb	r8, r1, #32
 800d920:	40cf      	lsrs	r7, r1
 800d922:	f105 0e04 	add.w	lr, r5, #4
 800d926:	46a1      	mov	r9, r4
 800d928:	4576      	cmp	r6, lr
 800d92a:	46f4      	mov	ip, lr
 800d92c:	d815      	bhi.n	800d95a <rshift+0x7e>
 800d92e:	1a9a      	subs	r2, r3, r2
 800d930:	0092      	lsls	r2, r2, #2
 800d932:	3a04      	subs	r2, #4
 800d934:	3501      	adds	r5, #1
 800d936:	42ae      	cmp	r6, r5
 800d938:	bf38      	it	cc
 800d93a:	2200      	movcc	r2, #0
 800d93c:	18a3      	adds	r3, r4, r2
 800d93e:	50a7      	str	r7, [r4, r2]
 800d940:	b107      	cbz	r7, 800d944 <rshift+0x68>
 800d942:	3304      	adds	r3, #4
 800d944:	1b1a      	subs	r2, r3, r4
 800d946:	42a3      	cmp	r3, r4
 800d948:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d94c:	bf08      	it	eq
 800d94e:	2300      	moveq	r3, #0
 800d950:	6102      	str	r2, [r0, #16]
 800d952:	bf08      	it	eq
 800d954:	6143      	streq	r3, [r0, #20]
 800d956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d95a:	f8dc c000 	ldr.w	ip, [ip]
 800d95e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d962:	ea4c 0707 	orr.w	r7, ip, r7
 800d966:	f849 7b04 	str.w	r7, [r9], #4
 800d96a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d96e:	40cf      	lsrs	r7, r1
 800d970:	e7da      	b.n	800d928 <rshift+0x4c>
 800d972:	f851 cb04 	ldr.w	ip, [r1], #4
 800d976:	f847 cf04 	str.w	ip, [r7, #4]!
 800d97a:	e7c3      	b.n	800d904 <rshift+0x28>
 800d97c:	4623      	mov	r3, r4
 800d97e:	e7e1      	b.n	800d944 <rshift+0x68>

0800d980 <__hexdig_fun>:
 800d980:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d984:	2b09      	cmp	r3, #9
 800d986:	d802      	bhi.n	800d98e <__hexdig_fun+0xe>
 800d988:	3820      	subs	r0, #32
 800d98a:	b2c0      	uxtb	r0, r0
 800d98c:	4770      	bx	lr
 800d98e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d992:	2b05      	cmp	r3, #5
 800d994:	d801      	bhi.n	800d99a <__hexdig_fun+0x1a>
 800d996:	3847      	subs	r0, #71	@ 0x47
 800d998:	e7f7      	b.n	800d98a <__hexdig_fun+0xa>
 800d99a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d99e:	2b05      	cmp	r3, #5
 800d9a0:	d801      	bhi.n	800d9a6 <__hexdig_fun+0x26>
 800d9a2:	3827      	subs	r0, #39	@ 0x27
 800d9a4:	e7f1      	b.n	800d98a <__hexdig_fun+0xa>
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	4770      	bx	lr
	...

0800d9ac <__gethex>:
 800d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b0:	b085      	sub	sp, #20
 800d9b2:	468a      	mov	sl, r1
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	680b      	ldr	r3, [r1, #0]
 800d9b8:	9001      	str	r0, [sp, #4]
 800d9ba:	4690      	mov	r8, r2
 800d9bc:	1c9c      	adds	r4, r3, #2
 800d9be:	46a1      	mov	r9, r4
 800d9c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d9c4:	2830      	cmp	r0, #48	@ 0x30
 800d9c6:	d0fa      	beq.n	800d9be <__gethex+0x12>
 800d9c8:	eba9 0303 	sub.w	r3, r9, r3
 800d9cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d9d0:	f7ff ffd6 	bl	800d980 <__hexdig_fun>
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d168      	bne.n	800daac <__gethex+0x100>
 800d9da:	49a0      	ldr	r1, [pc, #640]	@ (800dc5c <__gethex+0x2b0>)
 800d9dc:	2201      	movs	r2, #1
 800d9de:	4648      	mov	r0, r9
 800d9e0:	f7ff ff1e 	bl	800d820 <strncmp>
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d167      	bne.n	800daba <__gethex+0x10e>
 800d9ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d9ee:	4626      	mov	r6, r4
 800d9f0:	f7ff ffc6 	bl	800d980 <__hexdig_fun>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d062      	beq.n	800dabe <__gethex+0x112>
 800d9f8:	4623      	mov	r3, r4
 800d9fa:	7818      	ldrb	r0, [r3, #0]
 800d9fc:	2830      	cmp	r0, #48	@ 0x30
 800d9fe:	4699      	mov	r9, r3
 800da00:	f103 0301 	add.w	r3, r3, #1
 800da04:	d0f9      	beq.n	800d9fa <__gethex+0x4e>
 800da06:	f7ff ffbb 	bl	800d980 <__hexdig_fun>
 800da0a:	fab0 f580 	clz	r5, r0
 800da0e:	096d      	lsrs	r5, r5, #5
 800da10:	f04f 0b01 	mov.w	fp, #1
 800da14:	464a      	mov	r2, r9
 800da16:	4616      	mov	r6, r2
 800da18:	3201      	adds	r2, #1
 800da1a:	7830      	ldrb	r0, [r6, #0]
 800da1c:	f7ff ffb0 	bl	800d980 <__hexdig_fun>
 800da20:	2800      	cmp	r0, #0
 800da22:	d1f8      	bne.n	800da16 <__gethex+0x6a>
 800da24:	498d      	ldr	r1, [pc, #564]	@ (800dc5c <__gethex+0x2b0>)
 800da26:	2201      	movs	r2, #1
 800da28:	4630      	mov	r0, r6
 800da2a:	f7ff fef9 	bl	800d820 <strncmp>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d13f      	bne.n	800dab2 <__gethex+0x106>
 800da32:	b944      	cbnz	r4, 800da46 <__gethex+0x9a>
 800da34:	1c74      	adds	r4, r6, #1
 800da36:	4622      	mov	r2, r4
 800da38:	4616      	mov	r6, r2
 800da3a:	3201      	adds	r2, #1
 800da3c:	7830      	ldrb	r0, [r6, #0]
 800da3e:	f7ff ff9f 	bl	800d980 <__hexdig_fun>
 800da42:	2800      	cmp	r0, #0
 800da44:	d1f8      	bne.n	800da38 <__gethex+0x8c>
 800da46:	1ba4      	subs	r4, r4, r6
 800da48:	00a7      	lsls	r7, r4, #2
 800da4a:	7833      	ldrb	r3, [r6, #0]
 800da4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800da50:	2b50      	cmp	r3, #80	@ 0x50
 800da52:	d13e      	bne.n	800dad2 <__gethex+0x126>
 800da54:	7873      	ldrb	r3, [r6, #1]
 800da56:	2b2b      	cmp	r3, #43	@ 0x2b
 800da58:	d033      	beq.n	800dac2 <__gethex+0x116>
 800da5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800da5c:	d034      	beq.n	800dac8 <__gethex+0x11c>
 800da5e:	1c71      	adds	r1, r6, #1
 800da60:	2400      	movs	r4, #0
 800da62:	7808      	ldrb	r0, [r1, #0]
 800da64:	f7ff ff8c 	bl	800d980 <__hexdig_fun>
 800da68:	1e43      	subs	r3, r0, #1
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b18      	cmp	r3, #24
 800da6e:	d830      	bhi.n	800dad2 <__gethex+0x126>
 800da70:	f1a0 0210 	sub.w	r2, r0, #16
 800da74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da78:	f7ff ff82 	bl	800d980 <__hexdig_fun>
 800da7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800da80:	fa5f fc8c 	uxtb.w	ip, ip
 800da84:	f1bc 0f18 	cmp.w	ip, #24
 800da88:	f04f 030a 	mov.w	r3, #10
 800da8c:	d91e      	bls.n	800dacc <__gethex+0x120>
 800da8e:	b104      	cbz	r4, 800da92 <__gethex+0xe6>
 800da90:	4252      	negs	r2, r2
 800da92:	4417      	add	r7, r2
 800da94:	f8ca 1000 	str.w	r1, [sl]
 800da98:	b1ed      	cbz	r5, 800dad6 <__gethex+0x12a>
 800da9a:	f1bb 0f00 	cmp.w	fp, #0
 800da9e:	bf0c      	ite	eq
 800daa0:	2506      	moveq	r5, #6
 800daa2:	2500      	movne	r5, #0
 800daa4:	4628      	mov	r0, r5
 800daa6:	b005      	add	sp, #20
 800daa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daac:	2500      	movs	r5, #0
 800daae:	462c      	mov	r4, r5
 800dab0:	e7b0      	b.n	800da14 <__gethex+0x68>
 800dab2:	2c00      	cmp	r4, #0
 800dab4:	d1c7      	bne.n	800da46 <__gethex+0x9a>
 800dab6:	4627      	mov	r7, r4
 800dab8:	e7c7      	b.n	800da4a <__gethex+0x9e>
 800daba:	464e      	mov	r6, r9
 800dabc:	462f      	mov	r7, r5
 800dabe:	2501      	movs	r5, #1
 800dac0:	e7c3      	b.n	800da4a <__gethex+0x9e>
 800dac2:	2400      	movs	r4, #0
 800dac4:	1cb1      	adds	r1, r6, #2
 800dac6:	e7cc      	b.n	800da62 <__gethex+0xb6>
 800dac8:	2401      	movs	r4, #1
 800daca:	e7fb      	b.n	800dac4 <__gethex+0x118>
 800dacc:	fb03 0002 	mla	r0, r3, r2, r0
 800dad0:	e7ce      	b.n	800da70 <__gethex+0xc4>
 800dad2:	4631      	mov	r1, r6
 800dad4:	e7de      	b.n	800da94 <__gethex+0xe8>
 800dad6:	eba6 0309 	sub.w	r3, r6, r9
 800dada:	3b01      	subs	r3, #1
 800dadc:	4629      	mov	r1, r5
 800dade:	2b07      	cmp	r3, #7
 800dae0:	dc0a      	bgt.n	800daf8 <__gethex+0x14c>
 800dae2:	9801      	ldr	r0, [sp, #4]
 800dae4:	f7fe f948 	bl	800bd78 <_Balloc>
 800dae8:	4604      	mov	r4, r0
 800daea:	b940      	cbnz	r0, 800dafe <__gethex+0x152>
 800daec:	4b5c      	ldr	r3, [pc, #368]	@ (800dc60 <__gethex+0x2b4>)
 800daee:	4602      	mov	r2, r0
 800daf0:	21e4      	movs	r1, #228	@ 0xe4
 800daf2:	485c      	ldr	r0, [pc, #368]	@ (800dc64 <__gethex+0x2b8>)
 800daf4:	f7ff fec0 	bl	800d878 <__assert_func>
 800daf8:	3101      	adds	r1, #1
 800dafa:	105b      	asrs	r3, r3, #1
 800dafc:	e7ef      	b.n	800dade <__gethex+0x132>
 800dafe:	f100 0a14 	add.w	sl, r0, #20
 800db02:	2300      	movs	r3, #0
 800db04:	4655      	mov	r5, sl
 800db06:	469b      	mov	fp, r3
 800db08:	45b1      	cmp	r9, r6
 800db0a:	d337      	bcc.n	800db7c <__gethex+0x1d0>
 800db0c:	f845 bb04 	str.w	fp, [r5], #4
 800db10:	eba5 050a 	sub.w	r5, r5, sl
 800db14:	10ad      	asrs	r5, r5, #2
 800db16:	6125      	str	r5, [r4, #16]
 800db18:	4658      	mov	r0, fp
 800db1a:	f7fe fa1f 	bl	800bf5c <__hi0bits>
 800db1e:	016d      	lsls	r5, r5, #5
 800db20:	f8d8 6000 	ldr.w	r6, [r8]
 800db24:	1a2d      	subs	r5, r5, r0
 800db26:	42b5      	cmp	r5, r6
 800db28:	dd54      	ble.n	800dbd4 <__gethex+0x228>
 800db2a:	1bad      	subs	r5, r5, r6
 800db2c:	4629      	mov	r1, r5
 800db2e:	4620      	mov	r0, r4
 800db30:	f7fe fdb3 	bl	800c69a <__any_on>
 800db34:	4681      	mov	r9, r0
 800db36:	b178      	cbz	r0, 800db58 <__gethex+0x1ac>
 800db38:	1e6b      	subs	r3, r5, #1
 800db3a:	1159      	asrs	r1, r3, #5
 800db3c:	f003 021f 	and.w	r2, r3, #31
 800db40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800db44:	f04f 0901 	mov.w	r9, #1
 800db48:	fa09 f202 	lsl.w	r2, r9, r2
 800db4c:	420a      	tst	r2, r1
 800db4e:	d003      	beq.n	800db58 <__gethex+0x1ac>
 800db50:	454b      	cmp	r3, r9
 800db52:	dc36      	bgt.n	800dbc2 <__gethex+0x216>
 800db54:	f04f 0902 	mov.w	r9, #2
 800db58:	4629      	mov	r1, r5
 800db5a:	4620      	mov	r0, r4
 800db5c:	f7ff febe 	bl	800d8dc <rshift>
 800db60:	442f      	add	r7, r5
 800db62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db66:	42bb      	cmp	r3, r7
 800db68:	da42      	bge.n	800dbf0 <__gethex+0x244>
 800db6a:	9801      	ldr	r0, [sp, #4]
 800db6c:	4621      	mov	r1, r4
 800db6e:	f7fe f943 	bl	800bdf8 <_Bfree>
 800db72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db74:	2300      	movs	r3, #0
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	25a3      	movs	r5, #163	@ 0xa3
 800db7a:	e793      	b.n	800daa4 <__gethex+0xf8>
 800db7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800db80:	2a2e      	cmp	r2, #46	@ 0x2e
 800db82:	d012      	beq.n	800dbaa <__gethex+0x1fe>
 800db84:	2b20      	cmp	r3, #32
 800db86:	d104      	bne.n	800db92 <__gethex+0x1e6>
 800db88:	f845 bb04 	str.w	fp, [r5], #4
 800db8c:	f04f 0b00 	mov.w	fp, #0
 800db90:	465b      	mov	r3, fp
 800db92:	7830      	ldrb	r0, [r6, #0]
 800db94:	9303      	str	r3, [sp, #12]
 800db96:	f7ff fef3 	bl	800d980 <__hexdig_fun>
 800db9a:	9b03      	ldr	r3, [sp, #12]
 800db9c:	f000 000f 	and.w	r0, r0, #15
 800dba0:	4098      	lsls	r0, r3
 800dba2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dba6:	3304      	adds	r3, #4
 800dba8:	e7ae      	b.n	800db08 <__gethex+0x15c>
 800dbaa:	45b1      	cmp	r9, r6
 800dbac:	d8ea      	bhi.n	800db84 <__gethex+0x1d8>
 800dbae:	492b      	ldr	r1, [pc, #172]	@ (800dc5c <__gethex+0x2b0>)
 800dbb0:	9303      	str	r3, [sp, #12]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff fe33 	bl	800d820 <strncmp>
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d1e1      	bne.n	800db84 <__gethex+0x1d8>
 800dbc0:	e7a2      	b.n	800db08 <__gethex+0x15c>
 800dbc2:	1ea9      	subs	r1, r5, #2
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f7fe fd68 	bl	800c69a <__any_on>
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0c2      	beq.n	800db54 <__gethex+0x1a8>
 800dbce:	f04f 0903 	mov.w	r9, #3
 800dbd2:	e7c1      	b.n	800db58 <__gethex+0x1ac>
 800dbd4:	da09      	bge.n	800dbea <__gethex+0x23e>
 800dbd6:	1b75      	subs	r5, r6, r5
 800dbd8:	4621      	mov	r1, r4
 800dbda:	9801      	ldr	r0, [sp, #4]
 800dbdc:	462a      	mov	r2, r5
 800dbde:	f7fe fb23 	bl	800c228 <__lshift>
 800dbe2:	1b7f      	subs	r7, r7, r5
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	f100 0a14 	add.w	sl, r0, #20
 800dbea:	f04f 0900 	mov.w	r9, #0
 800dbee:	e7b8      	b.n	800db62 <__gethex+0x1b6>
 800dbf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbf4:	42bd      	cmp	r5, r7
 800dbf6:	dd6f      	ble.n	800dcd8 <__gethex+0x32c>
 800dbf8:	1bed      	subs	r5, r5, r7
 800dbfa:	42ae      	cmp	r6, r5
 800dbfc:	dc34      	bgt.n	800dc68 <__gethex+0x2bc>
 800dbfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d022      	beq.n	800dc4c <__gethex+0x2a0>
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d024      	beq.n	800dc54 <__gethex+0x2a8>
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d115      	bne.n	800dc3a <__gethex+0x28e>
 800dc0e:	42ae      	cmp	r6, r5
 800dc10:	d113      	bne.n	800dc3a <__gethex+0x28e>
 800dc12:	2e01      	cmp	r6, #1
 800dc14:	d10b      	bne.n	800dc2e <__gethex+0x282>
 800dc16:	9a02      	ldr	r2, [sp, #8]
 800dc18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc1c:	6013      	str	r3, [r2, #0]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	6123      	str	r3, [r4, #16]
 800dc22:	f8ca 3000 	str.w	r3, [sl]
 800dc26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc28:	2562      	movs	r5, #98	@ 0x62
 800dc2a:	601c      	str	r4, [r3, #0]
 800dc2c:	e73a      	b.n	800daa4 <__gethex+0xf8>
 800dc2e:	1e71      	subs	r1, r6, #1
 800dc30:	4620      	mov	r0, r4
 800dc32:	f7fe fd32 	bl	800c69a <__any_on>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d1ed      	bne.n	800dc16 <__gethex+0x26a>
 800dc3a:	9801      	ldr	r0, [sp, #4]
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	f7fe f8db 	bl	800bdf8 <_Bfree>
 800dc42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc44:	2300      	movs	r3, #0
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	2550      	movs	r5, #80	@ 0x50
 800dc4a:	e72b      	b.n	800daa4 <__gethex+0xf8>
 800dc4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1f3      	bne.n	800dc3a <__gethex+0x28e>
 800dc52:	e7e0      	b.n	800dc16 <__gethex+0x26a>
 800dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1dd      	bne.n	800dc16 <__gethex+0x26a>
 800dc5a:	e7ee      	b.n	800dc3a <__gethex+0x28e>
 800dc5c:	0800ebb8 	.word	0x0800ebb8
 800dc60:	0800ea51 	.word	0x0800ea51
 800dc64:	0800ed66 	.word	0x0800ed66
 800dc68:	1e6f      	subs	r7, r5, #1
 800dc6a:	f1b9 0f00 	cmp.w	r9, #0
 800dc6e:	d130      	bne.n	800dcd2 <__gethex+0x326>
 800dc70:	b127      	cbz	r7, 800dc7c <__gethex+0x2d0>
 800dc72:	4639      	mov	r1, r7
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7fe fd10 	bl	800c69a <__any_on>
 800dc7a:	4681      	mov	r9, r0
 800dc7c:	117a      	asrs	r2, r7, #5
 800dc7e:	2301      	movs	r3, #1
 800dc80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dc84:	f007 071f 	and.w	r7, r7, #31
 800dc88:	40bb      	lsls	r3, r7
 800dc8a:	4213      	tst	r3, r2
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4620      	mov	r0, r4
 800dc90:	bf18      	it	ne
 800dc92:	f049 0902 	orrne.w	r9, r9, #2
 800dc96:	f7ff fe21 	bl	800d8dc <rshift>
 800dc9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dc9e:	1b76      	subs	r6, r6, r5
 800dca0:	2502      	movs	r5, #2
 800dca2:	f1b9 0f00 	cmp.w	r9, #0
 800dca6:	d047      	beq.n	800dd38 <__gethex+0x38c>
 800dca8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d015      	beq.n	800dcdc <__gethex+0x330>
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d017      	beq.n	800dce4 <__gethex+0x338>
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d109      	bne.n	800dccc <__gethex+0x320>
 800dcb8:	f019 0f02 	tst.w	r9, #2
 800dcbc:	d006      	beq.n	800dccc <__gethex+0x320>
 800dcbe:	f8da 3000 	ldr.w	r3, [sl]
 800dcc2:	ea49 0903 	orr.w	r9, r9, r3
 800dcc6:	f019 0f01 	tst.w	r9, #1
 800dcca:	d10e      	bne.n	800dcea <__gethex+0x33e>
 800dccc:	f045 0510 	orr.w	r5, r5, #16
 800dcd0:	e032      	b.n	800dd38 <__gethex+0x38c>
 800dcd2:	f04f 0901 	mov.w	r9, #1
 800dcd6:	e7d1      	b.n	800dc7c <__gethex+0x2d0>
 800dcd8:	2501      	movs	r5, #1
 800dcda:	e7e2      	b.n	800dca2 <__gethex+0x2f6>
 800dcdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcde:	f1c3 0301 	rsb	r3, r3, #1
 800dce2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d0f0      	beq.n	800dccc <__gethex+0x320>
 800dcea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dcee:	f104 0314 	add.w	r3, r4, #20
 800dcf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dcf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dcfa:	f04f 0c00 	mov.w	ip, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd08:	d01b      	beq.n	800dd42 <__gethex+0x396>
 800dd0a:	3201      	adds	r2, #1
 800dd0c:	6002      	str	r2, [r0, #0]
 800dd0e:	2d02      	cmp	r5, #2
 800dd10:	f104 0314 	add.w	r3, r4, #20
 800dd14:	d13c      	bne.n	800dd90 <__gethex+0x3e4>
 800dd16:	f8d8 2000 	ldr.w	r2, [r8]
 800dd1a:	3a01      	subs	r2, #1
 800dd1c:	42b2      	cmp	r2, r6
 800dd1e:	d109      	bne.n	800dd34 <__gethex+0x388>
 800dd20:	1171      	asrs	r1, r6, #5
 800dd22:	2201      	movs	r2, #1
 800dd24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd28:	f006 061f 	and.w	r6, r6, #31
 800dd2c:	fa02 f606 	lsl.w	r6, r2, r6
 800dd30:	421e      	tst	r6, r3
 800dd32:	d13a      	bne.n	800ddaa <__gethex+0x3fe>
 800dd34:	f045 0520 	orr.w	r5, r5, #32
 800dd38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd3a:	601c      	str	r4, [r3, #0]
 800dd3c:	9b02      	ldr	r3, [sp, #8]
 800dd3e:	601f      	str	r7, [r3, #0]
 800dd40:	e6b0      	b.n	800daa4 <__gethex+0xf8>
 800dd42:	4299      	cmp	r1, r3
 800dd44:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd48:	d8d9      	bhi.n	800dcfe <__gethex+0x352>
 800dd4a:	68a3      	ldr	r3, [r4, #8]
 800dd4c:	459b      	cmp	fp, r3
 800dd4e:	db17      	blt.n	800dd80 <__gethex+0x3d4>
 800dd50:	6861      	ldr	r1, [r4, #4]
 800dd52:	9801      	ldr	r0, [sp, #4]
 800dd54:	3101      	adds	r1, #1
 800dd56:	f7fe f80f 	bl	800bd78 <_Balloc>
 800dd5a:	4681      	mov	r9, r0
 800dd5c:	b918      	cbnz	r0, 800dd66 <__gethex+0x3ba>
 800dd5e:	4b1a      	ldr	r3, [pc, #104]	@ (800ddc8 <__gethex+0x41c>)
 800dd60:	4602      	mov	r2, r0
 800dd62:	2184      	movs	r1, #132	@ 0x84
 800dd64:	e6c5      	b.n	800daf2 <__gethex+0x146>
 800dd66:	6922      	ldr	r2, [r4, #16]
 800dd68:	3202      	adds	r2, #2
 800dd6a:	f104 010c 	add.w	r1, r4, #12
 800dd6e:	0092      	lsls	r2, r2, #2
 800dd70:	300c      	adds	r0, #12
 800dd72:	f7fd f8a0 	bl	800aeb6 <memcpy>
 800dd76:	4621      	mov	r1, r4
 800dd78:	9801      	ldr	r0, [sp, #4]
 800dd7a:	f7fe f83d 	bl	800bdf8 <_Bfree>
 800dd7e:	464c      	mov	r4, r9
 800dd80:	6923      	ldr	r3, [r4, #16]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd88:	6122      	str	r2, [r4, #16]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	615a      	str	r2, [r3, #20]
 800dd8e:	e7be      	b.n	800dd0e <__gethex+0x362>
 800dd90:	6922      	ldr	r2, [r4, #16]
 800dd92:	455a      	cmp	r2, fp
 800dd94:	dd0b      	ble.n	800ddae <__gethex+0x402>
 800dd96:	2101      	movs	r1, #1
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f7ff fd9f 	bl	800d8dc <rshift>
 800dd9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dda2:	3701      	adds	r7, #1
 800dda4:	42bb      	cmp	r3, r7
 800dda6:	f6ff aee0 	blt.w	800db6a <__gethex+0x1be>
 800ddaa:	2501      	movs	r5, #1
 800ddac:	e7c2      	b.n	800dd34 <__gethex+0x388>
 800ddae:	f016 061f 	ands.w	r6, r6, #31
 800ddb2:	d0fa      	beq.n	800ddaa <__gethex+0x3fe>
 800ddb4:	4453      	add	r3, sl
 800ddb6:	f1c6 0620 	rsb	r6, r6, #32
 800ddba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ddbe:	f7fe f8cd 	bl	800bf5c <__hi0bits>
 800ddc2:	42b0      	cmp	r0, r6
 800ddc4:	dbe7      	blt.n	800dd96 <__gethex+0x3ea>
 800ddc6:	e7f0      	b.n	800ddaa <__gethex+0x3fe>
 800ddc8:	0800ea51 	.word	0x0800ea51

0800ddcc <L_shift>:
 800ddcc:	f1c2 0208 	rsb	r2, r2, #8
 800ddd0:	0092      	lsls	r2, r2, #2
 800ddd2:	b570      	push	{r4, r5, r6, lr}
 800ddd4:	f1c2 0620 	rsb	r6, r2, #32
 800ddd8:	6843      	ldr	r3, [r0, #4]
 800ddda:	6804      	ldr	r4, [r0, #0]
 800dddc:	fa03 f506 	lsl.w	r5, r3, r6
 800dde0:	432c      	orrs	r4, r5
 800dde2:	40d3      	lsrs	r3, r2
 800dde4:	6004      	str	r4, [r0, #0]
 800dde6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ddea:	4288      	cmp	r0, r1
 800ddec:	d3f4      	bcc.n	800ddd8 <L_shift+0xc>
 800ddee:	bd70      	pop	{r4, r5, r6, pc}

0800ddf0 <__match>:
 800ddf0:	b530      	push	{r4, r5, lr}
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddfa:	b914      	cbnz	r4, 800de02 <__match+0x12>
 800ddfc:	6003      	str	r3, [r0, #0]
 800ddfe:	2001      	movs	r0, #1
 800de00:	bd30      	pop	{r4, r5, pc}
 800de02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800de0a:	2d19      	cmp	r5, #25
 800de0c:	bf98      	it	ls
 800de0e:	3220      	addls	r2, #32
 800de10:	42a2      	cmp	r2, r4
 800de12:	d0f0      	beq.n	800ddf6 <__match+0x6>
 800de14:	2000      	movs	r0, #0
 800de16:	e7f3      	b.n	800de00 <__match+0x10>

0800de18 <__hexnan>:
 800de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	680b      	ldr	r3, [r1, #0]
 800de1e:	6801      	ldr	r1, [r0, #0]
 800de20:	115e      	asrs	r6, r3, #5
 800de22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800de26:	f013 031f 	ands.w	r3, r3, #31
 800de2a:	b087      	sub	sp, #28
 800de2c:	bf18      	it	ne
 800de2e:	3604      	addne	r6, #4
 800de30:	2500      	movs	r5, #0
 800de32:	1f37      	subs	r7, r6, #4
 800de34:	4682      	mov	sl, r0
 800de36:	4690      	mov	r8, r2
 800de38:	9301      	str	r3, [sp, #4]
 800de3a:	f846 5c04 	str.w	r5, [r6, #-4]
 800de3e:	46b9      	mov	r9, r7
 800de40:	463c      	mov	r4, r7
 800de42:	9502      	str	r5, [sp, #8]
 800de44:	46ab      	mov	fp, r5
 800de46:	784a      	ldrb	r2, [r1, #1]
 800de48:	1c4b      	adds	r3, r1, #1
 800de4a:	9303      	str	r3, [sp, #12]
 800de4c:	b342      	cbz	r2, 800dea0 <__hexnan+0x88>
 800de4e:	4610      	mov	r0, r2
 800de50:	9105      	str	r1, [sp, #20]
 800de52:	9204      	str	r2, [sp, #16]
 800de54:	f7ff fd94 	bl	800d980 <__hexdig_fun>
 800de58:	2800      	cmp	r0, #0
 800de5a:	d151      	bne.n	800df00 <__hexnan+0xe8>
 800de5c:	9a04      	ldr	r2, [sp, #16]
 800de5e:	9905      	ldr	r1, [sp, #20]
 800de60:	2a20      	cmp	r2, #32
 800de62:	d818      	bhi.n	800de96 <__hexnan+0x7e>
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	459b      	cmp	fp, r3
 800de68:	dd13      	ble.n	800de92 <__hexnan+0x7a>
 800de6a:	454c      	cmp	r4, r9
 800de6c:	d206      	bcs.n	800de7c <__hexnan+0x64>
 800de6e:	2d07      	cmp	r5, #7
 800de70:	dc04      	bgt.n	800de7c <__hexnan+0x64>
 800de72:	462a      	mov	r2, r5
 800de74:	4649      	mov	r1, r9
 800de76:	4620      	mov	r0, r4
 800de78:	f7ff ffa8 	bl	800ddcc <L_shift>
 800de7c:	4544      	cmp	r4, r8
 800de7e:	d952      	bls.n	800df26 <__hexnan+0x10e>
 800de80:	2300      	movs	r3, #0
 800de82:	f1a4 0904 	sub.w	r9, r4, #4
 800de86:	f844 3c04 	str.w	r3, [r4, #-4]
 800de8a:	f8cd b008 	str.w	fp, [sp, #8]
 800de8e:	464c      	mov	r4, r9
 800de90:	461d      	mov	r5, r3
 800de92:	9903      	ldr	r1, [sp, #12]
 800de94:	e7d7      	b.n	800de46 <__hexnan+0x2e>
 800de96:	2a29      	cmp	r2, #41	@ 0x29
 800de98:	d157      	bne.n	800df4a <__hexnan+0x132>
 800de9a:	3102      	adds	r1, #2
 800de9c:	f8ca 1000 	str.w	r1, [sl]
 800dea0:	f1bb 0f00 	cmp.w	fp, #0
 800dea4:	d051      	beq.n	800df4a <__hexnan+0x132>
 800dea6:	454c      	cmp	r4, r9
 800dea8:	d206      	bcs.n	800deb8 <__hexnan+0xa0>
 800deaa:	2d07      	cmp	r5, #7
 800deac:	dc04      	bgt.n	800deb8 <__hexnan+0xa0>
 800deae:	462a      	mov	r2, r5
 800deb0:	4649      	mov	r1, r9
 800deb2:	4620      	mov	r0, r4
 800deb4:	f7ff ff8a 	bl	800ddcc <L_shift>
 800deb8:	4544      	cmp	r4, r8
 800deba:	d936      	bls.n	800df2a <__hexnan+0x112>
 800debc:	f1a8 0204 	sub.w	r2, r8, #4
 800dec0:	4623      	mov	r3, r4
 800dec2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dec6:	f842 1f04 	str.w	r1, [r2, #4]!
 800deca:	429f      	cmp	r7, r3
 800decc:	d2f9      	bcs.n	800dec2 <__hexnan+0xaa>
 800dece:	1b3b      	subs	r3, r7, r4
 800ded0:	f023 0303 	bic.w	r3, r3, #3
 800ded4:	3304      	adds	r3, #4
 800ded6:	3401      	adds	r4, #1
 800ded8:	3e03      	subs	r6, #3
 800deda:	42b4      	cmp	r4, r6
 800dedc:	bf88      	it	hi
 800dede:	2304      	movhi	r3, #4
 800dee0:	4443      	add	r3, r8
 800dee2:	2200      	movs	r2, #0
 800dee4:	f843 2b04 	str.w	r2, [r3], #4
 800dee8:	429f      	cmp	r7, r3
 800deea:	d2fb      	bcs.n	800dee4 <__hexnan+0xcc>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	b91b      	cbnz	r3, 800def8 <__hexnan+0xe0>
 800def0:	4547      	cmp	r7, r8
 800def2:	d128      	bne.n	800df46 <__hexnan+0x12e>
 800def4:	2301      	movs	r3, #1
 800def6:	603b      	str	r3, [r7, #0]
 800def8:	2005      	movs	r0, #5
 800defa:	b007      	add	sp, #28
 800defc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df00:	3501      	adds	r5, #1
 800df02:	2d08      	cmp	r5, #8
 800df04:	f10b 0b01 	add.w	fp, fp, #1
 800df08:	dd06      	ble.n	800df18 <__hexnan+0x100>
 800df0a:	4544      	cmp	r4, r8
 800df0c:	d9c1      	bls.n	800de92 <__hexnan+0x7a>
 800df0e:	2300      	movs	r3, #0
 800df10:	f844 3c04 	str.w	r3, [r4, #-4]
 800df14:	2501      	movs	r5, #1
 800df16:	3c04      	subs	r4, #4
 800df18:	6822      	ldr	r2, [r4, #0]
 800df1a:	f000 000f 	and.w	r0, r0, #15
 800df1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df22:	6020      	str	r0, [r4, #0]
 800df24:	e7b5      	b.n	800de92 <__hexnan+0x7a>
 800df26:	2508      	movs	r5, #8
 800df28:	e7b3      	b.n	800de92 <__hexnan+0x7a>
 800df2a:	9b01      	ldr	r3, [sp, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d0dd      	beq.n	800deec <__hexnan+0xd4>
 800df30:	f1c3 0320 	rsb	r3, r3, #32
 800df34:	f04f 32ff 	mov.w	r2, #4294967295
 800df38:	40da      	lsrs	r2, r3
 800df3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800df3e:	4013      	ands	r3, r2
 800df40:	f846 3c04 	str.w	r3, [r6, #-4]
 800df44:	e7d2      	b.n	800deec <__hexnan+0xd4>
 800df46:	3f04      	subs	r7, #4
 800df48:	e7d0      	b.n	800deec <__hexnan+0xd4>
 800df4a:	2004      	movs	r0, #4
 800df4c:	e7d5      	b.n	800defa <__hexnan+0xe2>

0800df4e <__ascii_mbtowc>:
 800df4e:	b082      	sub	sp, #8
 800df50:	b901      	cbnz	r1, 800df54 <__ascii_mbtowc+0x6>
 800df52:	a901      	add	r1, sp, #4
 800df54:	b142      	cbz	r2, 800df68 <__ascii_mbtowc+0x1a>
 800df56:	b14b      	cbz	r3, 800df6c <__ascii_mbtowc+0x1e>
 800df58:	7813      	ldrb	r3, [r2, #0]
 800df5a:	600b      	str	r3, [r1, #0]
 800df5c:	7812      	ldrb	r2, [r2, #0]
 800df5e:	1e10      	subs	r0, r2, #0
 800df60:	bf18      	it	ne
 800df62:	2001      	movne	r0, #1
 800df64:	b002      	add	sp, #8
 800df66:	4770      	bx	lr
 800df68:	4610      	mov	r0, r2
 800df6a:	e7fb      	b.n	800df64 <__ascii_mbtowc+0x16>
 800df6c:	f06f 0001 	mvn.w	r0, #1
 800df70:	e7f8      	b.n	800df64 <__ascii_mbtowc+0x16>

0800df72 <_realloc_r>:
 800df72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df76:	4680      	mov	r8, r0
 800df78:	4615      	mov	r5, r2
 800df7a:	460c      	mov	r4, r1
 800df7c:	b921      	cbnz	r1, 800df88 <_realloc_r+0x16>
 800df7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df82:	4611      	mov	r1, r2
 800df84:	f7fd be6c 	b.w	800bc60 <_malloc_r>
 800df88:	b92a      	cbnz	r2, 800df96 <_realloc_r+0x24>
 800df8a:	f7fd fdf5 	bl	800bb78 <_free_r>
 800df8e:	2400      	movs	r4, #0
 800df90:	4620      	mov	r0, r4
 800df92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df96:	f000 f840 	bl	800e01a <_malloc_usable_size_r>
 800df9a:	4285      	cmp	r5, r0
 800df9c:	4606      	mov	r6, r0
 800df9e:	d802      	bhi.n	800dfa6 <_realloc_r+0x34>
 800dfa0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dfa4:	d8f4      	bhi.n	800df90 <_realloc_r+0x1e>
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	f7fd fe59 	bl	800bc60 <_malloc_r>
 800dfae:	4607      	mov	r7, r0
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d0ec      	beq.n	800df8e <_realloc_r+0x1c>
 800dfb4:	42b5      	cmp	r5, r6
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	4621      	mov	r1, r4
 800dfba:	bf28      	it	cs
 800dfbc:	4632      	movcs	r2, r6
 800dfbe:	f7fc ff7a 	bl	800aeb6 <memcpy>
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	4640      	mov	r0, r8
 800dfc6:	f7fd fdd7 	bl	800bb78 <_free_r>
 800dfca:	463c      	mov	r4, r7
 800dfcc:	e7e0      	b.n	800df90 <_realloc_r+0x1e>

0800dfce <__ascii_wctomb>:
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	b141      	cbz	r1, 800dfe6 <__ascii_wctomb+0x18>
 800dfd4:	2aff      	cmp	r2, #255	@ 0xff
 800dfd6:	d904      	bls.n	800dfe2 <__ascii_wctomb+0x14>
 800dfd8:	228a      	movs	r2, #138	@ 0x8a
 800dfda:	601a      	str	r2, [r3, #0]
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	4770      	bx	lr
 800dfe2:	700a      	strb	r2, [r1, #0]
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	4770      	bx	lr

0800dfe8 <fiprintf>:
 800dfe8:	b40e      	push	{r1, r2, r3}
 800dfea:	b503      	push	{r0, r1, lr}
 800dfec:	4601      	mov	r1, r0
 800dfee:	ab03      	add	r3, sp, #12
 800dff0:	4805      	ldr	r0, [pc, #20]	@ (800e008 <fiprintf+0x20>)
 800dff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff6:	6800      	ldr	r0, [r0, #0]
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	f000 f83f 	bl	800e07c <_vfiprintf_r>
 800dffe:	b002      	add	sp, #8
 800e000:	f85d eb04 	ldr.w	lr, [sp], #4
 800e004:	b003      	add	sp, #12
 800e006:	4770      	bx	lr
 800e008:	20000034 	.word	0x20000034

0800e00c <abort>:
 800e00c:	b508      	push	{r3, lr}
 800e00e:	2006      	movs	r0, #6
 800e010:	f000 fa08 	bl	800e424 <raise>
 800e014:	2001      	movs	r0, #1
 800e016:	f7f4 fdd9 	bl	8002bcc <_exit>

0800e01a <_malloc_usable_size_r>:
 800e01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01e:	1f18      	subs	r0, r3, #4
 800e020:	2b00      	cmp	r3, #0
 800e022:	bfbc      	itt	lt
 800e024:	580b      	ldrlt	r3, [r1, r0]
 800e026:	18c0      	addlt	r0, r0, r3
 800e028:	4770      	bx	lr

0800e02a <__sfputc_r>:
 800e02a:	6893      	ldr	r3, [r2, #8]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	b410      	push	{r4}
 800e032:	6093      	str	r3, [r2, #8]
 800e034:	da08      	bge.n	800e048 <__sfputc_r+0x1e>
 800e036:	6994      	ldr	r4, [r2, #24]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	db01      	blt.n	800e040 <__sfputc_r+0x16>
 800e03c:	290a      	cmp	r1, #10
 800e03e:	d103      	bne.n	800e048 <__sfputc_r+0x1e>
 800e040:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e044:	f000 b932 	b.w	800e2ac <__swbuf_r>
 800e048:	6813      	ldr	r3, [r2, #0]
 800e04a:	1c58      	adds	r0, r3, #1
 800e04c:	6010      	str	r0, [r2, #0]
 800e04e:	7019      	strb	r1, [r3, #0]
 800e050:	4608      	mov	r0, r1
 800e052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <__sfputs_r>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	4606      	mov	r6, r0
 800e05c:	460f      	mov	r7, r1
 800e05e:	4614      	mov	r4, r2
 800e060:	18d5      	adds	r5, r2, r3
 800e062:	42ac      	cmp	r4, r5
 800e064:	d101      	bne.n	800e06a <__sfputs_r+0x12>
 800e066:	2000      	movs	r0, #0
 800e068:	e007      	b.n	800e07a <__sfputs_r+0x22>
 800e06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06e:	463a      	mov	r2, r7
 800e070:	4630      	mov	r0, r6
 800e072:	f7ff ffda 	bl	800e02a <__sfputc_r>
 800e076:	1c43      	adds	r3, r0, #1
 800e078:	d1f3      	bne.n	800e062 <__sfputs_r+0xa>
 800e07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e07c <_vfiprintf_r>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	460d      	mov	r5, r1
 800e082:	b09d      	sub	sp, #116	@ 0x74
 800e084:	4614      	mov	r4, r2
 800e086:	4698      	mov	r8, r3
 800e088:	4606      	mov	r6, r0
 800e08a:	b118      	cbz	r0, 800e094 <_vfiprintf_r+0x18>
 800e08c:	6a03      	ldr	r3, [r0, #32]
 800e08e:	b90b      	cbnz	r3, 800e094 <_vfiprintf_r+0x18>
 800e090:	f7fc fdc4 	bl	800ac1c <__sinit>
 800e094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e096:	07d9      	lsls	r1, r3, #31
 800e098:	d405      	bmi.n	800e0a6 <_vfiprintf_r+0x2a>
 800e09a:	89ab      	ldrh	r3, [r5, #12]
 800e09c:	059a      	lsls	r2, r3, #22
 800e09e:	d402      	bmi.n	800e0a6 <_vfiprintf_r+0x2a>
 800e0a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0a2:	f7fc ff06 	bl	800aeb2 <__retarget_lock_acquire_recursive>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	071b      	lsls	r3, r3, #28
 800e0aa:	d501      	bpl.n	800e0b0 <_vfiprintf_r+0x34>
 800e0ac:	692b      	ldr	r3, [r5, #16]
 800e0ae:	b99b      	cbnz	r3, 800e0d8 <_vfiprintf_r+0x5c>
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 f938 	bl	800e328 <__swsetup_r>
 800e0b8:	b170      	cbz	r0, 800e0d8 <_vfiprintf_r+0x5c>
 800e0ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0bc:	07dc      	lsls	r4, r3, #31
 800e0be:	d504      	bpl.n	800e0ca <_vfiprintf_r+0x4e>
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	b01d      	add	sp, #116	@ 0x74
 800e0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ca:	89ab      	ldrh	r3, [r5, #12]
 800e0cc:	0598      	lsls	r0, r3, #22
 800e0ce:	d4f7      	bmi.n	800e0c0 <_vfiprintf_r+0x44>
 800e0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0d2:	f7fc feef 	bl	800aeb4 <__retarget_lock_release_recursive>
 800e0d6:	e7f3      	b.n	800e0c0 <_vfiprintf_r+0x44>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0dc:	2320      	movs	r3, #32
 800e0de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e6:	2330      	movs	r3, #48	@ 0x30
 800e0e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e298 <_vfiprintf_r+0x21c>
 800e0ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0f0:	f04f 0901 	mov.w	r9, #1
 800e0f4:	4623      	mov	r3, r4
 800e0f6:	469a      	mov	sl, r3
 800e0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0fc:	b10a      	cbz	r2, 800e102 <_vfiprintf_r+0x86>
 800e0fe:	2a25      	cmp	r2, #37	@ 0x25
 800e100:	d1f9      	bne.n	800e0f6 <_vfiprintf_r+0x7a>
 800e102:	ebba 0b04 	subs.w	fp, sl, r4
 800e106:	d00b      	beq.n	800e120 <_vfiprintf_r+0xa4>
 800e108:	465b      	mov	r3, fp
 800e10a:	4622      	mov	r2, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ffa2 	bl	800e058 <__sfputs_r>
 800e114:	3001      	adds	r0, #1
 800e116:	f000 80a7 	beq.w	800e268 <_vfiprintf_r+0x1ec>
 800e11a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e11c:	445a      	add	r2, fp
 800e11e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e120:	f89a 3000 	ldrb.w	r3, [sl]
 800e124:	2b00      	cmp	r3, #0
 800e126:	f000 809f 	beq.w	800e268 <_vfiprintf_r+0x1ec>
 800e12a:	2300      	movs	r3, #0
 800e12c:	f04f 32ff 	mov.w	r2, #4294967295
 800e130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e134:	f10a 0a01 	add.w	sl, sl, #1
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	9307      	str	r3, [sp, #28]
 800e13c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e140:	931a      	str	r3, [sp, #104]	@ 0x68
 800e142:	4654      	mov	r4, sl
 800e144:	2205      	movs	r2, #5
 800e146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14a:	4853      	ldr	r0, [pc, #332]	@ (800e298 <_vfiprintf_r+0x21c>)
 800e14c:	f7f2 f818 	bl	8000180 <memchr>
 800e150:	9a04      	ldr	r2, [sp, #16]
 800e152:	b9d8      	cbnz	r0, 800e18c <_vfiprintf_r+0x110>
 800e154:	06d1      	lsls	r1, r2, #27
 800e156:	bf44      	itt	mi
 800e158:	2320      	movmi	r3, #32
 800e15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e15e:	0713      	lsls	r3, r2, #28
 800e160:	bf44      	itt	mi
 800e162:	232b      	movmi	r3, #43	@ 0x2b
 800e164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e168:	f89a 3000 	ldrb.w	r3, [sl]
 800e16c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e16e:	d015      	beq.n	800e19c <_vfiprintf_r+0x120>
 800e170:	9a07      	ldr	r2, [sp, #28]
 800e172:	4654      	mov	r4, sl
 800e174:	2000      	movs	r0, #0
 800e176:	f04f 0c0a 	mov.w	ip, #10
 800e17a:	4621      	mov	r1, r4
 800e17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e180:	3b30      	subs	r3, #48	@ 0x30
 800e182:	2b09      	cmp	r3, #9
 800e184:	d94b      	bls.n	800e21e <_vfiprintf_r+0x1a2>
 800e186:	b1b0      	cbz	r0, 800e1b6 <_vfiprintf_r+0x13a>
 800e188:	9207      	str	r2, [sp, #28]
 800e18a:	e014      	b.n	800e1b6 <_vfiprintf_r+0x13a>
 800e18c:	eba0 0308 	sub.w	r3, r0, r8
 800e190:	fa09 f303 	lsl.w	r3, r9, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	9304      	str	r3, [sp, #16]
 800e198:	46a2      	mov	sl, r4
 800e19a:	e7d2      	b.n	800e142 <_vfiprintf_r+0xc6>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	1d19      	adds	r1, r3, #4
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	9103      	str	r1, [sp, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	bfbb      	ittet	lt
 800e1a8:	425b      	neglt	r3, r3
 800e1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ae:	9307      	strge	r3, [sp, #28]
 800e1b0:	9307      	strlt	r3, [sp, #28]
 800e1b2:	bfb8      	it	lt
 800e1b4:	9204      	strlt	r2, [sp, #16]
 800e1b6:	7823      	ldrb	r3, [r4, #0]
 800e1b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1ba:	d10a      	bne.n	800e1d2 <_vfiprintf_r+0x156>
 800e1bc:	7863      	ldrb	r3, [r4, #1]
 800e1be:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1c0:	d132      	bne.n	800e228 <_vfiprintf_r+0x1ac>
 800e1c2:	9b03      	ldr	r3, [sp, #12]
 800e1c4:	1d1a      	adds	r2, r3, #4
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	9203      	str	r2, [sp, #12]
 800e1ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1ce:	3402      	adds	r4, #2
 800e1d0:	9305      	str	r3, [sp, #20]
 800e1d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2a8 <_vfiprintf_r+0x22c>
 800e1d6:	7821      	ldrb	r1, [r4, #0]
 800e1d8:	2203      	movs	r2, #3
 800e1da:	4650      	mov	r0, sl
 800e1dc:	f7f1 ffd0 	bl	8000180 <memchr>
 800e1e0:	b138      	cbz	r0, 800e1f2 <_vfiprintf_r+0x176>
 800e1e2:	9b04      	ldr	r3, [sp, #16]
 800e1e4:	eba0 000a 	sub.w	r0, r0, sl
 800e1e8:	2240      	movs	r2, #64	@ 0x40
 800e1ea:	4082      	lsls	r2, r0
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	3401      	adds	r4, #1
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f6:	4829      	ldr	r0, [pc, #164]	@ (800e29c <_vfiprintf_r+0x220>)
 800e1f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1fc:	2206      	movs	r2, #6
 800e1fe:	f7f1 ffbf 	bl	8000180 <memchr>
 800e202:	2800      	cmp	r0, #0
 800e204:	d03f      	beq.n	800e286 <_vfiprintf_r+0x20a>
 800e206:	4b26      	ldr	r3, [pc, #152]	@ (800e2a0 <_vfiprintf_r+0x224>)
 800e208:	bb1b      	cbnz	r3, 800e252 <_vfiprintf_r+0x1d6>
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	3307      	adds	r3, #7
 800e20e:	f023 0307 	bic.w	r3, r3, #7
 800e212:	3308      	adds	r3, #8
 800e214:	9303      	str	r3, [sp, #12]
 800e216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e218:	443b      	add	r3, r7
 800e21a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e21c:	e76a      	b.n	800e0f4 <_vfiprintf_r+0x78>
 800e21e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e222:	460c      	mov	r4, r1
 800e224:	2001      	movs	r0, #1
 800e226:	e7a8      	b.n	800e17a <_vfiprintf_r+0xfe>
 800e228:	2300      	movs	r3, #0
 800e22a:	3401      	adds	r4, #1
 800e22c:	9305      	str	r3, [sp, #20]
 800e22e:	4619      	mov	r1, r3
 800e230:	f04f 0c0a 	mov.w	ip, #10
 800e234:	4620      	mov	r0, r4
 800e236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e23a:	3a30      	subs	r2, #48	@ 0x30
 800e23c:	2a09      	cmp	r2, #9
 800e23e:	d903      	bls.n	800e248 <_vfiprintf_r+0x1cc>
 800e240:	2b00      	cmp	r3, #0
 800e242:	d0c6      	beq.n	800e1d2 <_vfiprintf_r+0x156>
 800e244:	9105      	str	r1, [sp, #20]
 800e246:	e7c4      	b.n	800e1d2 <_vfiprintf_r+0x156>
 800e248:	fb0c 2101 	mla	r1, ip, r1, r2
 800e24c:	4604      	mov	r4, r0
 800e24e:	2301      	movs	r3, #1
 800e250:	e7f0      	b.n	800e234 <_vfiprintf_r+0x1b8>
 800e252:	ab03      	add	r3, sp, #12
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	462a      	mov	r2, r5
 800e258:	4b12      	ldr	r3, [pc, #72]	@ (800e2a4 <_vfiprintf_r+0x228>)
 800e25a:	a904      	add	r1, sp, #16
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7fb fe85 	bl	8009f6c <_printf_float>
 800e262:	4607      	mov	r7, r0
 800e264:	1c78      	adds	r0, r7, #1
 800e266:	d1d6      	bne.n	800e216 <_vfiprintf_r+0x19a>
 800e268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e26a:	07d9      	lsls	r1, r3, #31
 800e26c:	d405      	bmi.n	800e27a <_vfiprintf_r+0x1fe>
 800e26e:	89ab      	ldrh	r3, [r5, #12]
 800e270:	059a      	lsls	r2, r3, #22
 800e272:	d402      	bmi.n	800e27a <_vfiprintf_r+0x1fe>
 800e274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e276:	f7fc fe1d 	bl	800aeb4 <__retarget_lock_release_recursive>
 800e27a:	89ab      	ldrh	r3, [r5, #12]
 800e27c:	065b      	lsls	r3, r3, #25
 800e27e:	f53f af1f 	bmi.w	800e0c0 <_vfiprintf_r+0x44>
 800e282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e284:	e71e      	b.n	800e0c4 <_vfiprintf_r+0x48>
 800e286:	ab03      	add	r3, sp, #12
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	462a      	mov	r2, r5
 800e28c:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <_vfiprintf_r+0x228>)
 800e28e:	a904      	add	r1, sp, #16
 800e290:	4630      	mov	r0, r6
 800e292:	f7fc f903 	bl	800a49c <_printf_i>
 800e296:	e7e4      	b.n	800e262 <_vfiprintf_r+0x1e6>
 800e298:	0800ed11 	.word	0x0800ed11
 800e29c:	0800ed1b 	.word	0x0800ed1b
 800e2a0:	08009f6d 	.word	0x08009f6d
 800e2a4:	0800e059 	.word	0x0800e059
 800e2a8:	0800ed17 	.word	0x0800ed17

0800e2ac <__swbuf_r>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	460e      	mov	r6, r1
 800e2b0:	4614      	mov	r4, r2
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	b118      	cbz	r0, 800e2be <__swbuf_r+0x12>
 800e2b6:	6a03      	ldr	r3, [r0, #32]
 800e2b8:	b90b      	cbnz	r3, 800e2be <__swbuf_r+0x12>
 800e2ba:	f7fc fcaf 	bl	800ac1c <__sinit>
 800e2be:	69a3      	ldr	r3, [r4, #24]
 800e2c0:	60a3      	str	r3, [r4, #8]
 800e2c2:	89a3      	ldrh	r3, [r4, #12]
 800e2c4:	071a      	lsls	r2, r3, #28
 800e2c6:	d501      	bpl.n	800e2cc <__swbuf_r+0x20>
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	b943      	cbnz	r3, 800e2de <__swbuf_r+0x32>
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f000 f82a 	bl	800e328 <__swsetup_r>
 800e2d4:	b118      	cbz	r0, 800e2de <__swbuf_r+0x32>
 800e2d6:	f04f 37ff 	mov.w	r7, #4294967295
 800e2da:	4638      	mov	r0, r7
 800e2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2de:	6823      	ldr	r3, [r4, #0]
 800e2e0:	6922      	ldr	r2, [r4, #16]
 800e2e2:	1a98      	subs	r0, r3, r2
 800e2e4:	6963      	ldr	r3, [r4, #20]
 800e2e6:	b2f6      	uxtb	r6, r6
 800e2e8:	4283      	cmp	r3, r0
 800e2ea:	4637      	mov	r7, r6
 800e2ec:	dc05      	bgt.n	800e2fa <__swbuf_r+0x4e>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f7ff fa53 	bl	800d79c <_fflush_r>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	d1ed      	bne.n	800e2d6 <__swbuf_r+0x2a>
 800e2fa:	68a3      	ldr	r3, [r4, #8]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	60a3      	str	r3, [r4, #8]
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	6022      	str	r2, [r4, #0]
 800e306:	701e      	strb	r6, [r3, #0]
 800e308:	6962      	ldr	r2, [r4, #20]
 800e30a:	1c43      	adds	r3, r0, #1
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d004      	beq.n	800e31a <__swbuf_r+0x6e>
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	07db      	lsls	r3, r3, #31
 800e314:	d5e1      	bpl.n	800e2da <__swbuf_r+0x2e>
 800e316:	2e0a      	cmp	r6, #10
 800e318:	d1df      	bne.n	800e2da <__swbuf_r+0x2e>
 800e31a:	4621      	mov	r1, r4
 800e31c:	4628      	mov	r0, r5
 800e31e:	f7ff fa3d 	bl	800d79c <_fflush_r>
 800e322:	2800      	cmp	r0, #0
 800e324:	d0d9      	beq.n	800e2da <__swbuf_r+0x2e>
 800e326:	e7d6      	b.n	800e2d6 <__swbuf_r+0x2a>

0800e328 <__swsetup_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4b29      	ldr	r3, [pc, #164]	@ (800e3d0 <__swsetup_r+0xa8>)
 800e32c:	4605      	mov	r5, r0
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	460c      	mov	r4, r1
 800e332:	b118      	cbz	r0, 800e33c <__swsetup_r+0x14>
 800e334:	6a03      	ldr	r3, [r0, #32]
 800e336:	b90b      	cbnz	r3, 800e33c <__swsetup_r+0x14>
 800e338:	f7fc fc70 	bl	800ac1c <__sinit>
 800e33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e340:	0719      	lsls	r1, r3, #28
 800e342:	d422      	bmi.n	800e38a <__swsetup_r+0x62>
 800e344:	06da      	lsls	r2, r3, #27
 800e346:	d407      	bmi.n	800e358 <__swsetup_r+0x30>
 800e348:	2209      	movs	r2, #9
 800e34a:	602a      	str	r2, [r5, #0]
 800e34c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e350:	81a3      	strh	r3, [r4, #12]
 800e352:	f04f 30ff 	mov.w	r0, #4294967295
 800e356:	e033      	b.n	800e3c0 <__swsetup_r+0x98>
 800e358:	0758      	lsls	r0, r3, #29
 800e35a:	d512      	bpl.n	800e382 <__swsetup_r+0x5a>
 800e35c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e35e:	b141      	cbz	r1, 800e372 <__swsetup_r+0x4a>
 800e360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e364:	4299      	cmp	r1, r3
 800e366:	d002      	beq.n	800e36e <__swsetup_r+0x46>
 800e368:	4628      	mov	r0, r5
 800e36a:	f7fd fc05 	bl	800bb78 <_free_r>
 800e36e:	2300      	movs	r3, #0
 800e370:	6363      	str	r3, [r4, #52]	@ 0x34
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	2300      	movs	r3, #0
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	6923      	ldr	r3, [r4, #16]
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	f043 0308 	orr.w	r3, r3, #8
 800e388:	81a3      	strh	r3, [r4, #12]
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	b94b      	cbnz	r3, 800e3a2 <__swsetup_r+0x7a>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e398:	d003      	beq.n	800e3a2 <__swsetup_r+0x7a>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4628      	mov	r0, r5
 800e39e:	f000 f883 	bl	800e4a8 <__smakebuf_r>
 800e3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3a6:	f013 0201 	ands.w	r2, r3, #1
 800e3aa:	d00a      	beq.n	800e3c2 <__swsetup_r+0x9a>
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	60a2      	str	r2, [r4, #8]
 800e3b0:	6962      	ldr	r2, [r4, #20]
 800e3b2:	4252      	negs	r2, r2
 800e3b4:	61a2      	str	r2, [r4, #24]
 800e3b6:	6922      	ldr	r2, [r4, #16]
 800e3b8:	b942      	cbnz	r2, 800e3cc <__swsetup_r+0xa4>
 800e3ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3be:	d1c5      	bne.n	800e34c <__swsetup_r+0x24>
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	0799      	lsls	r1, r3, #30
 800e3c4:	bf58      	it	pl
 800e3c6:	6962      	ldrpl	r2, [r4, #20]
 800e3c8:	60a2      	str	r2, [r4, #8]
 800e3ca:	e7f4      	b.n	800e3b6 <__swsetup_r+0x8e>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	e7f7      	b.n	800e3c0 <__swsetup_r+0x98>
 800e3d0:	20000034 	.word	0x20000034

0800e3d4 <_raise_r>:
 800e3d4:	291f      	cmp	r1, #31
 800e3d6:	b538      	push	{r3, r4, r5, lr}
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	d904      	bls.n	800e3e8 <_raise_r+0x14>
 800e3de:	2316      	movs	r3, #22
 800e3e0:	6003      	str	r3, [r0, #0]
 800e3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3ea:	b112      	cbz	r2, 800e3f2 <_raise_r+0x1e>
 800e3ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3f0:	b94b      	cbnz	r3, 800e406 <_raise_r+0x32>
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 f830 	bl	800e458 <_getpid_r>
 800e3f8:	4622      	mov	r2, r4
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e402:	f000 b817 	b.w	800e434 <_kill_r>
 800e406:	2b01      	cmp	r3, #1
 800e408:	d00a      	beq.n	800e420 <_raise_r+0x4c>
 800e40a:	1c59      	adds	r1, r3, #1
 800e40c:	d103      	bne.n	800e416 <_raise_r+0x42>
 800e40e:	2316      	movs	r3, #22
 800e410:	6003      	str	r3, [r0, #0]
 800e412:	2001      	movs	r0, #1
 800e414:	e7e7      	b.n	800e3e6 <_raise_r+0x12>
 800e416:	2100      	movs	r1, #0
 800e418:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e41c:	4620      	mov	r0, r4
 800e41e:	4798      	blx	r3
 800e420:	2000      	movs	r0, #0
 800e422:	e7e0      	b.n	800e3e6 <_raise_r+0x12>

0800e424 <raise>:
 800e424:	4b02      	ldr	r3, [pc, #8]	@ (800e430 <raise+0xc>)
 800e426:	4601      	mov	r1, r0
 800e428:	6818      	ldr	r0, [r3, #0]
 800e42a:	f7ff bfd3 	b.w	800e3d4 <_raise_r>
 800e42e:	bf00      	nop
 800e430:	20000034 	.word	0x20000034

0800e434 <_kill_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d07      	ldr	r5, [pc, #28]	@ (800e454 <_kill_r+0x20>)
 800e438:	2300      	movs	r3, #0
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	4611      	mov	r1, r2
 800e440:	602b      	str	r3, [r5, #0]
 800e442:	f7f4 fbb3 	bl	8002bac <_kill>
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	d102      	bne.n	800e450 <_kill_r+0x1c>
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	b103      	cbz	r3, 800e450 <_kill_r+0x1c>
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	20006f24 	.word	0x20006f24

0800e458 <_getpid_r>:
 800e458:	f7f4 bba0 	b.w	8002b9c <_getpid>

0800e45c <__swhatbuf_r>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	460c      	mov	r4, r1
 800e460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e464:	2900      	cmp	r1, #0
 800e466:	b096      	sub	sp, #88	@ 0x58
 800e468:	4615      	mov	r5, r2
 800e46a:	461e      	mov	r6, r3
 800e46c:	da0d      	bge.n	800e48a <__swhatbuf_r+0x2e>
 800e46e:	89a3      	ldrh	r3, [r4, #12]
 800e470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e474:	f04f 0100 	mov.w	r1, #0
 800e478:	bf14      	ite	ne
 800e47a:	2340      	movne	r3, #64	@ 0x40
 800e47c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e480:	2000      	movs	r0, #0
 800e482:	6031      	str	r1, [r6, #0]
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	b016      	add	sp, #88	@ 0x58
 800e488:	bd70      	pop	{r4, r5, r6, pc}
 800e48a:	466a      	mov	r2, sp
 800e48c:	f000 f848 	bl	800e520 <_fstat_r>
 800e490:	2800      	cmp	r0, #0
 800e492:	dbec      	blt.n	800e46e <__swhatbuf_r+0x12>
 800e494:	9901      	ldr	r1, [sp, #4]
 800e496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e49a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e49e:	4259      	negs	r1, r3
 800e4a0:	4159      	adcs	r1, r3
 800e4a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4a6:	e7eb      	b.n	800e480 <__swhatbuf_r+0x24>

0800e4a8 <__smakebuf_r>:
 800e4a8:	898b      	ldrh	r3, [r1, #12]
 800e4aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ac:	079d      	lsls	r5, r3, #30
 800e4ae:	4606      	mov	r6, r0
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	d507      	bpl.n	800e4c4 <__smakebuf_r+0x1c>
 800e4b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	6123      	str	r3, [r4, #16]
 800e4bc:	2301      	movs	r3, #1
 800e4be:	6163      	str	r3, [r4, #20]
 800e4c0:	b003      	add	sp, #12
 800e4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4c4:	ab01      	add	r3, sp, #4
 800e4c6:	466a      	mov	r2, sp
 800e4c8:	f7ff ffc8 	bl	800e45c <__swhatbuf_r>
 800e4cc:	9f00      	ldr	r7, [sp, #0]
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7fd fbc4 	bl	800bc60 <_malloc_r>
 800e4d8:	b948      	cbnz	r0, 800e4ee <__smakebuf_r+0x46>
 800e4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4de:	059a      	lsls	r2, r3, #22
 800e4e0:	d4ee      	bmi.n	800e4c0 <__smakebuf_r+0x18>
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	f043 0302 	orr.w	r3, r3, #2
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	e7e2      	b.n	800e4b4 <__smakebuf_r+0xc>
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	6020      	str	r0, [r4, #0]
 800e4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4f6:	81a3      	strh	r3, [r4, #12]
 800e4f8:	9b01      	ldr	r3, [sp, #4]
 800e4fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4fe:	b15b      	cbz	r3, 800e518 <__smakebuf_r+0x70>
 800e500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e504:	4630      	mov	r0, r6
 800e506:	f000 f81d 	bl	800e544 <_isatty_r>
 800e50a:	b128      	cbz	r0, 800e518 <__smakebuf_r+0x70>
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	f023 0303 	bic.w	r3, r3, #3
 800e512:	f043 0301 	orr.w	r3, r3, #1
 800e516:	81a3      	strh	r3, [r4, #12]
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	431d      	orrs	r5, r3
 800e51c:	81a5      	strh	r5, [r4, #12]
 800e51e:	e7cf      	b.n	800e4c0 <__smakebuf_r+0x18>

0800e520 <_fstat_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d07      	ldr	r5, [pc, #28]	@ (800e540 <_fstat_r+0x20>)
 800e524:	2300      	movs	r3, #0
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	4611      	mov	r1, r2
 800e52c:	602b      	str	r3, [r5, #0]
 800e52e:	f7f4 fb81 	bl	8002c34 <_fstat>
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	d102      	bne.n	800e53c <_fstat_r+0x1c>
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	b103      	cbz	r3, 800e53c <_fstat_r+0x1c>
 800e53a:	6023      	str	r3, [r4, #0]
 800e53c:	bd38      	pop	{r3, r4, r5, pc}
 800e53e:	bf00      	nop
 800e540:	20006f24 	.word	0x20006f24

0800e544 <_isatty_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d06      	ldr	r5, [pc, #24]	@ (800e560 <_isatty_r+0x1c>)
 800e548:	2300      	movs	r3, #0
 800e54a:	4604      	mov	r4, r0
 800e54c:	4608      	mov	r0, r1
 800e54e:	602b      	str	r3, [r5, #0]
 800e550:	f7f4 fb80 	bl	8002c54 <_isatty>
 800e554:	1c43      	adds	r3, r0, #1
 800e556:	d102      	bne.n	800e55e <_isatty_r+0x1a>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	b103      	cbz	r3, 800e55e <_isatty_r+0x1a>
 800e55c:	6023      	str	r3, [r4, #0]
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	20006f24 	.word	0x20006f24

0800e564 <_init>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	bf00      	nop
 800e568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56a:	bc08      	pop	{r3}
 800e56c:	469e      	mov	lr, r3
 800e56e:	4770      	bx	lr

0800e570 <_fini>:
 800e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e572:	bf00      	nop
 800e574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e576:	bc08      	pop	{r3}
 800e578:	469e      	mov	lr, r3
 800e57a:	4770      	bx	lr
