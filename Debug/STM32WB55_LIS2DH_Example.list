
STM32WB55_LIS2DH_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5e4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000778  0800d728  0800d728  0000e728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dea0  0800dea0  0000eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dea8  0800dea8  0000eea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800deac  0800deac  0000eeac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000004  0800deb0  0000f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000028c8  200001f0  0800e09c  0000f1f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002ab8  0800e09c  0000fab8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e3d7  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eca  00000000  00000000  0002d5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001de0  00000000  00000000  000314c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016e8  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000253ff  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000210b9  00000000  00000000  00059d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e2b53  00000000  00000000  0007ae48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0015d99b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009344  00000000  00000000  0015d9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  00166d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f0 	.word	0x200001f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d70c 	.word	0x0800d70c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f4 	.word	0x200001f4
 800017c:	0800d70c 	.word	0x0800d70c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <SELECT+0x1c>)
 8000fa0:	f001 feca 	bl	8002d38 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f001 fc4f 	bl	8002848 <HAL_Delay>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000800 	.word	0x48000800

08000fb4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fbe:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <DESELECT+0x1c>)
 8000fc0:	f001 feba 	bl	8002d38 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 fc3f 	bl	8002848 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fde:	bf00      	nop
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <SPI_TxByte+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d1f8      	bne.n	8000fe0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fee:	1df9      	adds	r1, r7, #7
 8000ff0:	2364      	movs	r3, #100	@ 0x64
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <SPI_TxByte+0x30>)
 8000ff6:	f003 ff7f 	bl	8004ef8 <HAL_SPI_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200002e4 	.word	0x200002e4

08001008 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001014:	bf00      	nop
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <SPI_TxBuffer+0x30>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b02      	cmp	r3, #2
 8001022:	d1f8      	bne.n	8001016 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	2364      	movs	r3, #100	@ 0x64
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	4803      	ldr	r0, [pc, #12]	@ (8001038 <SPI_TxBuffer+0x30>)
 800102c:	f003 ff64 	bl	8004ef8 <HAL_SPI_Transmit>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002e4 	.word	0x200002e4

0800103c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001042:	23ff      	movs	r3, #255	@ 0xff
 8001044:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001046:	bf00      	nop
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <SPI_RxByte+0x34>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b02      	cmp	r3, #2
 8001054:	d1f8      	bne.n	8001048 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001056:	1dba      	adds	r2, r7, #6
 8001058:	1df9      	adds	r1, r7, #7
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <SPI_RxByte+0x34>)
 8001062:	f004 f8be 	bl	80051e2 <HAL_SPI_TransmitReceive>

  return data;
 8001066:	79bb      	ldrb	r3, [r7, #6]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200002e4 	.word	0x200002e4

08001074 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800107c:	f7ff ffde 	bl	800103c <SPI_RxByte>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	701a      	strb	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <SD_ReadyWait+0x30>)
 8001098:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800109c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800109e:	f7ff ffcd 	bl	800103c <SPI_RxByte>
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2bff      	cmp	r3, #255	@ 0xff
 80010aa:	d004      	beq.n	80010b6 <SD_ReadyWait+0x26>
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SD_ReadyWait+0x30>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f3      	bne.n	800109e <SD_ReadyWait+0xe>

  return res;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20002926 	.word	0x20002926

080010c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80010ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010ce:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80010d0:	f7ff ff70 	bl	8000fb4 <DESELECT>
  for(int i = 0; i < 10; i++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	e005      	b.n	80010e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80010da:	20ff      	movs	r0, #255	@ 0xff
 80010dc:	f7ff ff7a 	bl	8000fd4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b09      	cmp	r3, #9
 80010ea:	ddf6      	ble.n	80010da <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80010ec:	f7ff ff52 	bl	8000f94 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80010f0:	2340      	movs	r3, #64	@ 0x40
 80010f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001104:	2395      	movs	r3, #149	@ 0x95
 8001106:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001108:	463b      	mov	r3, r7
 800110a:	2106      	movs	r1, #6
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff7b 	bl	8001008 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001112:	e002      	b.n	800111a <SD_PowerOn+0x56>
  {
    cnt--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3b01      	subs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800111a:	f7ff ff8f 	bl	800103c <SPI_RxByte>
 800111e:	4603      	mov	r3, r0
 8001120:	2b01      	cmp	r3, #1
 8001122:	d002      	beq.n	800112a <SD_PowerOn+0x66>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f4      	bne.n	8001114 <SD_PowerOn+0x50>
  }

  DESELECT();
 800112a:	f7ff ff43 	bl	8000fb4 <DESELECT>
  SPI_TxByte(0XFF);
 800112e:	20ff      	movs	r0, #255	@ 0xff
 8001130:	f7ff ff50 	bl	8000fd4 <SPI_TxByte>

  PowerFlag = 1;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <SD_PowerOn+0x80>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000020d 	.word	0x2000020d

08001148 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <SD_PowerOff+0x14>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	2000020d 	.word	0x2000020d

08001160 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return PowerFlag;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <SD_CheckPower+0x14>)
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	2000020d 	.word	0x2000020d

08001178 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001184:	22c8      	movs	r2, #200	@ 0xc8
 8001186:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8001188:	f7ff ff58 	bl	800103c <SPI_RxByte>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2bff      	cmp	r3, #255	@ 0xff
 8001194:	d104      	bne.n	80011a0 <SD_RxDataBlock+0x28>
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <SD_RxDataBlock+0x5c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f3      	bne.n	8001188 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80011a4:	d001      	beq.n	80011aa <SD_RxDataBlock+0x32>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e00f      	b.n	80011ca <SD_RxDataBlock+0x52>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <SPI_RxBytePtr>
  } while(len--);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	1e5a      	subs	r2, r3, #1
 80011ba:	603a      	str	r2, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f4      	bne.n	80011aa <SD_RxDataBlock+0x32>

  /* discard CRC */
  SPI_RxByte();
 80011c0:	f7ff ff3c 	bl	800103c <SPI_RxByte>
  SPI_RxByte();
 80011c4:	f7ff ff3a 	bl	800103c <SPI_RxByte>

  return TRUE;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20002925 	.word	0x20002925

080011d8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80011e8:	f7ff ff52 	bl	8001090 <SD_ReadyWait>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2bff      	cmp	r3, #255	@ 0xff
 80011f0:	d001      	beq.n	80011f6 <SD_TxDataBlock+0x1e>
 80011f2:	2300      	movs	r3, #0
 80011f4:	e02f      	b.n	8001256 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feeb 	bl	8000fd4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	2bfd      	cmp	r3, #253	@ 0xfd
 8001202:	d020      	beq.n	8001246 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fefd 	bl	8001008 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800120e:	f7ff ff15 	bl	800103c <SPI_RxByte>
    SPI_RxByte();
 8001212:	f7ff ff13 	bl	800103c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001216:	e00b      	b.n	8001230 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001218:	f7ff ff10 	bl	800103c <SPI_RxByte>
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2b05      	cmp	r3, #5
 8001228:	d006      	beq.n	8001238 <SD_TxDataBlock+0x60>
      i++;
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	2b40      	cmp	r3, #64	@ 0x40
 8001234:	d9f0      	bls.n	8001218 <SD_TxDataBlock+0x40>
 8001236:	e000      	b.n	800123a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001238:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800123a:	bf00      	nop
 800123c:	f7ff fefe 	bl	800103c <SPI_RxByte>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0fa      	beq.n	800123c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b05      	cmp	r3, #5
 800124e:	d101      	bne.n	8001254 <SD_TxDataBlock+0x7c>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <SD_TxDataBlock+0x7e>

  return FALSE;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	6039      	str	r1, [r7, #0]
 8001268:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800126a:	f7ff ff11 	bl	8001090 <SD_ReadyWait>
 800126e:	4603      	mov	r3, r0
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d001      	beq.n	8001278 <SD_SendCmd+0x1a>
 8001274:	23ff      	movs	r3, #255	@ 0xff
 8001276:	e042      	b.n	80012fe <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff feaa 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	0e1b      	lsrs	r3, r3, #24
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fea4 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe9e 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe98 	bl	8000fd4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe93 	bl	8000fd4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b40      	cmp	r3, #64	@ 0x40
 80012b2:	d102      	bne.n	80012ba <SD_SendCmd+0x5c>
 80012b4:	2395      	movs	r3, #149	@ 0x95
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e007      	b.n	80012ca <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b48      	cmp	r3, #72	@ 0x48
 80012be:	d102      	bne.n	80012c6 <SD_SendCmd+0x68>
 80012c0:	2387      	movs	r3, #135	@ 0x87
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <SD_SendCmd+0x6c>
  else crc = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe81 	bl	8000fd4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b4c      	cmp	r3, #76	@ 0x4c
 80012d6:	d101      	bne.n	80012dc <SD_SendCmd+0x7e>
 80012d8:	f7ff feb0 	bl	800103c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80012dc:	230a      	movs	r3, #10
 80012de:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80012e0:	f7ff feac 	bl	800103c <SPI_RxByte>
 80012e4:	4603      	mov	r3, r0
 80012e6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80012e8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da05      	bge.n	80012fc <SD_SendCmd+0x9e>
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f1      	bne.n	80012e0 <SD_SendCmd+0x82>

  return res;
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SD_disk_initialize+0x14>
 8001318:	2301      	movs	r3, #1
 800131a:	e0d6      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800131c:	4b6d      	ldr	r3, [pc, #436]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <SD_disk_initialize+0x2a>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	e0cb      	b.n	80014ca <SD_disk_initialize+0x1c2>

  /* power on */
  SD_PowerOn();
 8001332:	f7ff fec7 	bl	80010c4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8001336:	f7ff fe2d 	bl	8000f94 <SELECT>

  /* check disk type */
  type = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800133e:	2100      	movs	r1, #0
 8001340:	2040      	movs	r0, #64	@ 0x40
 8001342:	f7ff ff8c 	bl	800125e <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	f040 80a6 	bne.w	800149a <SD_disk_initialize+0x192>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800134e:	4b62      	ldr	r3, [pc, #392]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001354:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001356:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800135a:	2048      	movs	r0, #72	@ 0x48
 800135c:	f7ff ff7f 	bl	800125e <SD_SendCmd>
 8001360:	4603      	mov	r3, r0
 8001362:	2b01      	cmp	r3, #1
 8001364:	d158      	bne.n	8001418 <SD_disk_initialize+0x110>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8001366:	2300      	movs	r3, #0
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e00c      	b.n	8001386 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800136c:	7bfc      	ldrb	r4, [r7, #15]
 800136e:	f7ff fe65 	bl	800103c <SPI_RxByte>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	f104 0310 	add.w	r3, r4, #16
 800137a:	443b      	add	r3, r7
 800137c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d9ef      	bls.n	800136c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800138c:	7abb      	ldrb	r3, [r7, #10]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8083 	bne.w	800149a <SD_disk_initialize+0x192>
 8001394:	7afb      	ldrb	r3, [r7, #11]
 8001396:	2baa      	cmp	r3, #170	@ 0xaa
 8001398:	d17f      	bne.n	800149a <SD_disk_initialize+0x192>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800139a:	2100      	movs	r1, #0
 800139c:	2077      	movs	r0, #119	@ 0x77
 800139e:	f7ff ff5e 	bl	800125e <SD_SendCmd>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d807      	bhi.n	80013b8 <SD_disk_initialize+0xb0>
 80013a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ac:	2069      	movs	r0, #105	@ 0x69
 80013ae:	f7ff ff56 	bl	800125e <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <SD_disk_initialize+0xbc>
        } while (Timer1);
 80013b8:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1eb      	bne.n	800139a <SD_disk_initialize+0x92>
 80013c2:	e000      	b.n	80013c6 <SD_disk_initialize+0xbe>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013c4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013c6:	4b44      	ldr	r3, [pc, #272]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d064      	beq.n	800149a <SD_disk_initialize+0x192>
 80013d0:	2100      	movs	r1, #0
 80013d2:	207a      	movs	r0, #122	@ 0x7a
 80013d4:	f7ff ff43 	bl	800125e <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d15d      	bne.n	800149a <SD_disk_initialize+0x192>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	e00c      	b.n	80013fe <SD_disk_initialize+0xf6>
          {
            ocr[n] = SPI_RxByte();
 80013e4:	7bfc      	ldrb	r4, [r7, #15]
 80013e6:	f7ff fe29 	bl	800103c <SPI_RxByte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	f104 0310 	add.w	r3, r4, #16
 80013f2:	443b      	add	r3, r7
 80013f4:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d9ef      	bls.n	80013e4 <SD_disk_initialize+0xdc>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001404:	7a3b      	ldrb	r3, [r7, #8]
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SD_disk_initialize+0x10a>
 800140e:	230c      	movs	r3, #12
 8001410:	e000      	b.n	8001414 <SD_disk_initialize+0x10c>
 8001412:	2304      	movs	r3, #4
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e040      	b.n	800149a <SD_disk_initialize+0x192>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001418:	2100      	movs	r1, #0
 800141a:	2077      	movs	r0, #119	@ 0x77
 800141c:	f7ff ff1f 	bl	800125e <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d808      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001426:	2100      	movs	r1, #0
 8001428:	2069      	movs	r0, #105	@ 0x69
 800142a:	f7ff ff18 	bl	800125e <SD_SendCmd>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d801      	bhi.n	8001438 <SD_disk_initialize+0x130>
 8001434:	2302      	movs	r3, #2
 8001436:	e000      	b.n	800143a <SD_disk_initialize+0x132>
 8001438:	2301      	movs	r3, #1
 800143a:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d10e      	bne.n	8001460 <SD_disk_initialize+0x158>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001442:	2100      	movs	r1, #0
 8001444:	2077      	movs	r0, #119	@ 0x77
 8001446:	f7ff ff0a 	bl	800125e <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d80e      	bhi.n	800146e <SD_disk_initialize+0x166>
 8001450:	2100      	movs	r1, #0
 8001452:	2069      	movs	r0, #105	@ 0x69
 8001454:	f7ff ff03 	bl	800125e <SD_SendCmd>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <SD_disk_initialize+0x166>
 800145e:	e00d      	b.n	800147c <SD_disk_initialize+0x174>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001460:	2100      	movs	r1, #0
 8001462:	2041      	movs	r0, #65	@ 0x41
 8001464:	f7ff fefb 	bl	800125e <SD_SendCmd>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <SD_disk_initialize+0x172>
        }

      } while (Timer1);
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e1      	bne.n	800143c <SD_disk_initialize+0x134>
 8001478:	e000      	b.n	800147c <SD_disk_initialize+0x174>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800147a:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <SD_disk_initialize+0x1d0>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <SD_disk_initialize+0x18e>
 8001486:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148a:	2050      	movs	r0, #80	@ 0x50
 800148c:	f7ff fee7 	bl	800125e <SD_SendCmd>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SD_disk_initialize+0x192>
 8001496:	2300      	movs	r3, #0
 8001498:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <SD_disk_initialize+0x1d4>)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80014a0:	f7ff fd88 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80014a4:	f7ff fdca 	bl	800103c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <SD_disk_initialize+0x1b8>
  {
    Stat &= ~STA_NOINIT;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e001      	b.n	80014c4 <SD_disk_initialize+0x1bc>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80014c0:	f7ff fe42 	bl	8001148 <SD_PowerOff>
  }

  return Stat;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <SD_disk_initialize+0x1cc>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000004 	.word	0x20000004
 80014d8:	20002925 	.word	0x20002925
 80014dc:	2000020c 	.word	0x2000020c

080014e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_status+0x14>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e002      	b.n	80014fa <SD_disk_status+0x1a>
  return Stat;
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SD_disk_status+0x28>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000004 	.word	0x20000004

0800150c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <SD_disk_read+0x1c>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <SD_disk_read+0x20>
 8001528:	2304      	movs	r3, #4
 800152a:	e051      	b.n	80015d0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SD_disk_read+0xcc>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SD_disk_read+0x32>
 800153a:	2303      	movs	r3, #3
 800153c:	e048      	b.n	80015d0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <SD_disk_read+0xd0>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <SD_disk_read+0x44>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001550:	f7ff fd20 	bl	8000f94 <SELECT>

  if (count == 1)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d111      	bne.n	800157e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	2051      	movs	r0, #81	@ 0x51
 800155e:	f7ff fe7e 	bl	800125e <SD_SendCmd>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d129      	bne.n	80015bc <SD_disk_read+0xb0>
 8001568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f7ff fe03 	bl	8001178 <SD_RxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d021      	beq.n	80015bc <SD_disk_read+0xb0>
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	e01e      	b.n	80015bc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2052      	movs	r0, #82	@ 0x52
 8001582:	f7ff fe6c 	bl	800125e <SD_SendCmd>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d117      	bne.n	80015bc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800158c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff fdf1 	bl	8001178 <SD_RxDataBlock>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <SD_disk_read+0xa6>
        buff += 512;
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ed      	bne.n	800158c <SD_disk_read+0x80>
 80015b0:	e000      	b.n	80015b4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80015b2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80015b4:	2100      	movs	r1, #0
 80015b6:	204c      	movs	r0, #76	@ 0x4c
 80015b8:	f7ff fe51 	bl	800125e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80015bc:	f7ff fcfa 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80015c0:	f7ff fd3c 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2301      	movne	r3, #1
 80015cc:	2300      	moveq	r3, #0
 80015ce:	b2db      	uxtb	r3, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000004 	.word	0x20000004
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <SD_disk_write+0x1c>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <SD_disk_write+0x20>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e06b      	b.n	80016d8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <SD_disk_write+0x100>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SD_disk_write+0x32>
 800160e:	2303      	movs	r3, #3
 8001610:	e062      	b.n	80016d8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <SD_disk_write+0x100>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SD_disk_write+0x44>
 8001620:	2302      	movs	r3, #2
 8001622:	e059      	b.n	80016d8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001624:	4b2f      	ldr	r3, [pc, #188]	@ (80016e4 <SD_disk_write+0x104>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <SD_disk_write+0x56>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	607b      	str	r3, [r7, #4]

  SELECT();
 8001636:	f7ff fcad 	bl	8000f94 <SELECT>

  if (count == 1)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d110      	bne.n	8001662 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	2058      	movs	r0, #88	@ 0x58
 8001644:	f7ff fe0b 	bl	800125e <SD_SendCmd>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13a      	bne.n	80016c4 <SD_disk_write+0xe4>
 800164e:	21fe      	movs	r1, #254	@ 0xfe
 8001650:	68b8      	ldr	r0, [r7, #8]
 8001652:	f7ff fdc1 	bl	80011d8 <SD_TxDataBlock>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d033      	beq.n	80016c4 <SD_disk_write+0xe4>
      count = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	e030      	b.n	80016c4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001662:	4b20      	ldr	r3, [pc, #128]	@ (80016e4 <SD_disk_write+0x104>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800166e:	2100      	movs	r1, #0
 8001670:	2077      	movs	r0, #119	@ 0x77
 8001672:	f7ff fdf4 	bl	800125e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	2057      	movs	r0, #87	@ 0x57
 800167a:	f7ff fdf0 	bl	800125e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2059      	movs	r0, #89	@ 0x59
 8001682:	f7ff fdec 	bl	800125e <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11b      	bne.n	80016c4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800168c:	21fc      	movs	r1, #252	@ 0xfc
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7ff fda2 	bl	80011d8 <SD_TxDataBlock>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00a      	beq.n	80016b0 <SD_disk_write+0xd0>
        buff += 512;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ee      	bne.n	800168c <SD_disk_write+0xac>
 80016ae:	e000      	b.n	80016b2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016b0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80016b2:	21fd      	movs	r1, #253	@ 0xfd
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fd8f 	bl	80011d8 <SD_TxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <SD_disk_write+0xe4>
      {
        count = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80016c4:	f7ff fc76 	bl	8000fb4 <DESELECT>
  SPI_RxByte();
 80016c8:	f7ff fcb8 	bl	800103c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000004 	.word	0x20000004
 80016e4:	2000020c 	.word	0x2000020c

080016e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b08b      	sub	sp, #44	@ 0x2c
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SD_disk_ioctl+0x1e>
 8001702:	2304      	movs	r3, #4
 8001704:	e113      	b.n	800192e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800170c:	79bb      	ldrb	r3, [r7, #6]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d124      	bne.n	800175c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d012      	beq.n	8001740 <SD_disk_ioctl+0x58>
 800171a:	2b02      	cmp	r3, #2
 800171c:	dc1a      	bgt.n	8001754 <SD_disk_ioctl+0x6c>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <SD_disk_ioctl+0x40>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d006      	beq.n	8001734 <SD_disk_ioctl+0x4c>
 8001726:	e015      	b.n	8001754 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001728:	f7ff fd0e 	bl	8001148 <SD_PowerOff>
      res = RES_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001732:	e0fa      	b.n	800192a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001734:	f7ff fcc6 	bl	80010c4 <SD_PowerOn>
      res = RES_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800173e:	e0f4      	b.n	800192a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	1c5c      	adds	r4, r3, #1
 8001744:	f7ff fd0c 	bl	8001160 <SD_CheckPower>
 8001748:	4603      	mov	r3, r0
 800174a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800174c:	2300      	movs	r3, #0
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001752:	e0ea      	b.n	800192a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001754:	2304      	movs	r3, #4
 8001756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800175a:	e0e6      	b.n	800192a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800175c:	4b76      	ldr	r3, [pc, #472]	@ (8001938 <SD_disk_ioctl+0x250>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x86>
 800176a:	2303      	movs	r3, #3
 800176c:	e0df      	b.n	800192e <SD_disk_ioctl+0x246>

    SELECT();
 800176e:	f7ff fc11 	bl	8000f94 <SELECT>

    switch (ctrl)
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	2b0d      	cmp	r3, #13
 8001776:	f200 80c9 	bhi.w	800190c <SD_disk_ioctl+0x224>
 800177a:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <SD_disk_ioctl+0x98>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001877 	.word	0x08001877
 8001784:	080017b9 	.word	0x080017b9
 8001788:	08001867 	.word	0x08001867
 800178c:	0800190d 	.word	0x0800190d
 8001790:	0800190d 	.word	0x0800190d
 8001794:	0800190d 	.word	0x0800190d
 8001798:	0800190d 	.word	0x0800190d
 800179c:	0800190d 	.word	0x0800190d
 80017a0:	0800190d 	.word	0x0800190d
 80017a4:	0800190d 	.word	0x0800190d
 80017a8:	0800190d 	.word	0x0800190d
 80017ac:	08001889 	.word	0x08001889
 80017b0:	080018ad 	.word	0x080018ad
 80017b4:	080018d1 	.word	0x080018d1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017b8:	2100      	movs	r1, #0
 80017ba:	2049      	movs	r0, #73	@ 0x49
 80017bc:	f7ff fd4f 	bl	800125e <SD_SendCmd>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80a6 	bne.w	8001914 <SD_disk_ioctl+0x22c>
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2110      	movs	r1, #16
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fcd2 	bl	8001178 <SD_RxDataBlock>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 809c 	beq.w	8001914 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10d      	bne.n	8001802 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	461a      	mov	r2, r3
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80017f8:	8bfb      	ldrh	r3, [r7, #30]
 80017fa:	029a      	lsls	r2, r3, #10
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e02d      	b.n	800185e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001802:	7c7b      	ldrb	r3, [r7, #17]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7dbb      	ldrb	r3, [r7, #22]
 800180c:	09db      	lsrs	r3, r3, #7
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b2da      	uxtb	r2, r3
 8001814:	7d7b      	ldrb	r3, [r7, #21]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0306 	and.w	r3, r3, #6
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4413      	add	r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3302      	adds	r3, #2
 8001826:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800182a:	7d3b      	ldrb	r3, [r7, #20]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b29b      	uxth	r3, r3
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	7cbb      	ldrb	r3, [r7, #18]
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	b29b      	uxth	r3, r3
 8001842:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001846:	b29b      	uxth	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001850:	8bfa      	ldrh	r2, [r7, #30]
 8001852:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001856:	3b09      	subs	r3, #9
 8001858:	409a      	lsls	r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001864:	e056      	b.n	8001914 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800186c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001874:	e055      	b.n	8001922 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001876:	f7ff fc0b 	bl	8001090 <SD_ReadyWait>
 800187a:	4603      	mov	r3, r0
 800187c:	2bff      	cmp	r3, #255	@ 0xff
 800187e:	d14b      	bne.n	8001918 <SD_disk_ioctl+0x230>
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001886:	e047      	b.n	8001918 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001888:	2100      	movs	r1, #0
 800188a:	2049      	movs	r0, #73	@ 0x49
 800188c:	f7ff fce7 	bl	800125e <SD_SendCmd>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d142      	bne.n	800191c <SD_disk_ioctl+0x234>
 8001896:	2110      	movs	r1, #16
 8001898:	6a38      	ldr	r0, [r7, #32]
 800189a:	f7ff fc6d 	bl	8001178 <SD_RxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03b      	beq.n	800191c <SD_disk_ioctl+0x234>
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018aa:	e037      	b.n	800191c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018ac:	2100      	movs	r1, #0
 80018ae:	204a      	movs	r0, #74	@ 0x4a
 80018b0:	f7ff fcd5 	bl	800125e <SD_SendCmd>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d132      	bne.n	8001920 <SD_disk_ioctl+0x238>
 80018ba:	2110      	movs	r1, #16
 80018bc:	6a38      	ldr	r0, [r7, #32]
 80018be:	f7ff fc5b 	bl	8001178 <SD_RxDataBlock>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d02b      	beq.n	8001920 <SD_disk_ioctl+0x238>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80018ce:	e027      	b.n	8001920 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80018d0:	2100      	movs	r1, #0
 80018d2:	207a      	movs	r0, #122	@ 0x7a
 80018d4:	f7ff fcc3 	bl	800125e <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d116      	bne.n	800190c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018e4:	e00b      	b.n	80018fe <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80018e6:	6a3c      	ldr	r4, [r7, #32]
 80018e8:	1c63      	adds	r3, r4, #1
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	f7ff fba6 	bl	800103c <SPI_RxByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80018f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018f8:	3301      	adds	r3, #1
 80018fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001902:	2b03      	cmp	r3, #3
 8001904:	d9ef      	bls.n	80018e6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800190c:	2304      	movs	r3, #4
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001912:	e006      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <SD_disk_ioctl+0x23a>
      break;
 8001920:	bf00      	nop
    }

    DESELECT();
 8001922:	f7ff fb47 	bl	8000fb4 <DESELECT>
    SPI_RxByte();
 8001926:	f7ff fb89 	bl	800103c <SPI_RxByte>
  }

  return res;
 800192a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800192e:	4618      	mov	r0, r3
 8001930:	372c      	adds	r7, #44	@ 0x2c
 8001932:	46bd      	mov	sp, r7
 8001934:	bd90      	pop	{r4, r7, pc}
 8001936:	bf00      	nop
 8001938:	20000004 	.word	0x20000004

0800193c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001944:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001948:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001954:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001958:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800195c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00b      	beq.n	800197c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001964:	e000      	b.n	8001968 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001966:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001968:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f9      	beq.n	8001966 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001972:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199a:	f023 0218 	bic.w	r2, r3, #24
 800199e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e009      	b.n	8001a0e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	60ba      	str	r2, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff9a 	bl	800193c <ITM_SendChar>
  for (int i = 0; i < len; i++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf1      	blt.n	80019fa <_write+0x12>
  }
  return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <logging_sdcard>:

/* Main Example --------------------------------------------------------------*/
void logging_sdcard(char *data)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b0a6      	sub	sp, #152	@ 0x98
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  char Data[BUFFER_SIZE];
  send_uart("START LOGGING\n");
 8001a28:	487b      	ldr	r0, [pc, #492]	@ (8001c18 <logging_sdcard+0x1f8>)
 8001a2a:	f000 f91f 	bl	8001c6c <send_uart>
  memcpy(Data, data, sizeof(buffer));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4611      	mov	r1, r2
 8001a36:	2280      	movs	r2, #128	@ 0x80
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f008 fb10 	bl	800a05e <memcpy>

  // Mount SDCard
  send_uart("MOUNTING_SD_CARD\n");
 8001a3e:	4877      	ldr	r0, [pc, #476]	@ (8001c1c <logging_sdcard+0x1fc>)
 8001a40:	f000 f914 	bl	8001c6c <send_uart>
  HAL_Delay(1000);
 8001a44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a48:	f000 fefe 	bl	8002848 <HAL_Delay>

  fresult = f_mount(&fs, "", 1); /* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4974      	ldr	r1, [pc, #464]	@ (8001c20 <logging_sdcard+0x200>)
 8001a50:	4874      	ldr	r0, [pc, #464]	@ (8001c24 <logging_sdcard+0x204>)
 8001a52:	f006 fc3b 	bl	80082cc <f_mount>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <logging_sdcard+0x208>)
 8001a5c:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK)
 8001a5e:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <logging_sdcard+0x208>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d020      	beq.n	8001aa8 <logging_sdcard+0x88>
  {
    send_uart("*************************************\n");
 8001a66:	4871      	ldr	r0, [pc, #452]	@ (8001c2c <logging_sdcard+0x20c>)
 8001a68:	f000 f900 	bl	8001c6c <send_uart>
    send_uart("ERR_MOUNTING_SD_CARD\n");
 8001a6c:	4870      	ldr	r0, [pc, #448]	@ (8001c30 <logging_sdcard+0x210>)
 8001a6e:	f000 f8fd 	bl	8001c6c <send_uart>
    send_uart("*************************************\n");
 8001a72:	486e      	ldr	r0, [pc, #440]	@ (8001c2c <logging_sdcard+0x20c>)
 8001a74:	f000 f8fa 	bl	8001c6c <send_uart>
    for (int x = 0; x < 6; x++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a7e:	e00e      	b.n	8001a9e <logging_sdcard+0x7e>
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001a80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f001 f96e 	bl	8002d68 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8001a8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a90:	f000 feda 	bl	8002848 <HAL_Delay>
    for (int x = 0; x < 6; x++)
 8001a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	ddec      	ble.n	8001a80 <logging_sdcard+0x60>
 8001aa6:	e008      	b.n	8001aba <logging_sdcard+0x9a>
    }
  }
  else
  {
    send_uart("*************************************\n");
 8001aa8:	4860      	ldr	r0, [pc, #384]	@ (8001c2c <logging_sdcard+0x20c>)
 8001aaa:	f000 f8df 	bl	8001c6c <send_uart>
    send_uart("SUCC_MOUNTING_SD_CARD\n");
 8001aae:	4861      	ldr	r0, [pc, #388]	@ (8001c34 <logging_sdcard+0x214>)
 8001ab0:	f000 f8dc 	bl	8001c6c <send_uart>
    send_uart("*************************************\n");
 8001ab4:	485d      	ldr	r0, [pc, #372]	@ (8001c2c <logging_sdcard+0x20c>)
 8001ab6:	f000 f8d9 	bl	8001c6c <send_uart>
  }

  /*************** Card capacity details ********************/
  /*Checking free space*/
  f_getfree("", &fre_clust, &pfs);
 8001aba:	4a5f      	ldr	r2, [pc, #380]	@ (8001c38 <logging_sdcard+0x218>)
 8001abc:	495f      	ldr	r1, [pc, #380]	@ (8001c3c <logging_sdcard+0x21c>)
 8001abe:	4858      	ldr	r0, [pc, #352]	@ (8001c20 <logging_sdcard+0x200>)
 8001ac0:	f007 f9ad 	bl	8008e1e <f_getfree>
  total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8001c38 <logging_sdcard+0x218>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	3b02      	subs	r3, #2
 8001acc:	4a5a      	ldr	r2, [pc, #360]	@ (8001c38 <logging_sdcard+0x218>)
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	8952      	ldrh	r2, [r2, #10]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fcec 	bl	80004b4 <__aeabi_ui2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b57      	ldr	r3, [pc, #348]	@ (8001c40 <logging_sdcard+0x220>)
 8001ae2:	f7fe fd61 	bl	80005a8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f833 	bl	8000b58 <__aeabi_d2uiz>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a53      	ldr	r2, [pc, #332]	@ (8001c44 <logging_sdcard+0x224>)
 8001af6:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_TOTAL_SIZE: \t%lu\n", total);
 8001af8:	4b52      	ldr	r3, [pc, #328]	@ (8001c44 <logging_sdcard+0x224>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4952      	ldr	r1, [pc, #328]	@ (8001c48 <logging_sdcard+0x228>)
 8001b00:	4852      	ldr	r0, [pc, #328]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b02:	f008 f9c9 	bl	8009e98 <siprintf>
  send_uart(buffer);
 8001b06:	4851      	ldr	r0, [pc, #324]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b08:	f000 f8b0 	bl	8001c6c <send_uart>
  clear_buffer();
 8001b0c:	f000 f8de 	bl	8001ccc <clear_buffer>
  free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8001b10:	4b49      	ldr	r3, [pc, #292]	@ (8001c38 <logging_sdcard+0x218>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	895b      	ldrh	r3, [r3, #10]
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b48      	ldr	r3, [pc, #288]	@ (8001c3c <logging_sdcard+0x21c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fcc7 	bl	80004b4 <__aeabi_ui2d>
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <logging_sdcard+0x220>)
 8001b2c:	f7fe fd3c 	bl	80005a8 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7ff f80e 	bl	8000b58 <__aeabi_d2uiz>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <logging_sdcard+0x230>)
 8001b40:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD_FREE_SPACE: \t%lu\n", free_space);
 8001b42:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <logging_sdcard+0x230>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4942      	ldr	r1, [pc, #264]	@ (8001c54 <logging_sdcard+0x234>)
 8001b4a:	4840      	ldr	r0, [pc, #256]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b4c:	f008 f9a4 	bl	8009e98 <siprintf>
  send_uart(buffer);
 8001b50:	483e      	ldr	r0, [pc, #248]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b52:	f000 f88b 	bl	8001c6c <send_uart>
  clear_buffer();
 8001b56:	f000 f8b9 	bl	8001ccc <clear_buffer>

  sprintf(buffer, Data);
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	483a      	ldr	r0, [pc, #232]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b62:	f008 f999 	bl	8009e98 <siprintf>
  if (f_open(&fil, "fileAAA.txt", FA_OPEN_APPEND | FA_WRITE) == FR_OK)
 8001b66:	2232      	movs	r2, #50	@ 0x32
 8001b68:	493b      	ldr	r1, [pc, #236]	@ (8001c58 <logging_sdcard+0x238>)
 8001b6a:	483c      	ldr	r0, [pc, #240]	@ (8001c5c <logging_sdcard+0x23c>)
 8001b6c:	f006 fbf4 	bl	8008358 <f_open>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10f      	bne.n	8001b96 <logging_sdcard+0x176>
  {
    send_uart(buffer);
 8001b76:	4835      	ldr	r0, [pc, #212]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b78:	f000 f878 	bl	8001c6c <send_uart>
    f_write(&fil, buffer, bufsize(buffer), 0);
 8001b7c:	4833      	ldr	r0, [pc, #204]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b7e:	f000 f88d 	bl	8001c9c <bufsize>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	4930      	ldr	r1, [pc, #192]	@ (8001c4c <logging_sdcard+0x22c>)
 8001b8a:	4834      	ldr	r0, [pc, #208]	@ (8001c5c <logging_sdcard+0x23c>)
 8001b8c:	f006 ff0b 	bl	80089a6 <f_write>
    f_close(&fil);
 8001b90:	4832      	ldr	r0, [pc, #200]	@ (8001c5c <logging_sdcard+0x23c>)
 8001b92:	f007 f91a 	bl	8008dca <f_close>
  }

  /* Open file to read */
  fresult = f_open(&fil, "fileAAA.txt", FA_OPEN_EXISTING | FA_READ);
 8001b96:	2201      	movs	r2, #1
 8001b98:	492f      	ldr	r1, [pc, #188]	@ (8001c58 <logging_sdcard+0x238>)
 8001b9a:	4830      	ldr	r0, [pc, #192]	@ (8001c5c <logging_sdcard+0x23c>)
 8001b9c:	f006 fbdc 	bl	8008358 <f_open>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <logging_sdcard+0x208>)
 8001ba6:	701a      	strb	r2, [r3, #0]
  memset(buffer,0,128);
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	2100      	movs	r1, #0
 8001bac:	4827      	ldr	r0, [pc, #156]	@ (8001c4c <logging_sdcard+0x22c>)
 8001bae:	f008 f9d6 	bl	8009f5e <memset>
  uint64_t size = fil.obj.objsize;
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <logging_sdcard+0x23c>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	461c      	mov	r4, r3
 8001bba:	4615      	mov	r5, r2
 8001bbc:	e9c7 4522 	strd	r4, r5, [r7, #136]	@ 0x88
  f_read(&fil, buffer, size, 0);
 8001bc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	4921      	ldr	r1, [pc, #132]	@ (8001c4c <logging_sdcard+0x22c>)
 8001bc8:	4824      	ldr	r0, [pc, #144]	@ (8001c5c <logging_sdcard+0x23c>)
 8001bca:	f006 fd8d 	bl	80086e8 <f_read>

  send_uart("file1.txt is opened and it contains the data as shown below:\n");
 8001bce:	4824      	ldr	r0, [pc, #144]	@ (8001c60 <logging_sdcard+0x240>)
 8001bd0:	f000 f84c 	bl	8001c6c <send_uart>
  send_uart(buffer);
 8001bd4:	481d      	ldr	r0, [pc, #116]	@ (8001c4c <logging_sdcard+0x22c>)
 8001bd6:	f000 f849 	bl	8001c6c <send_uart>
  send_uart("\n\n");
 8001bda:	4822      	ldr	r0, [pc, #136]	@ (8001c64 <logging_sdcard+0x244>)
 8001bdc:	f000 f846 	bl	8001c6c <send_uart>
  f_close(&fil);
 8001be0:	481e      	ldr	r0, [pc, #120]	@ (8001c5c <logging_sdcard+0x23c>)
 8001be2:	f007 f8f2 	bl	8008dca <f_close>
  clear_buffer();
 8001be6:	f000 f871 	bl	8001ccc <clear_buffer>

  /* Unmount SDCARD */
  fresult = f_mount(NULL, "", 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <logging_sdcard+0x200>)
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f006 fb6c 	bl	80082cc <f_mount>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <logging_sdcard+0x208>)
 8001bfa:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK)
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <logging_sdcard+0x208>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <logging_sdcard+0x1ea>
  {
    send_uart("SD CARD UNMOUNTED successfully...\n");
 8001c04:	4818      	ldr	r0, [pc, #96]	@ (8001c68 <logging_sdcard+0x248>)
 8001c06:	f000 f831 	bl	8001c6c <send_uart>
  }
  clear_buffer();
 8001c0a:	f000 f85f 	bl	8001ccc <clear_buffer>
}
 8001c0e:	bf00      	nop
 8001c10:	3798      	adds	r7, #152	@ 0x98
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bdb0      	pop	{r4, r5, r7, pc}
 8001c16:	bf00      	nop
 8001c18:	0800d728 	.word	0x0800d728
 8001c1c:	0800d738 	.word	0x0800d738
 8001c20:	0800d74c 	.word	0x0800d74c
 8001c24:	200006b8 	.word	0x200006b8
 8001c28:	2000271c 	.word	0x2000271c
 8001c2c:	0800d750 	.word	0x0800d750
 8001c30:	0800d778 	.word	0x0800d778
 8001c34:	0800d790 	.word	0x0800d790
 8001c38:	20002720 	.word	0x20002720
 8001c3c:	20002724 	.word	0x20002724
 8001c40:	3fe00000 	.word	0x3fe00000
 8001c44:	20002728 	.word	0x20002728
 8001c48:	0800d7a8 	.word	0x0800d7a8
 8001c4c:	20000210 	.word	0x20000210
 8001c50:	2000272c 	.word	0x2000272c
 8001c54:	0800d7c4 	.word	0x0800d7c4
 8001c58:	0800d7e0 	.word	0x0800d7e0
 8001c5c:	200016ec 	.word	0x200016ec
 8001c60:	0800d7ec 	.word	0x0800d7ec
 8001c64:	0800d82c 	.word	0x0800d82c
 8001c68:	0800d830 	.word	0x0800d830

08001c6c <send_uart>:
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg,
  I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}

void send_uart(char *string)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(string);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7fe fad3 	bl	8000220 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart1, (uint8_t*) string, len, 1000);
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <send_uart+0x2c>)
 8001c8a:	f003 fea1 	bl	80059d0 <HAL_UART_Transmit>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000348 	.word	0x20000348

08001c9c <bufsize>:
  HAL_Delay(ms);
}


int bufsize(char *buf)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  int i = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8001ca8:	e002      	b.n	8001cb0 <bufsize+0x14>
    i++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
  while (*buf++ != '\0')
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f6      	bne.n	8001caa <bufsize+0xe>
  return i;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <clear_buffer>:

void clear_buffer(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
  for (int i = 0; i < BUFFER_SIZE; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	e007      	b.n	8001ce8 <clear_buffer+0x1c>
    buffer[i] = '\0';
 8001cd8:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <clear_buffer+0x30>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < BUFFER_SIZE; i++)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cec:	ddf4      	ble.n	8001cd8 <clear_buffer+0xc>
}
 8001cee:	bf00      	nop
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000210 	.word	0x20000210

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f000 fd19 	bl	800273c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f82f 	bl	8001d6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d0e:	f000 f8a1 	bl	8001e54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d12:	f000 f9af 	bl	8002074 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d16:	f000 f939 	bl	8001f8c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001d1a:	f000 f983 	bl	8002024 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8001d1e:	f000 f8b7 	bl	8001e90 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d22:	f000 f8f5 	bl	8001f10 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001d26:	f004 fc65 	bl	80065f4 <MX_FATFS_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <main+0x34>
    Error_Handler();
 8001d30:	f000 f9fc 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  logging_sdcard("################\n");
 8001d34:	480a      	ldr	r0, [pc, #40]	@ (8001d60 <main+0x60>)
 8001d36:	f7ff fe73 	bl	8001a20 <logging_sdcard>
  int count = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   count++;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
   sprintf(dummy, "Test : %d\n",count);
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <main+0x64>)
 8001d48:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <main+0x68>)
 8001d4a:	f008 f8a5 	bl	8009e98 <siprintf>
   logging_sdcard(dummy);
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <main+0x68>)
 8001d50:	f7ff fe66 	bl	8001a20 <logging_sdcard>
   //logging_sdcard("Test_Logging\n");
   HAL_Delay(2000);
 8001d54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d58:	f000 fd76 	bl	8002848 <HAL_Delay>
   count++;
 8001d5c:	bf00      	nop
 8001d5e:	e7ee      	b.n	8001d3e <main+0x3e>
 8001d60:	0800d898 	.word	0x0800d898
 8001d64:	0800d8ac 	.word	0x0800d8ac
 8001d68:	20002730 	.word	0x20002730

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09a      	sub	sp, #104	@ 0x68
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2248      	movs	r2, #72	@ 0x48
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f008 f8ef 	bl	8009f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d92:	f001 fa2d 	bl	80031f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fdf7 	bl	800198a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <SystemClock_Config+0xe4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001da4:	4a2a      	ldr	r2, [pc, #168]	@ (8001e50 <SystemClock_Config+0xe4>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <SystemClock_Config+0xe4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001db4:	603b      	str	r3, [r7, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001db8:	2327      	movs	r3, #39	@ 0x27
 8001dba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd0:	2340      	movs	r3, #64	@ 0x40
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dd8:	2360      	movs	r3, #96	@ 0x60
 8001dda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001de0:	2301      	movs	r3, #1
 8001de2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001de8:	2318      	movs	r3, #24
 8001dea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8001df2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001df6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dfc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fd88 	bl	8003918 <HAL_RCC_OscConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e0e:	f000 f98d 	bl	800212c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e12:	236f      	movs	r3, #111	@ 0x6f
 8001e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e16:	2303      	movs	r3, #3
 8001e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2101      	movs	r1, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 f8e4 	bl	8004000 <HAL_RCC_ClockConfig>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e3e:	f000 f975 	bl	800212c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e42:	f002 fe9f 	bl	8004b84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e46:	bf00      	nop
 8001e48:	3768      	adds	r7, #104	@ 0x68
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	58000400 	.word	0x58000400

08001e54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	@ 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2250      	movs	r2, #80	@ 0x50
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f008 f87c 	bl	8009f5e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e6a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fd0e 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001e82:	f000 f953 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e86:	bf00      	nop
 8001e88:	3750      	adds	r7, #80	@ 0x50
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <MX_I2C1_Init+0x78>)
 8001e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <MX_I2C1_Init+0x7c>)
 8001e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea6:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eac:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eca:	480e      	ldr	r0, [pc, #56]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ecc:	f000 ff66 	bl	8002d9c <HAL_I2C_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ed6:	f000 f929 	bl	800212c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ede:	f000 fff8 	bl	8002ed2 <HAL_I2CEx_ConfigAnalogFilter>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ee8:	f000 f920 	bl	800212c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eec:	2100      	movs	r1, #0
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_I2C1_Init+0x74>)
 8001ef0:	f001 f83a 	bl	8002f68 <HAL_I2CEx_ConfigDigitalFilter>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f000 f917 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000290 	.word	0x20000290
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	00b07cb4 	.word	0x00b07cb4

08001f10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <MX_SPI1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f2a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f36:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f46:	2218      	movs	r2, #24
 8001f48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f5e:	2207      	movs	r2, #7
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MX_SPI1_Init+0x74>)
 8001f70:	f002 ff1f 	bl	8004db2 <HAL_SPI_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f7a:	f000 f8d7 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002e4 	.word	0x200002e4
 8001f88:	40013000 	.word	0x40013000

08001f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f90:	4b22      	ldr	r3, [pc, #136]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001f92:	4a23      	ldr	r2, [pc, #140]	@ (8002020 <MX_USART1_UART_Init+0x94>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f96:	4b21      	ldr	r3, [pc, #132]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fd6:	f003 fcab 	bl	8005930 <HAL_UART_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f000 f8a4 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	480d      	ldr	r0, [pc, #52]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001fe8:	f004 fa00 	bl	80063ec <HAL_UARTEx_SetTxFifoThreshold>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff2:	f000 f89b 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4808      	ldr	r0, [pc, #32]	@ (800201c <MX_USART1_UART_Init+0x90>)
 8001ffa:	f004 fa35 	bl	8006468 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002004:	f000 f892 	bl	800212c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	@ (800201c <MX_USART1_UART_Init+0x90>)
 800200a:	f004 f9b6 	bl	800637a <HAL_UARTEx_DisableFifoMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002014:	f000 f88a 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000348 	.word	0x20000348
 8002020:	40013800 	.word	0x40013800

08002024 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <MX_USB_PCD_Init+0x48>)
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <MX_USB_PCD_Init+0x4c>)
 800202c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_USB_PCD_Init+0x48>)
 8002030:	2208      	movs	r2, #8
 8002032:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <MX_USB_PCD_Init+0x48>)
 8002036:	2202      	movs	r2, #2
 8002038:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <MX_USB_PCD_Init+0x48>)
 800203c:	2202      	movs	r2, #2
 800203e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <MX_USB_PCD_Init+0x48>)
 8002042:	2200      	movs	r2, #0
 8002044:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <MX_USB_PCD_Init+0x48>)
 8002048:	2200      	movs	r2, #0
 800204a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <MX_USB_PCD_Init+0x48>)
 800204e:	2200      	movs	r2, #0
 8002050:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <MX_USB_PCD_Init+0x48>)
 8002054:	2200      	movs	r2, #0
 8002056:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	@ (800206c <MX_USB_PCD_Init+0x48>)
 800205a:	f000 ffd1 	bl	8003000 <HAL_PCD_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002064:	f000 f862 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	200003dc 	.word	0x200003dc
 8002070:	40006800 	.word	0x40006800

08002074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002088:	2004      	movs	r0, #4
 800208a:	f7ff fc94 	bl	80019b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2002      	movs	r0, #2
 8002090:	f7ff fc91 	bl	80019b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff fc8e 	bl	80019b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff fc8b 	bl	80019b6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2123      	movs	r1, #35	@ 0x23
 80020a4:	481e      	ldr	r0, [pc, #120]	@ (8002120 <MX_GPIO_Init+0xac>)
 80020a6:	f000 fe47 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020b0:	481c      	ldr	r0, [pc, #112]	@ (8002124 <MX_GPIO_Init+0xb0>)
 80020b2:	f000 fe41 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020b6:	2310      	movs	r3, #16
 80020b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4817      	ldr	r0, [pc, #92]	@ (8002124 <MX_GPIO_Init+0xb0>)
 80020c8:	f000 fcc6 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80020cc:	2323      	movs	r3, #35	@ 0x23
 80020ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	480f      	ldr	r0, [pc, #60]	@ (8002120 <MX_GPIO_Init+0xac>)
 80020e2:	f000 fcb9 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <MX_GPIO_Init+0xb0>)
 80020fe:	f000 fcab 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002102:	2303      	movs	r3, #3
 8002104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_GPIO_Init+0xb4>)
 8002114:	f000 fca0 	bl	8002a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002118:	bf00      	nop
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	48000400 	.word	0x48000400
 8002124:	48000800 	.word	0x48000800
 8002128:	48000c00 	.word	0x48000c00

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <Error_Handler+0x8>

08002138 <LL_AHB2_GRP1_EnableClock>:
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002146:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002154:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002176:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002186:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c0:	68fb      	ldr	r3, [r7, #12]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b09c      	sub	sp, #112	@ 0x70
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2250      	movs	r2, #80	@ 0x50
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f007 feae 	bl	8009f5e <memset>
  if(hi2c->Instance==I2C1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_I2C_MspInit+0x88>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d126      	bne.n	800225a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800220c:	2304      	movs	r3, #4
 800220e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002210:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fb3c 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002226:	f7ff ff81 	bl	800212c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2002      	movs	r0, #2
 800222c:	f7ff ff84 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002230:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002234:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002236:	2312      	movs	r3, #18
 8002238:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002242:	2304      	movs	r3, #4
 8002244:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800224a:	4619      	mov	r1, r3
 800224c:	4806      	ldr	r0, [pc, #24]	@ (8002268 <HAL_I2C_MspInit+0x8c>)
 800224e:	f000 fc03 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002252:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002256:	f7ff ff88 	bl	800216a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800225a:	bf00      	nop
 800225c:	3770      	adds	r7, #112	@ 0x70
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40005400 	.word	0x40005400
 8002268:	48000400 	.word	0x48000400

0800226c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_SPI_MspInit+0x5c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d117      	bne.n	80022be <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800228e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002292:	f7ff ff83 	bl	800219c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff ff4e 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800229c:	23e0      	movs	r3, #224	@ 0xe0
 800229e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ac:	2305      	movs	r3, #5
 80022ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4619      	mov	r1, r3
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022ba:	f000 fbcd 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40013000 	.word	0x40013000

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09c      	sub	sp, #112	@ 0x70
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2250      	movs	r2, #80	@ 0x50
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f007 fe36 	bl	8009f5e <memset>
  if(huart->Instance==USART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a16      	ldr	r2, [pc, #88]	@ (8002350 <HAL_UART_MspInit+0x84>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d124      	bne.n	8002346 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fac5 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002314:	f7ff ff0a 	bl	800212c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002318:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800231c:	f7ff ff3e 	bl	800219c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	2002      	movs	r0, #2
 8002322:	f7ff ff09 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002326:	23c0      	movs	r3, #192	@ 0xc0
 8002328:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002336:	2307      	movs	r3, #7
 8002338:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800233e:	4619      	mov	r1, r3
 8002340:	4804      	ldr	r0, [pc, #16]	@ (8002354 <HAL_UART_MspInit+0x88>)
 8002342:	f000 fb89 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002346:	bf00      	nop
 8002348:	3770      	adds	r7, #112	@ 0x70
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40013800 	.word	0x40013800
 8002354:	48000400 	.word	0x48000400

08002358 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b09c      	sub	sp, #112	@ 0x70
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002360:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2250      	movs	r2, #80	@ 0x50
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f007 fdf0 	bl	8009f5e <memset>
  if(hpcd->Instance==USB)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1f      	ldr	r2, [pc, #124]	@ (8002400 <HAL_PCD_MspInit+0xa8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d136      	bne.n	80023f6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800238c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800238e:	2318      	movs	r3, #24
 8002390:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002392:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002396:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002398:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800239c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800239e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80023a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80023aa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80023ae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 fa6f 	bl	8004898 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80023c0:	f7ff feb4 	bl	800212c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff feb7 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80023ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80023dc:	230a      	movs	r3, #10
 80023de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ea:	f000 fb35 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80023ee:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80023f2:	f7ff feba 	bl	800216a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 80023f6:	bf00      	nop
 80023f8:	3770      	adds	r7, #112	@ 0x70
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40006800 	.word	0x40006800

08002404 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <SDTimer_Handler+0x40>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <SDTimer_Handler+0x1c>
    Timer1--;
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <SDTimer_Handler+0x40>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <SDTimer_Handler+0x40>)
 800241e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <SDTimer_Handler+0x44>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <SDTimer_Handler+0x34>
    Timer2--;
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <SDTimer_Handler+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <SDTimer_Handler+0x44>)
 8002436:	701a      	strb	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20002925 	.word	0x20002925
 8002448:	20002926 	.word	0x20002926

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <SysTick_Handler+0x30>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <SysTick_Handler+0x30>)
 80024b0:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <SysTick_Handler+0x30>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d904      	bls.n	80024c6 <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <SysTick_Handler+0x30>)
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 80024c2:	f7ff ff9f 	bl	8002404 <SDTimer_Handler>
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024c6:	f000 f993 	bl	80027f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//
  /* USER CODE END SysTick_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20002924 	.word	0x20002924

080024d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	return 1;
 80024d8:	2301      	movs	r3, #1
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_kill>:

int _kill(int pid, int sig)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ee:	f007 fd89 	bl	800a004 <__errno>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2216      	movs	r2, #22
 80024f6:	601a      	str	r2, [r3, #0]
	return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_exit>:

void _exit (int status)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800250c:	f04f 31ff 	mov.w	r1, #4294967295
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ffe7 	bl	80024e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002516:	bf00      	nop
 8002518:	e7fd      	b.n	8002516 <_exit+0x12>

0800251a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	e00a      	b.n	8002542 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800252c:	f3af 8000 	nop.w
 8002530:	4601      	mov	r1, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	60ba      	str	r2, [r7, #8]
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3301      	adds	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	dbf0      	blt.n	800252c <_read+0x12>
	}

return len;
 800254a:	687b      	ldr	r3, [r7, #4]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	return -1;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800257c:	605a      	str	r2, [r3, #4]
	return 0;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_isatty>:

int _isatty(int file)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	return 1;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
	return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c4:	4a14      	ldr	r2, [pc, #80]	@ (8002618 <_sbrk+0x5c>)
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <_sbrk+0x60>)
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <_sbrk+0x64>)
 80025da:	4a12      	ldr	r2, [pc, #72]	@ (8002624 <_sbrk+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025de:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d207      	bcs.n	80025fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ec:	f007 fd0a 	bl	800a004 <__errno>
 80025f0:	4603      	mov	r3, r0
 80025f2:	220c      	movs	r2, #12
 80025f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e009      	b.n	8002610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025fc:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002602:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <_sbrk+0x64>)
 800260c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20030000 	.word	0x20030000
 800261c:	00000400 	.word	0x00000400
 8002620:	20002928 	.word	0x20002928
 8002624:	20002ab8 	.word	0x20002ab8

08002628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800262c:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <SystemInit+0x98>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	4a23      	ldr	r2, [pc, #140]	@ (80026c0 <SystemInit+0x98>)
 8002634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002650:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002654:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <SystemInit+0x9c>)
 8002662:	4013      	ands	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002672:	f023 0305 	bic.w	r3, r3, #5
 8002676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002692:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <SystemInit+0xa0>)
 8002694:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800269a:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <SystemInit+0xa0>)
 800269c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	faf6fefb 	.word	0xfaf6fefb
 80026c8:	22041000 	.word	0x22041000

080026cc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026cc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d0:	3304      	adds	r3, #4

080026d2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026d6:	d3f9      	bcc.n	80026cc <CopyDataInit>
  bx lr
 80026d8:	4770      	bx	lr

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026da:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026dc:	3004      	adds	r0, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026de:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>
  bx lr
 80026e2:	4770      	bx	lr

080026e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e4:	480c      	ldr	r0, [pc, #48]	@ (8002718 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80026e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026e8:	f7ff ff9e 	bl	8002628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026ec:	480b      	ldr	r0, [pc, #44]	@ (800271c <LoopForever+0x8>)
 80026ee:	490c      	ldr	r1, [pc, #48]	@ (8002720 <LoopForever+0xc>)
 80026f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <LoopForever+0x10>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	f7ff ffed 	bl	80026d2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026f8:	480b      	ldr	r0, [pc, #44]	@ (8002728 <LoopForever+0x14>)
 80026fa:	490c      	ldr	r1, [pc, #48]	@ (800272c <LoopForever+0x18>)
 80026fc:	2300      	movs	r3, #0
 80026fe:	f7ff ffee 	bl	80026de <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002702:	480b      	ldr	r0, [pc, #44]	@ (8002730 <LoopForever+0x1c>)
 8002704:	490b      	ldr	r1, [pc, #44]	@ (8002734 <LoopForever+0x20>)
 8002706:	2300      	movs	r3, #0
 8002708:	f7ff ffe9 	bl	80026de <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800270c:	f007 fc80 	bl	800a010 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002710:	f7ff faf6 	bl	8001d00 <main>

08002714 <LoopForever>:

LoopForever:
  b LoopForever
 8002714:	e7fe      	b.n	8002714 <LoopForever>
 8002716:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002718:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800271c:	20000004 	.word	0x20000004
 8002720:	200001f0 	.word	0x200001f0
 8002724:	0800deb0 	.word	0x0800deb0
  INIT_BSS _sbss, _ebss
 8002728:	200001f0 	.word	0x200001f0
 800272c:	20002ab8 	.word	0x20002ab8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8002730:	20030000 	.word	0x20030000
 8002734:	20030000 	.word	0x20030000

08002738 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002738:	e7fe      	b.n	8002738 <ADC1_IRQHandler>
	...

0800273c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002746:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <HAL_Init+0x3c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0b      	ldr	r2, [pc, #44]	@ (8002778 <HAL_Init+0x3c>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
 8002754:	f000 f94e 	bl	80029f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002758:	2000      	movs	r0, #0
 800275a:	f000 f80f 	bl	800277c <HAL_InitTick>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	71fb      	strb	r3, [r7, #7]
 8002768:	e001      	b.n	800276e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800276a:	f7ff fd30 	bl	80021ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800276e:	79fb      	ldrb	r3, [r7, #7]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58004000 	.word	0x58004000

0800277c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002788:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <HAL_InitTick+0x6c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d024      	beq.n	80027da <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002790:	f001 fde2 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_InitTick+0x6c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4619      	mov	r1, r3
 800279c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f948 	bl	8002a3e <HAL_SYSTICK_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10f      	bne.n	80027d4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	d809      	bhi.n	80027ce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ba:	2200      	movs	r2, #0
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
 80027c2:	f000 f922 	bl	8002a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_InitTick+0x70>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	e007      	b.n	80027de <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	e004      	b.n	80027de <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	e001      	b.n	80027de <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000010 	.word	0x20000010
 80027ec:	2000000c 	.word	0x2000000c

080027f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <HAL_IncTick+0x20>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_IncTick+0x24>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <HAL_IncTick+0x24>)
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000010 	.word	0x20000010
 8002814:	2000292c 	.word	0x2000292c

08002818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <HAL_GetTick+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000292c 	.word	0x2000292c

08002830 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_GetTickPrio+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff ffe2 	bl	8002818 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d005      	beq.n	800286e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002862:	4b0a      	ldr	r3, [pc, #40]	@ (800288c <HAL_Delay+0x44>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800286e:	bf00      	nop
 8002870:	f7ff ffd2 	bl	8002818 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f7      	bhi.n	8002870 <HAL_Delay+0x28>
  {
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000010 	.word	0x20000010

08002890 <__NVIC_SetPriorityGrouping>:
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_SetPriority>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	db0a      	blt.n	800291e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	490c      	ldr	r1, [pc, #48]	@ (8002940 <__NVIC_SetPriority+0x4c>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	440b      	add	r3, r1
 8002918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800291c:	e00a      	b.n	8002934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4908      	ldr	r1, [pc, #32]	@ (8002944 <__NVIC_SetPriority+0x50>)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	3b04      	subs	r3, #4
 800292c:	0112      	lsls	r2, r2, #4
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	440b      	add	r3, r1
 8002932:	761a      	strb	r2, [r3, #24]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <NVIC_EncodePriority>:
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	@ 0x24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f1c3 0307 	rsb	r3, r3, #7
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf28      	it	cs
 8002966:	2304      	movcs	r3, #4
 8002968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3304      	adds	r3, #4
 800296e:	2b06      	cmp	r3, #6
 8002970:	d902      	bls.n	8002978 <NVIC_EncodePriority+0x30>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3b03      	subs	r3, #3
 8002976:	e000      	b.n	800297a <NVIC_EncodePriority+0x32>
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	f04f 32ff 	mov.w	r2, #4294967295
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43da      	mvns	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	401a      	ands	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	43d9      	mvns	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	4313      	orrs	r3, r2
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	@ 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <SysTick_Config>:
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029c0:	d301      	bcc.n	80029c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00f      	b.n	80029e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029c6:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <SysTick_Config+0x40>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ce:	210f      	movs	r1, #15
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f7ff ff8e 	bl	80028f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <SysTick_Config+0x40>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029de:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <SysTick_Config+0x40>)
 80029e0:	2207      	movs	r2, #7
 80029e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	e000e010 	.word	0xe000e010

080029f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff47 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a18:	f7ff ff5e 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	6978      	ldr	r0, [r7, #20]
 8002a24:	f7ff ff90 	bl	8002948 <NVIC_EncodePriority>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff5f 	bl	80028f4 <__NVIC_SetPriority>
}
 8002a36:	bf00      	nop
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffb2 	bl	80029b0 <SysTick_Config>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	e14c      	b.n	8002d02 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	4013      	ands	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 813e 	beq.w	8002cfc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d005      	beq.n	8002a98 <HAL_GPIO_Init+0x40>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d130      	bne.n	8002afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ace:	2201      	movs	r2, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 0201 	and.w	r2, r3, #1
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d017      	beq.n	8002b36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d123      	bne.n	8002b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	08da      	lsrs	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3208      	adds	r2, #8
 8002b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691a      	ldr	r2, [r3, #16]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	6939      	ldr	r1, [r7, #16]
 8002b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0203 	and.w	r2, r3, #3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8098 	beq.w	8002cfc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002bcc:	4a54      	ldr	r2, [pc, #336]	@ (8002d20 <HAL_GPIO_Init+0x2c8>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bf6:	d019      	beq.n	8002c2c <HAL_GPIO_Init+0x1d4>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8002d24 <HAL_GPIO_Init+0x2cc>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <HAL_GPIO_Init+0x1d0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a49      	ldr	r2, [pc, #292]	@ (8002d28 <HAL_GPIO_Init+0x2d0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00d      	beq.n	8002c24 <HAL_GPIO_Init+0x1cc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a48      	ldr	r2, [pc, #288]	@ (8002d2c <HAL_GPIO_Init+0x2d4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <HAL_GPIO_Init+0x1c8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a47      	ldr	r2, [pc, #284]	@ (8002d30 <HAL_GPIO_Init+0x2d8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_GPIO_Init+0x1c4>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e008      	b.n	8002c2e <HAL_GPIO_Init+0x1d6>
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x1d6>
 8002c20:	2303      	movs	r3, #3
 8002c22:	e004      	b.n	8002c2e <HAL_GPIO_Init+0x1d6>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_Init+0x1d6>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <HAL_GPIO_Init+0x1d6>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	f002 0203 	and.w	r2, r2, #3
 8002c34:	0092      	lsls	r2, r2, #2
 8002c36:	4093      	lsls	r3, r2
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3e:	4938      	ldr	r1, [pc, #224]	@ (8002d20 <HAL_GPIO_Init+0x2c8>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c4c:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c70:	4a30      	ldr	r2, [pc, #192]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c76:	4b2f      	ldr	r3, [pc, #188]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c9a:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ca0:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002cce:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d34 <HAL_GPIO_Init+0x2dc>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f aeab 	bne.w	8002a68 <HAL_GPIO_Init+0x10>
  }
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40010000 	.word	0x40010000
 8002d24:	48000400 	.word	0x48000400
 8002d28:	48000800 	.word	0x48000800
 8002d2c:	48000c00 	.word	0x48000c00
 8002d30:	48001000 	.word	0x48001000
 8002d34:	58000800 	.word	0x58000800

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	041a      	lsls	r2, r3, #16
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43d9      	mvns	r1, r3
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	400b      	ands	r3, r1
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e08d      	b.n	8002eca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fa0a 	bl	80021dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	@ 0x24
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	e006      	b.n	8002e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d108      	bne.n	8002e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	e007      	b.n	8002e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69d9      	ldr	r1, [r3, #28]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d138      	bne.n	8002f5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e032      	b.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2224      	movs	r2, #36	@ 0x24
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6819      	ldr	r1, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d139      	bne.n	8002ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e033      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2224      	movs	r2, #36	@ 0x24
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e000      	b.n	8002ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0c0      	b.n	8003194 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff f996 	bl	8002358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 faa1 	bl	8006580 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e03e      	b.n	80030c2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	440b      	add	r3, r1
 8003052:	3311      	adds	r3, #17
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	3310      	adds	r3, #16
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	440b      	add	r3, r1
 800307a:	3313      	adds	r3, #19
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3320      	adds	r3, #32
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	3324      	adds	r3, #36	@ 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	3301      	adds	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d3bb      	bcc.n	8003044 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	e044      	b.n	800315c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	440b      	add	r3, r1
 80030e0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	440b      	add	r3, r1
 8003138:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	440b      	add	r3, r1
 800314e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3301      	adds	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	791b      	ldrb	r3, [r3, #4]
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	429a      	cmp	r2, r3
 8003164:	d3b5      	bcc.n	80030d2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003172:	f003 fa20 	bl	80065b6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7a9b      	ldrb	r3, [r3, #10]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d102      	bne.n	8003192 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f805 	bl	800319c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f043 0302 	orr.w	r3, r3, #2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a04      	ldr	r2, [pc, #16]	@ (800320c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	58000400 	.word	0x58000400

08003210 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <HAL_PWREx_GetVoltageRange+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58000400 	.word	0x58000400

0800322c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800323a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800323e:	d101      	bne.n	8003244 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_RCC_HSE_Enable>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800325e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_RCC_HSE_Disable>:
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800327c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
}
 8003282:	bf00      	nop
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_RCC_HSE_IsReady>:
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800329e:	d101      	bne.n	80032a4 <LL_RCC_HSE_IsReady+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_RCC_HSE_IsReady+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_RCC_HSI_Enable>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <LL_RCC_HSI_Disable>:
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_RCC_HSI_IsReady>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80032f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fe:	d101      	bne.n	8003304 <LL_RCC_HSI_IsReady+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_RCC_HSI_IsReady+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_RCC_HSI48_Enable>:
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003342:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <LL_RCC_HSI48_Disable>:
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003364:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003368:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_RCC_HSI48_IsReady>:
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d101      	bne.n	8003396 <LL_RCC_HSI48_IsReady+0x18>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <LL_RCC_HSI48_IsReady+0x1a>
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_LSE_Enable>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_RCC_LSE_Disable>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_RCC_LSE_EnableBypass>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_RCC_LSE_DisableBypass>:
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003418:	f023 0304 	bic.w	r3, r3, #4
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800342a:	b480      	push	{r7}
 800342c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b02      	cmp	r3, #2
 800343c:	d101      	bne.n	8003442 <LL_RCC_LSE_IsReady+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_RCC_LSE_IsReady+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d101      	bne.n	80034aa <LL_RCC_LSI1_IsReady+0x18>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <LL_RCC_LSI1_IsReady+0x1a>
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80034fa:	b480      	push	{r7}
 80034fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80034fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d101      	bne.n	8003512 <LL_RCC_LSI2_IsReady+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_RCC_LSI2_IsReady+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800352e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6013      	str	r3, [r2, #0]
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b02      	cmp	r3, #2
 8003598:	d101      	bne.n	800359e <LL_RCC_MSI_IsReady+0x16>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <LL_RCC_MSI_IsReady+0x18>
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80035b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2bb0      	cmp	r3, #176	@ 0xb0
 80035e8:	d901      	bls.n	80035ee <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80035ea:	23b0      	movs	r3, #176	@ 0xb0
 80035ec:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80035ee:	687b      	ldr	r3, [r7, #4]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003616:	4313      	orrs	r3, r2
 8003618:	604b      	str	r3, [r1, #4]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 0203 	bic.w	r2, r3, #3
 8003638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003678:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800369e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80036ca:	f023 020f 	bic.w	r2, r3, #15
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4313      	orrs	r3, r2
 800372a:	608b      	str	r3, [r1, #8]
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003758:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003792:	4618      	mov	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80037a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80037be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037cc:	6013      	str	r3, [r2, #0]
}
 80037ce:	bf00      	nop
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80037dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037ea:	d101      	bne.n	80037f0 <LL_RCC_PLL_IsReady+0x18>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <LL_RCC_PLL_IsReady+0x1a>
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d101      	bne.n	8003876 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003896:	d101      	bne.n	800389c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80038ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038bc:	d101      	bne.n	80038c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038e0:	d101      	bne.n	80038e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003900:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003904:	d101      	bne.n	800390a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b08d      	sub	sp, #52	@ 0x34
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e363      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 808d 	beq.w	8003a52 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003938:	f7ff fe89 	bl	800364e <LL_RCC_GetSysClkSource>
 800393c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800393e:	f7ff ff82 	bl	8003846 <LL_RCC_PLL_GetMainSource>
 8003942:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x3e>
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	2b0c      	cmp	r3, #12
 800394e:	d147      	bne.n	80039e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003952:	2b01      	cmp	r3, #1
 8003954:	d144      	bne.n	80039e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e347      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003966:	f7ff fe34 	bl	80035d2 <LL_RCC_MSI_GetRange>
 800396a:	4603      	mov	r3, r0
 800396c:	429c      	cmp	r4, r3
 800396e:	d914      	bls.n	800399a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fd2f 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e336      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff fe0e 	bl	80035aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fe32 	bl	80035fc <LL_RCC_MSI_SetCalibTrimming>
 8003998:	e013      	b.n	80039c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff fe03 	bl	80035aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fe27 	bl	80035fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fd10 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e317      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039c2:	f000 fcc9 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80039c6:	4603      	mov	r3, r0
 80039c8:	4aa4      	ldr	r2, [pc, #656]	@ (8003c5c <HAL_RCC_OscConfig+0x344>)
 80039ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80039cc:	4ba4      	ldr	r3, [pc, #656]	@ (8003c60 <HAL_RCC_OscConfig+0x348>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fed3 	bl	800277c <HAL_InitTick>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d039      	beq.n	8003a50 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e308      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01e      	beq.n	8003a26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e8:	f7ff fdb0 	bl	800354c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ec:	f7fe ff14 	bl	8002818 <HAL_GetTick>
 80039f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f4:	f7fe ff10 	bl	8002818 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e2f5      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003a06:	f7ff fdbf 	bl	8003588 <LL_RCC_MSI_IsReady>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f1      	beq.n	80039f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fdc8 	bl	80035aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fdec 	bl	80035fc <LL_RCC_MSI_SetCalibTrimming>
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a26:	f7ff fda0 	bl	800356a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fef5 	bl	8002818 <HAL_GetTick>
 8003a2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a32:	f7fe fef1 	bl	8002818 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e2d6      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003a44:	f7ff fda0 	bl	8003588 <LL_RCC_MSI_IsReady>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f1      	bne.n	8003a32 <HAL_RCC_OscConfig+0x11a>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a50:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d047      	beq.n	8003aee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	f7ff fdf6 	bl	800364e <LL_RCC_GetSysClkSource>
 8003a62:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a64:	f7ff feef 	bl	8003846 <LL_RCC_PLL_GetMainSource>
 8003a68:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_OscConfig+0x164>
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d105      	bne.n	8003a88 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d134      	bne.n	8003aee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e2b4      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_OscConfig+0x180>
 8003a92:	f7ff fbdd 	bl	8003250 <LL_RCC_HSE_Enable>
 8003a96:	e001      	b.n	8003a9c <HAL_RCC_OscConfig+0x184>
 8003a98:	f7ff fbe9 	bl	800326e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d012      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fe feb8 	bl	8002818 <HAL_GetTick>
 8003aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aac:	f7fe feb4 	bl	8002818 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b64      	cmp	r3, #100	@ 0x64
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e299      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003abe:	f7ff fbe5 	bl	800328c <LL_RCC_HSE_IsReady>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f1      	beq.n	8003aac <HAL_RCC_OscConfig+0x194>
 8003ac8:	e011      	b.n	8003aee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fea5 	bl	8002818 <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad2:	f7fe fea1 	bl	8002818 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b64      	cmp	r3, #100	@ 0x64
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e286      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ae4:	f7ff fbd2 	bl	800328c <LL_RCC_HSE_IsReady>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f1      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d04c      	beq.n	8003b94 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afa:	f7ff fda8 	bl	800364e <LL_RCC_GetSysClkSource>
 8003afe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b00:	f7ff fea1 	bl	8003846 <LL_RCC_PLL_GetMainSource>
 8003b04:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_OscConfig+0x200>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d10e      	bne.n	8003b30 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e266      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fbf1 	bl	8003310 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b2e:	e031      	b.n	8003b94 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b38:	f7ff fbba 	bl	80032b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fe6c 	bl	8002818 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b44:	f7fe fe68 	bl	8002818 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e24d      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003b56:	f7ff fbc9 	bl	80032ec <LL_RCC_HSI_IsReady>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f1      	beq.n	8003b44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fbd3 	bl	8003310 <LL_RCC_HSI_SetCalibTrimming>
 8003b6a:	e013      	b.n	8003b94 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6c:	f7ff fbaf 	bl	80032ce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fe52 	bl	8002818 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b78:	f7fe fe4e 	bl	8002818 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e233      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b8a:	f7ff fbaf 	bl	80032ec <LL_RCC_HSI_IsReady>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f1      	bne.n	8003b78 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a3 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d076      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d046      	beq.n	8003c50 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003bc2:	f7ff fc66 	bl	8003492 <LL_RCC_LSI1_IsReady>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003bcc:	f7ff fc3f 	bl	800344e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd0:	f7fe fe22 	bl	8002818 <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003bd8:	f7fe fe1e 	bl	8002818 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e203      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003bea:	f7ff fc52 	bl	8003492 <LL_RCC_LSI1_IsReady>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f1      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003bf4:	f7ff fc5f 	bl	80034b6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fe0e 	bl	8002818 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003c00:	f7fe fe0a 	bl	8002818 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e1ef      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003c12:	f7ff fc72 	bl	80034fa <LL_RCC_LSI2_IsReady>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f1      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fc7c 	bl	800351e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003c26:	f7ff fc23 	bl	8003470 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fdf5 	bl	8002818 <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c32:	f7fe fdf1 	bl	8002818 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1d6      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003c44:	f7ff fc25 	bl	8003492 <LL_RCC_LSI1_IsReady>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f1      	bne.n	8003c32 <HAL_RCC_OscConfig+0x31a>
 8003c4e:	e051      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003c50:	f7ff fbfd 	bl	800344e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fde0 	bl	8002818 <HAL_GetTick>
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003c5a:	e00c      	b.n	8003c76 <HAL_RCC_OscConfig+0x35e>
 8003c5c:	20000008 	.word	0x20000008
 8003c60:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c64:	f7fe fdd8 	bl	8002818 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1bd      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003c76:	f7ff fc0c 	bl	8003492 <LL_RCC_LSI1_IsReady>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f1      	beq.n	8003c64 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003c80:	f7ff fc2a 	bl	80034d8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003c86:	f7fe fdc7 	bl	8002818 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e1ac      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003c98:	f7ff fc2f 	bl	80034fa <LL_RCC_LSI2_IsReady>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f1      	bne.n	8003c86 <HAL_RCC_OscConfig+0x36e>
 8003ca2:	e027      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003ca4:	f7ff fc18 	bl	80034d8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fdb6 	bl	8002818 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003cb0:	f7fe fdb2 	bl	8002818 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e197      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003cc2:	f7ff fc1a 	bl	80034fa <LL_RCC_LSI2_IsReady>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f1      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003ccc:	f7ff fbd0 	bl	8003470 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fda2 	bl	8002818 <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003cd8:	f7fe fd9e 	bl	8002818 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e183      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003cea:	f7ff fbd2 	bl	8003492 <LL_RCC_LSI1_IsReady>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d05b      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	4ba7      	ldr	r3, [pc, #668]	@ (8003fa0 <HAL_RCC_OscConfig+0x688>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d114      	bne.n	8003d36 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d0c:	f7ff fa70 	bl	80031f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d10:	f7fe fd82 	bl	8002818 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fe fd7e 	bl	8002818 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e163      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d2a:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa0 <HAL_RCC_OscConfig+0x688>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0x42c>
 8003d3e:	f7ff fb30 	bl	80033a2 <LL_RCC_LSE_Enable>
 8003d42:	e00c      	b.n	8003d5e <HAL_RCC_OscConfig+0x446>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b05      	cmp	r3, #5
 8003d4a:	d104      	bne.n	8003d56 <HAL_RCC_OscConfig+0x43e>
 8003d4c:	f7ff fb4b 	bl	80033e6 <LL_RCC_LSE_EnableBypass>
 8003d50:	f7ff fb27 	bl	80033a2 <LL_RCC_LSE_Enable>
 8003d54:	e003      	b.n	8003d5e <HAL_RCC_OscConfig+0x446>
 8003d56:	f7ff fb35 	bl	80033c4 <LL_RCC_LSE_Disable>
 8003d5a:	f7ff fb55 	bl	8003408 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d014      	beq.n	8003d90 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fd57 	bl	8002818 <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fe fd53 	bl	8002818 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e136      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003d84:	f7ff fb51 	bl	800342a <LL_RCC_LSE_IsReady>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ef      	beq.n	8003d6e <HAL_RCC_OscConfig+0x456>
 8003d8e:	e013      	b.n	8003db8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fd42 	bl	8002818 <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7fe fd3e 	bl	8002818 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e121      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003dae:	f7ff fb3c 	bl	800342a <LL_RCC_LSE_IsReady>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ef      	bne.n	8003d98 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003dcc:	f7ff fab5 	bl	800333a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fe fd22 	bl	8002818 <HAL_GetTick>
 8003dd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd8:	f7fe fd1e 	bl	8002818 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e103      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003dea:	f7ff fac8 	bl	800337e <LL_RCC_HSI48_IsReady>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f1      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4c0>
 8003df4:	e013      	b.n	8003e1e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003df6:	f7ff fab1 	bl	800335c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fe fd0d 	bl	8002818 <HAL_GetTick>
 8003dfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e02:	f7fe fd09 	bl	8002818 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0ee      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003e14:	f7ff fab3 	bl	800337e <LL_RCC_HSI48_IsReady>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f1      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80e4 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e28:	f7ff fc11 	bl	800364e <LL_RCC_GetSysClkSource>
 8003e2c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	f040 80b4 	bne.w	8003fa8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0203 	and.w	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d123      	bne.n	8003e96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d11c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d114      	bne.n	8003e96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d10d      	bne.n	8003e96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d05d      	beq.n	8003f52 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d058      	beq.n	8003f4e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0a1      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003eae:	f7ff fc84 	bl	80037ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb2:	f7fe fcb1 	bl	8002818 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe fcad 	bl	8002818 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e092      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ef      	bne.n	8003eba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	4b30      	ldr	r3, [pc, #192]	@ (8003fa4 <HAL_RCC_OscConfig+0x68c>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ef2:	0212      	lsls	r2, r2, #8
 8003ef4:	4311      	orrs	r1, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003efa:	4311      	orrs	r1, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f00:	4311      	orrs	r1, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f06:	430a      	orrs	r2, r1
 8003f08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f10:	f7ff fc44 	bl	800379c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f24:	f7fe fc78 	bl	8002818 <HAL_GetTick>
 8003f28:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe fc74 	bl	8002818 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e059      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ef      	beq.n	8003f2c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	e050      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d147      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f60:	f7ff fc1c 	bl	800379c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f74:	f7fe fc50 	bl	8002818 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe fc4c 	bl	8002818 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e031      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x664>
 8003f9c:	e028      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
 8003f9e:	bf00      	nop
 8003fa0:	58000400 	.word	0x58000400
 8003fa4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d01e      	beq.n	8003fec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	f7ff fc04 	bl	80037ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fc31 	bl	8002818 <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe fc2d 	bl	8002818 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e012      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ef      	bne.n	8003fba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_OscConfig+0x6e4>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60cb      	str	r3, [r1, #12]
 8003fea:	e001      	b.n	8003ff0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3734      	adds	r7, #52	@ 0x34
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	eefefffc 	.word	0xeefefffc

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e12d      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b98      	ldr	r3, [pc, #608]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d91b      	bls.n	800405a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b95      	ldr	r3, [pc, #596]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 0207 	bic.w	r2, r3, #7
 800402a:	4993      	ldr	r1, [pc, #588]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004032:	f7fe fbf1 	bl	8002818 <HAL_GetTick>
 8004036:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004038:	e008      	b.n	800404c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800403a:	f7fe fbed 	bl	8002818 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e111      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404c:	4b8a      	ldr	r3, [pc, #552]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d1ef      	bne.n	800403a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fafb 	bl	8003666 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004070:	f7fe fbd2 	bl	8002818 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004078:	f7fe fbce 	bl	8002818 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e0f2      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800408a:	f7ff fbe8 	bl	800385e <LL_RCC_IsActiveFlag_HPRE>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f1      	beq.n	8004078 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff faf2 	bl	800368e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80040aa:	f7fe fbb5 	bl	8002818 <HAL_GetTick>
 80040ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040b2:	f7fe fbb1 	bl	8002818 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0d5      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80040c4:	f7ff fbdd 	bl	8003882 <LL_RCC_IsActiveFlag_C2HPRE>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f1      	beq.n	80040b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff faeb 	bl	80036ba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80040e4:	f7fe fb98 	bl	8002818 <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040ec:	f7fe fb94 	bl	8002818 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0b8      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80040fe:	f7ff fbd3 	bl	80038a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f1      	beq.n	80040ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fae5 	bl	80036e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800411e:	f7fe fb7b 	bl	8002818 <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004124:	e008      	b.n	8004138 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004126:	f7fe fb77 	bl	8002818 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e09b      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004138:	f7ff fbc9 	bl	80038ce <LL_RCC_IsActiveFlag_PPRE1>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f1      	beq.n	8004126 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fadb 	bl	8003710 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800415a:	f7fe fb5d 	bl	8002818 <HAL_GetTick>
 800415e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004162:	f7fe fb59 	bl	8002818 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e07d      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004174:	f7ff fbbd 	bl	80038f2 <LL_RCC_IsActiveFlag_PPRE2>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f1      	beq.n	8004162 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d043      	beq.n	8004212 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d106      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004192:	f7ff f87b 	bl	800328c <LL_RCC_HSE_IsReady>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d11e      	bne.n	80041da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e067      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80041a8:	f7ff fb16 	bl	80037d8 <LL_RCC_PLL_IsReady>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d113      	bne.n	80041da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e05c      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80041be:	f7ff f9e3 	bl	8003588 <LL_RCC_MSI_IsReady>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d108      	bne.n	80041da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e051      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80041cc:	f7ff f88e 	bl	80032ec <LL_RCC_HSI_IsReady>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e04a      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fa21 	bl	8003626 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fe fb18 	bl	8002818 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fe fb14 	bl	8002818 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e036      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	f7ff fa24 	bl	800364e <LL_RCC_GetSysClkSource>
 8004206:	4602      	mov	r2, r0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	429a      	cmp	r2, r3
 8004210:	d1ec      	bne.n	80041ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004212:	4b19      	ldr	r3, [pc, #100]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d21b      	bcs.n	8004258 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004220:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f023 0207 	bic.w	r2, r3, #7
 8004228:	4913      	ldr	r1, [pc, #76]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004230:	f7fe faf2 	bl	8002818 <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	e008      	b.n	800424a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004238:	f7fe faee 	bl	8002818 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e012      	b.n	8004270 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HAL_RCC_ClockConfig+0x278>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d1ef      	bne.n	8004238 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004258:	f000 f87e 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 800425c:	4603      	mov	r3, r0
 800425e:	4a07      	ldr	r2, [pc, #28]	@ (800427c <HAL_RCC_ClockConfig+0x27c>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004262:	f7fe fae5 	bl	8002830 <HAL_GetTickPrio>
 8004266:	4603      	mov	r3, r0
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fa87 	bl	800277c <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58004000 	.word	0x58004000
 800427c:	20000008 	.word	0x20000008

08004280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004286:	f7ff f9e2 	bl	800364e <LL_RCC_GetSysClkSource>
 800428a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004292:	f7ff f99e 	bl	80035d2 <LL_RCC_MSI_GetRange>
 8004296:	4603      	mov	r3, r0
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	4a2b      	ldr	r2, [pc, #172]	@ (800434c <HAL_RCC_GetSysClockFreq+0xcc>)
 80042a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e04b      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042ae:	4b28      	ldr	r3, [pc, #160]	@ (8004350 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e045      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80042ba:	f7fe ffb7 	bl	800322c <LL_RCC_HSE_IsEnabledDiv2>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d102      	bne.n	80042ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80042c4:	4b22      	ldr	r3, [pc, #136]	@ (8004350 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	e03a      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xd4>)
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e037      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80042d0:	f7ff fab9 	bl	8003846 <LL_RCC_PLL_GetMainSource>
 80042d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x64>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x6a>
 80042e2:	e00d      	b.n	8004300 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80042e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042e6:	60bb      	str	r3, [r7, #8]
        break;
 80042e8:	e015      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80042ea:	f7fe ff9f 	bl	800322c <LL_RCC_HSE_IsEnabledDiv2>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d102      	bne.n	80042fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80042f4:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <HAL_RCC_GetSysClockFreq+0xd0>)
 80042f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80042f8:	e00d      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80042fa:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <HAL_RCC_GetSysClockFreq+0xd4>)
 80042fc:	60bb      	str	r3, [r7, #8]
        break;
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004300:	f7ff f967 	bl	80035d2 <LL_RCC_MSI_GetRange>
 8004304:	4603      	mov	r3, r0
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	4a0f      	ldr	r2, [pc, #60]	@ (800434c <HAL_RCC_GetSysClockFreq+0xcc>)
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	60bb      	str	r3, [r7, #8]
        break;
 8004314:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004316:	f7ff fa71 	bl	80037fc <LL_RCC_PLL_GetN>
 800431a:	4602      	mov	r2, r0
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	fb03 f402 	mul.w	r4, r3, r2
 8004322:	f7ff fa84 	bl	800382e <LL_RCC_PLL_GetDivider>
 8004326:	4603      	mov	r3, r0
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	3301      	adds	r3, #1
 800432c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004330:	f7ff fa71 	bl	8003816 <LL_RCC_PLL_GetR>
 8004334:	4603      	mov	r3, r0
 8004336:	0f5b      	lsrs	r3, r3, #29
 8004338:	3301      	adds	r3, #1
 800433a:	fbb4 f3f3 	udiv	r3, r4, r3
 800433e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	bd90      	pop	{r4, r7, pc}
 800434a:	bf00      	nop
 800434c:	0800d988 	.word	0x0800d988
 8004350:	00f42400 	.word	0x00f42400
 8004354:	01e84800 	.word	0x01e84800

08004358 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b598      	push	{r3, r4, r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800435c:	f7ff ff90 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8004360:	4604      	mov	r4, r0
 8004362:	f7ff f9e9 	bl	8003738 <LL_RCC_GetAHBPrescaler>
 8004366:	4603      	mov	r3, r0
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4a03      	ldr	r2, [pc, #12]	@ (800437c <HAL_RCC_GetHCLKFreq+0x24>)
 8004370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004374:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd98      	pop	{r3, r4, r7, pc}
 800437c:	0800d928 	.word	0x0800d928

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b598      	push	{r3, r4, r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004384:	f7ff ffe8 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004388:	4604      	mov	r4, r0
 800438a:	f7ff f9ef 	bl	800376c <LL_RCC_GetAPB1Prescaler>
 800438e:	4603      	mov	r3, r0
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	f003 0307 	and.w	r3, r3, #7
 8004396:	4a04      	ldr	r2, [pc, #16]	@ (80043a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd98      	pop	{r3, r4, r7, pc}
 80043a8:	0800d968 	.word	0x0800d968

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b598      	push	{r3, r4, r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80043b0:	f7ff ffd2 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043b4:	4604      	mov	r4, r0
 80043b6:	f7ff f9e5 	bl	8003784 <LL_RCC_GetAPB2Prescaler>
 80043ba:	4603      	mov	r3, r0
 80043bc:	0adb      	lsrs	r3, r3, #11
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd98      	pop	{r3, r4, r7, pc}
 80043d4:	0800d968 	.word	0x0800d968

080043d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80043e4:	d903      	bls.n	80043ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80043e6:	4b15      	ldr	r3, [pc, #84]	@ (800443c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	e007      	b.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	4a11      	ldr	r2, [pc, #68]	@ (800443c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80043f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80043fe:	f7ff f9a7 	bl	8003750 <LL_RCC_GetAHB4Prescaler>
 8004402:	4603      	mov	r3, r0
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a0d      	ldr	r2, [pc, #52]	@ (8004440 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	0c9c      	lsrs	r4, r3, #18
 8004422:	f7fe fef5 	bl	8003210 <HAL_PWREx_GetVoltageRange>
 8004426:	4603      	mov	r3, r0
 8004428:	4619      	mov	r1, r3
 800442a:	4620      	mov	r0, r4
 800442c:	f000 f80c 	bl	8004448 <RCC_SetFlashLatency>
 8004430:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	0800d988 	.word	0x0800d988
 8004440:	0800d928 	.word	0x0800d928
 8004444:	431bde83 	.word	0x431bde83

08004448 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b093      	sub	sp, #76	@ 0x4c
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004452:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <RCC_SetFlashLatency+0xe8>)
 8004454:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800445a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800445e:	4a35      	ldr	r2, [pc, #212]	@ (8004534 <RCC_SetFlashLatency+0xec>)
 8004460:	f107 031c 	add.w	r3, r7, #28
 8004464:	ca07      	ldmia	r2, {r0, r1, r2}
 8004466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800446a:	4b33      	ldr	r3, [pc, #204]	@ (8004538 <RCC_SetFlashLatency+0xf0>)
 800446c:	f107 040c 	add.w	r4, r7, #12
 8004470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004472:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004476:	2300      	movs	r3, #0
 8004478:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004480:	d11a      	bne.n	80044b8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004482:	2300      	movs	r3, #0
 8004484:	643b      	str	r3, [r7, #64]	@ 0x40
 8004486:	e013      	b.n	80044b0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	3348      	adds	r3, #72	@ 0x48
 800448e:	443b      	add	r3, r7
 8004490:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d807      	bhi.n	80044aa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800449a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	3348      	adds	r3, #72	@ 0x48
 80044a0:	443b      	add	r3, r7
 80044a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80044a8:	e020      	b.n	80044ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80044aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ac:	3301      	adds	r3, #1
 80044ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80044b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d9e8      	bls.n	8004488 <RCC_SetFlashLatency+0x40>
 80044b6:	e019      	b.n	80044ec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044bc:	e013      	b.n	80044e6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80044be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3348      	adds	r3, #72	@ 0x48
 80044c4:	443b      	add	r3, r7
 80044c6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d807      	bhi.n	80044e0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80044d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	3348      	adds	r3, #72	@ 0x48
 80044d6:	443b      	add	r3, r7
 80044d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80044dc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80044de:	e005      	b.n	80044ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80044e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e2:	3301      	adds	r3, #1
 80044e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d9e8      	bls.n	80044be <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80044ec:	4b13      	ldr	r3, [pc, #76]	@ (800453c <RCC_SetFlashLatency+0xf4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 0207 	bic.w	r2, r3, #7
 80044f4:	4911      	ldr	r1, [pc, #68]	@ (800453c <RCC_SetFlashLatency+0xf4>)
 80044f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044fc:	f7fe f98c 	bl	8002818 <HAL_GetTick>
 8004500:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004502:	e008      	b.n	8004516 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004504:	f7fe f988 	bl	8002818 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e007      	b.n	8004526 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <RCC_SetFlashLatency+0xf4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004520:	429a      	cmp	r2, r3
 8004522:	d1ef      	bne.n	8004504 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	374c      	adds	r7, #76	@ 0x4c
 800452a:	46bd      	mov	sp, r7
 800452c:	bd90      	pop	{r4, r7, pc}
 800452e:	bf00      	nop
 8004530:	0800d8b8 	.word	0x0800d8b8
 8004534:	0800d8c8 	.word	0x0800d8c8
 8004538:	0800d8d4 	.word	0x0800d8d4
 800453c:	58004000 	.word	0x58004000

08004540 <LL_RCC_LSE_IsEnabled>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <LL_RCC_LSE_IsEnabled+0x18>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <LL_RCC_LSE_IsEnabled+0x1a>
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <LL_RCC_LSE_IsReady>:
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b02      	cmp	r3, #2
 8004576:	d101      	bne.n	800457c <LL_RCC_LSE_IsReady+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_RCC_LSE_IsReady+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_MSI_EnablePLLMode>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_SetRFWKPClockSource>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_RCC_SetSMPSClockSource>:
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	f023 0203 	bic.w	r2, r3, #3
 80045e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_SetSMPSPrescaler>:
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800460c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4313      	orrs	r3, r2
 8004614:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_RCC_SetUSARTClockSource>:
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f023 0203 	bic.w	r2, r3, #3
 8004636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_SetLPUARTClockSource>:
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_SetI2CClockSource>:
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004686:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004692:	43db      	mvns	r3, r3
 8004694:	401a      	ands	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800469e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_SetLPTIMClockSource>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	43db      	mvns	r3, r3
 80046cc:	401a      	ands	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_SetSAIClockSource>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80046f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_RCC_SetRNGClockSource>:
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004724:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_SetCLK48ClockSource>:
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <LL_RCC_SetUSBClockSource>:
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ffe3 	bl	8004740 <LL_RCC_SetCLK48ClockSource>
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <LL_RCC_SetADCClockSource>:
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_SetRTCClockSource>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_RCC_GetRTCClockSource>:
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_RCC_ForceBackupDomainReset>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004816:	b480      	push	{r7}
 8004818:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_RCC_PLLSAI1_Enable>:
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800483c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_RCC_PLLSAI1_Disable>:
{
 8004856:	b480      	push	{r7}
 8004858:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004864:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004868:	6013      	str	r3, [r2, #0]
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_RCC_PLLSAI1_IsReady>:
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004886:	d101      	bne.n	800488c <LL_RCC_PLLSAI1_IsReady+0x18>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80048a0:	2300      	movs	r3, #0
 80048a2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80048a4:	2300      	movs	r3, #0
 80048a6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d034      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048bc:	d021      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80048be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048c2:	d81b      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c8:	d01d      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80048ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ce:	d815      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x54>
 80048d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d8:	d110      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80048ea:	e00d      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f94d 	bl	8004b90 <RCCEx_PLLSAI1_ConfigNP>
 80048f6:	4603      	mov	r3, r0
 80048f8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
        break;
 8004900:	e002      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004908:	7ffb      	ldrb	r3, [r7, #31]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fee8 	bl	80046e8 <LL_RCC_SetSAIClockSource>
 8004918:	e001      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004926:	2b00      	cmp	r3, #0
 8004928:	d046      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800492a:	f7ff ff56 	bl	80047da <LL_RCC_GetRTCClockSource>
 800492e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	429a      	cmp	r2, r3
 8004938:	d03c      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800493a:	f7fe fc59 	bl	80031f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff30 	bl	80047ae <LL_RCC_SetRTCClockSource>
 800494e:	e02e      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004958:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800495a:	f7ff ff4b 	bl	80047f4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800495e:	f7ff ff5a 	bl	8004816 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800497a:	f7ff fde1 	bl	8004540 <LL_RCC_LSE_IsEnabled>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d114      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004984:	f7fd ff48 	bl	8002818 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800498a:	e00b      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f7fd ff44 	bl	8002818 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d902      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	77fb      	strb	r3, [r7, #31]
              break;
 80049a2:	e004      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80049a4:	f7ff fdde 	bl	8004564 <LL_RCC_LSE_IsReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d1ee      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	77bb      	strb	r3, [r7, #30]
 80049b2:	e001      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe2a 	bl	8004622 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fe35 	bl	800464e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fe5d 	bl	80046b4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff fe52 	bl	80046b4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fe2a 	bl	800467a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fe1f 	bl	800467a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d022      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fe8d 	bl	800476c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a6a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a74:	d10b      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f8e3 	bl	8004c46 <RCCEx_PLLSAI1_ConfigNQ>
 8004a80:	4603      	mov	r3, r0
 8004a82:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004a8a:	7ffb      	ldrb	r3, [r7, #31]
 8004a8c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02b      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aac:	d003      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fe2a 	bl	8004714 <LL_RCC_SetRNGClockSource>
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7ff fe21 	bl	8004714 <LL_RCC_SetRNGClockSource>
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff fe34 	bl	8004740 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004aec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d022      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fe3d 	bl	8004782 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b10:	d107      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f8e3 	bl	8004cfc <RCCEx_PLLSAI1_ConfigNR>
 8004b36:	4603      	mov	r3, r0
 8004b38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004b3a:	7ffb      	ldrb	r3, [r7, #31]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004b40:	7ffb      	ldrb	r3, [r7, #31]
 8004b42:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fd26 	bl	80045a6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fd45 	bl	80045fa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fd2c 	bl	80045d2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004b7a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004b88:	f7ff fcfe 	bl	8004588 <LL_RCC_MSI_EnablePLLMode>
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b9c:	f7ff fe5b 	bl	8004856 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ba0:	f7fd fe3a 	bl	8002818 <HAL_GetTick>
 8004ba4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ba6:	e009      	b.n	8004bbc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba8:	f7fd fe36 	bl	8002818 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d902      	bls.n	8004bbc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bba:	e004      	b.n	8004bc6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004bbc:	f7ff fe5a 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d137      	bne.n	8004c3c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004bfa:	f7ff fe1d 	bl	8004838 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fe0b 	bl	8002818 <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c04:	e009      	b.n	8004c1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c06:	f7fd fe07 	bl	8002818 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d902      	bls.n	8004c1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	73fb      	strb	r3, [r7, #15]
        break;
 8004c18:	e004      	b.n	8004c24 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c1a:	f7ff fe2b 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d1f0      	bne.n	8004c06 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d108      	bne.n	8004c3c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004c52:	f7ff fe00 	bl	8004856 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c56:	f7fd fddf 	bl	8002818 <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c5c:	e009      	b.n	8004c72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c5e:	f7fd fddb 	bl	8002818 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d902      	bls.n	8004c72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e004      	b.n	8004c7c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c72:	f7ff fdff 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d137      	bne.n	8004cf2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c96:	4313      	orrs	r3, r2
 8004c98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cac:	4313      	orrs	r3, r2
 8004cae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004cb0:	f7ff fdc2 	bl	8004838 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd fdb0 	bl	8002818 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cbc:	f7fd fdac 	bl	8002818 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e004      	b.n	8004cda <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004cd0:	f7ff fdd0 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d1f0      	bne.n	8004cbc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d108      	bne.n	8004cf2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004d08:	f7ff fda5 	bl	8004856 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d0c:	f7fd fd84 	bl	8002818 <HAL_GetTick>
 8004d10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d12:	e009      	b.n	8004d28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d14:	f7fd fd80 	bl	8002818 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d902      	bls.n	8004d28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	73fb      	strb	r3, [r7, #15]
      break;
 8004d26:	e004      	b.n	8004d32 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d28:	f7ff fda4 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d137      	bne.n	8004da8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d62:	4313      	orrs	r3, r2
 8004d64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d66:	f7ff fd67 	bl	8004838 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fd55 	bl	8002818 <HAL_GetTick>
 8004d6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d70:	e009      	b.n	8004d86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d72:	f7fd fd51 	bl	8002818 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d902      	bls.n	8004d86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	73fb      	strb	r3, [r7, #15]
        break;
 8004d84:	e004      	b.n	8004d90 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d86:	f7ff fd75 	bl	8004874 <LL_RCC_PLLSAI1_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d1f0      	bne.n	8004d72 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e095      	b.n	8004ef0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd4:	d009      	beq.n	8004dea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	61da      	str	r2, [r3, #28]
 8004ddc:	e005      	b.n	8004dea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fd fa31 	bl	800226c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e20:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e2a:	d902      	bls.n	8004e32 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e002      	b.n	8004e38 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e40:	d007      	beq.n	8004e52 <HAL_SPI_Init+0xa0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0204 	and.w	r2, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ece:	ea42 0103 	orr.w	r1, r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Transmit+0x22>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e15f      	b.n	80051da <HAL_SPI_Transmit+0x2e2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f22:	f7fd fc79 	bl	8002818 <HAL_GetTick>
 8004f26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d002      	beq.n	8004f3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f3c:	e148      	b.n	80051d0 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_SPI_Transmit+0x52>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f4e:	e13f      	b.n	80051d0 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2203      	movs	r2, #3
 8004f54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	88fa      	ldrh	r2, [r7, #6]
 8004f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9a:	d10f      	bne.n	8004fbc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004faa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d007      	beq.n	8004fda <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004fe2:	d94f      	bls.n	8005084 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_Transmit+0xfa>
 8004fec:	8afb      	ldrh	r3, [r7, #22]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d142      	bne.n	8005078 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005016:	e02f      	b.n	8005078 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d112      	bne.n	800504c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	881a      	ldrh	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800504a:	e015      	b.n	8005078 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800504c:	f7fd fbe4 	bl	8002818 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d803      	bhi.n	8005064 <HAL_SPI_Transmit+0x16c>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005062:	d102      	bne.n	800506a <HAL_SPI_Transmit+0x172>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005076:	e0ab      	b.n	80051d0 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1ca      	bne.n	8005018 <HAL_SPI_Transmit+0x120>
 8005082:	e080      	b.n	8005186 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Transmit+0x19a>
 800508c:	8afb      	ldrh	r3, [r7, #22]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d174      	bne.n	800517c <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d912      	bls.n	80050c2 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b02      	subs	r3, #2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050c0:	e05c      	b.n	800517c <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	330c      	adds	r3, #12
 80050cc:	7812      	ldrb	r2, [r2, #0]
 80050ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80050e8:	e048      	b.n	800517c <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d12b      	bne.n	8005150 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d912      	bls.n	8005128 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b02      	subs	r3, #2
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005126:	e029      	b.n	800517c <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800514e:	e015      	b.n	800517c <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005150:	f7fd fb62 	bl	8002818 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d803      	bhi.n	8005168 <HAL_SPI_Transmit+0x270>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d102      	bne.n	800516e <HAL_SPI_Transmit+0x276>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800517a:	e029      	b.n	80051d0 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1b1      	bne.n	80050ea <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fb6a 	bl	8005864 <SPI_EndRxTxTransaction>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	613b      	str	r3, [r7, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e003      	b.n	80051d0 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80051d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b08a      	sub	sp, #40	@ 0x28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
 80051ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051f0:	2301      	movs	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x26>
 8005204:	2302      	movs	r3, #2
 8005206:	e20a      	b.n	800561e <HAL_SPI_TransmitReceive+0x43c>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005210:	f7fd fb02 	bl	8002818 <HAL_GetTick>
 8005214:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800521c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005224:	887b      	ldrh	r3, [r7, #2]
 8005226:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800522c:	7efb      	ldrb	r3, [r7, #27]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d00e      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x6e>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005238:	d106      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d102      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x66>
 8005242:	7efb      	ldrb	r3, [r7, #27]
 8005244:	2b04      	cmp	r3, #4
 8005246:	d003      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800524e:	e1e0      	b.n	8005612 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x80>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x80>
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005268:	e1d3      	b.n	8005612 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b04      	cmp	r3, #4
 8005274:	d003      	beq.n	800527e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2205      	movs	r2, #5
 800527a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	887a      	ldrh	r2, [r7, #2]
 800528e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	887a      	ldrh	r2, [r7, #2]
 8005296:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	887a      	ldrh	r2, [r7, #2]
 80052aa:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052c0:	d802      	bhi.n	80052c8 <HAL_SPI_TransmitReceive+0xe6>
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d908      	bls.n	80052da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	e007      	b.n	80052ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b40      	cmp	r3, #64	@ 0x40
 80052f6:	d007      	beq.n	8005308 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005310:	f240 8081 	bls.w	8005416 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_TransmitReceive+0x140>
 800531c:	8a7b      	ldrh	r3, [r7, #18]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d16d      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005346:	e05a      	b.n	80053fe <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d11b      	bne.n	800538e <HAL_SPI_TransmitReceive+0x1ac>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <HAL_SPI_TransmitReceive+0x1ac>
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	2b01      	cmp	r3, #1
 8005364:	d113      	bne.n	800538e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d11c      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x1f4>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d016      	beq.n	80053d6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	b292      	uxth	r2, r2
 80053b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	1c9a      	adds	r2, r3, #2
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053d2:	2301      	movs	r3, #1
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053d6:	f7fd fa1f 	bl	8002818 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d80b      	bhi.n	80053fe <HAL_SPI_TransmitReceive+0x21c>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d007      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80053fc:	e109      	b.n	8005612 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d19f      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x166>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d199      	bne.n	8005348 <HAL_SPI_TransmitReceive+0x166>
 8005414:	e0e3      	b.n	80055de <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_SPI_TransmitReceive+0x244>
 800541e:	8a7b      	ldrh	r3, [r7, #18]
 8005420:	2b01      	cmp	r3, #1
 8005422:	f040 80cf 	bne.w	80055c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d912      	bls.n	8005456 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	881a      	ldrh	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	1c9a      	adds	r2, r3, #2
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b02      	subs	r3, #2
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005454:	e0b6      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800547c:	e0a2      	b.n	80055c4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d134      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x314>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02f      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x314>
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	2b01      	cmp	r3, #1
 800549a:	d12c      	bne.n	80054f6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d912      	bls.n	80054cc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	881a      	ldrh	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b6:	1c9a      	adds	r2, r3, #2
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b02      	subs	r3, #2
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054ca:	e012      	b.n	80054f2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d148      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x3b4>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d042      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d923      	bls.n	8005564 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005526:	b292      	uxth	r2, r2
 8005528:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b02      	subs	r3, #2
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d81f      	bhi.n	8005592 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	e016      	b.n	8005592 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f103 020c 	add.w	r2, r3, #12
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005592:	2301      	movs	r3, #1
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005596:	f7fd f93f 	bl	8002818 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_TransmitReceive+0x3cc>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x3d2>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80055c2:	e026      	b.n	8005612 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f47f af57 	bne.w	800547e <HAL_SPI_TransmitReceive+0x29c>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f47f af50 	bne.w	800547e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f93e 	bl	8005864 <SPI_EndRxTxTransaction>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005608:	e003      	b.n	8005612 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800561a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800561e:	4618      	mov	r0, r3
 8005620:	3728      	adds	r7, #40	@ 0x28
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005638:	f7fd f8ee 	bl	8002818 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005648:	f7fd f8e6 	bl	8002818 <HAL_GetTick>
 800564c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800564e:	4b39      	ldr	r3, [pc, #228]	@ (8005734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	e054      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d050      	beq.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005668:	f7fd f8d6 	bl	8002818 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d13d      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800568c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005696:	d111      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056aa:	d107      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c4:	d10f      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e017      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d19b      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000008 	.word	0x20000008

08005738 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	@ 0x28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800574a:	f7fd f865 	bl	8002818 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	1a9b      	subs	r3, r3, r2
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	4413      	add	r3, r2
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800575a:	f7fd f85d 	bl	8002818 <HAL_GetTick>
 800575e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005768:	4b3d      	ldr	r3, [pc, #244]	@ (8005860 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	00da      	lsls	r2, r3, #3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	0d1b      	lsrs	r3, r3, #20
 8005778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005780:	e060      	b.n	8005844 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005788:	d107      	bne.n	800579a <SPI_WaitFifoStateUntilTimeout+0x62>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005798:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d050      	beq.n	8005844 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057a2:	f7fd f839 	bl	8002818 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d902      	bls.n	80057b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d13d      	bne.n	8005834 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057d0:	d111      	bne.n	80057f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057da:	d004      	beq.n	80057e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e4:	d107      	bne.n	80057f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057fe:	d10f      	bne.n	8005820 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800581e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e010      	b.n	8005856 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3b01      	subs	r3, #1
 8005842:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d196      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3728      	adds	r7, #40	@ 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	20000008 	.word	0x20000008

08005864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff5b 	bl	8005738 <SPI_WaitFifoStateUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e027      	b.n	80058e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	2180      	movs	r1, #128	@ 0x80
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff fec0 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e014      	b.n	80058e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f7ff ff34 	bl	8005738 <SPI_WaitFifoStateUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058da:	f043 0220 	orr.w	r2, r3, #32
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e000      	b.n	80058e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <LL_RCC_GetUSARTClockSource>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4013      	ands	r3, r2
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <LL_RCC_GetLPUARTClockSource>:
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800591c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4013      	ands	r3, r2
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e042      	b.n	80059c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc fcb9 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2224      	movs	r2, #36	@ 0x24
 800595e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fade 	bl	8005f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8b3 	bl	8005aec <UART_SetConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e01b      	b.n	80059c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800599e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fb5d 	bl	8006080 <UART_CheckIdleState>
 80059c6:	4603      	mov	r3, r0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	@ 0x28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d17b      	bne.n	8005ae2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <HAL_UART_Transmit+0x26>
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e074      	b.n	8005ae4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2221      	movs	r2, #33	@ 0x21
 8005a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a0a:	f7fc ff05 	bl	8002818 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a28:	d108      	bne.n	8005a3c <HAL_UART_Transmit+0x6c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e003      	b.n	8005a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a44:	e030      	b.n	8005aa8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2180      	movs	r1, #128	@ 0x80
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fbbf 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e03d      	b.n	8005ae4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	3302      	adds	r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	e007      	b.n	8005a96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1c8      	bne.n	8005a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2140      	movs	r1, #64	@ 0x40
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fb88 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e006      	b.n	8005ae4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
  }
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b08c      	sub	sp, #48	@ 0x30
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	431a      	orrs	r2, r3
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4baf      	ldr	r3, [pc, #700]	@ (8005dd8 <UART_SetConfig+0x2ec>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4aa4      	ldr	r2, [pc, #656]	@ (8005ddc <UART_SetConfig+0x2f0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b54:	4313      	orrs	r3, r2
 8005b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005b62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b76:	f023 010f 	bic.w	r1, r3, #15
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a95      	ldr	r2, [pc, #596]	@ (8005de0 <UART_SetConfig+0x2f4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d125      	bne.n	8005bdc <UART_SetConfig+0xf0>
 8005b90:	2003      	movs	r0, #3
 8005b92:	f7ff fead 	bl	80058f0 <LL_RCC_GetUSARTClockSource>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d81b      	bhi.n	8005bd4 <UART_SetConfig+0xe8>
 8005b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ba4 <UART_SetConfig+0xb8>)
 8005b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba2:	bf00      	nop
 8005ba4:	08005bb5 	.word	0x08005bb5
 8005ba8:	08005bc5 	.word	0x08005bc5
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bba:	e042      	b.n	8005c42 <UART_SetConfig+0x156>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc2:	e03e      	b.n	8005c42 <UART_SetConfig+0x156>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bca:	e03a      	b.n	8005c42 <UART_SetConfig+0x156>
 8005bcc:	2308      	movs	r3, #8
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd2:	e036      	b.n	8005c42 <UART_SetConfig+0x156>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bda:	e032      	b.n	8005c42 <UART_SetConfig+0x156>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a7e      	ldr	r2, [pc, #504]	@ (8005ddc <UART_SetConfig+0x2f0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d12a      	bne.n	8005c3c <UART_SetConfig+0x150>
 8005be6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005bea:	f7ff fe91 	bl	8005910 <LL_RCC_GetLPUARTClockSource>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bf4:	d01a      	beq.n	8005c2c <UART_SetConfig+0x140>
 8005bf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bfa:	d81b      	bhi.n	8005c34 <UART_SetConfig+0x148>
 8005bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c00:	d00c      	beq.n	8005c1c <UART_SetConfig+0x130>
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c06:	d815      	bhi.n	8005c34 <UART_SetConfig+0x148>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <UART_SetConfig+0x128>
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c10:	d008      	beq.n	8005c24 <UART_SetConfig+0x138>
 8005c12:	e00f      	b.n	8005c34 <UART_SetConfig+0x148>
 8005c14:	2300      	movs	r3, #0
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1a:	e012      	b.n	8005c42 <UART_SetConfig+0x156>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c22:	e00e      	b.n	8005c42 <UART_SetConfig+0x156>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2a:	e00a      	b.n	8005c42 <UART_SetConfig+0x156>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c32:	e006      	b.n	8005c42 <UART_SetConfig+0x156>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3a:	e002      	b.n	8005c42 <UART_SetConfig+0x156>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a65      	ldr	r2, [pc, #404]	@ (8005ddc <UART_SetConfig+0x2f0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	f040 8097 	bne.w	8005d7c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d823      	bhi.n	8005c9e <UART_SetConfig+0x1b2>
 8005c56:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <UART_SetConfig+0x170>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005c81 	.word	0x08005c81
 8005c60:	08005c9f 	.word	0x08005c9f
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c9f 	.word	0x08005c9f
 8005c6c:	08005c8f 	.word	0x08005c8f
 8005c70:	08005c9f 	.word	0x08005c9f
 8005c74:	08005c9f 	.word	0x08005c9f
 8005c78:	08005c9f 	.word	0x08005c9f
 8005c7c:	08005c97 	.word	0x08005c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c80:	f7fe fb7e 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c86:	e010      	b.n	8005caa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c88:	4b56      	ldr	r3, [pc, #344]	@ (8005de4 <UART_SetConfig+0x2f8>)
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c8c:	e00d      	b.n	8005caa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c8e:	f7fe faf7 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8005c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c94:	e009      	b.n	8005caa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c9c:	e005      	b.n	8005caa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ca8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 812b 	beq.w	8005f08 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8005de8 <UART_SetConfig+0x2fc>)
 8005cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d305      	bcc.n	8005ce2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d903      	bls.n	8005cea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ce8:	e10e      	b.n	8005f08 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	2200      	movs	r2, #0
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	60fa      	str	r2, [r7, #12]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8005de8 <UART_SetConfig+0x2fc>)
 8005cf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2200      	movs	r2, #0
 8005d00:	603b      	str	r3, [r7, #0]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d0c:	f7fa ff94 	bl	8000c38 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	020b      	lsls	r3, r1, #8
 8005d22:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d26:	0202      	lsls	r2, r0, #8
 8005d28:	6979      	ldr	r1, [r7, #20]
 8005d2a:	6849      	ldr	r1, [r1, #4]
 8005d2c:	0849      	lsrs	r1, r1, #1
 8005d2e:	2000      	movs	r0, #0
 8005d30:	460c      	mov	r4, r1
 8005d32:	4605      	mov	r5, r0
 8005d34:	eb12 0804 	adds.w	r8, r2, r4
 8005d38:	eb43 0905 	adc.w	r9, r3, r5
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	469a      	mov	sl, r3
 8005d44:	4693      	mov	fp, r2
 8005d46:	4652      	mov	r2, sl
 8005d48:	465b      	mov	r3, fp
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa ff73 	bl	8000c38 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4613      	mov	r3, r2
 8005d58:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d60:	d308      	bcc.n	8005d74 <UART_SetConfig+0x288>
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d68:	d204      	bcs.n	8005d74 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	e0c9      	b.n	8005f08 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d7a:	e0c5      	b.n	8005f08 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d84:	d16d      	bne.n	8005e62 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005d86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	2b07      	cmp	r3, #7
 8005d8e:	d82d      	bhi.n	8005dec <UART_SetConfig+0x300>
 8005d90:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <UART_SetConfig+0x2ac>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005ded 	.word	0x08005ded
 8005da4:	08005dc7 	.word	0x08005dc7
 8005da8:	08005ded 	.word	0x08005ded
 8005dac:	08005ded 	.word	0x08005ded
 8005db0:	08005ded 	.word	0x08005ded
 8005db4:	08005dcf 	.word	0x08005dcf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fe faf8 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dbe:	e01b      	b.n	8005df8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc0:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <UART_SetConfig+0x2f8>)
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dc4:	e018      	b.n	8005df8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7fe fa5b 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8005dca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dcc:	e014      	b.n	8005df8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd4:	e010      	b.n	8005df8 <UART_SetConfig+0x30c>
 8005dd6:	bf00      	nop
 8005dd8:	cfff69f3 	.word	0xcfff69f3
 8005ddc:	40008000 	.word	0x40008000
 8005de0:	40013800 	.word	0x40013800
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	0800d9c8 	.word	0x0800d9c8
      default:
        pclk = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005df6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8084 	beq.w	8005f08 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	4a4b      	ldr	r2, [pc, #300]	@ (8005f34 <UART_SetConfig+0x448>)
 8005e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e12:	005a      	lsls	r2, r3, #1
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	441a      	add	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e24:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2b0f      	cmp	r3, #15
 8005e2a:	d916      	bls.n	8005e5a <UART_SetConfig+0x36e>
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e32:	d212      	bcs.n	8005e5a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f023 030f 	bic.w	r3, r3, #15
 8005e3c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	085b      	lsrs	r3, r3, #1
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	8bfb      	ldrh	r3, [r7, #30]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	8bfa      	ldrh	r2, [r7, #30]
 8005e56:	60da      	str	r2, [r3, #12]
 8005e58:	e056      	b.n	8005f08 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e60:	e052      	b.n	8005f08 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b07      	cmp	r3, #7
 8005e6a:	d822      	bhi.n	8005eb2 <UART_SetConfig+0x3c6>
 8005e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x388>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005eb3 	.word	0x08005eb3
 8005e80:	08005ea3 	.word	0x08005ea3
 8005e84:	08005eb3 	.word	0x08005eb3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005eb3 	.word	0x08005eb3
 8005e90:	08005eab 	.word	0x08005eab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e94:	f7fe fa8a 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b26      	ldr	r3, [pc, #152]	@ (8005f38 <UART_SetConfig+0x44c>)
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fe f9ed 	bl	8004280 <HAL_RCC_GetSysClockFreq>
 8005ea6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ea8:	e009      	b.n	8005ebe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005eb0:	e005      	b.n	8005ebe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ebc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d021      	beq.n	8005f08 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f34 <UART_SetConfig+0x448>)
 8005eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	441a      	add	r2, r3
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b0f      	cmp	r3, #15
 8005eec:	d909      	bls.n	8005f02 <UART_SetConfig+0x416>
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ef4:	d205      	bcs.n	8005f02 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e002      	b.n	8005f08 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3730      	adds	r7, #48	@ 0x30
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f32:	bf00      	nop
 8005f34:	0800d9c8 	.word	0x0800d9c8
 8005f38:	00f42400 	.word	0x00f42400

08005f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01a      	beq.n	8006052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800603a:	d10a      	bne.n	8006052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b098      	sub	sp, #96	@ 0x60
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006090:	f7fc fbc2 	bl	8002818 <HAL_GetTick>
 8006094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d12f      	bne.n	8006104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ac:	2200      	movs	r2, #0
 80060ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f88e 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d022      	beq.n	8006104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80060de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e063      	b.n	80061cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b04      	cmp	r3, #4
 8006110:	d149      	bne.n	80061a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f857 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d03c      	beq.n	80061a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	623b      	str	r3, [r7, #32]
   return(result);
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
 800614c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e6      	bne.n	800612c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	60fb      	str	r3, [r7, #12]
   return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800617e:	61fa      	str	r2, [r7, #28]
 8006180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	617b      	str	r3, [r7, #20]
   return(result);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e5      	bne.n	800615e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e012      	b.n	80061cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3758      	adds	r7, #88	@ 0x58
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	e04f      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d04b      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fc fb13 	bl	8002818 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <UART_WaitOnFlagUntilTimeout+0x30>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e04e      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d037      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b80      	cmp	r3, #128	@ 0x80
 800621a:	d034      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b40      	cmp	r3, #64	@ 0x40
 8006220:	d031      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b08      	cmp	r3, #8
 800622e:	d110      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2208      	movs	r2, #8
 8006236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f838 	bl	80062ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2208      	movs	r2, #8
 8006242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e029      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800625c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006260:	d111      	bne.n	8006286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800626a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f81e 	bl	80062ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0a0      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b095      	sub	sp, #84	@ 0x54
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800630c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e3      	bne.n	80062e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d118      	bne.n	800635a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	60bb      	str	r3, [r7, #8]
   return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f023 0310 	bic.w	r3, r3, #16
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6979      	ldr	r1, [r7, #20]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	613b      	str	r3, [r7, #16]
   return(result);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e6      	bne.n	8006328 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2220      	movs	r2, #32
 800635e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800636e:	bf00      	nop
 8006370:	3754      	adds	r7, #84	@ 0x54
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UARTEx_DisableFifoMode+0x16>
 800638c:	2302      	movs	r3, #2
 800638e:	e027      	b.n	80063e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	@ 0x24
 800639c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e02d      	b.n	8006460 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2224      	movs	r2, #36	@ 0x24
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f84f 	bl	80064e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e02d      	b.n	80064dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	@ 0x24
 800648c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f811 	bl	80064e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006504:	e031      	b.n	800656a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006506:	2308      	movs	r3, #8
 8006508:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800650a:	2308      	movs	r3, #8
 800650c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0e5b      	lsrs	r3, r3, #25
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	0f5b      	lsrs	r3, r3, #29
 8006526:	b2db      	uxtb	r3, r3
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	7b3a      	ldrb	r2, [r7, #12]
 8006532:	4911      	ldr	r1, [pc, #68]	@ (8006578 <UARTEx_SetNbDataToProcess+0x94>)
 8006534:	5c8a      	ldrb	r2, [r1, r2]
 8006536:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800653a:	7b3a      	ldrb	r2, [r7, #12]
 800653c:	490f      	ldr	r1, [pc, #60]	@ (800657c <UARTEx_SetNbDataToProcess+0x98>)
 800653e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006540:	fb93 f3f2 	sdiv	r3, r3, r2
 8006544:	b29a      	uxth	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	7b7a      	ldrb	r2, [r7, #13]
 8006550:	4909      	ldr	r1, [pc, #36]	@ (8006578 <UARTEx_SetNbDataToProcess+0x94>)
 8006552:	5c8a      	ldrb	r2, [r1, r2]
 8006554:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006558:	7b7a      	ldrb	r2, [r7, #13]
 800655a:	4908      	ldr	r1, [pc, #32]	@ (800657c <UARTEx_SetNbDataToProcess+0x98>)
 800655c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800655e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006562:	b29a      	uxth	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	0800d9e0 	.word	0x0800d9e0
 800657c:	0800d9e8 	.word	0x0800d9e8

08006580 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006588:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800658c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	b29b      	uxth	r3, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	b29b      	uxth	r3, r3
 800659e:	4013      	ands	r3, r2
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
	...

080065f4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80065f8:	4907      	ldr	r1, [pc, #28]	@ (8006618 <MX_FATFS_Init+0x24>)
 80065fa:	4808      	ldr	r0, [pc, #32]	@ (800661c <MX_FATFS_Init+0x28>)
 80065fc:	f002 fd10 	bl	8009020 <FATFS_LinkDriver>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	e003      	b.n	8006614 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800660c:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <MX_FATFS_Init+0x2c>)
 800660e:	2201      	movs	r2, #1
 8006610:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006612:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20002930 	.word	0x20002930
 800661c:	20000014 	.word	0x20000014
 8006620:	20002934 	.word	0x20002934

08006624 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006628:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800662a:	4618      	mov	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	4618      	mov	r0, r3
 8006642:	f7fa fe61 	bl	8001308 <SD_disk_initialize>
 8006646:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status (pdrv);
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fa ff3f 	bl	80014e0 <SD_disk_status>
 8006662:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006664:	4618      	mov	r0, r3
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read (pdrv, buff, sector, count);
 800667c:	7bf8      	ldrb	r0, [r7, #15]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	f7fa ff42 	bl	800150c <SD_disk_read>
 8006688:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write (pdrv, buff, sector, count);
 80066a2:	7bf8      	ldrb	r0, [r7, #15]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	f7fa ff99 	bl	80015e0 <SD_disk_write>
 80066ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	603a      	str	r2, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
 80066c4:	460b      	mov	r3, r1
 80066c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl (pdrv, cmd, buff);
 80066c8:	79b9      	ldrb	r1, [r7, #6]
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fb f80a 	bl	80016e8 <SD_disk_ioctl>
 80066d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <disk_status+0x30>)
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	79fa      	ldrb	r2, [r7, #7]
 80066f8:	4905      	ldr	r1, [pc, #20]	@ (8006710 <disk_status+0x30>)
 80066fa:	440a      	add	r2, r1
 80066fc:	7a12      	ldrb	r2, [r2, #8]
 80066fe:	4610      	mov	r0, r2
 8006700:	4798      	blx	r3
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20002960 	.word	0x20002960

08006714 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006722:	79fb      	ldrb	r3, [r7, #7]
 8006724:	4a0e      	ldr	r2, [pc, #56]	@ (8006760 <disk_initialize+0x4c>)
 8006726:	5cd3      	ldrb	r3, [r2, r3]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d114      	bne.n	8006756 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	4a0c      	ldr	r2, [pc, #48]	@ (8006760 <disk_initialize+0x4c>)
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	79fa      	ldrb	r2, [r7, #7]
 800673a:	4909      	ldr	r1, [pc, #36]	@ (8006760 <disk_initialize+0x4c>)
 800673c:	440a      	add	r2, r1
 800673e:	7a12      	ldrb	r2, [r2, #8]
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	4a03      	ldr	r2, [pc, #12]	@ (8006760 <disk_initialize+0x4c>)
 8006752:	2101      	movs	r1, #1
 8006754:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20002960 	.word	0x20002960

08006764 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006764:	b590      	push	{r4, r7, lr}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	4a0a      	ldr	r2, [pc, #40]	@ (80067a0 <disk_read+0x3c>)
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	689c      	ldr	r4, [r3, #8]
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	4a07      	ldr	r2, [pc, #28]	@ (80067a0 <disk_read+0x3c>)
 8006784:	4413      	add	r3, r2
 8006786:	7a18      	ldrb	r0, [r3, #8]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	47a0      	blx	r4
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
  return res;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}
 800679e:	bf00      	nop
 80067a0:	20002960 	.word	0x20002960

080067a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	4a0a      	ldr	r2, [pc, #40]	@ (80067e0 <disk_write+0x3c>)
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68dc      	ldr	r4, [r3, #12]
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	4a07      	ldr	r2, [pc, #28]	@ (80067e0 <disk_write+0x3c>)
 80067c4:	4413      	add	r3, r2
 80067c6:	7a18      	ldrb	r0, [r3, #8]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	47a0      	blx	r4
 80067d0:	4603      	mov	r3, r0
 80067d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	bf00      	nop
 80067e0:	20002960 	.word	0x20002960

080067e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	4603      	mov	r3, r0
 80067ec:	603a      	str	r2, [r7, #0]
 80067ee:	71fb      	strb	r3, [r7, #7]
 80067f0:	460b      	mov	r3, r1
 80067f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	4a09      	ldr	r2, [pc, #36]	@ (800681c <disk_ioctl+0x38>)
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	79fa      	ldrb	r2, [r7, #7]
 8006802:	4906      	ldr	r1, [pc, #24]	@ (800681c <disk_ioctl+0x38>)
 8006804:	440a      	add	r2, r1
 8006806:	7a10      	ldrb	r0, [r2, #8]
 8006808:	79b9      	ldrb	r1, [r7, #6]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4798      	blx	r3
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
  return res;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	20002960 	.word	0x20002960

08006820 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3301      	adds	r3, #1
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	b21a      	sxth	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b21b      	sxth	r3, r3
 800683c:	4313      	orrs	r3, r2
 800683e:	b21b      	sxth	r3, r3
 8006840:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006842:	89fb      	ldrh	r3, [r7, #14]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3303      	adds	r3, #3
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	3202      	adds	r2, #2
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	3201      	adds	r2, #1
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
	return rv;
 8006888:	68fb      	ldr	r3, [r7, #12]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	887b      	ldrh	r3, [r7, #2]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	607a      	str	r2, [r7, #4]
 80068ba:	887a      	ldrh	r2, [r7, #2]
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	0a1b      	lsrs	r3, r3, #8
 80068f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	0a1b      	lsrs	r3, r3, #8
 800690a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00d      	beq.n	800695a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	1c53      	adds	r3, r2, #1
 8006942:	613b      	str	r3, [r7, #16]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	6179      	str	r1, [r7, #20]
 800694a:	7812      	ldrb	r2, [r2, #0]
 800694c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f1      	bne.n	800693e <mem_cpy+0x1a>
	}
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	617a      	str	r2, [r7, #20]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3b01      	subs	r3, #1
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f3      	bne.n	8006976 <mem_set+0x10>
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	@ 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	61fa      	str	r2, [r7, #28]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	1c5a      	adds	r2, r3, #1
 80069c2:	61ba      	str	r2, [r7, #24]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	1acb      	subs	r3, r1, r3
 80069c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <mem_cmp+0x40>
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0eb      	beq.n	80069b4 <mem_cmp+0x18>

	return r;
 80069dc:	697b      	ldr	r3, [r7, #20]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3724      	adds	r7, #36	@ 0x24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80069ea:	b480      	push	{r7}
 80069ec:	b083      	sub	sp, #12
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80069f4:	e002      	b.n	80069fc <chk_chr+0x12>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3301      	adds	r3, #1
 80069fa:	607b      	str	r3, [r7, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <chk_chr+0x26>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d1f2      	bne.n	80069f6 <chk_chr+0xc>
	return *str;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	781b      	ldrb	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e029      	b.n	8006a88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006a34:	4a27      	ldr	r2, [pc, #156]	@ (8006ad4 <chk_lock+0xb4>)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4413      	add	r3, r2
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01d      	beq.n	8006a7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a42:	4a24      	ldr	r2, [pc, #144]	@ (8006ad4 <chk_lock+0xb4>)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d116      	bne.n	8006a82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006a54:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad4 <chk_lock+0xb4>)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d10c      	bne.n	8006a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a68:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad4 <chk_lock+0xb4>)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	4413      	add	r3, r2
 8006a70:	3308      	adds	r3, #8
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d102      	bne.n	8006a82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a7c:	e007      	b.n	8006a8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d9d2      	bls.n	8006a34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d109      	bne.n	8006aa8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <chk_lock+0x80>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d101      	bne.n	8006aa4 <chk_lock+0x84>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e010      	b.n	8006ac6 <chk_lock+0xa6>
 8006aa4:	2312      	movs	r3, #18
 8006aa6:	e00e      	b.n	8006ac6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <chk_lock+0xa0>
 8006aae:	4a09      	ldr	r2, [pc, #36]	@ (8006ad4 <chk_lock+0xb4>)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	4413      	add	r3, r2
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006abe:	d101      	bne.n	8006ac4 <chk_lock+0xa4>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	e000      	b.n	8006ac6 <chk_lock+0xa6>
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20002940 	.word	0x20002940

08006ad8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e002      	b.n	8006aea <enq_lock+0x12>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d806      	bhi.n	8006afe <enq_lock+0x26>
 8006af0:	4a09      	ldr	r2, [pc, #36]	@ (8006b18 <enq_lock+0x40>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	4413      	add	r3, r2
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f2      	bne.n	8006ae4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	bf14      	ite	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	2300      	moveq	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20002940 	.word	0x20002940

08006b1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e01f      	b.n	8006b6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b2c:	4a41      	ldr	r2, [pc, #260]	@ (8006c34 <inc_lock+0x118>)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	4413      	add	r3, r2
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d113      	bne.n	8006b66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8006c34 <inc_lock+0x118>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	4413      	add	r3, r2
 8006b46:	3304      	adds	r3, #4
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d109      	bne.n	8006b66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006b52:	4a38      	ldr	r2, [pc, #224]	@ (8006c34 <inc_lock+0x118>)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	4413      	add	r3, r2
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d006      	beq.n	8006b74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d9dc      	bls.n	8006b2c <inc_lock+0x10>
 8006b72:	e000      	b.n	8006b76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006b74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d132      	bne.n	8006be2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e002      	b.n	8006b88 <inc_lock+0x6c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d806      	bhi.n	8006b9c <inc_lock+0x80>
 8006b8e:	4a29      	ldr	r2, [pc, #164]	@ (8006c34 <inc_lock+0x118>)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	4413      	add	r3, r2
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f2      	bne.n	8006b82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d101      	bne.n	8006ba6 <inc_lock+0x8a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e040      	b.n	8006c28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4922      	ldr	r1, [pc, #136]	@ (8006c34 <inc_lock+0x118>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	440b      	add	r3, r1
 8006bb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	491e      	ldr	r1, [pc, #120]	@ (8006c34 <inc_lock+0x118>)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	491a      	ldr	r1, [pc, #104]	@ (8006c34 <inc_lock+0x118>)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	440b      	add	r3, r1
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <inc_lock+0x118>)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	4413      	add	r3, r2
 8006bdc:	330c      	adds	r3, #12
 8006bde:	2200      	movs	r2, #0
 8006be0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <inc_lock+0xe0>
 8006be8:	4a12      	ldr	r2, [pc, #72]	@ (8006c34 <inc_lock+0x118>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	4413      	add	r3, r2
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <inc_lock+0xe0>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e015      	b.n	8006c28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d108      	bne.n	8006c14 <inc_lock+0xf8>
 8006c02:	4a0c      	ldr	r2, [pc, #48]	@ (8006c34 <inc_lock+0x118>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	4413      	add	r3, r2
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	e001      	b.n	8006c18 <inc_lock+0xfc>
 8006c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c18:	4906      	ldr	r1, [pc, #24]	@ (8006c34 <inc_lock+0x118>)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	440b      	add	r3, r1
 8006c20:	330c      	adds	r3, #12
 8006c22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	20002940 	.word	0x20002940

08006c38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d825      	bhi.n	8006c98 <dec_lock+0x60>
		n = Files[i].ctr;
 8006c4c:	4a17      	ldr	r2, [pc, #92]	@ (8006cac <dec_lock+0x74>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	4413      	add	r3, r2
 8006c54:	330c      	adds	r3, #12
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c60:	d101      	bne.n	8006c66 <dec_lock+0x2e>
 8006c62:	2300      	movs	r3, #0
 8006c64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <dec_lock+0x3a>
 8006c6c:	89fb      	ldrh	r3, [r7, #14]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006c72:	4a0e      	ldr	r2, [pc, #56]	@ (8006cac <dec_lock+0x74>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	4413      	add	r3, r2
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	89fa      	ldrh	r2, [r7, #14]
 8006c7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006c80:	89fb      	ldrh	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d105      	bne.n	8006c92 <dec_lock+0x5a>
 8006c86:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <dec_lock+0x74>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	4413      	add	r3, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	737b      	strb	r3, [r7, #13]
 8006c96:	e001      	b.n	8006c9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006c98:	2302      	movs	r3, #2
 8006c9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20002940 	.word	0x20002940

08006cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e010      	b.n	8006ce0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf4 <clear_lock+0x44>)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	4413      	add	r3, r2
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d105      	bne.n	8006cda <clear_lock+0x2a>
 8006cce:	4a09      	ldr	r2, [pc, #36]	@ (8006cf4 <clear_lock+0x44>)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d9eb      	bls.n	8006cbe <clear_lock+0xe>
	}
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	20002940 	.word	0x20002940

08006cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	78db      	ldrb	r3, [r3, #3]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d034      	beq.n	8006d76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7858      	ldrb	r0, [r3, #1]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	f7ff fd40 	bl	80067a4 <disk_write>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e022      	b.n	8006d76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	1ad2      	subs	r2, r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d217      	bcs.n	8006d76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	789b      	ldrb	r3, [r3, #2]
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e010      	b.n	8006d70 <sync_window+0x78>
					wsect += fs->fsize;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7858      	ldrb	r0, [r3, #1]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006d62:	2301      	movs	r3, #1
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	f7ff fd1d 	bl	80067a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d8eb      	bhi.n	8006d4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d01b      	beq.n	8006dd0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff ffad 	bl	8006cf8 <sync_window>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d113      	bne.n	8006dd0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7858      	ldrb	r0, [r3, #1]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006db2:	2301      	movs	r3, #1
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	f7ff fcd5 	bl	8006764 <disk_read>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ff87 	bl	8006cf8 <sync_window>
 8006dea:	4603      	mov	r3, r0
 8006dec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006dee:	7bfb      	ldrb	r3, [r7, #15]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d159      	bne.n	8006ea8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d149      	bne.n	8006e90 <sync_fs+0xb4>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	791b      	ldrb	r3, [r3, #4]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d145      	bne.n	8006e90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	899b      	ldrh	r3, [r3, #12]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	2100      	movs	r1, #0
 8006e12:	f7ff fda8 	bl	8006966 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3334      	adds	r3, #52	@ 0x34
 8006e1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006e1e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff fd37 	bl	8006896 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3334      	adds	r3, #52	@ 0x34
 8006e2c:	4921      	ldr	r1, [pc, #132]	@ (8006eb4 <sync_fs+0xd8>)
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7ff fd4c 	bl	80068cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3334      	adds	r3, #52	@ 0x34
 8006e38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006e3c:	491e      	ldr	r1, [pc, #120]	@ (8006eb8 <sync_fs+0xdc>)
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff fd44 	bl	80068cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3334      	adds	r3, #52	@ 0x34
 8006e48:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7ff fd3a 	bl	80068cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3334      	adds	r3, #52	@ 0x34
 8006e5c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7ff fd30 	bl	80068cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7858      	ldrb	r0, [r3, #1]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e84:	2301      	movs	r3, #1
 8006e86:	f7ff fc8d 	bl	80067a4 <disk_write>
			fs->fsi_flag = 0;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2200      	movs	r2, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fca3 	bl	80067e4 <disk_ioctl>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <sync_fs+0xcc>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	41615252 	.word	0x41615252
 8006eb8:	61417272 	.word	0x61417272

08006ebc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3b02      	subs	r3, #2
 8006eca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	3b02      	subs	r3, #2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d301      	bcc.n	8006edc <clust2sect+0x20>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e008      	b.n	8006eee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	895b      	ldrh	r3, [r3, #10]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	fb03 f202 	mul.w	r2, r3, r2
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4413      	add	r3, r2
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d904      	bls.n	8006f1a <get_fat+0x20>
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	e0ba      	b.n	8007096 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	f000 8082 	beq.w	8007034 <get_fat+0x13a>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	f300 80a6 	bgt.w	8007082 <get_fat+0x188>
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d002      	beq.n	8006f40 <get_fat+0x46>
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d055      	beq.n	8006fea <get_fat+0xf0>
 8006f3e:	e0a0      	b.n	8007082 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	085b      	lsrs	r3, r3, #1
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	899b      	ldrh	r3, [r3, #12]
 8006f56:	4619      	mov	r1, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f5e:	4413      	add	r3, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	6938      	ldr	r0, [r7, #16]
 8006f64:	f7ff ff0c 	bl	8006d80 <move_window>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 808c 	bne.w	8007088 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	60fa      	str	r2, [r7, #12]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	8992      	ldrh	r2, [r2, #12]
 8006f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f7e:	fb01 f202 	mul.w	r2, r1, r2
 8006f82:	1a9b      	subs	r3, r3, r2
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4413      	add	r3, r2
 8006f88:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	899b      	ldrh	r3, [r3, #12]
 8006f96:	4619      	mov	r1, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6938      	ldr	r0, [r7, #16]
 8006fa4:	f7ff feec 	bl	8006d80 <move_window>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d16e      	bne.n	800708c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	899b      	ldrh	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fba:	fb01 f202 	mul.w	r2, r1, r2
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <get_fat+0xe6>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	e002      	b.n	8006fe6 <get_fat+0xec>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fe6:	617b      	str	r3, [r7, #20]
			break;
 8006fe8:	e055      	b.n	8007096 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	899b      	ldrh	r3, [r3, #12]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ffe:	4413      	add	r3, r2
 8007000:	4619      	mov	r1, r3
 8007002:	6938      	ldr	r0, [r7, #16]
 8007004:	f7ff febc 	bl	8006d80 <move_window>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d140      	bne.n	8007090 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	8992      	ldrh	r2, [r2, #12]
 800701c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007020:	fb00 f202 	mul.w	r2, r0, r2
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	440b      	add	r3, r1
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fbf9 	bl	8006820 <ld_word>
 800702e:	4603      	mov	r3, r0
 8007030:	617b      	str	r3, [r7, #20]
			break;
 8007032:	e030      	b.n	8007096 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	899b      	ldrh	r3, [r3, #12]
 800703c:	089b      	lsrs	r3, r3, #2
 800703e:	b29b      	uxth	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	fbb3 f3f1 	udiv	r3, r3, r1
 8007048:	4413      	add	r3, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6938      	ldr	r0, [r7, #16]
 800704e:	f7ff fe97 	bl	8006d80 <move_window>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11d      	bne.n	8007094 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	8992      	ldrh	r2, [r2, #12]
 8007066:	fbb3 f0f2 	udiv	r0, r3, r2
 800706a:	fb00 f202 	mul.w	r2, r0, r2
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	440b      	add	r3, r1
 8007072:	4618      	mov	r0, r3
 8007074:	f7ff fbec 	bl	8006850 <ld_dword>
 8007078:	4603      	mov	r3, r0
 800707a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800707e:	617b      	str	r3, [r7, #20]
			break;
 8007080:	e009      	b.n	8007096 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007082:	2301      	movs	r3, #1
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e006      	b.n	8007096 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007088:	bf00      	nop
 800708a:	e004      	b.n	8007096 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007094:	bf00      	nop
		}
	}

	return val;
 8007096:	697b      	ldr	r3, [r7, #20]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80070a0:	b590      	push	{r4, r7, lr}
 80070a2:	b089      	sub	sp, #36	@ 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80070ac:	2302      	movs	r3, #2
 80070ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	f240 8109 	bls.w	80072ca <put_fat+0x22a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	f080 8103 	bcs.w	80072ca <put_fat+0x22a>
		switch (fs->fs_type) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	f000 80b6 	beq.w	800723a <put_fat+0x19a>
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	f300 80fb 	bgt.w	80072ca <put_fat+0x22a>
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d003      	beq.n	80070e0 <put_fat+0x40>
 80070d8:	2b02      	cmp	r3, #2
 80070da:	f000 8083 	beq.w	80071e4 <put_fat+0x144>
 80070de:	e0f4      	b.n	80072ca <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4413      	add	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	899b      	ldrh	r3, [r3, #12]
 80070f6:	4619      	mov	r1, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80070fe:	4413      	add	r3, r2
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fe3c 	bl	8006d80 <move_window>
 8007108:	4603      	mov	r3, r0
 800710a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800710c:	7ffb      	ldrb	r3, [r7, #31]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 80d4 	bne.w	80072bc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	61ba      	str	r2, [r7, #24]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	8992      	ldrh	r2, [r2, #12]
 8007124:	fbb3 f0f2 	udiv	r0, r3, r2
 8007128:	fb00 f202 	mul.w	r2, r0, r2
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	440b      	add	r3, r1
 8007130:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00d      	beq.n	8007158 <put_fat+0xb8>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b25b      	sxtb	r3, r3
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	b25a      	sxtb	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	b25b      	sxtb	r3, r3
 8007150:	4313      	orrs	r3, r2
 8007152:	b25b      	sxtb	r3, r3
 8007154:	b2db      	uxtb	r3, r3
 8007156:	e001      	b.n	800715c <put_fat+0xbc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	899b      	ldrh	r3, [r3, #12]
 800716e:	4619      	mov	r1, r3
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	fbb3 f3f1 	udiv	r3, r3, r1
 8007176:	4413      	add	r3, r2
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7ff fe00 	bl	8006d80 <move_window>
 8007180:	4603      	mov	r3, r0
 8007182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007184:	7ffb      	ldrb	r3, [r7, #31]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f040 809a 	bne.w	80072c0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	899b      	ldrh	r3, [r3, #12]
 8007196:	461a      	mov	r2, r3
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	fbb3 f0f2 	udiv	r0, r3, r2
 800719e:	fb00 f202 	mul.w	r2, r0, r2
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	440b      	add	r3, r1
 80071a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <put_fat+0x11a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	091b      	lsrs	r3, r3, #4
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	e00e      	b.n	80071d8 <put_fat+0x138>
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	f023 030f 	bic.w	r3, r3, #15
 80071c4:	b25a      	sxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b25b      	sxtb	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	70da      	strb	r2, [r3, #3]
			break;
 80071e2:	e072      	b.n	80072ca <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	899b      	ldrh	r3, [r3, #12]
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	4619      	mov	r1, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80071f8:	4413      	add	r3, r2
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fdbf 	bl	8006d80 <move_window>
 8007202:	4603      	mov	r3, r0
 8007204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007206:	7ffb      	ldrb	r3, [r7, #31]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d15b      	bne.n	80072c4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	8992      	ldrh	r2, [r2, #12]
 800721a:	fbb3 f0f2 	udiv	r0, r3, r2
 800721e:	fb00 f202 	mul.w	r2, r0, r2
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	440b      	add	r3, r1
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	b292      	uxth	r2, r2
 800722a:	4611      	mov	r1, r2
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff fb32 	bl	8006896 <st_word>
			fs->wflag = 1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	70da      	strb	r2, [r3, #3]
			break;
 8007238:	e047      	b.n	80072ca <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	899b      	ldrh	r3, [r3, #12]
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	b29b      	uxth	r3, r3
 8007246:	4619      	mov	r1, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	fbb3 f3f1 	udiv	r3, r3, r1
 800724e:	4413      	add	r3, r2
 8007250:	4619      	mov	r1, r3
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fd94 	bl	8006d80 <move_window>
 8007258:	4603      	mov	r3, r0
 800725a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800725c:	7ffb      	ldrb	r3, [r7, #31]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d132      	bne.n	80072c8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	8992      	ldrh	r2, [r2, #12]
 8007276:	fbb3 f0f2 	udiv	r0, r3, r2
 800727a:	fb00 f202 	mul.w	r2, r0, r2
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	440b      	add	r3, r1
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fae4 	bl	8006850 <ld_dword>
 8007288:	4603      	mov	r3, r0
 800728a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800728e:	4323      	orrs	r3, r4
 8007290:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	8992      	ldrh	r2, [r2, #12]
 80072a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80072a4:	fb00 f202 	mul.w	r2, r0, r2
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	440b      	add	r3, r1
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fb0c 	bl	80068cc <st_dword>
			fs->wflag = 1;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	70da      	strb	r2, [r3, #3]
			break;
 80072ba:	e006      	b.n	80072ca <put_fat+0x22a>
			if (res != FR_OK) break;
 80072bc:	bf00      	nop
 80072be:	e004      	b.n	80072ca <put_fat+0x22a>
			if (res != FR_OK) break;
 80072c0:	bf00      	nop
 80072c2:	e002      	b.n	80072ca <put_fat+0x22a>
			if (res != FR_OK) break;
 80072c4:	bf00      	nop
 80072c6:	e000      	b.n	80072ca <put_fat+0x22a>
			if (res != FR_OK) break;
 80072c8:	bf00      	nop
		}
	}
	return res;
 80072ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3724      	adds	r7, #36	@ 0x24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd90      	pop	{r4, r7, pc}

080072d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d904      	bls.n	80072fa <remove_chain+0x26>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d301      	bcc.n	80072fe <remove_chain+0x2a>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e04b      	b.n	8007396 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00c      	beq.n	800731e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	69b8      	ldr	r0, [r7, #24]
 800730c:	f7ff fec8 	bl	80070a0 <put_fat>
 8007310:	4603      	mov	r3, r0
 8007312:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007314:	7ffb      	ldrb	r3, [r7, #31]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <remove_chain+0x4a>
 800731a:	7ffb      	ldrb	r3, [r7, #31]
 800731c:	e03b      	b.n	8007396 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff fdea 	bl	8006efa <get_fat>
 8007326:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d031      	beq.n	8007392 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <remove_chain+0x64>
 8007334:	2302      	movs	r3, #2
 8007336:	e02e      	b.n	8007396 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d101      	bne.n	8007344 <remove_chain+0x70>
 8007340:	2301      	movs	r3, #1
 8007342:	e028      	b.n	8007396 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007344:	2200      	movs	r2, #0
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	69b8      	ldr	r0, [r7, #24]
 800734a:	f7ff fea9 	bl	80070a0 <put_fat>
 800734e:	4603      	mov	r3, r0
 8007350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007352:	7ffb      	ldrb	r3, [r7, #31]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <remove_chain+0x88>
 8007358:	7ffb      	ldrb	r3, [r7, #31]
 800735a:	e01c      	b.n	8007396 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	3b02      	subs	r3, #2
 8007366:	429a      	cmp	r2, r3
 8007368:	d20b      	bcs.n	8007382 <remove_chain+0xae>
			fs->free_clst++;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	791b      	ldrb	r3, [r3, #4]
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	429a      	cmp	r2, r3
 800738e:	d3c6      	bcc.n	800731e <remove_chain+0x4a>
 8007390:	e000      	b.n	8007394 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007392:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b088      	sub	sp, #32
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10d      	bne.n	80073d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d004      	beq.n	80073ca <create_chain+0x2c>
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d31b      	bcc.n	8007402 <create_chain+0x64>
 80073ca:	2301      	movs	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e018      	b.n	8007402 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fd91 	bl	8006efa <get_fat>
 80073d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d801      	bhi.n	80073e4 <create_chain+0x46>
 80073e0:	2301      	movs	r3, #1
 80073e2:	e070      	b.n	80074c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d101      	bne.n	80073f0 <create_chain+0x52>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	e06a      	b.n	80074c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d201      	bcs.n	80073fe <create_chain+0x60>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	e063      	b.n	80074c6 <create_chain+0x128>
		scl = clst;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3301      	adds	r3, #1
 800740a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	429a      	cmp	r2, r3
 8007414:	d307      	bcc.n	8007426 <create_chain+0x88>
				ncl = 2;
 8007416:	2302      	movs	r3, #2
 8007418:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800741a:	69fa      	ldr	r2, [r7, #28]
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	429a      	cmp	r2, r3
 8007420:	d901      	bls.n	8007426 <create_chain+0x88>
 8007422:	2300      	movs	r3, #0
 8007424:	e04f      	b.n	80074c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007426:	69f9      	ldr	r1, [r7, #28]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff fd66 	bl	8006efa <get_fat>
 800742e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00e      	beq.n	8007454 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d003      	beq.n	8007444 <create_chain+0xa6>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d101      	bne.n	8007448 <create_chain+0xaa>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	e03e      	b.n	80074c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	d1da      	bne.n	8007406 <create_chain+0x68>
 8007450:	2300      	movs	r3, #0
 8007452:	e038      	b.n	80074c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007454:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	69f9      	ldr	r1, [r7, #28]
 800745c:	6938      	ldr	r0, [r7, #16]
 800745e:	f7ff fe1f 	bl	80070a0 <put_fat>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d109      	bne.n	8007480 <create_chain+0xe2>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d006      	beq.n	8007480 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6938      	ldr	r0, [r7, #16]
 8007478:	f7ff fe12 	bl	80070a0 <put_fat>
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d116      	bne.n	80074b4 <create_chain+0x116>
		fs->last_clst = ncl;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	3b02      	subs	r3, #2
 8007496:	429a      	cmp	r2, r3
 8007498:	d804      	bhi.n	80074a4 <create_chain+0x106>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	1e5a      	subs	r2, r3, #1
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	711a      	strb	r2, [r3, #4]
 80074b2:	e007      	b.n	80074c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d102      	bne.n	80074c0 <create_chain+0x122>
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295
 80074be:	e000      	b.n	80074c2 <create_chain+0x124>
 80074c0:	2301      	movs	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80074c4:	69fb      	ldr	r3, [r7, #28]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b087      	sub	sp, #28
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e2:	3304      	adds	r3, #4
 80074e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	899b      	ldrh	r3, [r3, #12]
 80074ea:	461a      	mov	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	8952      	ldrh	r2, [r2, #10]
 80074f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	1d1a      	adds	r2, r3, #4
 8007500:	613a      	str	r2, [r7, #16]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <clmt_clust+0x42>
 800750c:	2300      	movs	r3, #0
 800750e:	e010      	b.n	8007532 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d307      	bcc.n	8007528 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3304      	adds	r3, #4
 8007524:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007526:	e7e9      	b.n	80074fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007528:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	4413      	add	r3, r2
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007554:	d204      	bcs.n	8007560 <dir_sdi+0x22>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007560:	2302      	movs	r3, #2
 8007562:	e071      	b.n	8007648 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <dir_sdi+0x46>
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d902      	bls.n	8007584 <dir_sdi+0x46>
		clst = fs->dirbase;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10c      	bne.n	80075a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	8912      	ldrh	r2, [r2, #8]
 8007592:	4293      	cmp	r3, r2
 8007594:	d301      	bcc.n	800759a <dir_sdi+0x5c>
 8007596:	2302      	movs	r3, #2
 8007598:	e056      	b.n	8007648 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	61da      	str	r2, [r3, #28]
 80075a2:	e02d      	b.n	8007600 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	895b      	ldrh	r3, [r3, #10]
 80075a8:	461a      	mov	r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	899b      	ldrh	r3, [r3, #12]
 80075ae:	fb02 f303 	mul.w	r3, r2, r3
 80075b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075b4:	e019      	b.n	80075ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6979      	ldr	r1, [r7, #20]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fc9d 	bl	8006efa <get_fat>
 80075c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d101      	bne.n	80075ce <dir_sdi+0x90>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e03c      	b.n	8007648 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d904      	bls.n	80075de <dir_sdi+0xa0>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d301      	bcc.n	80075e2 <dir_sdi+0xa4>
 80075de:	2302      	movs	r3, #2
 80075e0:	e032      	b.n	8007648 <dir_sdi+0x10a>
			ofs -= csz;
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d2e1      	bcs.n	80075b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80075f2:	6979      	ldr	r1, [r7, #20]
 80075f4:	6938      	ldr	r0, [r7, #16]
 80075f6:	f7ff fc61 	bl	8006ebc <clust2sect>
 80075fa:	4602      	mov	r2, r0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <dir_sdi+0xd4>
 800760e:	2302      	movs	r3, #2
 8007610:	e01a      	b.n	8007648 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	899b      	ldrh	r3, [r3, #12]
 800761a:	4619      	mov	r1, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007622:	441a      	add	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	899b      	ldrh	r3, [r3, #12]
 8007632:	461a      	mov	r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	fbb3 f0f2 	udiv	r0, r3, r2
 800763a:	fb00 f202 	mul.w	r2, r0, r2
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	18ca      	adds	r2, r1, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	3320      	adds	r3, #32
 8007666:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <dir_next+0x28>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007676:	d301      	bcc.n	800767c <dir_next+0x2c>
 8007678:	2304      	movs	r3, #4
 800767a:	e0bb      	b.n	80077f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	899b      	ldrh	r3, [r3, #12]
 8007680:	461a      	mov	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	fbb3 f1f2 	udiv	r1, r3, r2
 8007688:	fb01 f202 	mul.w	r2, r1, r2
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	f040 809d 	bne.w	80077ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10b      	bne.n	80076be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	8912      	ldrh	r2, [r2, #8]
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f0c0 808d 	bcc.w	80077ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	61da      	str	r2, [r3, #28]
 80076ba:	2304      	movs	r3, #4
 80076bc:	e09a      	b.n	80077f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	899b      	ldrh	r3, [r3, #12]
 80076c2:	461a      	mov	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	8952      	ldrh	r2, [r2, #10]
 80076ce:	3a01      	subs	r2, #1
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d17b      	bne.n	80077ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f7ff fc0b 	bl	8006efa <get_fat>
 80076e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d801      	bhi.n	80076f0 <dir_next+0xa0>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e081      	b.n	80077f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	d101      	bne.n	80076fc <dir_next+0xac>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e07b      	b.n	80077f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	429a      	cmp	r2, r3
 8007704:	d359      	bcc.n	80077ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	61da      	str	r2, [r3, #28]
 8007712:	2304      	movs	r3, #4
 8007714:	e06e      	b.n	80077f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7ff fe3d 	bl	800739e <create_chain>
 8007724:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <dir_next+0xe0>
 800772c:	2307      	movs	r3, #7
 800772e:	e061      	b.n	80077f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d101      	bne.n	800773a <dir_next+0xea>
 8007736:	2302      	movs	r3, #2
 8007738:	e05c      	b.n	80077f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d101      	bne.n	8007746 <dir_next+0xf6>
 8007742:	2301      	movs	r3, #1
 8007744:	e056      	b.n	80077f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff fad6 	bl	8006cf8 <sync_window>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <dir_next+0x106>
 8007752:	2301      	movs	r3, #1
 8007754:	e04e      	b.n	80077f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	899b      	ldrh	r3, [r3, #12]
 8007760:	461a      	mov	r2, r3
 8007762:	2100      	movs	r1, #0
 8007764:	f7ff f8ff 	bl	8006966 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff fba4 	bl	8006ebc <clust2sect>
 8007774:	4602      	mov	r2, r0
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	631a      	str	r2, [r3, #48]	@ 0x30
 800777a:	e012      	b.n	80077a2 <dir_next+0x152>
						fs->wflag = 1;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fab8 	bl	8006cf8 <sync_window>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <dir_next+0x142>
 800778e:	2301      	movs	r3, #1
 8007790:	e030      	b.n	80077f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3301      	adds	r3, #1
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	895b      	ldrh	r3, [r3, #10]
 80077a6:	461a      	mov	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d3e6      	bcc.n	800777c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad2      	subs	r2, r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fb7a 	bl	8006ebc <clust2sect>
 80077c8:	4602      	mov	r2, r0
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	899b      	ldrh	r3, [r3, #12]
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80077e6:	fb00 f202 	mul.w	r2, r0, r2
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	18ca      	adds	r2, r1, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff fe95 	bl	800753e <dir_sdi>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d12b      	bne.n	8007876 <dir_alloc+0x7a>
		n = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff faa9 	bl	8006d80 <move_window>
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d11d      	bne.n	8007874 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2be5      	cmp	r3, #229	@ 0xe5
 8007840:	d004      	beq.n	800784c <dir_alloc+0x50>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d107      	bne.n	800785c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	3301      	adds	r3, #1
 8007850:	613b      	str	r3, [r7, #16]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d102      	bne.n	8007860 <dir_alloc+0x64>
 800785a:	e00c      	b.n	8007876 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007860:	2101      	movs	r1, #1
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fef4 	bl	8007650 <dir_next>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0d7      	beq.n	8007822 <dir_alloc+0x26>
 8007872:	e000      	b.n	8007876 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007874:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d101      	bne.n	8007880 <dir_alloc+0x84>
 800787c:	2307      	movs	r3, #7
 800787e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	331a      	adds	r3, #26
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe ffc1 	bl	8006820 <ld_word>
 800789e:	4603      	mov	r3, r0
 80078a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d109      	bne.n	80078be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe ffb6 	bl	8006820 <ld_word>
 80078b4:	4603      	mov	r3, r0
 80078b6:	041b      	lsls	r3, r3, #16
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80078be:	68fb      	ldr	r3, [r7, #12]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	331a      	adds	r3, #26
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	b292      	uxth	r2, r2
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe ffd9 	bl	8006896 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d109      	bne.n	8007900 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f103 0214 	add.w	r2, r3, #20
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fe ffcb 	bl	8006896 <st_word>
	}
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007916:	2100      	movs	r1, #0
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fe10 	bl	800753e <dir_sdi>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <dir_find+0x24>
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	e03e      	b.n	80079aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	4619      	mov	r1, r3
 8007932:	6938      	ldr	r0, [r7, #16]
 8007934:	f7ff fa24 	bl	8006d80 <move_window>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d12f      	bne.n	80079a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <dir_find+0x4e>
 8007950:	2304      	movs	r3, #4
 8007952:	75fb      	strb	r3, [r7, #23]
 8007954:	e028      	b.n	80079a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	330b      	adds	r3, #11
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007962:	b2da      	uxtb	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	330b      	adds	r3, #11
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <dir_find+0x86>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a18      	ldr	r0, [r3, #32]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3324      	adds	r3, #36	@ 0x24
 8007980:	220b      	movs	r2, #11
 8007982:	4619      	mov	r1, r3
 8007984:	f7ff f80a 	bl	800699c <mem_cmp>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00b      	beq.n	80079a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800798e:	2100      	movs	r1, #0
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7ff fe5d 	bl	8007650 <dir_next>
 8007996:	4603      	mov	r3, r0
 8007998:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0c5      	beq.n	800792c <dir_find+0x24>
 80079a0:	e002      	b.n	80079a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80079a2:	bf00      	nop
 80079a4:	e000      	b.n	80079a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80079a6:	bf00      	nop

	return res;
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80079c0:	2101      	movs	r1, #1
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ff1a 	bl	80077fc <dir_alloc>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d11c      	bne.n	8007a0c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	4619      	mov	r1, r3
 80079d8:	68b8      	ldr	r0, [r7, #8]
 80079da:	f7ff f9d1 	bl	8006d80 <move_window>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d111      	bne.n	8007a0c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	2220      	movs	r2, #32
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fe ffb8 	bl	8006966 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a18      	ldr	r0, [r3, #32]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3324      	adds	r3, #36	@ 0x24
 80079fe:	220b      	movs	r2, #11
 8007a00:	4619      	mov	r1, r3
 8007a02:	f7fe ff8f 	bl	8006924 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3324      	adds	r3, #36	@ 0x24
 8007a2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007a2e:	220b      	movs	r2, #11
 8007a30:	2120      	movs	r1, #32
 8007a32:	68b8      	ldr	r0, [r7, #8]
 8007a34:	f7fe ff97 	bl	8006966 <mem_set>
	si = i = 0; ni = 8;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	61fb      	str	r3, [r7, #28]
 8007a40:	2308      	movs	r3, #8
 8007a42:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	61fa      	str	r2, [r7, #28]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007a52:	7efb      	ldrb	r3, [r7, #27]
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d94e      	bls.n	8007af6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007a58:	7efb      	ldrb	r3, [r7, #27]
 8007a5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a5c:	d006      	beq.n	8007a6c <create_name+0x54>
 8007a5e:	7efb      	ldrb	r3, [r7, #27]
 8007a60:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a62:	d110      	bne.n	8007a86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007a64:	e002      	b.n	8007a6c <create_name+0x54>
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b2f      	cmp	r3, #47	@ 0x2f
 8007a76:	d0f6      	beq.n	8007a66 <create_name+0x4e>
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b5c      	cmp	r3, #92	@ 0x5c
 8007a82:	d0f0      	beq.n	8007a66 <create_name+0x4e>
			break;
 8007a84:	e038      	b.n	8007af8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007a86:	7efb      	ldrb	r3, [r7, #27]
 8007a88:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a8a:	d003      	beq.n	8007a94 <create_name+0x7c>
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d30c      	bcc.n	8007aae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b0b      	cmp	r3, #11
 8007a98:	d002      	beq.n	8007aa0 <create_name+0x88>
 8007a9a:	7efb      	ldrb	r3, [r7, #27]
 8007a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a9e:	d001      	beq.n	8007aa4 <create_name+0x8c>
 8007aa0:	2306      	movs	r3, #6
 8007aa2:	e044      	b.n	8007b2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	230b      	movs	r3, #11
 8007aaa:	617b      	str	r3, [r7, #20]
			continue;
 8007aac:	e022      	b.n	8007af4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007aae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da04      	bge.n	8007ac0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007ab6:	7efb      	ldrb	r3, [r7, #27]
 8007ab8:	3b80      	subs	r3, #128	@ 0x80
 8007aba:	4a1f      	ldr	r2, [pc, #124]	@ (8007b38 <create_name+0x120>)
 8007abc:	5cd3      	ldrb	r3, [r2, r3]
 8007abe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007ac0:	7efb      	ldrb	r3, [r7, #27]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	481d      	ldr	r0, [pc, #116]	@ (8007b3c <create_name+0x124>)
 8007ac6:	f7fe ff90 	bl	80069ea <chk_chr>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <create_name+0xbc>
 8007ad0:	2306      	movs	r3, #6
 8007ad2:	e02c      	b.n	8007b2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007ad4:	7efb      	ldrb	r3, [r7, #27]
 8007ad6:	2b60      	cmp	r3, #96	@ 0x60
 8007ad8:	d905      	bls.n	8007ae6 <create_name+0xce>
 8007ada:	7efb      	ldrb	r3, [r7, #27]
 8007adc:	2b7a      	cmp	r3, #122	@ 0x7a
 8007ade:	d802      	bhi.n	8007ae6 <create_name+0xce>
 8007ae0:	7efb      	ldrb	r3, [r7, #27]
 8007ae2:	3b20      	subs	r3, #32
 8007ae4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	613a      	str	r2, [r7, #16]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	4413      	add	r3, r2
 8007af0:	7efa      	ldrb	r2, [r7, #27]
 8007af2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007af4:	e7a6      	b.n	8007a44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007af6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	441a      	add	r2, r3
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <create_name+0xf4>
 8007b08:	2306      	movs	r3, #6
 8007b0a:	e010      	b.n	8007b2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2be5      	cmp	r3, #229	@ 0xe5
 8007b12:	d102      	bne.n	8007b1a <create_name+0x102>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2205      	movs	r2, #5
 8007b18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007b1a:	7efb      	ldrb	r3, [r7, #27]
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d801      	bhi.n	8007b24 <create_name+0x10c>
 8007b20:	2204      	movs	r2, #4
 8007b22:	e000      	b.n	8007b26 <create_name+0x10e>
 8007b24:	2200      	movs	r2, #0
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	330b      	adds	r3, #11
 8007b2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007b2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3720      	adds	r7, #32
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	0800d9f0 	.word	0x0800d9f0
 8007b3c:	0800d8e4 	.word	0x0800d8e4

08007b40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b54:	e002      	b.n	8007b5c <follow_path+0x1c>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b2f      	cmp	r3, #47	@ 0x2f
 8007b62:	d0f8      	beq.n	8007b56 <follow_path+0x16>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b6a:	d0f4      	beq.n	8007b56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b1f      	cmp	r3, #31
 8007b78:	d80a      	bhi.n	8007b90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2280      	movs	r2, #128	@ 0x80
 8007b7e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007b82:	2100      	movs	r1, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff fcda 	bl	800753e <dir_sdi>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]
 8007b8e:	e048      	b.n	8007c22 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b90:	463b      	mov	r3, r7
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff ff3f 	bl	8007a18 <create_name>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d139      	bne.n	8007c18 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff feaf 	bl	8007908 <dir_find>
 8007baa:	4603      	mov	r3, r0
 8007bac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007bb4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	2b04      	cmp	r3, #4
 8007bc0:	d12c      	bne.n	8007c1c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d127      	bne.n	8007c1c <follow_path+0xdc>
 8007bcc:	2305      	movs	r3, #5
 8007bce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007bd0:	e024      	b.n	8007c1c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d121      	bne.n	8007c20 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	799b      	ldrb	r3, [r3, #6]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007be8:	2305      	movs	r3, #5
 8007bea:	75fb      	strb	r3, [r7, #23]
 8007bec:	e019      	b.n	8007c22 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	8992      	ldrh	r2, [r2, #12]
 8007bfc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c00:	fb00 f202 	mul.w	r2, r0, r2
 8007c04:	1a9b      	subs	r3, r3, r2
 8007c06:	440b      	add	r3, r1
 8007c08:	4619      	mov	r1, r3
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fe3d 	bl	800788a <ld_clust>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c16:	e7bb      	b.n	8007b90 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <follow_path+0xe2>
				break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c20:	bf00      	nop
			}
		}
	}

	return res;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c34:	f04f 33ff 	mov.w	r3, #4294967295
 8007c38:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d031      	beq.n	8007ca6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e002      	b.n	8007c50 <get_ldnumber+0x24>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d903      	bls.n	8007c60 <get_ldnumber+0x34>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c5e:	d1f4      	bne.n	8007c4a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c66:	d11c      	bne.n	8007ca2 <get_ldnumber+0x76>
			tp = *path;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	60fa      	str	r2, [r7, #12]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	3b30      	subs	r3, #48	@ 0x30
 8007c78:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	d80e      	bhi.n	8007c9e <get_ldnumber+0x72>
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d10a      	bne.n	8007c9e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d107      	bne.n	8007c9e <get_ldnumber+0x72>
					vol = (int)i;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	3301      	adds	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	e002      	b.n	8007ca8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007ca6:	693b      	ldr	r3, [r7, #16]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	70da      	strb	r2, [r3, #3]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff f856 	bl	8006d80 <move_window>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <check_fs+0x2a>
 8007cda:	2304      	movs	r3, #4
 8007cdc:	e038      	b.n	8007d50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3334      	adds	r3, #52	@ 0x34
 8007ce2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fd9a 	bl	8006820 <ld_word>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d001      	beq.n	8007cfc <check_fs+0x48>
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e029      	b.n	8007d50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d02:	2be9      	cmp	r3, #233	@ 0xe9
 8007d04:	d009      	beq.n	8007d1a <check_fs+0x66>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d0c:	2beb      	cmp	r3, #235	@ 0xeb
 8007d0e:	d11e      	bne.n	8007d4e <check_fs+0x9a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007d16:	2b90      	cmp	r3, #144	@ 0x90
 8007d18:	d119      	bne.n	8007d4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3334      	adds	r3, #52	@ 0x34
 8007d1e:	3336      	adds	r3, #54	@ 0x36
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fd95 	bl	8006850 <ld_dword>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d58 <check_fs+0xa4>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d101      	bne.n	8007d36 <check_fs+0x82>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e00c      	b.n	8007d50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3334      	adds	r3, #52	@ 0x34
 8007d3a:	3352      	adds	r3, #82	@ 0x52
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe fd87 	bl	8006850 <ld_dword>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4a05      	ldr	r2, [pc, #20]	@ (8007d5c <check_fs+0xa8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d101      	bne.n	8007d4e <check_fs+0x9a>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d4e:	2302      	movs	r3, #2
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	00544146 	.word	0x00544146
 8007d5c:	33544146 	.word	0x33544146

08007d60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b096      	sub	sp, #88	@ 0x58
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff ff59 	bl	8007c2c <get_ldnumber>
 8007d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	da01      	bge.n	8007d86 <find_volume+0x26>
 8007d82:	230b      	movs	r3, #11
 8007d84:	e262      	b.n	800824c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d86:	4a9f      	ldr	r2, [pc, #636]	@ (8008004 <find_volume+0x2a4>)
 8007d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <find_volume+0x3a>
 8007d96:	230c      	movs	r3, #12
 8007d98:	e258      	b.n	800824c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01a      	beq.n	8007de6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fc93 	bl	80066e0 <disk_status>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10c      	bne.n	8007de6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <find_volume+0x82>
 8007dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007dde:	230a      	movs	r3, #10
 8007de0:	e234      	b.n	800824c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8007de2:	2300      	movs	r3, #0
 8007de4:	e232      	b.n	800824c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	785b      	ldrb	r3, [r3, #1]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe fc8b 	bl	8006714 <disk_initialize>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e10:	2303      	movs	r3, #3
 8007e12:	e21b      	b.n	800824c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d007      	beq.n	8007e2a <find_volume+0xca>
 8007e1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e26:	230a      	movs	r3, #10
 8007e28:	e210      	b.n	800824c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	7858      	ldrb	r0, [r3, #1]
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	330c      	adds	r3, #12
 8007e32:	461a      	mov	r2, r3
 8007e34:	2102      	movs	r1, #2
 8007e36:	f7fe fcd5 	bl	80067e4 <disk_ioctl>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <find_volume+0xe4>
 8007e40:	2301      	movs	r3, #1
 8007e42:	e203      	b.n	800824c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	899b      	ldrh	r3, [r3, #12]
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4c:	d80d      	bhi.n	8007e6a <find_volume+0x10a>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	899b      	ldrh	r3, [r3, #12]
 8007e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e56:	d308      	bcc.n	8007e6a <find_volume+0x10a>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	899b      	ldrh	r3, [r3, #12]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e60:	899b      	ldrh	r3, [r3, #12]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <find_volume+0x10e>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e1ee      	b.n	800824c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007e76:	f7ff ff1d 	bl	8007cb4 <check_fs>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d149      	bne.n	8007f1c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e88:	2300      	movs	r3, #0
 8007e8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e8c:	e01e      	b.n	8007ecc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e90:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007e9c:	4413      	add	r3, r2
 8007e9e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d006      	beq.n	8007eb8 <find_volume+0x158>
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	3308      	adds	r3, #8
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fcce 	bl	8006850 <ld_dword>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	e000      	b.n	8007eba <find_volume+0x15a>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	3358      	adds	r3, #88	@ 0x58
 8007ec0:	443b      	add	r3, r7
 8007ec2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ec8:	3301      	adds	r3, #1
 8007eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d9dd      	bls.n	8007e8e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <find_volume+0x182>
 8007edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	3358      	adds	r3, #88	@ 0x58
 8007ee8:	443b      	add	r3, r7
 8007eea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007eee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <find_volume+0x1a2>
 8007ef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ef8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007efa:	f7ff fedb 	bl	8007cb4 <check_fs>
 8007efe:	4603      	mov	r3, r0
 8007f00:	e000      	b.n	8007f04 <find_volume+0x1a4>
 8007f02:	2303      	movs	r3, #3
 8007f04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007f08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d905      	bls.n	8007f1c <find_volume+0x1bc>
 8007f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f12:	3301      	adds	r3, #1
 8007f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d9e2      	bls.n	8007ee2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d101      	bne.n	8007f28 <find_volume+0x1c8>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e191      	b.n	800824c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d901      	bls.n	8007f34 <find_volume+0x1d4>
 8007f30:	230d      	movs	r3, #13
 8007f32:	e18b      	b.n	800824c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	3334      	adds	r3, #52	@ 0x34
 8007f38:	330b      	adds	r3, #11
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fe fc70 	bl	8006820 <ld_word>
 8007f40:	4603      	mov	r3, r0
 8007f42:	461a      	mov	r2, r3
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	899b      	ldrh	r3, [r3, #12]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d001      	beq.n	8007f50 <find_volume+0x1f0>
 8007f4c:	230d      	movs	r3, #13
 8007f4e:	e17d      	b.n	800824c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	3334      	adds	r3, #52	@ 0x34
 8007f54:	3316      	adds	r3, #22
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc62 	bl	8006820 <ld_word>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <find_volume+0x214>
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	3334      	adds	r3, #52	@ 0x34
 8007f6a:	3324      	adds	r3, #36	@ 0x24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fe fc6f 	bl	8006850 <ld_dword>
 8007f72:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	789b      	ldrb	r3, [r3, #2]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d005      	beq.n	8007f98 <find_volume+0x238>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8e:	789b      	ldrb	r3, [r3, #2]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d001      	beq.n	8007f98 <find_volume+0x238>
 8007f94:	230d      	movs	r3, #13
 8007f96:	e159      	b.n	800824c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	789b      	ldrb	r3, [r3, #2]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa0:	fb02 f303 	mul.w	r3, r2, r3
 8007fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fac:	461a      	mov	r2, r3
 8007fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	895b      	ldrh	r3, [r3, #10]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d008      	beq.n	8007fcc <find_volume+0x26c>
 8007fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fbc:	895b      	ldrh	r3, [r3, #10]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc2:	895b      	ldrh	r3, [r3, #10]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <find_volume+0x270>
 8007fcc:	230d      	movs	r3, #13
 8007fce:	e13d      	b.n	800824c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	3334      	adds	r3, #52	@ 0x34
 8007fd4:	3311      	adds	r3, #17
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fc22 	bl	8006820 <ld_word>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	891b      	ldrh	r3, [r3, #8]
 8007fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fea:	8992      	ldrh	r2, [r2, #12]
 8007fec:	0952      	lsrs	r2, r2, #5
 8007fee:	b292      	uxth	r2, r2
 8007ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ff4:	fb01 f202 	mul.w	r2, r1, r2
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <find_volume+0x2a8>
 8008000:	230d      	movs	r3, #13
 8008002:	e123      	b.n	800824c <find_volume+0x4ec>
 8008004:	20002938 	.word	0x20002938

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800a:	3334      	adds	r3, #52	@ 0x34
 800800c:	3313      	adds	r3, #19
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fc06 	bl	8006820 <ld_word>
 8008014:	4603      	mov	r3, r0
 8008016:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <find_volume+0x2cc>
 800801e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008020:	3334      	adds	r3, #52	@ 0x34
 8008022:	3320      	adds	r3, #32
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fc13 	bl	8006850 <ld_dword>
 800802a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800802c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802e:	3334      	adds	r3, #52	@ 0x34
 8008030:	330e      	adds	r3, #14
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe fbf4 	bl	8006820 <ld_word>
 8008038:	4603      	mov	r3, r0
 800803a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800803c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <find_volume+0x2e6>
 8008042:	230d      	movs	r3, #13
 8008044:	e102      	b.n	800824c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008046:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800804a:	4413      	add	r3, r2
 800804c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800804e:	8911      	ldrh	r1, [r2, #8]
 8008050:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008052:	8992      	ldrh	r2, [r2, #12]
 8008054:	0952      	lsrs	r2, r2, #5
 8008056:	b292      	uxth	r2, r2
 8008058:	fbb1 f2f2 	udiv	r2, r1, r2
 800805c:	b292      	uxth	r2, r2
 800805e:	4413      	add	r3, r2
 8008060:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008062:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	429a      	cmp	r2, r3
 8008068:	d201      	bcs.n	800806e <find_volume+0x30e>
 800806a:	230d      	movs	r3, #13
 800806c:	e0ee      	b.n	800824c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800806e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008076:	8952      	ldrh	r2, [r2, #10]
 8008078:	fbb3 f3f2 	udiv	r3, r3, r2
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800807e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <find_volume+0x328>
 8008084:	230d      	movs	r3, #13
 8008086:	e0e1      	b.n	800824c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8008088:	2303      	movs	r3, #3
 800808a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008094:	4293      	cmp	r3, r2
 8008096:	d802      	bhi.n	800809e <find_volume+0x33e>
 8008098:	2302      	movs	r3, #2
 800809a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d802      	bhi.n	80080ae <find_volume+0x34e>
 80080a8:	2301      	movs	r3, #1
 80080aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080ba:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80080bc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80080be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c0:	441a      	add	r2, r3
 80080c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80080c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	441a      	add	r2, r3
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80080d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d11e      	bne.n	8008116 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	3334      	adds	r3, #52	@ 0x34
 80080dc:	332a      	adds	r3, #42	@ 0x2a
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fb9e 	bl	8006820 <ld_word>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <find_volume+0x38e>
 80080ea:	230d      	movs	r3, #13
 80080ec:	e0ae      	b.n	800824c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f0:	891b      	ldrh	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <find_volume+0x39a>
 80080f6:	230d      	movs	r3, #13
 80080f8:	e0a8      	b.n	800824c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fc:	3334      	adds	r3, #52	@ 0x34
 80080fe:	332c      	adds	r3, #44	@ 0x2c
 8008100:	4618      	mov	r0, r3
 8008102:	f7fe fba5 	bl	8006850 <ld_dword>
 8008106:	4602      	mov	r2, r0
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	647b      	str	r3, [r7, #68]	@ 0x44
 8008114:	e01f      	b.n	8008156 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008118:	891b      	ldrh	r3, [r3, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <find_volume+0x3c2>
 800811e:	230d      	movs	r3, #13
 8008120:	e094      	b.n	800824c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008128:	441a      	add	r2, r3
 800812a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800812c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800812e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008132:	2b02      	cmp	r3, #2
 8008134:	d103      	bne.n	800813e <find_volume+0x3de>
 8008136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	e00a      	b.n	8008154 <find_volume+0x3f4>
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	4613      	mov	r3, r2
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	4413      	add	r3, r2
 8008148:	085a      	lsrs	r2, r3, #1
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	699b      	ldr	r3, [r3, #24]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008154:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	69da      	ldr	r2, [r3, #28]
 800815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815c:	899b      	ldrh	r3, [r3, #12]
 800815e:	4619      	mov	r1, r3
 8008160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008162:	440b      	add	r3, r1
 8008164:	3b01      	subs	r3, #1
 8008166:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008168:	8989      	ldrh	r1, [r1, #12]
 800816a:	fbb3 f3f1 	udiv	r3, r3, r1
 800816e:	429a      	cmp	r2, r3
 8008170:	d201      	bcs.n	8008176 <find_volume+0x416>
 8008172:	230d      	movs	r3, #13
 8008174:	e06a      	b.n	800824c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	615a      	str	r2, [r3, #20]
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008184:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	2280      	movs	r2, #128	@ 0x80
 800818a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800818c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008190:	2b03      	cmp	r3, #3
 8008192:	d149      	bne.n	8008228 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	3334      	adds	r3, #52	@ 0x34
 8008198:	3330      	adds	r3, #48	@ 0x30
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fb40 	bl	8006820 <ld_word>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d140      	bne.n	8008228 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80081a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a8:	3301      	adds	r3, #1
 80081aa:	4619      	mov	r1, r3
 80081ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081ae:	f7fe fde7 	bl	8006d80 <move_window>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d137      	bne.n	8008228 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	2200      	movs	r2, #0
 80081bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	3334      	adds	r3, #52	@ 0x34
 80081c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fb2a 	bl	8006820 <ld_word>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d127      	bne.n	8008228 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80081d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081da:	3334      	adds	r3, #52	@ 0x34
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fb37 	bl	8006850 <ld_dword>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008254 <find_volume+0x4f4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d11e      	bne.n	8008228 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	3334      	adds	r3, #52	@ 0x34
 80081ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fb2c 	bl	8006850 <ld_dword>
 80081f8:	4603      	mov	r3, r0
 80081fa:	4a17      	ldr	r2, [pc, #92]	@ (8008258 <find_volume+0x4f8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d113      	bne.n	8008228 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008202:	3334      	adds	r3, #52	@ 0x34
 8008204:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fb21 	bl	8006850 <ld_dword>
 800820e:	4602      	mov	r2, r0
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	3334      	adds	r3, #52	@ 0x34
 8008218:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe fb17 	bl	8006850 <ld_dword>
 8008222:	4602      	mov	r2, r0
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800822e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008230:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <find_volume+0x4fc>)
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	4b08      	ldr	r3, [pc, #32]	@ (800825c <find_volume+0x4fc>)
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <find_volume+0x4fc>)
 800823e:	881a      	ldrh	r2, [r3, #0]
 8008240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008242:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008244:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008246:	f7fe fd33 	bl	8006cb0 <clear_lock>
#endif
	return FR_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3758      	adds	r7, #88	@ 0x58
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	41615252 	.word	0x41615252
 8008258:	61417272 	.word	0x61417272
 800825c:	2000293c 	.word	0x2000293c

08008260 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800826a:	2309      	movs	r3, #9
 800826c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01c      	beq.n	80082ae <validate+0x4e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d018      	beq.n	80082ae <validate+0x4e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d013      	beq.n	80082ae <validate+0x4e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	889a      	ldrh	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	88db      	ldrh	r3, [r3, #6]
 8008290:	429a      	cmp	r2, r3
 8008292:	d10c      	bne.n	80082ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fa20 	bl	80066e0 <disk_status>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <validate+0x4e>
			res = FR_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d102      	bne.n	80082ba <validate+0x5a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	e000      	b.n	80082bc <validate+0x5c>
 80082ba:	2300      	movs	r3, #0
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	6013      	str	r3, [r2, #0]
	return res;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80082de:	f107 0310 	add.w	r3, r7, #16
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff fca2 	bl	8007c2c <get_ldnumber>
 80082e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	da01      	bge.n	80082f4 <f_mount+0x28>
 80082f0:	230b      	movs	r3, #11
 80082f2:	e02b      	b.n	800834c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80082f4:	4a17      	ldr	r2, [pc, #92]	@ (8008354 <f_mount+0x88>)
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008304:	69b8      	ldr	r0, [r7, #24]
 8008306:	f7fe fcd3 	bl	8006cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	490d      	ldr	r1, [pc, #52]	@ (8008354 <f_mount+0x88>)
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <f_mount+0x66>
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d001      	beq.n	8008336 <f_mount+0x6a>
 8008332:	2300      	movs	r3, #0
 8008334:	e00a      	b.n	800834c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008336:	f107 010c 	add.w	r1, r7, #12
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	2200      	movs	r2, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff fd0d 	bl	8007d60 <find_volume>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800834a:	7dfb      	ldrb	r3, [r7, #23]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	20002938 	.word	0x20002938

08008358 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b098      	sub	sp, #96	@ 0x60
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <f_open+0x18>
 800836c:	2309      	movs	r3, #9
 800836e:	e1b7      	b.n	80086e0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008376:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008378:	79fa      	ldrb	r2, [r7, #7]
 800837a:	f107 0110 	add.w	r1, r7, #16
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fcec 	bl	8007d60 <find_volume>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800838e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008392:	2b00      	cmp	r3, #0
 8008394:	f040 819b 	bne.w	80086ce <f_open+0x376>
		dj.obj.fs = fs;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7ff fbcb 	bl	8007b40 <follow_path>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80083b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d118      	bne.n	80083ea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80083b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	da03      	bge.n	80083ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80083c2:	2306      	movs	r3, #6
 80083c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80083c8:	e00f      	b.n	80083ea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	bf8c      	ite	hi
 80083d0:	2301      	movhi	r3, #1
 80083d2:	2300      	movls	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	f107 0314 	add.w	r3, r7, #20
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe fb1e 	bl	8006a20 <chk_lock>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	f003 031c 	and.w	r3, r3, #28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d07f      	beq.n	80084f4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80083f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d017      	beq.n	800842c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008400:	2b04      	cmp	r3, #4
 8008402:	d10e      	bne.n	8008422 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008404:	f7fe fb68 	bl	8006ad8 <enq_lock>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <f_open+0xc4>
 800840e:	f107 0314 	add.w	r3, r7, #20
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff facd 	bl	80079b2 <dir_register>
 8008418:	4603      	mov	r3, r0
 800841a:	e000      	b.n	800841e <f_open+0xc6>
 800841c:	2312      	movs	r3, #18
 800841e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	f043 0308 	orr.w	r3, r3, #8
 8008428:	71fb      	strb	r3, [r7, #7]
 800842a:	e010      	b.n	800844e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800842c:	7ebb      	ldrb	r3, [r7, #26]
 800842e:	f003 0311 	and.w	r3, r3, #17
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <f_open+0xe6>
					res = FR_DENIED;
 8008436:	2307      	movs	r3, #7
 8008438:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800843c:	e007      	b.n	800844e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	f003 0304 	and.w	r3, r3, #4
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <f_open+0xf6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800844e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008452:	2b00      	cmp	r3, #0
 8008454:	d168      	bne.n	8008528 <f_open+0x1d0>
 8008456:	79fb      	ldrb	r3, [r7, #7]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b00      	cmp	r3, #0
 800845e:	d063      	beq.n	8008528 <f_open+0x1d0>
				dw = GET_FATTIME();
 8008460:	f7fe f8e0 	bl	8006624 <get_fattime>
 8008464:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008468:	330e      	adds	r3, #14
 800846a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fa2d 	bl	80068cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008474:	3316      	adds	r3, #22
 8008476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fa27 	bl	80068cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	330b      	adds	r3, #11
 8008482:	2220      	movs	r2, #32
 8008484:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f9fc 	bl	800788a <ld_clust>
 8008492:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff fa14 	bl	80078c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80084a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a2:	331c      	adds	r3, #28
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fa10 	bl	80068cc <st_dword>
					fs->wflag = 1;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2201      	movs	r2, #1
 80084b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80084b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d037      	beq.n	8008528 <f_open+0x1d0>
						dw = fs->winsect;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	2200      	movs	r2, #0
 80084c4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff04 	bl	80072d4 <remove_chain>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80084d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d126      	bne.n	8008528 <f_open+0x1d0>
							res = move_window(fs, dw);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fc4e 	bl	8006d80 <move_window>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80084ee:	3a01      	subs	r2, #1
 80084f0:	611a      	str	r2, [r3, #16]
 80084f2:	e019      	b.n	8008528 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80084f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d115      	bne.n	8008528 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80084fc:	7ebb      	ldrb	r3, [r7, #26]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <f_open+0x1b6>
					res = FR_NO_FILE;
 8008506:	2304      	movs	r3, #4
 8008508:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800850c:	e00c      	b.n	8008528 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d007      	beq.n	8008528 <f_open+0x1d0>
 8008518:	7ebb      	ldrb	r3, [r7, #26]
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <f_open+0x1d0>
						res = FR_DENIED;
 8008522:	2307      	movs	r3, #7
 8008524:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008528:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800852c:	2b00      	cmp	r3, #0
 800852e:	d126      	bne.n	800857e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008540:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800854a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b01      	cmp	r3, #1
 8008554:	bf8c      	ite	hi
 8008556:	2301      	movhi	r3, #1
 8008558:	2300      	movls	r3, #0
 800855a:	b2db      	uxtb	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	f107 0314 	add.w	r3, r7, #20
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fad9 	bl	8006b1c <inc_lock>
 800856a:	4602      	mov	r2, r0
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <f_open+0x226>
 8008578:	2302      	movs	r3, #2
 800857a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800857e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 80a3 	bne.w	80086ce <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff f97b 	bl	800788a <ld_clust>
 8008594:	4602      	mov	r2, r0
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800859a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800859c:	331c      	adds	r3, #28
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe f956 	bl	8006850 <ld_dword>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	88da      	ldrh	r2, [r3, #6]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	79fa      	ldrb	r2, [r7, #7]
 80085c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3330      	adds	r3, #48	@ 0x30
 80085da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80085de:	2100      	movs	r1, #0
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f9c0 	bl	8006966 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d06e      	beq.n	80086ce <f_open+0x376>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d06a      	beq.n	80086ce <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	895b      	ldrh	r3, [r3, #10]
 8008604:	461a      	mov	r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	899b      	ldrh	r3, [r3, #12]
 800860a:	fb02 f303 	mul.w	r3, r2, r3
 800860e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	657b      	str	r3, [r7, #84]	@ 0x54
 800861c:	e016      	b.n	800864c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fc69 	bl	8006efa <get_fat>
 8008628:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800862a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800862c:	2b01      	cmp	r3, #1
 800862e:	d802      	bhi.n	8008636 <f_open+0x2de>
 8008630:	2302      	movs	r3, #2
 8008632:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008636:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863c:	d102      	bne.n	8008644 <f_open+0x2ec>
 800863e:	2301      	movs	r3, #1
 8008640:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008644:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	657b      	str	r3, [r7, #84]	@ 0x54
 800864c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008650:	2b00      	cmp	r3, #0
 8008652:	d103      	bne.n	800865c <f_open+0x304>
 8008654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008658:	429a      	cmp	r2, r3
 800865a:	d8e0      	bhi.n	800861e <f_open+0x2c6>
				}
				fp->clust = clst;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008660:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008662:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008666:	2b00      	cmp	r3, #0
 8008668:	d131      	bne.n	80086ce <f_open+0x376>
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	899b      	ldrh	r3, [r3, #12]
 800866e:	461a      	mov	r2, r3
 8008670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008672:	fbb3 f1f2 	udiv	r1, r3, r2
 8008676:	fb01 f202 	mul.w	r2, r1, r2
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d026      	beq.n	80086ce <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008684:	4618      	mov	r0, r3
 8008686:	f7fe fc19 	bl	8006ebc <clust2sect>
 800868a:	6478      	str	r0, [r7, #68]	@ 0x44
 800868c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <f_open+0x342>
						res = FR_INT_ERR;
 8008692:	2302      	movs	r3, #2
 8008694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008698:	e019      	b.n	80086ce <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	899b      	ldrh	r3, [r3, #12]
 800869e:	461a      	mov	r2, r3
 80086a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086a8:	441a      	add	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	7858      	ldrb	r0, [r3, #1]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	2301      	movs	r3, #1
 80086be:	f7fe f851 	bl	8006764 <disk_read>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <f_open+0x376>
 80086c8:	2301      	movs	r3, #1
 80086ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80086ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <f_open+0x384>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80086dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3760      	adds	r7, #96	@ 0x60
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08e      	sub	sp, #56	@ 0x38
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f107 0214 	add.w	r2, r7, #20
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fda9 	bl	8008260 <validate>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008718:	2b00      	cmp	r3, #0
 800871a:	d107      	bne.n	800872c <f_read+0x44>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7d5b      	ldrb	r3, [r3, #21]
 8008720:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008724:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <f_read+0x4a>
 800872c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008730:	e135      	b.n	800899e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	7d1b      	ldrb	r3, [r3, #20]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <f_read+0x5a>
 800873e:	2307      	movs	r3, #7
 8008740:	e12d      	b.n	800899e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	429a      	cmp	r2, r3
 8008754:	f240 811e 	bls.w	8008994 <f_read+0x2ac>
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800875c:	e11a      	b.n	8008994 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	8992      	ldrh	r2, [r2, #12]
 8008766:	fbb3 f1f2 	udiv	r1, r3, r2
 800876a:	fb01 f202 	mul.w	r2, r1, r2
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	2b00      	cmp	r3, #0
 8008772:	f040 80d5 	bne.w	8008920 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	8992      	ldrh	r2, [r2, #12]
 800877e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	8952      	ldrh	r2, [r2, #10]
 8008786:	3a01      	subs	r2, #1
 8008788:	4013      	ands	r3, r2
 800878a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d12f      	bne.n	80087f2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d103      	bne.n	80087a2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	633b      	str	r3, [r7, #48]	@ 0x30
 80087a0:	e013      	b.n	80087ca <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	4619      	mov	r1, r3
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7fe fe8c 	bl	80074ce <clmt_clust>
 80087b6:	6338      	str	r0, [r7, #48]	@ 0x30
 80087b8:	e007      	b.n	80087ca <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f7fe fb99 	bl	8006efa <get_fat>
 80087c8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d804      	bhi.n	80087da <f_read+0xf2>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2202      	movs	r2, #2
 80087d4:	755a      	strb	r2, [r3, #21]
 80087d6:	2302      	movs	r3, #2
 80087d8:	e0e1      	b.n	800899e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d104      	bne.n	80087ec <f_read+0x104>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	755a      	strb	r2, [r3, #21]
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0d8      	b.n	800899e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4610      	mov	r0, r2
 80087fc:	f7fe fb5e 	bl	8006ebc <clust2sect>
 8008800:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d104      	bne.n	8008812 <f_read+0x12a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2202      	movs	r2, #2
 800880c:	755a      	strb	r2, [r3, #21]
 800880e:	2302      	movs	r3, #2
 8008810:	e0c5      	b.n	800899e <f_read+0x2b6>
			sect += csect;
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	4413      	add	r3, r2
 8008818:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	fbb3 f3f2 	udiv	r3, r3, r2
 8008826:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d041      	beq.n	80088b2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	4413      	add	r3, r2
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	8952      	ldrh	r2, [r2, #10]
 8008838:	4293      	cmp	r3, r2
 800883a:	d905      	bls.n	8008848 <f_read+0x160>
					cc = fs->csize - csect;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	895b      	ldrh	r3, [r3, #10]
 8008840:	461a      	mov	r2, r3
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	7858      	ldrb	r0, [r3, #1]
 800884c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008852:	f7fd ff87 	bl	8006764 <disk_read>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <f_read+0x17e>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	755a      	strb	r2, [r3, #21]
 8008862:	2301      	movs	r3, #1
 8008864:	e09b      	b.n	800899e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7d1b      	ldrb	r3, [r3, #20]
 800886a:	b25b      	sxtb	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	da18      	bge.n	80088a2 <f_read+0x1ba>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800887a:	429a      	cmp	r2, r3
 800887c:	d911      	bls.n	80088a2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a1a      	ldr	r2, [r3, #32]
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	8992      	ldrh	r2, [r2, #12]
 800888a:	fb02 f303 	mul.w	r3, r2, r3
 800888e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008890:	18d0      	adds	r0, r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	899b      	ldrh	r3, [r3, #12]
 800889c:	461a      	mov	r2, r3
 800889e:	f7fe f841 	bl	8006924 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	899b      	ldrh	r3, [r3, #12]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80088b0:	e05c      	b.n	800896c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d02e      	beq.n	800891a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	7d1b      	ldrb	r3, [r3, #20]
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da18      	bge.n	80088f8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	7858      	ldrb	r0, [r3, #1]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1a      	ldr	r2, [r3, #32]
 80088d4:	2301      	movs	r3, #1
 80088d6:	f7fd ff65 	bl	80067a4 <disk_write>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d004      	beq.n	80088ea <f_read+0x202>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	755a      	strb	r2, [r3, #21]
 80088e6:	2301      	movs	r3, #1
 80088e8:	e059      	b.n	800899e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	7d1b      	ldrb	r3, [r3, #20]
 80088ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	7858      	ldrb	r0, [r3, #1]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008902:	2301      	movs	r3, #1
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	f7fd ff2d 	bl	8006764 <disk_read>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d004      	beq.n	800891a <f_read+0x232>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	755a      	strb	r2, [r3, #21]
 8008916:	2301      	movs	r3, #1
 8008918:	e041      	b.n	800899e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	899b      	ldrh	r3, [r3, #12]
 8008924:	4618      	mov	r0, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	8992      	ldrh	r2, [r2, #12]
 800892e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008932:	fb01 f202 	mul.w	r2, r1, r2
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	1ac3      	subs	r3, r0, r3
 800893a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800893c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d901      	bls.n	8008948 <f_read+0x260>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	8992      	ldrh	r2, [r2, #12]
 8008956:	fbb3 f0f2 	udiv	r0, r3, r2
 800895a:	fb00 f202 	mul.w	r2, r0, r2
 800895e:	1a9b      	subs	r3, r3, r2
 8008960:	440b      	add	r3, r1
 8008962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008964:	4619      	mov	r1, r3
 8008966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008968:	f7fd ffdc 	bl	8006924 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800896c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	4413      	add	r3, r2
 8008972:	627b      	str	r3, [r7, #36]	@ 0x24
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	699a      	ldr	r2, [r3, #24]
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	441a      	add	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	619a      	str	r2, [r3, #24]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	441a      	add	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f47f aee1 	bne.w	800875e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3738      	adds	r7, #56	@ 0x38
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b08c      	sub	sp, #48	@ 0x30
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f107 0210 	add.w	r2, r7, #16
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fc4a 	bl	8008260 <validate>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <f_write+0x44>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	7d5b      	ldrb	r3, [r3, #21]
 80089de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80089e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <f_write+0x4a>
 80089ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089ee:	e16a      	b.n	8008cc6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	7d1b      	ldrb	r3, [r3, #20]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <f_write+0x5a>
 80089fc:	2307      	movs	r3, #7
 80089fe:	e162      	b.n	8008cc6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	441a      	add	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	f080 814c 	bcs.w	8008caa <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	43db      	mvns	r3, r3
 8008a18:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a1a:	e146      	b.n	8008caa <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	8992      	ldrh	r2, [r2, #12]
 8008a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a28:	fb01 f202 	mul.w	r2, r1, r2
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f040 80f1 	bne.w	8008c16 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	8992      	ldrh	r2, [r2, #12]
 8008a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	8952      	ldrh	r2, [r2, #10]
 8008a44:	3a01      	subs	r2, #1
 8008a46:	4013      	ands	r3, r2
 8008a48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d143      	bne.n	8008ad8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10c      	bne.n	8008a72 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11a      	bne.n	8008a9a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2100      	movs	r1, #0
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fc98 	bl	800739e <create_chain>
 8008a6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008a70:	e013      	b.n	8008a9a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7fe fd24 	bl	80074ce <clmt_clust>
 8008a86:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008a88:	e007      	b.n	8008a9a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe fc83 	bl	800739e <create_chain>
 8008a98:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8109 	beq.w	8008cb4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d104      	bne.n	8008ab2 <f_write+0x10c>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	755a      	strb	r2, [r3, #21]
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e109      	b.n	8008cc6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab8:	d104      	bne.n	8008ac4 <f_write+0x11e>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	755a      	strb	r2, [r3, #21]
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e100      	b.n	8008cc6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ac8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <f_write+0x132>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ad6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	7d1b      	ldrb	r3, [r3, #20]
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da18      	bge.n	8008b14 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	7858      	ldrb	r0, [r3, #1]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1a      	ldr	r2, [r3, #32]
 8008af0:	2301      	movs	r3, #1
 8008af2:	f7fd fe57 	bl	80067a4 <disk_write>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d004      	beq.n	8008b06 <f_write+0x160>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2201      	movs	r2, #1
 8008b00:	755a      	strb	r2, [r3, #21]
 8008b02:	2301      	movs	r3, #1
 8008b04:	e0df      	b.n	8008cc6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	7d1b      	ldrb	r3, [r3, #20]
 8008b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7fe f9cd 	bl	8006ebc <clust2sect>
 8008b22:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <f_write+0x18e>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	755a      	strb	r2, [r3, #21]
 8008b30:	2302      	movs	r3, #2
 8008b32:	e0c8      	b.n	8008cc6 <f_write+0x320>
			sect += csect;
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	4413      	add	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	899b      	ldrh	r3, [r3, #12]
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b48:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d043      	beq.n	8008bd8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	4413      	add	r3, r2
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	8952      	ldrh	r2, [r2, #10]
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d905      	bls.n	8008b6a <f_write+0x1c4>
					cc = fs->csize - csect;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	895b      	ldrh	r3, [r3, #10]
 8008b62:	461a      	mov	r2, r3
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	7858      	ldrb	r0, [r3, #1]
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	69f9      	ldr	r1, [r7, #28]
 8008b74:	f7fd fe16 	bl	80067a4 <disk_write>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <f_write+0x1e2>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	755a      	strb	r2, [r3, #21]
 8008b84:	2301      	movs	r3, #1
 8008b86:	e09e      	b.n	8008cc6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6a1a      	ldr	r2, [r3, #32]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	6a3a      	ldr	r2, [r7, #32]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d918      	bls.n	8008bc8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	8992      	ldrh	r2, [r2, #12]
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	18d1      	adds	r1, r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	899b      	ldrh	r3, [r3, #12]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f7fd feb5 	bl	8006924 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	7d1b      	ldrb	r3, [r3, #20]
 8008bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	899b      	ldrh	r3, [r3, #12]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	fb02 f303 	mul.w	r3, r2, r3
 8008bd4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008bd6:	e04b      	b.n	8008c70 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d016      	beq.n	8008c10 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d210      	bcs.n	8008c10 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	7858      	ldrb	r0, [r3, #1]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	f7fd fdb2 	bl	8006764 <disk_read>
 8008c00:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d004      	beq.n	8008c10 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	755a      	strb	r2, [r3, #21]
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e05a      	b.n	8008cc6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	697a      	ldr	r2, [r7, #20]
 8008c14:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	899b      	ldrh	r3, [r3, #12]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	8992      	ldrh	r2, [r2, #12]
 8008c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c28:	fb01 f202 	mul.w	r2, r1, r2
 8008c2c:	1a9b      	subs	r3, r3, r2
 8008c2e:	1ac3      	subs	r3, r0, r3
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d901      	bls.n	8008c3e <f_write+0x298>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	8992      	ldrh	r2, [r2, #12]
 8008c4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c50:	fb00 f202 	mul.w	r2, r0, r2
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	440b      	add	r3, r1
 8008c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5a:	69f9      	ldr	r1, [r7, #28]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fd fe61 	bl	8006924 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	7d1b      	ldrb	r3, [r3, #20]
 8008c66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	4413      	add	r3, r2
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	699a      	ldr	r2, [r3, #24]
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	441a      	add	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	619a      	str	r2, [r3, #24]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	bf38      	it	cc
 8008c90:	461a      	movcc	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	441a      	add	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	1ad3      	subs	r3, r2, r3
 8008ca8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f aeb5 	bne.w	8008a1c <f_write+0x76>
 8008cb2:	e000      	b.n	8008cb6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cb4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	7d1b      	ldrb	r3, [r3, #20]
 8008cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3730      	adds	r7, #48	@ 0x30
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f107 0208 	add.w	r2, r7, #8
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7ff fabe 	bl	8008260 <validate>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d168      	bne.n	8008dc0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d062      	beq.n	8008dc0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da15      	bge.n	8008d30 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	7858      	ldrb	r0, [r3, #1]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a1a      	ldr	r2, [r3, #32]
 8008d12:	2301      	movs	r3, #1
 8008d14:	f7fd fd46 	bl	80067a4 <disk_write>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d001      	beq.n	8008d22 <f_sync+0x54>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e04f      	b.n	8008dc2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	7d1b      	ldrb	r3, [r3, #20]
 8008d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d30:	f7fd fc78 	bl	8006624 <get_fattime>
 8008d34:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fe f81e 	bl	8006d80 <move_window>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d138      	bne.n	8008dc0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d52:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	330b      	adds	r3, #11
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	330b      	adds	r3, #11
 8008d5e:	f042 0220 	orr.w	r2, r2, #32
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	68f9      	ldr	r1, [r7, #12]
 8008d72:	f7fe fda9 	bl	80078c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f103 021c 	add.w	r2, r3, #28
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7fd fda2 	bl	80068cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	3316      	adds	r3, #22
 8008d8c:	6939      	ldr	r1, [r7, #16]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fd fd9c 	bl	80068cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3312      	adds	r3, #18
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd fd7b 	bl	8006896 <st_word>
					fs->wflag = 1;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2201      	movs	r2, #1
 8008da4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe f817 	bl	8006ddc <sync_fs>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7d1b      	ldrb	r3, [r3, #20]
 8008db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ff7b 	bl	8008cce <f_sync>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d118      	bne.n	8008e14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f107 0208 	add.w	r2, r7, #8
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fa38 	bl	8008260 <validate>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10c      	bne.n	8008e14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd ff1a 	bl	8006c38 <dec_lock>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b092      	sub	sp, #72	@ 0x48
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008e2a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8008e2e:	f107 030c 	add.w	r3, r7, #12
 8008e32:	2200      	movs	r2, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe ff93 	bl	8007d60 <find_volume>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8008e40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 8099 	bne.w	8008f7c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008e4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e52:	695a      	ldr	r2, [r3, #20]
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	3b02      	subs	r3, #2
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d804      	bhi.n	8008e68 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	695a      	ldr	r2, [r3, #20]
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	e089      	b.n	8008f7c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d128      	bne.n	8008ec6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008e74:	2302      	movs	r3, #2
 8008e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8008e7c:	f107 0314 	add.w	r3, r7, #20
 8008e80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe f839 	bl	8006efa <get_fat>
 8008e88:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e90:	d103      	bne.n	8008e9a <f_getfree+0x7c>
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008e98:	e063      	b.n	8008f62 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d103      	bne.n	8008ea8 <f_getfree+0x8a>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ea6:	e05c      	b.n	8008f62 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d102      	bne.n	8008eb4 <f_getfree+0x96>
 8008eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3db      	bcc.n	8008e7c <f_getfree+0x5e>
 8008ec4:	e04d      	b.n	8008f62 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d113      	bne.n	8008f08 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8008ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008ee8:	4619      	mov	r1, r3
 8008eea:	f7fd ff49 	bl	8006d80 <move_window>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008ef4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d131      	bne.n	8008f60 <f_getfree+0x142>
							p = fs->win;
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	3334      	adds	r3, #52	@ 0x34
 8008f00:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	899b      	ldrh	r3, [r3, #12]
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d10f      	bne.n	8008f30 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8008f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f12:	f7fd fc85 	bl	8006820 <ld_word>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <f_getfree+0x104>
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f1e:	3301      	adds	r3, #1
 8008f20:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f24:	3302      	adds	r3, #2
 8008f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2a:	3b02      	subs	r3, #2
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f2e:	e010      	b.n	8008f52 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f32:	f7fd fc8d 	bl	8006850 <ld_dword>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <f_getfree+0x128>
 8008f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f42:	3301      	adds	r3, #1
 8008f44:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	3304      	adds	r3, #4
 8008f4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f4e:	3b04      	subs	r3, #4
 8008f50:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f54:	3b01      	subs	r3, #1
 8008f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1bd      	bne.n	8008eda <f_getfree+0xbc>
 8008f5e:	e000      	b.n	8008f62 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008f60:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f66:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f6c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	791a      	ldrb	r2, [r3, #4]
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	f042 0201 	orr.w	r2, r2, #1
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008f7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3748      	adds	r7, #72	@ 0x48
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f96:	2301      	movs	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fa0:	7a5b      	ldrb	r3, [r3, #9]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d131      	bne.n	800900c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008faa:	7a5b      	ldrb	r3, [r3, #9]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008fb6:	4b19      	ldr	r3, [pc, #100]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fb8:	7a5b      	ldrb	r3, [r3, #9]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4a17      	ldr	r2, [pc, #92]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008fc6:	4b15      	ldr	r3, [pc, #84]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fc8:	7a5b      	ldrb	r3, [r3, #9]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4b13      	ldr	r3, [pc, #76]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fd0:	4413      	add	r3, r2
 8008fd2:	79fa      	ldrb	r2, [r7, #7]
 8008fd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008fd6:	4b11      	ldr	r3, [pc, #68]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fd8:	7a5b      	ldrb	r3, [r3, #9]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	b2d1      	uxtb	r1, r2
 8008fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800901c <FATFS_LinkDriverEx+0x94>)
 8008fe2:	7251      	strb	r1, [r2, #9]
 8008fe4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008fe6:	7dbb      	ldrb	r3, [r7, #22]
 8008fe8:	3330      	adds	r3, #48	@ 0x30
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	223a      	movs	r2, #58	@ 0x3a
 8008ff6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	3302      	adds	r3, #2
 8008ffc:	222f      	movs	r2, #47	@ 0x2f
 8008ffe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3303      	adds	r3, #3
 8009004:	2200      	movs	r2, #0
 8009006:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800900c:	7dfb      	ldrb	r3, [r7, #23]
}
 800900e:	4618      	mov	r0, r3
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	20002960 	.word	0x20002960

08009020 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800902a:	2200      	movs	r2, #0
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff ffaa 	bl	8008f88 <FATFS_LinkDriverEx>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <__cvt>:
 800903e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009042:	ec57 6b10 	vmov	r6, r7, d0
 8009046:	2f00      	cmp	r7, #0
 8009048:	460c      	mov	r4, r1
 800904a:	4619      	mov	r1, r3
 800904c:	463b      	mov	r3, r7
 800904e:	bfbb      	ittet	lt
 8009050:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009054:	461f      	movlt	r7, r3
 8009056:	2300      	movge	r3, #0
 8009058:	232d      	movlt	r3, #45	@ 0x2d
 800905a:	700b      	strb	r3, [r1, #0]
 800905c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800905e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009062:	4691      	mov	r9, r2
 8009064:	f023 0820 	bic.w	r8, r3, #32
 8009068:	bfbc      	itt	lt
 800906a:	4632      	movlt	r2, r6
 800906c:	4616      	movlt	r6, r2
 800906e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009072:	d005      	beq.n	8009080 <__cvt+0x42>
 8009074:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009078:	d100      	bne.n	800907c <__cvt+0x3e>
 800907a:	3401      	adds	r4, #1
 800907c:	2102      	movs	r1, #2
 800907e:	e000      	b.n	8009082 <__cvt+0x44>
 8009080:	2103      	movs	r1, #3
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	ab02      	add	r3, sp, #8
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	ec47 6b10 	vmov	d0, r6, r7
 800908e:	4653      	mov	r3, sl
 8009090:	4622      	mov	r2, r4
 8009092:	f001 f881 	bl	800a198 <_dtoa_r>
 8009096:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800909a:	4605      	mov	r5, r0
 800909c:	d119      	bne.n	80090d2 <__cvt+0x94>
 800909e:	f019 0f01 	tst.w	r9, #1
 80090a2:	d00e      	beq.n	80090c2 <__cvt+0x84>
 80090a4:	eb00 0904 	add.w	r9, r0, r4
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fce2 	bl	8000a78 <__aeabi_dcmpeq>
 80090b4:	b108      	cbz	r0, 80090ba <__cvt+0x7c>
 80090b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80090ba:	2230      	movs	r2, #48	@ 0x30
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	454b      	cmp	r3, r9
 80090c0:	d31e      	bcc.n	8009100 <__cvt+0xc2>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090c6:	1b5b      	subs	r3, r3, r5
 80090c8:	4628      	mov	r0, r5
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	b004      	add	sp, #16
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090d6:	eb00 0904 	add.w	r9, r0, r4
 80090da:	d1e5      	bne.n	80090a8 <__cvt+0x6a>
 80090dc:	7803      	ldrb	r3, [r0, #0]
 80090de:	2b30      	cmp	r3, #48	@ 0x30
 80090e0:	d10a      	bne.n	80090f8 <__cvt+0xba>
 80090e2:	2200      	movs	r2, #0
 80090e4:	2300      	movs	r3, #0
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fcc5 	bl	8000a78 <__aeabi_dcmpeq>
 80090ee:	b918      	cbnz	r0, 80090f8 <__cvt+0xba>
 80090f0:	f1c4 0401 	rsb	r4, r4, #1
 80090f4:	f8ca 4000 	str.w	r4, [sl]
 80090f8:	f8da 3000 	ldr.w	r3, [sl]
 80090fc:	4499      	add	r9, r3
 80090fe:	e7d3      	b.n	80090a8 <__cvt+0x6a>
 8009100:	1c59      	adds	r1, r3, #1
 8009102:	9103      	str	r1, [sp, #12]
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	e7d9      	b.n	80090bc <__cvt+0x7e>

08009108 <__exponent>:
 8009108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800910a:	2900      	cmp	r1, #0
 800910c:	bfba      	itte	lt
 800910e:	4249      	neglt	r1, r1
 8009110:	232d      	movlt	r3, #45	@ 0x2d
 8009112:	232b      	movge	r3, #43	@ 0x2b
 8009114:	2909      	cmp	r1, #9
 8009116:	7002      	strb	r2, [r0, #0]
 8009118:	7043      	strb	r3, [r0, #1]
 800911a:	dd29      	ble.n	8009170 <__exponent+0x68>
 800911c:	f10d 0307 	add.w	r3, sp, #7
 8009120:	461d      	mov	r5, r3
 8009122:	270a      	movs	r7, #10
 8009124:	461a      	mov	r2, r3
 8009126:	fbb1 f6f7 	udiv	r6, r1, r7
 800912a:	fb07 1416 	mls	r4, r7, r6, r1
 800912e:	3430      	adds	r4, #48	@ 0x30
 8009130:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009134:	460c      	mov	r4, r1
 8009136:	2c63      	cmp	r4, #99	@ 0x63
 8009138:	f103 33ff 	add.w	r3, r3, #4294967295
 800913c:	4631      	mov	r1, r6
 800913e:	dcf1      	bgt.n	8009124 <__exponent+0x1c>
 8009140:	3130      	adds	r1, #48	@ 0x30
 8009142:	1e94      	subs	r4, r2, #2
 8009144:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009148:	1c41      	adds	r1, r0, #1
 800914a:	4623      	mov	r3, r4
 800914c:	42ab      	cmp	r3, r5
 800914e:	d30a      	bcc.n	8009166 <__exponent+0x5e>
 8009150:	f10d 0309 	add.w	r3, sp, #9
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	42ac      	cmp	r4, r5
 8009158:	bf88      	it	hi
 800915a:	2300      	movhi	r3, #0
 800915c:	3302      	adds	r3, #2
 800915e:	4403      	add	r3, r0
 8009160:	1a18      	subs	r0, r3, r0
 8009162:	b003      	add	sp, #12
 8009164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009166:	f813 6b01 	ldrb.w	r6, [r3], #1
 800916a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800916e:	e7ed      	b.n	800914c <__exponent+0x44>
 8009170:	2330      	movs	r3, #48	@ 0x30
 8009172:	3130      	adds	r1, #48	@ 0x30
 8009174:	7083      	strb	r3, [r0, #2]
 8009176:	70c1      	strb	r1, [r0, #3]
 8009178:	1d03      	adds	r3, r0, #4
 800917a:	e7f1      	b.n	8009160 <__exponent+0x58>

0800917c <_printf_float>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	b08d      	sub	sp, #52	@ 0x34
 8009182:	460c      	mov	r4, r1
 8009184:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009188:	4616      	mov	r6, r2
 800918a:	461f      	mov	r7, r3
 800918c:	4605      	mov	r5, r0
 800918e:	f000 feef 	bl	8009f70 <_localeconv_r>
 8009192:	6803      	ldr	r3, [r0, #0]
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f842 	bl	8000220 <strlen>
 800919c:	2300      	movs	r3, #0
 800919e:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a0:	f8d8 3000 	ldr.w	r3, [r8]
 80091a4:	9005      	str	r0, [sp, #20]
 80091a6:	3307      	adds	r3, #7
 80091a8:	f023 0307 	bic.w	r3, r3, #7
 80091ac:	f103 0208 	add.w	r2, r3, #8
 80091b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80091b4:	f8d4 b000 	ldr.w	fp, [r4]
 80091b8:	f8c8 2000 	str.w	r2, [r8]
 80091bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80091c4:	9307      	str	r3, [sp, #28]
 80091c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80091ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80091ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009444 <_printf_float+0x2c8>)
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	f7f7 fc80 	bl	8000adc <__aeabi_dcmpun>
 80091dc:	bb70      	cbnz	r0, 800923c <_printf_float+0xc0>
 80091de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091e2:	4b98      	ldr	r3, [pc, #608]	@ (8009444 <_printf_float+0x2c8>)
 80091e4:	f04f 32ff 	mov.w	r2, #4294967295
 80091e8:	f7f7 fc5a 	bl	8000aa0 <__aeabi_dcmple>
 80091ec:	bb30      	cbnz	r0, 800923c <_printf_float+0xc0>
 80091ee:	2200      	movs	r2, #0
 80091f0:	2300      	movs	r3, #0
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 fc49 	bl	8000a8c <__aeabi_dcmplt>
 80091fa:	b110      	cbz	r0, 8009202 <_printf_float+0x86>
 80091fc:	232d      	movs	r3, #45	@ 0x2d
 80091fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009202:	4a91      	ldr	r2, [pc, #580]	@ (8009448 <_printf_float+0x2cc>)
 8009204:	4b91      	ldr	r3, [pc, #580]	@ (800944c <_printf_float+0x2d0>)
 8009206:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800920a:	bf94      	ite	ls
 800920c:	4690      	movls	r8, r2
 800920e:	4698      	movhi	r8, r3
 8009210:	2303      	movs	r3, #3
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	f02b 0304 	bic.w	r3, fp, #4
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	f04f 0900 	mov.w	r9, #0
 800921e:	9700      	str	r7, [sp, #0]
 8009220:	4633      	mov	r3, r6
 8009222:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009224:	4621      	mov	r1, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f9d2 	bl	80095d0 <_printf_common>
 800922c:	3001      	adds	r0, #1
 800922e:	f040 808d 	bne.w	800934c <_printf_float+0x1d0>
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	b00d      	add	sp, #52	@ 0x34
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 fc4a 	bl	8000adc <__aeabi_dcmpun>
 8009248:	b140      	cbz	r0, 800925c <_printf_float+0xe0>
 800924a:	464b      	mov	r3, r9
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfbc      	itt	lt
 8009250:	232d      	movlt	r3, #45	@ 0x2d
 8009252:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009256:	4a7e      	ldr	r2, [pc, #504]	@ (8009450 <_printf_float+0x2d4>)
 8009258:	4b7e      	ldr	r3, [pc, #504]	@ (8009454 <_printf_float+0x2d8>)
 800925a:	e7d4      	b.n	8009206 <_printf_float+0x8a>
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009262:	9206      	str	r2, [sp, #24]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	d13b      	bne.n	80092e0 <_printf_float+0x164>
 8009268:	2306      	movs	r3, #6
 800926a:	6063      	str	r3, [r4, #4]
 800926c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009270:	2300      	movs	r3, #0
 8009272:	6022      	str	r2, [r4, #0]
 8009274:	9303      	str	r3, [sp, #12]
 8009276:	ab0a      	add	r3, sp, #40	@ 0x28
 8009278:	e9cd a301 	strd	sl, r3, [sp, #4]
 800927c:	ab09      	add	r3, sp, #36	@ 0x24
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	6861      	ldr	r1, [r4, #4]
 8009282:	ec49 8b10 	vmov	d0, r8, r9
 8009286:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800928a:	4628      	mov	r0, r5
 800928c:	f7ff fed7 	bl	800903e <__cvt>
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009294:	2b47      	cmp	r3, #71	@ 0x47
 8009296:	4680      	mov	r8, r0
 8009298:	d129      	bne.n	80092ee <_printf_float+0x172>
 800929a:	1cc8      	adds	r0, r1, #3
 800929c:	db02      	blt.n	80092a4 <_printf_float+0x128>
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	4299      	cmp	r1, r3
 80092a2:	dd41      	ble.n	8009328 <_printf_float+0x1ac>
 80092a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80092a8:	fa5f fa8a 	uxtb.w	sl, sl
 80092ac:	3901      	subs	r1, #1
 80092ae:	4652      	mov	r2, sl
 80092b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80092b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80092b6:	f7ff ff27 	bl	8009108 <__exponent>
 80092ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092bc:	1813      	adds	r3, r2, r0
 80092be:	2a01      	cmp	r2, #1
 80092c0:	4681      	mov	r9, r0
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	dc02      	bgt.n	80092cc <_printf_float+0x150>
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	07d2      	lsls	r2, r2, #31
 80092ca:	d501      	bpl.n	80092d0 <_printf_float+0x154>
 80092cc:	3301      	adds	r3, #1
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0a2      	beq.n	800921e <_printf_float+0xa2>
 80092d8:	232d      	movs	r3, #45	@ 0x2d
 80092da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092de:	e79e      	b.n	800921e <_printf_float+0xa2>
 80092e0:	9a06      	ldr	r2, [sp, #24]
 80092e2:	2a47      	cmp	r2, #71	@ 0x47
 80092e4:	d1c2      	bne.n	800926c <_printf_float+0xf0>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1c0      	bne.n	800926c <_printf_float+0xf0>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e7bd      	b.n	800926a <_printf_float+0xee>
 80092ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092f2:	d9db      	bls.n	80092ac <_printf_float+0x130>
 80092f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80092f8:	d118      	bne.n	800932c <_printf_float+0x1b0>
 80092fa:	2900      	cmp	r1, #0
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	dd0b      	ble.n	8009318 <_printf_float+0x19c>
 8009300:	6121      	str	r1, [r4, #16]
 8009302:	b913      	cbnz	r3, 800930a <_printf_float+0x18e>
 8009304:	6822      	ldr	r2, [r4, #0]
 8009306:	07d0      	lsls	r0, r2, #31
 8009308:	d502      	bpl.n	8009310 <_printf_float+0x194>
 800930a:	3301      	adds	r3, #1
 800930c:	440b      	add	r3, r1
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009312:	f04f 0900 	mov.w	r9, #0
 8009316:	e7db      	b.n	80092d0 <_printf_float+0x154>
 8009318:	b913      	cbnz	r3, 8009320 <_printf_float+0x1a4>
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	07d2      	lsls	r2, r2, #31
 800931e:	d501      	bpl.n	8009324 <_printf_float+0x1a8>
 8009320:	3302      	adds	r3, #2
 8009322:	e7f4      	b.n	800930e <_printf_float+0x192>
 8009324:	2301      	movs	r3, #1
 8009326:	e7f2      	b.n	800930e <_printf_float+0x192>
 8009328:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800932c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800932e:	4299      	cmp	r1, r3
 8009330:	db05      	blt.n	800933e <_printf_float+0x1c2>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	6121      	str	r1, [r4, #16]
 8009336:	07d8      	lsls	r0, r3, #31
 8009338:	d5ea      	bpl.n	8009310 <_printf_float+0x194>
 800933a:	1c4b      	adds	r3, r1, #1
 800933c:	e7e7      	b.n	800930e <_printf_float+0x192>
 800933e:	2900      	cmp	r1, #0
 8009340:	bfd4      	ite	le
 8009342:	f1c1 0202 	rsble	r2, r1, #2
 8009346:	2201      	movgt	r2, #1
 8009348:	4413      	add	r3, r2
 800934a:	e7e0      	b.n	800930e <_printf_float+0x192>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	055a      	lsls	r2, r3, #21
 8009350:	d407      	bmi.n	8009362 <_printf_float+0x1e6>
 8009352:	6923      	ldr	r3, [r4, #16]
 8009354:	4642      	mov	r2, r8
 8009356:	4631      	mov	r1, r6
 8009358:	4628      	mov	r0, r5
 800935a:	47b8      	blx	r7
 800935c:	3001      	adds	r0, #1
 800935e:	d12b      	bne.n	80093b8 <_printf_float+0x23c>
 8009360:	e767      	b.n	8009232 <_printf_float+0xb6>
 8009362:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009366:	f240 80dd 	bls.w	8009524 <_printf_float+0x3a8>
 800936a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800936e:	2200      	movs	r2, #0
 8009370:	2300      	movs	r3, #0
 8009372:	f7f7 fb81 	bl	8000a78 <__aeabi_dcmpeq>
 8009376:	2800      	cmp	r0, #0
 8009378:	d033      	beq.n	80093e2 <_printf_float+0x266>
 800937a:	4a37      	ldr	r2, [pc, #220]	@ (8009458 <_printf_float+0x2dc>)
 800937c:	2301      	movs	r3, #1
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f af54 	beq.w	8009232 <_printf_float+0xb6>
 800938a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800938e:	4543      	cmp	r3, r8
 8009390:	db02      	blt.n	8009398 <_printf_float+0x21c>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	07d8      	lsls	r0, r3, #31
 8009396:	d50f      	bpl.n	80093b8 <_printf_float+0x23c>
 8009398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af45 	beq.w	8009232 <_printf_float+0xb6>
 80093a8:	f04f 0900 	mov.w	r9, #0
 80093ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80093b0:	f104 0a1a 	add.w	sl, r4, #26
 80093b4:	45c8      	cmp	r8, r9
 80093b6:	dc09      	bgt.n	80093cc <_printf_float+0x250>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	079b      	lsls	r3, r3, #30
 80093bc:	f100 8103 	bmi.w	80095c6 <_printf_float+0x44a>
 80093c0:	68e0      	ldr	r0, [r4, #12]
 80093c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093c4:	4298      	cmp	r0, r3
 80093c6:	bfb8      	it	lt
 80093c8:	4618      	movlt	r0, r3
 80093ca:	e734      	b.n	8009236 <_printf_float+0xba>
 80093cc:	2301      	movs	r3, #1
 80093ce:	4652      	mov	r2, sl
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af2b 	beq.w	8009232 <_printf_float+0xb6>
 80093dc:	f109 0901 	add.w	r9, r9, #1
 80093e0:	e7e8      	b.n	80093b4 <_printf_float+0x238>
 80093e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc39      	bgt.n	800945c <_printf_float+0x2e0>
 80093e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009458 <_printf_float+0x2dc>)
 80093ea:	2301      	movs	r3, #1
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f af1d 	beq.w	8009232 <_printf_float+0xb6>
 80093f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80093fc:	ea59 0303 	orrs.w	r3, r9, r3
 8009400:	d102      	bne.n	8009408 <_printf_float+0x28c>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	07d9      	lsls	r1, r3, #31
 8009406:	d5d7      	bpl.n	80093b8 <_printf_float+0x23c>
 8009408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f af0d 	beq.w	8009232 <_printf_float+0xb6>
 8009418:	f04f 0a00 	mov.w	sl, #0
 800941c:	f104 0b1a 	add.w	fp, r4, #26
 8009420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009422:	425b      	negs	r3, r3
 8009424:	4553      	cmp	r3, sl
 8009426:	dc01      	bgt.n	800942c <_printf_float+0x2b0>
 8009428:	464b      	mov	r3, r9
 800942a:	e793      	b.n	8009354 <_printf_float+0x1d8>
 800942c:	2301      	movs	r3, #1
 800942e:	465a      	mov	r2, fp
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f aefb 	beq.w	8009232 <_printf_float+0xb6>
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	e7ee      	b.n	8009420 <_printf_float+0x2a4>
 8009442:	bf00      	nop
 8009444:	7fefffff 	.word	0x7fefffff
 8009448:	0800da70 	.word	0x0800da70
 800944c:	0800da74 	.word	0x0800da74
 8009450:	0800da78 	.word	0x0800da78
 8009454:	0800da7c 	.word	0x0800da7c
 8009458:	0800da80 	.word	0x0800da80
 800945c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800945e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009462:	4553      	cmp	r3, sl
 8009464:	bfa8      	it	ge
 8009466:	4653      	movge	r3, sl
 8009468:	2b00      	cmp	r3, #0
 800946a:	4699      	mov	r9, r3
 800946c:	dc36      	bgt.n	80094dc <_printf_float+0x360>
 800946e:	f04f 0b00 	mov.w	fp, #0
 8009472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009476:	f104 021a 	add.w	r2, r4, #26
 800947a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800947c:	9306      	str	r3, [sp, #24]
 800947e:	eba3 0309 	sub.w	r3, r3, r9
 8009482:	455b      	cmp	r3, fp
 8009484:	dc31      	bgt.n	80094ea <_printf_float+0x36e>
 8009486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009488:	459a      	cmp	sl, r3
 800948a:	dc3a      	bgt.n	8009502 <_printf_float+0x386>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d437      	bmi.n	8009502 <_printf_float+0x386>
 8009492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009494:	ebaa 0903 	sub.w	r9, sl, r3
 8009498:	9b06      	ldr	r3, [sp, #24]
 800949a:	ebaa 0303 	sub.w	r3, sl, r3
 800949e:	4599      	cmp	r9, r3
 80094a0:	bfa8      	it	ge
 80094a2:	4699      	movge	r9, r3
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	dc33      	bgt.n	8009512 <_printf_float+0x396>
 80094aa:	f04f 0800 	mov.w	r8, #0
 80094ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b2:	f104 0b1a 	add.w	fp, r4, #26
 80094b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b8:	ebaa 0303 	sub.w	r3, sl, r3
 80094bc:	eba3 0309 	sub.w	r3, r3, r9
 80094c0:	4543      	cmp	r3, r8
 80094c2:	f77f af79 	ble.w	80093b8 <_printf_float+0x23c>
 80094c6:	2301      	movs	r3, #1
 80094c8:	465a      	mov	r2, fp
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f aeae 	beq.w	8009232 <_printf_float+0xb6>
 80094d6:	f108 0801 	add.w	r8, r8, #1
 80094da:	e7ec      	b.n	80094b6 <_printf_float+0x33a>
 80094dc:	4642      	mov	r2, r8
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d1c2      	bne.n	800946e <_printf_float+0x2f2>
 80094e8:	e6a3      	b.n	8009232 <_printf_float+0xb6>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	9206      	str	r2, [sp, #24]
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae9c 	beq.w	8009232 <_printf_float+0xb6>
 80094fa:	9a06      	ldr	r2, [sp, #24]
 80094fc:	f10b 0b01 	add.w	fp, fp, #1
 8009500:	e7bb      	b.n	800947a <_printf_float+0x2fe>
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	4631      	mov	r1, r6
 8009508:	4628      	mov	r0, r5
 800950a:	47b8      	blx	r7
 800950c:	3001      	adds	r0, #1
 800950e:	d1c0      	bne.n	8009492 <_printf_float+0x316>
 8009510:	e68f      	b.n	8009232 <_printf_float+0xb6>
 8009512:	9a06      	ldr	r2, [sp, #24]
 8009514:	464b      	mov	r3, r9
 8009516:	4442      	add	r2, r8
 8009518:	4631      	mov	r1, r6
 800951a:	4628      	mov	r0, r5
 800951c:	47b8      	blx	r7
 800951e:	3001      	adds	r0, #1
 8009520:	d1c3      	bne.n	80094aa <_printf_float+0x32e>
 8009522:	e686      	b.n	8009232 <_printf_float+0xb6>
 8009524:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009528:	f1ba 0f01 	cmp.w	sl, #1
 800952c:	dc01      	bgt.n	8009532 <_printf_float+0x3b6>
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d536      	bpl.n	80095a0 <_printf_float+0x424>
 8009532:	2301      	movs	r3, #1
 8009534:	4642      	mov	r2, r8
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	f43f ae78 	beq.w	8009232 <_printf_float+0xb6>
 8009542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae70 	beq.w	8009232 <_printf_float+0xb6>
 8009552:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009556:	2200      	movs	r2, #0
 8009558:	2300      	movs	r3, #0
 800955a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800955e:	f7f7 fa8b 	bl	8000a78 <__aeabi_dcmpeq>
 8009562:	b9c0      	cbnz	r0, 8009596 <_printf_float+0x41a>
 8009564:	4653      	mov	r3, sl
 8009566:	f108 0201 	add.w	r2, r8, #1
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d10c      	bne.n	800958e <_printf_float+0x412>
 8009574:	e65d      	b.n	8009232 <_printf_float+0xb6>
 8009576:	2301      	movs	r3, #1
 8009578:	465a      	mov	r2, fp
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae56 	beq.w	8009232 <_printf_float+0xb6>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	45d0      	cmp	r8, sl
 800958c:	dbf3      	blt.n	8009576 <_printf_float+0x3fa>
 800958e:	464b      	mov	r3, r9
 8009590:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009594:	e6df      	b.n	8009356 <_printf_float+0x1da>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	f104 0b1a 	add.w	fp, r4, #26
 800959e:	e7f4      	b.n	800958a <_printf_float+0x40e>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4642      	mov	r2, r8
 80095a4:	e7e1      	b.n	800956a <_printf_float+0x3ee>
 80095a6:	2301      	movs	r3, #1
 80095a8:	464a      	mov	r2, r9
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f ae3e 	beq.w	8009232 <_printf_float+0xb6>
 80095b6:	f108 0801 	add.w	r8, r8, #1
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095be:	1a5b      	subs	r3, r3, r1
 80095c0:	4543      	cmp	r3, r8
 80095c2:	dcf0      	bgt.n	80095a6 <_printf_float+0x42a>
 80095c4:	e6fc      	b.n	80093c0 <_printf_float+0x244>
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	f104 0919 	add.w	r9, r4, #25
 80095ce:	e7f4      	b.n	80095ba <_printf_float+0x43e>

080095d0 <_printf_common>:
 80095d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	4616      	mov	r6, r2
 80095d6:	4698      	mov	r8, r3
 80095d8:	688a      	ldr	r2, [r1, #8]
 80095da:	690b      	ldr	r3, [r1, #16]
 80095dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	bfb8      	it	lt
 80095e4:	4613      	movlt	r3, r2
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095ec:	4607      	mov	r7, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	b10a      	cbz	r2, 80095f6 <_printf_common+0x26>
 80095f2:	3301      	adds	r3, #1
 80095f4:	6033      	str	r3, [r6, #0]
 80095f6:	6823      	ldr	r3, [r4, #0]
 80095f8:	0699      	lsls	r1, r3, #26
 80095fa:	bf42      	ittt	mi
 80095fc:	6833      	ldrmi	r3, [r6, #0]
 80095fe:	3302      	addmi	r3, #2
 8009600:	6033      	strmi	r3, [r6, #0]
 8009602:	6825      	ldr	r5, [r4, #0]
 8009604:	f015 0506 	ands.w	r5, r5, #6
 8009608:	d106      	bne.n	8009618 <_printf_common+0x48>
 800960a:	f104 0a19 	add.w	sl, r4, #25
 800960e:	68e3      	ldr	r3, [r4, #12]
 8009610:	6832      	ldr	r2, [r6, #0]
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	42ab      	cmp	r3, r5
 8009616:	dc26      	bgt.n	8009666 <_printf_common+0x96>
 8009618:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800961c:	6822      	ldr	r2, [r4, #0]
 800961e:	3b00      	subs	r3, #0
 8009620:	bf18      	it	ne
 8009622:	2301      	movne	r3, #1
 8009624:	0692      	lsls	r2, r2, #26
 8009626:	d42b      	bmi.n	8009680 <_printf_common+0xb0>
 8009628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800962c:	4641      	mov	r1, r8
 800962e:	4638      	mov	r0, r7
 8009630:	47c8      	blx	r9
 8009632:	3001      	adds	r0, #1
 8009634:	d01e      	beq.n	8009674 <_printf_common+0xa4>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6922      	ldr	r2, [r4, #16]
 800963a:	f003 0306 	and.w	r3, r3, #6
 800963e:	2b04      	cmp	r3, #4
 8009640:	bf02      	ittt	eq
 8009642:	68e5      	ldreq	r5, [r4, #12]
 8009644:	6833      	ldreq	r3, [r6, #0]
 8009646:	1aed      	subeq	r5, r5, r3
 8009648:	68a3      	ldr	r3, [r4, #8]
 800964a:	bf0c      	ite	eq
 800964c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009650:	2500      	movne	r5, #0
 8009652:	4293      	cmp	r3, r2
 8009654:	bfc4      	itt	gt
 8009656:	1a9b      	subgt	r3, r3, r2
 8009658:	18ed      	addgt	r5, r5, r3
 800965a:	2600      	movs	r6, #0
 800965c:	341a      	adds	r4, #26
 800965e:	42b5      	cmp	r5, r6
 8009660:	d11a      	bne.n	8009698 <_printf_common+0xc8>
 8009662:	2000      	movs	r0, #0
 8009664:	e008      	b.n	8009678 <_printf_common+0xa8>
 8009666:	2301      	movs	r3, #1
 8009668:	4652      	mov	r2, sl
 800966a:	4641      	mov	r1, r8
 800966c:	4638      	mov	r0, r7
 800966e:	47c8      	blx	r9
 8009670:	3001      	adds	r0, #1
 8009672:	d103      	bne.n	800967c <_printf_common+0xac>
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967c:	3501      	adds	r5, #1
 800967e:	e7c6      	b.n	800960e <_printf_common+0x3e>
 8009680:	18e1      	adds	r1, r4, r3
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	2030      	movs	r0, #48	@ 0x30
 8009686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800968a:	4422      	add	r2, r4
 800968c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009690:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009694:	3302      	adds	r3, #2
 8009696:	e7c7      	b.n	8009628 <_printf_common+0x58>
 8009698:	2301      	movs	r3, #1
 800969a:	4622      	mov	r2, r4
 800969c:	4641      	mov	r1, r8
 800969e:	4638      	mov	r0, r7
 80096a0:	47c8      	blx	r9
 80096a2:	3001      	adds	r0, #1
 80096a4:	d0e6      	beq.n	8009674 <_printf_common+0xa4>
 80096a6:	3601      	adds	r6, #1
 80096a8:	e7d9      	b.n	800965e <_printf_common+0x8e>
	...

080096ac <_printf_i>:
 80096ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	7e0f      	ldrb	r7, [r1, #24]
 80096b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096b4:	2f78      	cmp	r7, #120	@ 0x78
 80096b6:	4691      	mov	r9, r2
 80096b8:	4680      	mov	r8, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	469a      	mov	sl, r3
 80096be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096c2:	d807      	bhi.n	80096d4 <_printf_i+0x28>
 80096c4:	2f62      	cmp	r7, #98	@ 0x62
 80096c6:	d80a      	bhi.n	80096de <_printf_i+0x32>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	f000 80d2 	beq.w	8009872 <_printf_i+0x1c6>
 80096ce:	2f58      	cmp	r7, #88	@ 0x58
 80096d0:	f000 80b9 	beq.w	8009846 <_printf_i+0x19a>
 80096d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096dc:	e03a      	b.n	8009754 <_printf_i+0xa8>
 80096de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096e2:	2b15      	cmp	r3, #21
 80096e4:	d8f6      	bhi.n	80096d4 <_printf_i+0x28>
 80096e6:	a101      	add	r1, pc, #4	@ (adr r1, 80096ec <_printf_i+0x40>)
 80096e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096ec:	08009745 	.word	0x08009745
 80096f0:	08009759 	.word	0x08009759
 80096f4:	080096d5 	.word	0x080096d5
 80096f8:	080096d5 	.word	0x080096d5
 80096fc:	080096d5 	.word	0x080096d5
 8009700:	080096d5 	.word	0x080096d5
 8009704:	08009759 	.word	0x08009759
 8009708:	080096d5 	.word	0x080096d5
 800970c:	080096d5 	.word	0x080096d5
 8009710:	080096d5 	.word	0x080096d5
 8009714:	080096d5 	.word	0x080096d5
 8009718:	08009859 	.word	0x08009859
 800971c:	08009783 	.word	0x08009783
 8009720:	08009813 	.word	0x08009813
 8009724:	080096d5 	.word	0x080096d5
 8009728:	080096d5 	.word	0x080096d5
 800972c:	0800987b 	.word	0x0800987b
 8009730:	080096d5 	.word	0x080096d5
 8009734:	08009783 	.word	0x08009783
 8009738:	080096d5 	.word	0x080096d5
 800973c:	080096d5 	.word	0x080096d5
 8009740:	0800981b 	.word	0x0800981b
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6032      	str	r2, [r6, #0]
 800974c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009754:	2301      	movs	r3, #1
 8009756:	e09d      	b.n	8009894 <_printf_i+0x1e8>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1d19      	adds	r1, r3, #4
 800975e:	6031      	str	r1, [r6, #0]
 8009760:	0606      	lsls	r6, r0, #24
 8009762:	d501      	bpl.n	8009768 <_printf_i+0xbc>
 8009764:	681d      	ldr	r5, [r3, #0]
 8009766:	e003      	b.n	8009770 <_printf_i+0xc4>
 8009768:	0645      	lsls	r5, r0, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0xb8>
 800976c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009770:	2d00      	cmp	r5, #0
 8009772:	da03      	bge.n	800977c <_printf_i+0xd0>
 8009774:	232d      	movs	r3, #45	@ 0x2d
 8009776:	426d      	negs	r5, r5
 8009778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800977c:	4859      	ldr	r0, [pc, #356]	@ (80098e4 <_printf_i+0x238>)
 800977e:	230a      	movs	r3, #10
 8009780:	e011      	b.n	80097a6 <_printf_i+0xfa>
 8009782:	6821      	ldr	r1, [r4, #0]
 8009784:	6833      	ldr	r3, [r6, #0]
 8009786:	0608      	lsls	r0, r1, #24
 8009788:	f853 5b04 	ldr.w	r5, [r3], #4
 800978c:	d402      	bmi.n	8009794 <_printf_i+0xe8>
 800978e:	0649      	lsls	r1, r1, #25
 8009790:	bf48      	it	mi
 8009792:	b2ad      	uxthmi	r5, r5
 8009794:	2f6f      	cmp	r7, #111	@ 0x6f
 8009796:	4853      	ldr	r0, [pc, #332]	@ (80098e4 <_printf_i+0x238>)
 8009798:	6033      	str	r3, [r6, #0]
 800979a:	bf14      	ite	ne
 800979c:	230a      	movne	r3, #10
 800979e:	2308      	moveq	r3, #8
 80097a0:	2100      	movs	r1, #0
 80097a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097a6:	6866      	ldr	r6, [r4, #4]
 80097a8:	60a6      	str	r6, [r4, #8]
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	bfa2      	ittt	ge
 80097ae:	6821      	ldrge	r1, [r4, #0]
 80097b0:	f021 0104 	bicge.w	r1, r1, #4
 80097b4:	6021      	strge	r1, [r4, #0]
 80097b6:	b90d      	cbnz	r5, 80097bc <_printf_i+0x110>
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	d04b      	beq.n	8009854 <_printf_i+0x1a8>
 80097bc:	4616      	mov	r6, r2
 80097be:	fbb5 f1f3 	udiv	r1, r5, r3
 80097c2:	fb03 5711 	mls	r7, r3, r1, r5
 80097c6:	5dc7      	ldrb	r7, [r0, r7]
 80097c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097cc:	462f      	mov	r7, r5
 80097ce:	42bb      	cmp	r3, r7
 80097d0:	460d      	mov	r5, r1
 80097d2:	d9f4      	bls.n	80097be <_printf_i+0x112>
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d10b      	bne.n	80097f0 <_printf_i+0x144>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	07df      	lsls	r7, r3, #31
 80097dc:	d508      	bpl.n	80097f0 <_printf_i+0x144>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	6861      	ldr	r1, [r4, #4]
 80097e2:	4299      	cmp	r1, r3
 80097e4:	bfde      	ittt	le
 80097e6:	2330      	movle	r3, #48	@ 0x30
 80097e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097f0:	1b92      	subs	r2, r2, r6
 80097f2:	6122      	str	r2, [r4, #16]
 80097f4:	f8cd a000 	str.w	sl, [sp]
 80097f8:	464b      	mov	r3, r9
 80097fa:	aa03      	add	r2, sp, #12
 80097fc:	4621      	mov	r1, r4
 80097fe:	4640      	mov	r0, r8
 8009800:	f7ff fee6 	bl	80095d0 <_printf_common>
 8009804:	3001      	adds	r0, #1
 8009806:	d14a      	bne.n	800989e <_printf_i+0x1f2>
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	b004      	add	sp, #16
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f043 0320 	orr.w	r3, r3, #32
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	4833      	ldr	r0, [pc, #204]	@ (80098e8 <_printf_i+0x23c>)
 800981c:	2778      	movs	r7, #120	@ 0x78
 800981e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	6831      	ldr	r1, [r6, #0]
 8009826:	061f      	lsls	r7, r3, #24
 8009828:	f851 5b04 	ldr.w	r5, [r1], #4
 800982c:	d402      	bmi.n	8009834 <_printf_i+0x188>
 800982e:	065f      	lsls	r7, r3, #25
 8009830:	bf48      	it	mi
 8009832:	b2ad      	uxthmi	r5, r5
 8009834:	6031      	str	r1, [r6, #0]
 8009836:	07d9      	lsls	r1, r3, #31
 8009838:	bf44      	itt	mi
 800983a:	f043 0320 	orrmi.w	r3, r3, #32
 800983e:	6023      	strmi	r3, [r4, #0]
 8009840:	b11d      	cbz	r5, 800984a <_printf_i+0x19e>
 8009842:	2310      	movs	r3, #16
 8009844:	e7ac      	b.n	80097a0 <_printf_i+0xf4>
 8009846:	4827      	ldr	r0, [pc, #156]	@ (80098e4 <_printf_i+0x238>)
 8009848:	e7e9      	b.n	800981e <_printf_i+0x172>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f023 0320 	bic.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	e7f6      	b.n	8009842 <_printf_i+0x196>
 8009854:	4616      	mov	r6, r2
 8009856:	e7bd      	b.n	80097d4 <_printf_i+0x128>
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	6825      	ldr	r5, [r4, #0]
 800985c:	6961      	ldr	r1, [r4, #20]
 800985e:	1d18      	adds	r0, r3, #4
 8009860:	6030      	str	r0, [r6, #0]
 8009862:	062e      	lsls	r6, r5, #24
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	d501      	bpl.n	800986c <_printf_i+0x1c0>
 8009868:	6019      	str	r1, [r3, #0]
 800986a:	e002      	b.n	8009872 <_printf_i+0x1c6>
 800986c:	0668      	lsls	r0, r5, #25
 800986e:	d5fb      	bpl.n	8009868 <_printf_i+0x1bc>
 8009870:	8019      	strh	r1, [r3, #0]
 8009872:	2300      	movs	r3, #0
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	4616      	mov	r6, r2
 8009878:	e7bc      	b.n	80097f4 <_printf_i+0x148>
 800987a:	6833      	ldr	r3, [r6, #0]
 800987c:	1d1a      	adds	r2, r3, #4
 800987e:	6032      	str	r2, [r6, #0]
 8009880:	681e      	ldr	r6, [r3, #0]
 8009882:	6862      	ldr	r2, [r4, #4]
 8009884:	2100      	movs	r1, #0
 8009886:	4630      	mov	r0, r6
 8009888:	f7f6 fc7a 	bl	8000180 <memchr>
 800988c:	b108      	cbz	r0, 8009892 <_printf_i+0x1e6>
 800988e:	1b80      	subs	r0, r0, r6
 8009890:	6060      	str	r0, [r4, #4]
 8009892:	6863      	ldr	r3, [r4, #4]
 8009894:	6123      	str	r3, [r4, #16]
 8009896:	2300      	movs	r3, #0
 8009898:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800989c:	e7aa      	b.n	80097f4 <_printf_i+0x148>
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	4632      	mov	r2, r6
 80098a2:	4649      	mov	r1, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	47d0      	blx	sl
 80098a8:	3001      	adds	r0, #1
 80098aa:	d0ad      	beq.n	8009808 <_printf_i+0x15c>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	079b      	lsls	r3, r3, #30
 80098b0:	d413      	bmi.n	80098da <_printf_i+0x22e>
 80098b2:	68e0      	ldr	r0, [r4, #12]
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	4298      	cmp	r0, r3
 80098b8:	bfb8      	it	lt
 80098ba:	4618      	movlt	r0, r3
 80098bc:	e7a6      	b.n	800980c <_printf_i+0x160>
 80098be:	2301      	movs	r3, #1
 80098c0:	4632      	mov	r2, r6
 80098c2:	4649      	mov	r1, r9
 80098c4:	4640      	mov	r0, r8
 80098c6:	47d0      	blx	sl
 80098c8:	3001      	adds	r0, #1
 80098ca:	d09d      	beq.n	8009808 <_printf_i+0x15c>
 80098cc:	3501      	adds	r5, #1
 80098ce:	68e3      	ldr	r3, [r4, #12]
 80098d0:	9903      	ldr	r1, [sp, #12]
 80098d2:	1a5b      	subs	r3, r3, r1
 80098d4:	42ab      	cmp	r3, r5
 80098d6:	dcf2      	bgt.n	80098be <_printf_i+0x212>
 80098d8:	e7eb      	b.n	80098b2 <_printf_i+0x206>
 80098da:	2500      	movs	r5, #0
 80098dc:	f104 0619 	add.w	r6, r4, #25
 80098e0:	e7f5      	b.n	80098ce <_printf_i+0x222>
 80098e2:	bf00      	nop
 80098e4:	0800da82 	.word	0x0800da82
 80098e8:	0800da93 	.word	0x0800da93

080098ec <_scanf_float>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b087      	sub	sp, #28
 80098f2:	4617      	mov	r7, r2
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	688b      	ldr	r3, [r1, #8]
 80098f8:	1e5a      	subs	r2, r3, #1
 80098fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80098fe:	bf81      	itttt	hi
 8009900:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009904:	eb03 0b05 	addhi.w	fp, r3, r5
 8009908:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800990c:	608b      	strhi	r3, [r1, #8]
 800990e:	680b      	ldr	r3, [r1, #0]
 8009910:	460a      	mov	r2, r1
 8009912:	f04f 0500 	mov.w	r5, #0
 8009916:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800991a:	f842 3b1c 	str.w	r3, [r2], #28
 800991e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009922:	4680      	mov	r8, r0
 8009924:	460c      	mov	r4, r1
 8009926:	bf98      	it	ls
 8009928:	f04f 0b00 	movls.w	fp, #0
 800992c:	9201      	str	r2, [sp, #4]
 800992e:	4616      	mov	r6, r2
 8009930:	46aa      	mov	sl, r5
 8009932:	46a9      	mov	r9, r5
 8009934:	9502      	str	r5, [sp, #8]
 8009936:	68a2      	ldr	r2, [r4, #8]
 8009938:	b152      	cbz	r2, 8009950 <_scanf_float+0x64>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009940:	d864      	bhi.n	8009a0c <_scanf_float+0x120>
 8009942:	2b40      	cmp	r3, #64	@ 0x40
 8009944:	d83c      	bhi.n	80099c0 <_scanf_float+0xd4>
 8009946:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800994a:	b2c8      	uxtb	r0, r1
 800994c:	280e      	cmp	r0, #14
 800994e:	d93a      	bls.n	80099c6 <_scanf_float+0xda>
 8009950:	f1b9 0f00 	cmp.w	r9, #0
 8009954:	d003      	beq.n	800995e <_scanf_float+0x72>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009962:	f1ba 0f01 	cmp.w	sl, #1
 8009966:	f200 8117 	bhi.w	8009b98 <_scanf_float+0x2ac>
 800996a:	9b01      	ldr	r3, [sp, #4]
 800996c:	429e      	cmp	r6, r3
 800996e:	f200 8108 	bhi.w	8009b82 <_scanf_float+0x296>
 8009972:	2001      	movs	r0, #1
 8009974:	b007      	add	sp, #28
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800997e:	2a0d      	cmp	r2, #13
 8009980:	d8e6      	bhi.n	8009950 <_scanf_float+0x64>
 8009982:	a101      	add	r1, pc, #4	@ (adr r1, 8009988 <_scanf_float+0x9c>)
 8009984:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009988:	08009acf 	.word	0x08009acf
 800998c:	08009951 	.word	0x08009951
 8009990:	08009951 	.word	0x08009951
 8009994:	08009951 	.word	0x08009951
 8009998:	08009b2f 	.word	0x08009b2f
 800999c:	08009b07 	.word	0x08009b07
 80099a0:	08009951 	.word	0x08009951
 80099a4:	08009951 	.word	0x08009951
 80099a8:	08009add 	.word	0x08009add
 80099ac:	08009951 	.word	0x08009951
 80099b0:	08009951 	.word	0x08009951
 80099b4:	08009951 	.word	0x08009951
 80099b8:	08009951 	.word	0x08009951
 80099bc:	08009a95 	.word	0x08009a95
 80099c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80099c4:	e7db      	b.n	800997e <_scanf_float+0x92>
 80099c6:	290e      	cmp	r1, #14
 80099c8:	d8c2      	bhi.n	8009950 <_scanf_float+0x64>
 80099ca:	a001      	add	r0, pc, #4	@ (adr r0, 80099d0 <_scanf_float+0xe4>)
 80099cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099d0:	08009a85 	.word	0x08009a85
 80099d4:	08009951 	.word	0x08009951
 80099d8:	08009a85 	.word	0x08009a85
 80099dc:	08009b1b 	.word	0x08009b1b
 80099e0:	08009951 	.word	0x08009951
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a6b 	.word	0x08009a6b
 80099ec:	08009a6b 	.word	0x08009a6b
 80099f0:	08009a6b 	.word	0x08009a6b
 80099f4:	08009a6b 	.word	0x08009a6b
 80099f8:	08009a6b 	.word	0x08009a6b
 80099fc:	08009a6b 	.word	0x08009a6b
 8009a00:	08009a6b 	.word	0x08009a6b
 8009a04:	08009a6b 	.word	0x08009a6b
 8009a08:	08009a6b 	.word	0x08009a6b
 8009a0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a0e:	d809      	bhi.n	8009a24 <_scanf_float+0x138>
 8009a10:	2b60      	cmp	r3, #96	@ 0x60
 8009a12:	d8b2      	bhi.n	800997a <_scanf_float+0x8e>
 8009a14:	2b54      	cmp	r3, #84	@ 0x54
 8009a16:	d07b      	beq.n	8009b10 <_scanf_float+0x224>
 8009a18:	2b59      	cmp	r3, #89	@ 0x59
 8009a1a:	d199      	bne.n	8009950 <_scanf_float+0x64>
 8009a1c:	2d07      	cmp	r5, #7
 8009a1e:	d197      	bne.n	8009950 <_scanf_float+0x64>
 8009a20:	2508      	movs	r5, #8
 8009a22:	e02c      	b.n	8009a7e <_scanf_float+0x192>
 8009a24:	2b74      	cmp	r3, #116	@ 0x74
 8009a26:	d073      	beq.n	8009b10 <_scanf_float+0x224>
 8009a28:	2b79      	cmp	r3, #121	@ 0x79
 8009a2a:	e7f6      	b.n	8009a1a <_scanf_float+0x12e>
 8009a2c:	6821      	ldr	r1, [r4, #0]
 8009a2e:	05c8      	lsls	r0, r1, #23
 8009a30:	d51b      	bpl.n	8009a6a <_scanf_float+0x17e>
 8009a32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009a36:	6021      	str	r1, [r4, #0]
 8009a38:	f109 0901 	add.w	r9, r9, #1
 8009a3c:	f1bb 0f00 	cmp.w	fp, #0
 8009a40:	d003      	beq.n	8009a4a <_scanf_float+0x15e>
 8009a42:	3201      	adds	r2, #1
 8009a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a48:	60a2      	str	r2, [r4, #8]
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	3301      	adds	r3, #1
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	f340 8087 	ble.w	8009b70 <_scanf_float+0x284>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	e765      	b.n	8009936 <_scanf_float+0x4a>
 8009a6a:	eb1a 0105 	adds.w	r1, sl, r5
 8009a6e:	f47f af6f 	bne.w	8009950 <_scanf_float+0x64>
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009a78:	6022      	str	r2, [r4, #0]
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	468a      	mov	sl, r1
 8009a7e:	f806 3b01 	strb.w	r3, [r6], #1
 8009a82:	e7e2      	b.n	8009a4a <_scanf_float+0x15e>
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	0610      	lsls	r0, r2, #24
 8009a88:	f57f af62 	bpl.w	8009950 <_scanf_float+0x64>
 8009a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a90:	6022      	str	r2, [r4, #0]
 8009a92:	e7f4      	b.n	8009a7e <_scanf_float+0x192>
 8009a94:	f1ba 0f00 	cmp.w	sl, #0
 8009a98:	d10e      	bne.n	8009ab8 <_scanf_float+0x1cc>
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	d10e      	bne.n	8009abe <_scanf_float+0x1d2>
 8009aa0:	6822      	ldr	r2, [r4, #0]
 8009aa2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009aa6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009aaa:	d108      	bne.n	8009abe <_scanf_float+0x1d2>
 8009aac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ab0:	6022      	str	r2, [r4, #0]
 8009ab2:	f04f 0a01 	mov.w	sl, #1
 8009ab6:	e7e2      	b.n	8009a7e <_scanf_float+0x192>
 8009ab8:	f1ba 0f02 	cmp.w	sl, #2
 8009abc:	d055      	beq.n	8009b6a <_scanf_float+0x27e>
 8009abe:	2d01      	cmp	r5, #1
 8009ac0:	d002      	beq.n	8009ac8 <_scanf_float+0x1dc>
 8009ac2:	2d04      	cmp	r5, #4
 8009ac4:	f47f af44 	bne.w	8009950 <_scanf_float+0x64>
 8009ac8:	3501      	adds	r5, #1
 8009aca:	b2ed      	uxtb	r5, r5
 8009acc:	e7d7      	b.n	8009a7e <_scanf_float+0x192>
 8009ace:	f1ba 0f01 	cmp.w	sl, #1
 8009ad2:	f47f af3d 	bne.w	8009950 <_scanf_float+0x64>
 8009ad6:	f04f 0a02 	mov.w	sl, #2
 8009ada:	e7d0      	b.n	8009a7e <_scanf_float+0x192>
 8009adc:	b97d      	cbnz	r5, 8009afe <_scanf_float+0x212>
 8009ade:	f1b9 0f00 	cmp.w	r9, #0
 8009ae2:	f47f af38 	bne.w	8009956 <_scanf_float+0x6a>
 8009ae6:	6822      	ldr	r2, [r4, #0]
 8009ae8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009aec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009af0:	f040 8108 	bne.w	8009d04 <_scanf_float+0x418>
 8009af4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	2501      	movs	r5, #1
 8009afc:	e7bf      	b.n	8009a7e <_scanf_float+0x192>
 8009afe:	2d03      	cmp	r5, #3
 8009b00:	d0e2      	beq.n	8009ac8 <_scanf_float+0x1dc>
 8009b02:	2d05      	cmp	r5, #5
 8009b04:	e7de      	b.n	8009ac4 <_scanf_float+0x1d8>
 8009b06:	2d02      	cmp	r5, #2
 8009b08:	f47f af22 	bne.w	8009950 <_scanf_float+0x64>
 8009b0c:	2503      	movs	r5, #3
 8009b0e:	e7b6      	b.n	8009a7e <_scanf_float+0x192>
 8009b10:	2d06      	cmp	r5, #6
 8009b12:	f47f af1d 	bne.w	8009950 <_scanf_float+0x64>
 8009b16:	2507      	movs	r5, #7
 8009b18:	e7b1      	b.n	8009a7e <_scanf_float+0x192>
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	0591      	lsls	r1, r2, #22
 8009b1e:	f57f af17 	bpl.w	8009950 <_scanf_float+0x64>
 8009b22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b2c:	e7a7      	b.n	8009a7e <_scanf_float+0x192>
 8009b2e:	6822      	ldr	r2, [r4, #0]
 8009b30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009b34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009b38:	d006      	beq.n	8009b48 <_scanf_float+0x25c>
 8009b3a:	0550      	lsls	r0, r2, #21
 8009b3c:	f57f af08 	bpl.w	8009950 <_scanf_float+0x64>
 8009b40:	f1b9 0f00 	cmp.w	r9, #0
 8009b44:	f000 80de 	beq.w	8009d04 <_scanf_float+0x418>
 8009b48:	0591      	lsls	r1, r2, #22
 8009b4a:	bf58      	it	pl
 8009b4c:	9902      	ldrpl	r1, [sp, #8]
 8009b4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b52:	bf58      	it	pl
 8009b54:	eba9 0101 	subpl.w	r1, r9, r1
 8009b58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009b5c:	bf58      	it	pl
 8009b5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	f04f 0900 	mov.w	r9, #0
 8009b68:	e789      	b.n	8009a7e <_scanf_float+0x192>
 8009b6a:	f04f 0a03 	mov.w	sl, #3
 8009b6e:	e786      	b.n	8009a7e <_scanf_float+0x192>
 8009b70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b74:	4639      	mov	r1, r7
 8009b76:	4640      	mov	r0, r8
 8009b78:	4798      	blx	r3
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	f43f aedb 	beq.w	8009936 <_scanf_float+0x4a>
 8009b80:	e6e6      	b.n	8009950 <_scanf_float+0x64>
 8009b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b8a:	463a      	mov	r2, r7
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4798      	blx	r3
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	e6e8      	b.n	800996a <_scanf_float+0x7e>
 8009b98:	1e6b      	subs	r3, r5, #1
 8009b9a:	2b06      	cmp	r3, #6
 8009b9c:	d824      	bhi.n	8009be8 <_scanf_float+0x2fc>
 8009b9e:	2d02      	cmp	r5, #2
 8009ba0:	d836      	bhi.n	8009c10 <_scanf_float+0x324>
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	429e      	cmp	r6, r3
 8009ba6:	f67f aee4 	bls.w	8009972 <_scanf_float+0x86>
 8009baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4798      	blx	r3
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	e7f0      	b.n	8009ba2 <_scanf_float+0x2b6>
 8009bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bc4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009bc8:	463a      	mov	r2, r7
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4798      	blx	r3
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	6123      	str	r3, [r4, #16]
 8009bd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bd8:	fa5f fa8a 	uxtb.w	sl, sl
 8009bdc:	f1ba 0f02 	cmp.w	sl, #2
 8009be0:	d1ee      	bne.n	8009bc0 <_scanf_float+0x2d4>
 8009be2:	3d03      	subs	r5, #3
 8009be4:	b2ed      	uxtb	r5, r5
 8009be6:	1b76      	subs	r6, r6, r5
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	05da      	lsls	r2, r3, #23
 8009bec:	d530      	bpl.n	8009c50 <_scanf_float+0x364>
 8009bee:	055b      	lsls	r3, r3, #21
 8009bf0:	d511      	bpl.n	8009c16 <_scanf_float+0x32a>
 8009bf2:	9b01      	ldr	r3, [sp, #4]
 8009bf4:	429e      	cmp	r6, r3
 8009bf6:	f67f aebc 	bls.w	8009972 <_scanf_float+0x86>
 8009bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c02:	463a      	mov	r2, r7
 8009c04:	4640      	mov	r0, r8
 8009c06:	4798      	blx	r3
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	e7f0      	b.n	8009bf2 <_scanf_float+0x306>
 8009c10:	46aa      	mov	sl, r5
 8009c12:	46b3      	mov	fp, r6
 8009c14:	e7de      	b.n	8009bd4 <_scanf_float+0x2e8>
 8009c16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	2965      	cmp	r1, #101	@ 0x65
 8009c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c22:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	d00c      	beq.n	8009c44 <_scanf_float+0x358>
 8009c2a:	2945      	cmp	r1, #69	@ 0x45
 8009c2c:	d00a      	beq.n	8009c44 <_scanf_float+0x358>
 8009c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c32:	463a      	mov	r2, r7
 8009c34:	4640      	mov	r0, r8
 8009c36:	4798      	blx	r3
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	1eb5      	subs	r5, r6, #2
 8009c42:	6123      	str	r3, [r4, #16]
 8009c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c48:	463a      	mov	r2, r7
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4798      	blx	r3
 8009c4e:	462e      	mov	r6, r5
 8009c50:	6822      	ldr	r2, [r4, #0]
 8009c52:	f012 0210 	ands.w	r2, r2, #16
 8009c56:	d001      	beq.n	8009c5c <_scanf_float+0x370>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e68b      	b.n	8009974 <_scanf_float+0x88>
 8009c5c:	7032      	strb	r2, [r6, #0]
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c68:	d11c      	bne.n	8009ca4 <_scanf_float+0x3b8>
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	454b      	cmp	r3, r9
 8009c6e:	eba3 0209 	sub.w	r2, r3, r9
 8009c72:	d123      	bne.n	8009cbc <_scanf_float+0x3d0>
 8009c74:	9901      	ldr	r1, [sp, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f002 fc05 	bl	800c488 <_strtod_r>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	6821      	ldr	r1, [r4, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f011 0f02 	tst.w	r1, #2
 8009c88:	ec57 6b10 	vmov	r6, r7, d0
 8009c8c:	f103 0204 	add.w	r2, r3, #4
 8009c90:	d01f      	beq.n	8009cd2 <_scanf_float+0x3e6>
 8009c92:	9903      	ldr	r1, [sp, #12]
 8009c94:	600a      	str	r2, [r1, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	e9c3 6700 	strd	r6, r7, [r3]
 8009c9c:	68e3      	ldr	r3, [r4, #12]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60e3      	str	r3, [r4, #12]
 8009ca2:	e7d9      	b.n	8009c58 <_scanf_float+0x36c>
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0e4      	beq.n	8009c74 <_scanf_float+0x388>
 8009caa:	9905      	ldr	r1, [sp, #20]
 8009cac:	230a      	movs	r3, #10
 8009cae:	3101      	adds	r1, #1
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	f002 fc69 	bl	800c588 <_strtol_r>
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	9e05      	ldr	r6, [sp, #20]
 8009cba:	1ac2      	subs	r2, r0, r3
 8009cbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009cc0:	429e      	cmp	r6, r3
 8009cc2:	bf28      	it	cs
 8009cc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009cc8:	4910      	ldr	r1, [pc, #64]	@ (8009d0c <_scanf_float+0x420>)
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f8e4 	bl	8009e98 <siprintf>
 8009cd0:	e7d0      	b.n	8009c74 <_scanf_float+0x388>
 8009cd2:	f011 0f04 	tst.w	r1, #4
 8009cd6:	9903      	ldr	r1, [sp, #12]
 8009cd8:	600a      	str	r2, [r1, #0]
 8009cda:	d1dc      	bne.n	8009c96 <_scanf_float+0x3aa>
 8009cdc:	681d      	ldr	r5, [r3, #0]
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fef9 	bl	8000adc <__aeabi_dcmpun>
 8009cea:	b128      	cbz	r0, 8009cf8 <_scanf_float+0x40c>
 8009cec:	4808      	ldr	r0, [pc, #32]	@ (8009d10 <_scanf_float+0x424>)
 8009cee:	f000 f9c5 	bl	800a07c <nanf>
 8009cf2:	ed85 0a00 	vstr	s0, [r5]
 8009cf6:	e7d1      	b.n	8009c9c <_scanf_float+0x3b0>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	f7f6 ff4c 	bl	8000b98 <__aeabi_d2f>
 8009d00:	6028      	str	r0, [r5, #0]
 8009d02:	e7cb      	b.n	8009c9c <_scanf_float+0x3b0>
 8009d04:	f04f 0900 	mov.w	r9, #0
 8009d08:	e629      	b.n	800995e <_scanf_float+0x72>
 8009d0a:	bf00      	nop
 8009d0c:	0800daa4 	.word	0x0800daa4
 8009d10:	0800de3d 	.word	0x0800de3d

08009d14 <std>:
 8009d14:	2300      	movs	r3, #0
 8009d16:	b510      	push	{r4, lr}
 8009d18:	4604      	mov	r4, r0
 8009d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d22:	6083      	str	r3, [r0, #8]
 8009d24:	8181      	strh	r1, [r0, #12]
 8009d26:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d28:	81c2      	strh	r2, [r0, #14]
 8009d2a:	6183      	str	r3, [r0, #24]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	2208      	movs	r2, #8
 8009d30:	305c      	adds	r0, #92	@ 0x5c
 8009d32:	f000 f914 	bl	8009f5e <memset>
 8009d36:	4b0d      	ldr	r3, [pc, #52]	@ (8009d6c <std+0x58>)
 8009d38:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <std+0x5c>)
 8009d3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <std+0x60>)
 8009d40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d42:	4b0d      	ldr	r3, [pc, #52]	@ (8009d78 <std+0x64>)
 8009d44:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d46:	4b0d      	ldr	r3, [pc, #52]	@ (8009d7c <std+0x68>)
 8009d48:	6224      	str	r4, [r4, #32]
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d006      	beq.n	8009d5c <std+0x48>
 8009d4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d52:	4294      	cmp	r4, r2
 8009d54:	d002      	beq.n	8009d5c <std+0x48>
 8009d56:	33d0      	adds	r3, #208	@ 0xd0
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	d105      	bne.n	8009d68 <std+0x54>
 8009d5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d64:	f000 b978 	b.w	800a058 <__retarget_lock_init_recursive>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08009ed9 	.word	0x08009ed9
 8009d70:	08009efb 	.word	0x08009efb
 8009d74:	08009f33 	.word	0x08009f33
 8009d78:	08009f57 	.word	0x08009f57
 8009d7c:	2000296c 	.word	0x2000296c

08009d80 <stdio_exit_handler>:
 8009d80:	4a02      	ldr	r2, [pc, #8]	@ (8009d8c <stdio_exit_handler+0xc>)
 8009d82:	4903      	ldr	r1, [pc, #12]	@ (8009d90 <stdio_exit_handler+0x10>)
 8009d84:	4803      	ldr	r0, [pc, #12]	@ (8009d94 <stdio_exit_handler+0x14>)
 8009d86:	f000 b869 	b.w	8009e5c <_fwalk_sglue>
 8009d8a:	bf00      	nop
 8009d8c:	20000028 	.word	0x20000028
 8009d90:	0800c945 	.word	0x0800c945
 8009d94:	20000038 	.word	0x20000038

08009d98 <cleanup_stdio>:
 8009d98:	6841      	ldr	r1, [r0, #4]
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dcc <cleanup_stdio+0x34>)
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	b510      	push	{r4, lr}
 8009da0:	4604      	mov	r4, r0
 8009da2:	d001      	beq.n	8009da8 <cleanup_stdio+0x10>
 8009da4:	f002 fdce 	bl	800c944 <_fflush_r>
 8009da8:	68a1      	ldr	r1, [r4, #8]
 8009daa:	4b09      	ldr	r3, [pc, #36]	@ (8009dd0 <cleanup_stdio+0x38>)
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d002      	beq.n	8009db6 <cleanup_stdio+0x1e>
 8009db0:	4620      	mov	r0, r4
 8009db2:	f002 fdc7 	bl	800c944 <_fflush_r>
 8009db6:	68e1      	ldr	r1, [r4, #12]
 8009db8:	4b06      	ldr	r3, [pc, #24]	@ (8009dd4 <cleanup_stdio+0x3c>)
 8009dba:	4299      	cmp	r1, r3
 8009dbc:	d004      	beq.n	8009dc8 <cleanup_stdio+0x30>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc4:	f002 bdbe 	b.w	800c944 <_fflush_r>
 8009dc8:	bd10      	pop	{r4, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000296c 	.word	0x2000296c
 8009dd0:	200029d4 	.word	0x200029d4
 8009dd4:	20002a3c 	.word	0x20002a3c

08009dd8 <global_stdio_init.part.0>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	4b0b      	ldr	r3, [pc, #44]	@ (8009e08 <global_stdio_init.part.0+0x30>)
 8009ddc:	4c0b      	ldr	r4, [pc, #44]	@ (8009e0c <global_stdio_init.part.0+0x34>)
 8009dde:	4a0c      	ldr	r2, [pc, #48]	@ (8009e10 <global_stdio_init.part.0+0x38>)
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	4620      	mov	r0, r4
 8009de4:	2200      	movs	r2, #0
 8009de6:	2104      	movs	r1, #4
 8009de8:	f7ff ff94 	bl	8009d14 <std>
 8009dec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009df0:	2201      	movs	r2, #1
 8009df2:	2109      	movs	r1, #9
 8009df4:	f7ff ff8e 	bl	8009d14 <std>
 8009df8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e02:	2112      	movs	r1, #18
 8009e04:	f7ff bf86 	b.w	8009d14 <std>
 8009e08:	20002aa4 	.word	0x20002aa4
 8009e0c:	2000296c 	.word	0x2000296c
 8009e10:	08009d81 	.word	0x08009d81

08009e14 <__sfp_lock_acquire>:
 8009e14:	4801      	ldr	r0, [pc, #4]	@ (8009e1c <__sfp_lock_acquire+0x8>)
 8009e16:	f000 b920 	b.w	800a05a <__retarget_lock_acquire_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20002aad 	.word	0x20002aad

08009e20 <__sfp_lock_release>:
 8009e20:	4801      	ldr	r0, [pc, #4]	@ (8009e28 <__sfp_lock_release+0x8>)
 8009e22:	f000 b91b 	b.w	800a05c <__retarget_lock_release_recursive>
 8009e26:	bf00      	nop
 8009e28:	20002aad 	.word	0x20002aad

08009e2c <__sinit>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
 8009e30:	f7ff fff0 	bl	8009e14 <__sfp_lock_acquire>
 8009e34:	6a23      	ldr	r3, [r4, #32]
 8009e36:	b11b      	cbz	r3, 8009e40 <__sinit+0x14>
 8009e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e3c:	f7ff bff0 	b.w	8009e20 <__sfp_lock_release>
 8009e40:	4b04      	ldr	r3, [pc, #16]	@ (8009e54 <__sinit+0x28>)
 8009e42:	6223      	str	r3, [r4, #32]
 8009e44:	4b04      	ldr	r3, [pc, #16]	@ (8009e58 <__sinit+0x2c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1f5      	bne.n	8009e38 <__sinit+0xc>
 8009e4c:	f7ff ffc4 	bl	8009dd8 <global_stdio_init.part.0>
 8009e50:	e7f2      	b.n	8009e38 <__sinit+0xc>
 8009e52:	bf00      	nop
 8009e54:	08009d99 	.word	0x08009d99
 8009e58:	20002aa4 	.word	0x20002aa4

08009e5c <_fwalk_sglue>:
 8009e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e60:	4607      	mov	r7, r0
 8009e62:	4688      	mov	r8, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	2600      	movs	r6, #0
 8009e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e70:	d505      	bpl.n	8009e7e <_fwalk_sglue+0x22>
 8009e72:	6824      	ldr	r4, [r4, #0]
 8009e74:	2c00      	cmp	r4, #0
 8009e76:	d1f7      	bne.n	8009e68 <_fwalk_sglue+0xc>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d907      	bls.n	8009e94 <_fwalk_sglue+0x38>
 8009e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	d003      	beq.n	8009e94 <_fwalk_sglue+0x38>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4638      	mov	r0, r7
 8009e90:	47c0      	blx	r8
 8009e92:	4306      	orrs	r6, r0
 8009e94:	3568      	adds	r5, #104	@ 0x68
 8009e96:	e7e9      	b.n	8009e6c <_fwalk_sglue+0x10>

08009e98 <siprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b500      	push	{lr}
 8009e9c:	b09c      	sub	sp, #112	@ 0x70
 8009e9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ea0:	9002      	str	r0, [sp, #8]
 8009ea2:	9006      	str	r0, [sp, #24]
 8009ea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ea8:	4809      	ldr	r0, [pc, #36]	@ (8009ed0 <siprintf+0x38>)
 8009eaa:	9107      	str	r1, [sp, #28]
 8009eac:	9104      	str	r1, [sp, #16]
 8009eae:	4909      	ldr	r1, [pc, #36]	@ (8009ed4 <siprintf+0x3c>)
 8009eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb4:	9105      	str	r1, [sp, #20]
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	a902      	add	r1, sp, #8
 8009ebc:	f002 fbc2 	bl	800c644 <_svfiprintf_r>
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	b01c      	add	sp, #112	@ 0x70
 8009ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ecc:	b003      	add	sp, #12
 8009ece:	4770      	bx	lr
 8009ed0:	20000034 	.word	0x20000034
 8009ed4:	ffff0208 	.word	0xffff0208

08009ed8 <__sread>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	460c      	mov	r4, r1
 8009edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee0:	f000 f86c 	bl	8009fbc <_read_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	bfab      	itete	ge
 8009ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009eea:	89a3      	ldrhlt	r3, [r4, #12]
 8009eec:	181b      	addge	r3, r3, r0
 8009eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ef2:	bfac      	ite	ge
 8009ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ef6:	81a3      	strhlt	r3, [r4, #12]
 8009ef8:	bd10      	pop	{r4, pc}

08009efa <__swrite>:
 8009efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efe:	461f      	mov	r7, r3
 8009f00:	898b      	ldrh	r3, [r1, #12]
 8009f02:	05db      	lsls	r3, r3, #23
 8009f04:	4605      	mov	r5, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	4616      	mov	r6, r2
 8009f0a:	d505      	bpl.n	8009f18 <__swrite+0x1e>
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	2302      	movs	r3, #2
 8009f12:	2200      	movs	r2, #0
 8009f14:	f000 f840 	bl	8009f98 <_lseek_r>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	4632      	mov	r2, r6
 8009f26:	463b      	mov	r3, r7
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	f000 b857 	b.w	8009fe0 <_write_r>

08009f32 <__sseek>:
 8009f32:	b510      	push	{r4, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3a:	f000 f82d 	bl	8009f98 <_lseek_r>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	bf15      	itete	ne
 8009f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f4e:	81a3      	strheq	r3, [r4, #12]
 8009f50:	bf18      	it	ne
 8009f52:	81a3      	strhne	r3, [r4, #12]
 8009f54:	bd10      	pop	{r4, pc}

08009f56 <__sclose>:
 8009f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5a:	f000 b80d 	b.w	8009f78 <_close_r>

08009f5e <memset>:
 8009f5e:	4402      	add	r2, r0
 8009f60:	4603      	mov	r3, r0
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d100      	bne.n	8009f68 <memset+0xa>
 8009f66:	4770      	bx	lr
 8009f68:	f803 1b01 	strb.w	r1, [r3], #1
 8009f6c:	e7f9      	b.n	8009f62 <memset+0x4>
	...

08009f70 <_localeconv_r>:
 8009f70:	4800      	ldr	r0, [pc, #0]	@ (8009f74 <_localeconv_r+0x4>)
 8009f72:	4770      	bx	lr
 8009f74:	20000174 	.word	0x20000174

08009f78 <_close_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	@ (8009f94 <_close_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f8 fae6 	bl	8002554 <_close>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_close_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_close_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20002aa8 	.word	0x20002aa8

08009f98 <_lseek_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d07      	ldr	r5, [pc, #28]	@ (8009fb8 <_lseek_r+0x20>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	602a      	str	r2, [r5, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f7f8 fafb 	bl	80025a2 <_lseek>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_lseek_r+0x1e>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_lseek_r+0x1e>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	20002aa8 	.word	0x20002aa8

08009fbc <_read_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	@ (8009fdc <_read_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f8 faa5 	bl	800251a <_read>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_read_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_read_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20002aa8 	.word	0x20002aa8

08009fe0 <_write_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	@ (800a000 <_write_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f7 fcfa 	bl	80019e8 <_write>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_write_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_write_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	20002aa8 	.word	0x20002aa8

0800a004 <__errno>:
 800a004:	4b01      	ldr	r3, [pc, #4]	@ (800a00c <__errno+0x8>)
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	20000034 	.word	0x20000034

0800a010 <__libc_init_array>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	4d0d      	ldr	r5, [pc, #52]	@ (800a048 <__libc_init_array+0x38>)
 800a014:	4c0d      	ldr	r4, [pc, #52]	@ (800a04c <__libc_init_array+0x3c>)
 800a016:	1b64      	subs	r4, r4, r5
 800a018:	10a4      	asrs	r4, r4, #2
 800a01a:	2600      	movs	r6, #0
 800a01c:	42a6      	cmp	r6, r4
 800a01e:	d109      	bne.n	800a034 <__libc_init_array+0x24>
 800a020:	4d0b      	ldr	r5, [pc, #44]	@ (800a050 <__libc_init_array+0x40>)
 800a022:	4c0c      	ldr	r4, [pc, #48]	@ (800a054 <__libc_init_array+0x44>)
 800a024:	f003 fb72 	bl	800d70c <_init>
 800a028:	1b64      	subs	r4, r4, r5
 800a02a:	10a4      	asrs	r4, r4, #2
 800a02c:	2600      	movs	r6, #0
 800a02e:	42a6      	cmp	r6, r4
 800a030:	d105      	bne.n	800a03e <__libc_init_array+0x2e>
 800a032:	bd70      	pop	{r4, r5, r6, pc}
 800a034:	f855 3b04 	ldr.w	r3, [r5], #4
 800a038:	4798      	blx	r3
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7ee      	b.n	800a01c <__libc_init_array+0xc>
 800a03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a042:	4798      	blx	r3
 800a044:	3601      	adds	r6, #1
 800a046:	e7f2      	b.n	800a02e <__libc_init_array+0x1e>
 800a048:	0800dea8 	.word	0x0800dea8
 800a04c:	0800dea8 	.word	0x0800dea8
 800a050:	0800dea8 	.word	0x0800dea8
 800a054:	0800deac 	.word	0x0800deac

0800a058 <__retarget_lock_init_recursive>:
 800a058:	4770      	bx	lr

0800a05a <__retarget_lock_acquire_recursive>:
 800a05a:	4770      	bx	lr

0800a05c <__retarget_lock_release_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <memcpy>:
 800a05e:	440a      	add	r2, r1
 800a060:	4291      	cmp	r1, r2
 800a062:	f100 33ff 	add.w	r3, r0, #4294967295
 800a066:	d100      	bne.n	800a06a <memcpy+0xc>
 800a068:	4770      	bx	lr
 800a06a:	b510      	push	{r4, lr}
 800a06c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a070:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a074:	4291      	cmp	r1, r2
 800a076:	d1f9      	bne.n	800a06c <memcpy+0xe>
 800a078:	bd10      	pop	{r4, pc}
	...

0800a07c <nanf>:
 800a07c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a084 <nanf+0x8>
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	7fc00000 	.word	0x7fc00000

0800a088 <quorem>:
 800a088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	6903      	ldr	r3, [r0, #16]
 800a08e:	690c      	ldr	r4, [r1, #16]
 800a090:	42a3      	cmp	r3, r4
 800a092:	4607      	mov	r7, r0
 800a094:	db7e      	blt.n	800a194 <quorem+0x10c>
 800a096:	3c01      	subs	r4, #1
 800a098:	f101 0814 	add.w	r8, r1, #20
 800a09c:	00a3      	lsls	r3, r4, #2
 800a09e:	f100 0514 	add.w	r5, r0, #20
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0a8:	9301      	str	r3, [sp, #4]
 800a0aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0be:	d32e      	bcc.n	800a11e <quorem+0x96>
 800a0c0:	f04f 0a00 	mov.w	sl, #0
 800a0c4:	46c4      	mov	ip, r8
 800a0c6:	46ae      	mov	lr, r5
 800a0c8:	46d3      	mov	fp, sl
 800a0ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0ce:	b298      	uxth	r0, r3
 800a0d0:	fb06 a000 	mla	r0, r6, r0, sl
 800a0d4:	0c02      	lsrs	r2, r0, #16
 800a0d6:	0c1b      	lsrs	r3, r3, #16
 800a0d8:	fb06 2303 	mla	r3, r6, r3, r2
 800a0dc:	f8de 2000 	ldr.w	r2, [lr]
 800a0e0:	b280      	uxth	r0, r0
 800a0e2:	b292      	uxth	r2, r2
 800a0e4:	1a12      	subs	r2, r2, r0
 800a0e6:	445a      	add	r2, fp
 800a0e8:	f8de 0000 	ldr.w	r0, [lr]
 800a0ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a0f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a0fa:	b292      	uxth	r2, r2
 800a0fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a100:	45e1      	cmp	r9, ip
 800a102:	f84e 2b04 	str.w	r2, [lr], #4
 800a106:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a10a:	d2de      	bcs.n	800a0ca <quorem+0x42>
 800a10c:	9b00      	ldr	r3, [sp, #0]
 800a10e:	58eb      	ldr	r3, [r5, r3]
 800a110:	b92b      	cbnz	r3, 800a11e <quorem+0x96>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	3b04      	subs	r3, #4
 800a116:	429d      	cmp	r5, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	d32f      	bcc.n	800a17c <quorem+0xf4>
 800a11c:	613c      	str	r4, [r7, #16]
 800a11e:	4638      	mov	r0, r7
 800a120:	f001 f9c2 	bl	800b4a8 <__mcmp>
 800a124:	2800      	cmp	r0, #0
 800a126:	db25      	blt.n	800a174 <quorem+0xec>
 800a128:	4629      	mov	r1, r5
 800a12a:	2000      	movs	r0, #0
 800a12c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a130:	f8d1 c000 	ldr.w	ip, [r1]
 800a134:	fa1f fe82 	uxth.w	lr, r2
 800a138:	fa1f f38c 	uxth.w	r3, ip
 800a13c:	eba3 030e 	sub.w	r3, r3, lr
 800a140:	4403      	add	r3, r0
 800a142:	0c12      	lsrs	r2, r2, #16
 800a144:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a148:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a152:	45c1      	cmp	r9, r8
 800a154:	f841 3b04 	str.w	r3, [r1], #4
 800a158:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a15c:	d2e6      	bcs.n	800a12c <quorem+0xa4>
 800a15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	b922      	cbnz	r2, 800a172 <quorem+0xea>
 800a168:	3b04      	subs	r3, #4
 800a16a:	429d      	cmp	r5, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	d30b      	bcc.n	800a188 <quorem+0x100>
 800a170:	613c      	str	r4, [r7, #16]
 800a172:	3601      	adds	r6, #1
 800a174:	4630      	mov	r0, r6
 800a176:	b003      	add	sp, #12
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	6812      	ldr	r2, [r2, #0]
 800a17e:	3b04      	subs	r3, #4
 800a180:	2a00      	cmp	r2, #0
 800a182:	d1cb      	bne.n	800a11c <quorem+0x94>
 800a184:	3c01      	subs	r4, #1
 800a186:	e7c6      	b.n	800a116 <quorem+0x8e>
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	3b04      	subs	r3, #4
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d1ef      	bne.n	800a170 <quorem+0xe8>
 800a190:	3c01      	subs	r4, #1
 800a192:	e7ea      	b.n	800a16a <quorem+0xe2>
 800a194:	2000      	movs	r0, #0
 800a196:	e7ee      	b.n	800a176 <quorem+0xee>

0800a198 <_dtoa_r>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	69c7      	ldr	r7, [r0, #28]
 800a19e:	b099      	sub	sp, #100	@ 0x64
 800a1a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1a4:	ec55 4b10 	vmov	r4, r5, d0
 800a1a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ac:	4683      	mov	fp, r0
 800a1ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1b2:	b97f      	cbnz	r7, 800a1d4 <_dtoa_r+0x3c>
 800a1b4:	2010      	movs	r0, #16
 800a1b6:	f000 fdfd 	bl	800adb4 <malloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1c0:	b920      	cbnz	r0, 800a1cc <_dtoa_r+0x34>
 800a1c2:	4ba7      	ldr	r3, [pc, #668]	@ (800a460 <_dtoa_r+0x2c8>)
 800a1c4:	21ef      	movs	r1, #239	@ 0xef
 800a1c6:	48a7      	ldr	r0, [pc, #668]	@ (800a464 <_dtoa_r+0x2cc>)
 800a1c8:	f002 fc2a 	bl	800ca20 <__assert_func>
 800a1cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a1d0:	6007      	str	r7, [r0, #0]
 800a1d2:	60c7      	str	r7, [r0, #12]
 800a1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1d8:	6819      	ldr	r1, [r3, #0]
 800a1da:	b159      	cbz	r1, 800a1f4 <_dtoa_r+0x5c>
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	604a      	str	r2, [r1, #4]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	4093      	lsls	r3, r2
 800a1e4:	608b      	str	r3, [r1, #8]
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	f000 feda 	bl	800afa0 <_Bfree>
 800a1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	1e2b      	subs	r3, r5, #0
 800a1f6:	bfb9      	ittee	lt
 800a1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a1fc:	9303      	strlt	r3, [sp, #12]
 800a1fe:	2300      	movge	r3, #0
 800a200:	6033      	strge	r3, [r6, #0]
 800a202:	9f03      	ldr	r7, [sp, #12]
 800a204:	4b98      	ldr	r3, [pc, #608]	@ (800a468 <_dtoa_r+0x2d0>)
 800a206:	bfbc      	itt	lt
 800a208:	2201      	movlt	r2, #1
 800a20a:	6032      	strlt	r2, [r6, #0]
 800a20c:	43bb      	bics	r3, r7
 800a20e:	d112      	bne.n	800a236 <_dtoa_r+0x9e>
 800a210:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a212:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a21c:	4323      	orrs	r3, r4
 800a21e:	f000 854d 	beq.w	800acbc <_dtoa_r+0xb24>
 800a222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a224:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a47c <_dtoa_r+0x2e4>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 854f 	beq.w	800accc <_dtoa_r+0xb34>
 800a22e:	f10a 0303 	add.w	r3, sl, #3
 800a232:	f000 bd49 	b.w	800acc8 <_dtoa_r+0xb30>
 800a236:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a23a:	2200      	movs	r2, #0
 800a23c:	ec51 0b17 	vmov	r0, r1, d7
 800a240:	2300      	movs	r3, #0
 800a242:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a246:	f7f6 fc17 	bl	8000a78 <__aeabi_dcmpeq>
 800a24a:	4680      	mov	r8, r0
 800a24c:	b158      	cbz	r0, 800a266 <_dtoa_r+0xce>
 800a24e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a250:	2301      	movs	r3, #1
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a256:	b113      	cbz	r3, 800a25e <_dtoa_r+0xc6>
 800a258:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a25a:	4b84      	ldr	r3, [pc, #528]	@ (800a46c <_dtoa_r+0x2d4>)
 800a25c:	6013      	str	r3, [r2, #0]
 800a25e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a480 <_dtoa_r+0x2e8>
 800a262:	f000 bd33 	b.w	800accc <_dtoa_r+0xb34>
 800a266:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a26a:	aa16      	add	r2, sp, #88	@ 0x58
 800a26c:	a917      	add	r1, sp, #92	@ 0x5c
 800a26e:	4658      	mov	r0, fp
 800a270:	f001 fa3a 	bl	800b6e8 <__d2b>
 800a274:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a278:	4681      	mov	r9, r0
 800a27a:	2e00      	cmp	r6, #0
 800a27c:	d077      	beq.n	800a36e <_dtoa_r+0x1d6>
 800a27e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a280:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a290:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a294:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a298:	4619      	mov	r1, r3
 800a29a:	2200      	movs	r2, #0
 800a29c:	4b74      	ldr	r3, [pc, #464]	@ (800a470 <_dtoa_r+0x2d8>)
 800a29e:	f7f5 ffcb 	bl	8000238 <__aeabi_dsub>
 800a2a2:	a369      	add	r3, pc, #420	@ (adr r3, 800a448 <_dtoa_r+0x2b0>)
 800a2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a8:	f7f6 f97e 	bl	80005a8 <__aeabi_dmul>
 800a2ac:	a368      	add	r3, pc, #416	@ (adr r3, 800a450 <_dtoa_r+0x2b8>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f7f5 ffc3 	bl	800023c <__adddf3>
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	f7f6 f90a 	bl	80004d4 <__aeabi_i2d>
 800a2c0:	a365      	add	r3, pc, #404	@ (adr r3, 800a458 <_dtoa_r+0x2c0>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f6 f96f 	bl	80005a8 <__aeabi_dmul>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f5 ffb3 	bl	800023c <__adddf3>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	f7f6 fc15 	bl	8000b08 <__aeabi_d2iz>
 800a2de:	2200      	movs	r2, #0
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	f7f6 fbd0 	bl	8000a8c <__aeabi_dcmplt>
 800a2ec:	b140      	cbz	r0, 800a300 <_dtoa_r+0x168>
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	f7f6 f8f0 	bl	80004d4 <__aeabi_i2d>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 fbbe 	bl	8000a78 <__aeabi_dcmpeq>
 800a2fc:	b900      	cbnz	r0, 800a300 <_dtoa_r+0x168>
 800a2fe:	3f01      	subs	r7, #1
 800a300:	2f16      	cmp	r7, #22
 800a302:	d851      	bhi.n	800a3a8 <_dtoa_r+0x210>
 800a304:	4b5b      	ldr	r3, [pc, #364]	@ (800a474 <_dtoa_r+0x2dc>)
 800a306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a312:	f7f6 fbbb 	bl	8000a8c <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	d048      	beq.n	800a3ac <_dtoa_r+0x214>
 800a31a:	3f01      	subs	r7, #1
 800a31c:	2300      	movs	r3, #0
 800a31e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a320:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a322:	1b9b      	subs	r3, r3, r6
 800a324:	1e5a      	subs	r2, r3, #1
 800a326:	bf44      	itt	mi
 800a328:	f1c3 0801 	rsbmi	r8, r3, #1
 800a32c:	2300      	movmi	r3, #0
 800a32e:	9208      	str	r2, [sp, #32]
 800a330:	bf54      	ite	pl
 800a332:	f04f 0800 	movpl.w	r8, #0
 800a336:	9308      	strmi	r3, [sp, #32]
 800a338:	2f00      	cmp	r7, #0
 800a33a:	db39      	blt.n	800a3b0 <_dtoa_r+0x218>
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a340:	443b      	add	r3, r7
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	2300      	movs	r3, #0
 800a346:	930a      	str	r3, [sp, #40]	@ 0x28
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d864      	bhi.n	800a418 <_dtoa_r+0x280>
 800a34e:	2b05      	cmp	r3, #5
 800a350:	bfc4      	itt	gt
 800a352:	3b04      	subgt	r3, #4
 800a354:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	f1a3 0302 	sub.w	r3, r3, #2
 800a35c:	bfcc      	ite	gt
 800a35e:	2400      	movgt	r4, #0
 800a360:	2401      	movle	r4, #1
 800a362:	2b03      	cmp	r3, #3
 800a364:	d863      	bhi.n	800a42e <_dtoa_r+0x296>
 800a366:	e8df f003 	tbb	[pc, r3]
 800a36a:	372a      	.short	0x372a
 800a36c:	5535      	.short	0x5535
 800a36e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a372:	441e      	add	r6, r3
 800a374:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a378:	2b20      	cmp	r3, #32
 800a37a:	bfc1      	itttt	gt
 800a37c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a380:	409f      	lslgt	r7, r3
 800a382:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a386:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a38a:	bfd6      	itet	le
 800a38c:	f1c3 0320 	rsble	r3, r3, #32
 800a390:	ea47 0003 	orrgt.w	r0, r7, r3
 800a394:	fa04 f003 	lslle.w	r0, r4, r3
 800a398:	f7f6 f88c 	bl	80004b4 <__aeabi_ui2d>
 800a39c:	2201      	movs	r2, #1
 800a39e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3a2:	3e01      	subs	r6, #1
 800a3a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3a6:	e777      	b.n	800a298 <_dtoa_r+0x100>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e7b8      	b.n	800a31e <_dtoa_r+0x186>
 800a3ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3ae:	e7b7      	b.n	800a320 <_dtoa_r+0x188>
 800a3b0:	427b      	negs	r3, r7
 800a3b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	eba8 0807 	sub.w	r8, r8, r7
 800a3ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3bc:	e7c4      	b.n	800a348 <_dtoa_r+0x1b0>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dc35      	bgt.n	800a434 <_dtoa_r+0x29c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	9307      	str	r3, [sp, #28]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3d2:	e00b      	b.n	800a3ec <_dtoa_r+0x254>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7f3      	b.n	800a3c0 <_dtoa_r+0x228>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3de:	18fb      	adds	r3, r7, r3
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	9307      	str	r3, [sp, #28]
 800a3e8:	bfb8      	it	lt
 800a3ea:	2301      	movlt	r3, #1
 800a3ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	f102 0514 	add.w	r5, r2, #20
 800a3f8:	429d      	cmp	r5, r3
 800a3fa:	d91f      	bls.n	800a43c <_dtoa_r+0x2a4>
 800a3fc:	6041      	str	r1, [r0, #4]
 800a3fe:	4658      	mov	r0, fp
 800a400:	f000 fd8e 	bl	800af20 <_Balloc>
 800a404:	4682      	mov	sl, r0
 800a406:	2800      	cmp	r0, #0
 800a408:	d13c      	bne.n	800a484 <_dtoa_r+0x2ec>
 800a40a:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <_dtoa_r+0x2e0>)
 800a40c:	4602      	mov	r2, r0
 800a40e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a412:	e6d8      	b.n	800a1c6 <_dtoa_r+0x2e>
 800a414:	2301      	movs	r3, #1
 800a416:	e7e0      	b.n	800a3da <_dtoa_r+0x242>
 800a418:	2401      	movs	r4, #1
 800a41a:	2300      	movs	r3, #0
 800a41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	2200      	movs	r2, #0
 800a42a:	2312      	movs	r3, #18
 800a42c:	e7d0      	b.n	800a3d0 <_dtoa_r+0x238>
 800a42e:	2301      	movs	r3, #1
 800a430:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a432:	e7f5      	b.n	800a420 <_dtoa_r+0x288>
 800a434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	9307      	str	r3, [sp, #28]
 800a43a:	e7d7      	b.n	800a3ec <_dtoa_r+0x254>
 800a43c:	3101      	adds	r1, #1
 800a43e:	0052      	lsls	r2, r2, #1
 800a440:	e7d8      	b.n	800a3f4 <_dtoa_r+0x25c>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	636f4361 	.word	0x636f4361
 800a44c:	3fd287a7 	.word	0x3fd287a7
 800a450:	8b60c8b3 	.word	0x8b60c8b3
 800a454:	3fc68a28 	.word	0x3fc68a28
 800a458:	509f79fb 	.word	0x509f79fb
 800a45c:	3fd34413 	.word	0x3fd34413
 800a460:	0800dab6 	.word	0x0800dab6
 800a464:	0800dacd 	.word	0x0800dacd
 800a468:	7ff00000 	.word	0x7ff00000
 800a46c:	0800da81 	.word	0x0800da81
 800a470:	3ff80000 	.word	0x3ff80000
 800a474:	0800dbc8 	.word	0x0800dbc8
 800a478:	0800db25 	.word	0x0800db25
 800a47c:	0800dab2 	.word	0x0800dab2
 800a480:	0800da80 	.word	0x0800da80
 800a484:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a488:	6018      	str	r0, [r3, #0]
 800a48a:	9b07      	ldr	r3, [sp, #28]
 800a48c:	2b0e      	cmp	r3, #14
 800a48e:	f200 80a4 	bhi.w	800a5da <_dtoa_r+0x442>
 800a492:	2c00      	cmp	r4, #0
 800a494:	f000 80a1 	beq.w	800a5da <_dtoa_r+0x442>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	dd33      	ble.n	800a504 <_dtoa_r+0x36c>
 800a49c:	4bad      	ldr	r3, [pc, #692]	@ (800a754 <_dtoa_r+0x5bc>)
 800a49e:	f007 020f 	and.w	r2, r7, #15
 800a4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a6:	ed93 7b00 	vldr	d7, [r3]
 800a4aa:	05f8      	lsls	r0, r7, #23
 800a4ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4b4:	d516      	bpl.n	800a4e4 <_dtoa_r+0x34c>
 800a4b6:	4ba8      	ldr	r3, [pc, #672]	@ (800a758 <_dtoa_r+0x5c0>)
 800a4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4c0:	f7f6 f99c 	bl	80007fc <__aeabi_ddiv>
 800a4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c8:	f004 040f 	and.w	r4, r4, #15
 800a4cc:	2603      	movs	r6, #3
 800a4ce:	4da2      	ldr	r5, [pc, #648]	@ (800a758 <_dtoa_r+0x5c0>)
 800a4d0:	b954      	cbnz	r4, 800a4e8 <_dtoa_r+0x350>
 800a4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4da:	f7f6 f98f 	bl	80007fc <__aeabi_ddiv>
 800a4de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e2:	e028      	b.n	800a536 <_dtoa_r+0x39e>
 800a4e4:	2602      	movs	r6, #2
 800a4e6:	e7f2      	b.n	800a4ce <_dtoa_r+0x336>
 800a4e8:	07e1      	lsls	r1, r4, #31
 800a4ea:	d508      	bpl.n	800a4fe <_dtoa_r+0x366>
 800a4ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4f4:	f7f6 f858 	bl	80005a8 <__aeabi_dmul>
 800a4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	1064      	asrs	r4, r4, #1
 800a500:	3508      	adds	r5, #8
 800a502:	e7e5      	b.n	800a4d0 <_dtoa_r+0x338>
 800a504:	f000 80d2 	beq.w	800a6ac <_dtoa_r+0x514>
 800a508:	427c      	negs	r4, r7
 800a50a:	4b92      	ldr	r3, [pc, #584]	@ (800a754 <_dtoa_r+0x5bc>)
 800a50c:	4d92      	ldr	r5, [pc, #584]	@ (800a758 <_dtoa_r+0x5c0>)
 800a50e:	f004 020f 	and.w	r2, r4, #15
 800a512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a51e:	f7f6 f843 	bl	80005a8 <__aeabi_dmul>
 800a522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a526:	1124      	asrs	r4, r4, #4
 800a528:	2300      	movs	r3, #0
 800a52a:	2602      	movs	r6, #2
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	f040 80b2 	bne.w	800a696 <_dtoa_r+0x4fe>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1d3      	bne.n	800a4de <_dtoa_r+0x346>
 800a536:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a538:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80b7 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a542:	4b86      	ldr	r3, [pc, #536]	@ (800a75c <_dtoa_r+0x5c4>)
 800a544:	2200      	movs	r2, #0
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f6 fa9f 	bl	8000a8c <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	f000 80ae 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 80aa 	beq.w	800a6b0 <_dtoa_r+0x518>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	dd37      	ble.n	800a5d2 <_dtoa_r+0x43a>
 800a562:	1e7b      	subs	r3, r7, #1
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	4620      	mov	r0, r4
 800a568:	4b7d      	ldr	r3, [pc, #500]	@ (800a760 <_dtoa_r+0x5c8>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 f81b 	bl	80005a8 <__aeabi_dmul>
 800a572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a576:	9c00      	ldr	r4, [sp, #0]
 800a578:	3601      	adds	r6, #1
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7f5 ffaa 	bl	80004d4 <__aeabi_i2d>
 800a580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a584:	f7f6 f810 	bl	80005a8 <__aeabi_dmul>
 800a588:	4b76      	ldr	r3, [pc, #472]	@ (800a764 <_dtoa_r+0x5cc>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f5 fe56 	bl	800023c <__adddf3>
 800a590:	4605      	mov	r5, r0
 800a592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a596:	2c00      	cmp	r4, #0
 800a598:	f040 808d 	bne.w	800a6b6 <_dtoa_r+0x51e>
 800a59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5a0:	4b71      	ldr	r3, [pc, #452]	@ (800a768 <_dtoa_r+0x5d0>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f7f5 fe48 	bl	8000238 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5b0:	462a      	mov	r2, r5
 800a5b2:	4633      	mov	r3, r6
 800a5b4:	f7f6 fa88 	bl	8000ac8 <__aeabi_dcmpgt>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f040 828b 	bne.w	800aad4 <_dtoa_r+0x93c>
 800a5be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5c8:	f7f6 fa60 	bl	8000a8c <__aeabi_dcmplt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 8128 	bne.w	800a822 <_dtoa_r+0x68a>
 800a5d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a5d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	f2c0 815a 	blt.w	800a896 <_dtoa_r+0x6fe>
 800a5e2:	2f0e      	cmp	r7, #14
 800a5e4:	f300 8157 	bgt.w	800a896 <_dtoa_r+0x6fe>
 800a5e8:	4b5a      	ldr	r3, [pc, #360]	@ (800a754 <_dtoa_r+0x5bc>)
 800a5ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5ee:	ed93 7b00 	vldr	d7, [r3]
 800a5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	ed8d 7b00 	vstr	d7, [sp]
 800a5fa:	da03      	bge.n	800a604 <_dtoa_r+0x46c>
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f340 8101 	ble.w	800a806 <_dtoa_r+0x66e>
 800a604:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a608:	4656      	mov	r6, sl
 800a60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 f8f3 	bl	80007fc <__aeabi_ddiv>
 800a616:	f7f6 fa77 	bl	8000b08 <__aeabi_d2iz>
 800a61a:	4680      	mov	r8, r0
 800a61c:	f7f5 ff5a 	bl	80004d4 <__aeabi_i2d>
 800a620:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a624:	f7f5 ffc0 	bl	80005a8 <__aeabi_dmul>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4620      	mov	r0, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a634:	f7f5 fe00 	bl	8000238 <__aeabi_dsub>
 800a638:	f806 4b01 	strb.w	r4, [r6], #1
 800a63c:	9d07      	ldr	r5, [sp, #28]
 800a63e:	eba6 040a 	sub.w	r4, r6, sl
 800a642:	42a5      	cmp	r5, r4
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	f040 8117 	bne.w	800a87a <_dtoa_r+0x6e2>
 800a64c:	f7f5 fdf6 	bl	800023c <__adddf3>
 800a650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a654:	4604      	mov	r4, r0
 800a656:	460d      	mov	r5, r1
 800a658:	f7f6 fa36 	bl	8000ac8 <__aeabi_dcmpgt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f040 80f9 	bne.w	800a854 <_dtoa_r+0x6bc>
 800a662:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a666:	4620      	mov	r0, r4
 800a668:	4629      	mov	r1, r5
 800a66a:	f7f6 fa05 	bl	8000a78 <__aeabi_dcmpeq>
 800a66e:	b118      	cbz	r0, 800a678 <_dtoa_r+0x4e0>
 800a670:	f018 0f01 	tst.w	r8, #1
 800a674:	f040 80ee 	bne.w	800a854 <_dtoa_r+0x6bc>
 800a678:	4649      	mov	r1, r9
 800a67a:	4658      	mov	r0, fp
 800a67c:	f000 fc90 	bl	800afa0 <_Bfree>
 800a680:	2300      	movs	r3, #0
 800a682:	7033      	strb	r3, [r6, #0]
 800a684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a686:	3701      	adds	r7, #1
 800a688:	601f      	str	r7, [r3, #0]
 800a68a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 831d 	beq.w	800accc <_dtoa_r+0xb34>
 800a692:	601e      	str	r6, [r3, #0]
 800a694:	e31a      	b.n	800accc <_dtoa_r+0xb34>
 800a696:	07e2      	lsls	r2, r4, #31
 800a698:	d505      	bpl.n	800a6a6 <_dtoa_r+0x50e>
 800a69a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a69e:	f7f5 ff83 	bl	80005a8 <__aeabi_dmul>
 800a6a2:	3601      	adds	r6, #1
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	1064      	asrs	r4, r4, #1
 800a6a8:	3508      	adds	r5, #8
 800a6aa:	e73f      	b.n	800a52c <_dtoa_r+0x394>
 800a6ac:	2602      	movs	r6, #2
 800a6ae:	e742      	b.n	800a536 <_dtoa_r+0x39e>
 800a6b0:	9c07      	ldr	r4, [sp, #28]
 800a6b2:	9704      	str	r7, [sp, #16]
 800a6b4:	e761      	b.n	800a57a <_dtoa_r+0x3e2>
 800a6b6:	4b27      	ldr	r3, [pc, #156]	@ (800a754 <_dtoa_r+0x5bc>)
 800a6b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6c2:	4454      	add	r4, sl
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d053      	beq.n	800a770 <_dtoa_r+0x5d8>
 800a6c8:	4928      	ldr	r1, [pc, #160]	@ (800a76c <_dtoa_r+0x5d4>)
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	f7f6 f896 	bl	80007fc <__aeabi_ddiv>
 800a6d0:	4633      	mov	r3, r6
 800a6d2:	462a      	mov	r2, r5
 800a6d4:	f7f5 fdb0 	bl	8000238 <__aeabi_dsub>
 800a6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6dc:	4656      	mov	r6, sl
 800a6de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e2:	f7f6 fa11 	bl	8000b08 <__aeabi_d2iz>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	f7f5 fef4 	bl	80004d4 <__aeabi_i2d>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f4:	f7f5 fda0 	bl	8000238 <__aeabi_dsub>
 800a6f8:	3530      	adds	r5, #48	@ 0x30
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a702:	f806 5b01 	strb.w	r5, [r6], #1
 800a706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a70a:	f7f6 f9bf 	bl	8000a8c <__aeabi_dcmplt>
 800a70e:	2800      	cmp	r0, #0
 800a710:	d171      	bne.n	800a7f6 <_dtoa_r+0x65e>
 800a712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a716:	4911      	ldr	r1, [pc, #68]	@ (800a75c <_dtoa_r+0x5c4>)
 800a718:	2000      	movs	r0, #0
 800a71a:	f7f5 fd8d 	bl	8000238 <__aeabi_dsub>
 800a71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a722:	f7f6 f9b3 	bl	8000a8c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	f040 8095 	bne.w	800a856 <_dtoa_r+0x6be>
 800a72c:	42a6      	cmp	r6, r4
 800a72e:	f43f af50 	beq.w	800a5d2 <_dtoa_r+0x43a>
 800a732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a736:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <_dtoa_r+0x5c8>)
 800a738:	2200      	movs	r2, #0
 800a73a:	f7f5 ff35 	bl	80005a8 <__aeabi_dmul>
 800a73e:	4b08      	ldr	r3, [pc, #32]	@ (800a760 <_dtoa_r+0x5c8>)
 800a740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a744:	2200      	movs	r2, #0
 800a746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a74a:	f7f5 ff2d 	bl	80005a8 <__aeabi_dmul>
 800a74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a752:	e7c4      	b.n	800a6de <_dtoa_r+0x546>
 800a754:	0800dbc8 	.word	0x0800dbc8
 800a758:	0800dba0 	.word	0x0800dba0
 800a75c:	3ff00000 	.word	0x3ff00000
 800a760:	40240000 	.word	0x40240000
 800a764:	401c0000 	.word	0x401c0000
 800a768:	40140000 	.word	0x40140000
 800a76c:	3fe00000 	.word	0x3fe00000
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	f7f5 ff18 	bl	80005a8 <__aeabi_dmul>
 800a778:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a77c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a77e:	4656      	mov	r6, sl
 800a780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a784:	f7f6 f9c0 	bl	8000b08 <__aeabi_d2iz>
 800a788:	4605      	mov	r5, r0
 800a78a:	f7f5 fea3 	bl	80004d4 <__aeabi_i2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a796:	f7f5 fd4f 	bl	8000238 <__aeabi_dsub>
 800a79a:	3530      	adds	r5, #48	@ 0x30
 800a79c:	f806 5b01 	strb.w	r5, [r6], #1
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7aa:	f04f 0200 	mov.w	r2, #0
 800a7ae:	d124      	bne.n	800a7fa <_dtoa_r+0x662>
 800a7b0:	4bac      	ldr	r3, [pc, #688]	@ (800aa64 <_dtoa_r+0x8cc>)
 800a7b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7b6:	f7f5 fd41 	bl	800023c <__adddf3>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c2:	f7f6 f981 	bl	8000ac8 <__aeabi_dcmpgt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d145      	bne.n	800a856 <_dtoa_r+0x6be>
 800a7ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ce:	49a5      	ldr	r1, [pc, #660]	@ (800aa64 <_dtoa_r+0x8cc>)
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	f7f5 fd31 	bl	8000238 <__aeabi_dsub>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7de:	f7f6 f955 	bl	8000a8c <__aeabi_dcmplt>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	f43f aef5 	beq.w	800a5d2 <_dtoa_r+0x43a>
 800a7e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a7ea:	1e73      	subs	r3, r6, #1
 800a7ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800a7ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a7f2:	2b30      	cmp	r3, #48	@ 0x30
 800a7f4:	d0f8      	beq.n	800a7e8 <_dtoa_r+0x650>
 800a7f6:	9f04      	ldr	r7, [sp, #16]
 800a7f8:	e73e      	b.n	800a678 <_dtoa_r+0x4e0>
 800a7fa:	4b9b      	ldr	r3, [pc, #620]	@ (800aa68 <_dtoa_r+0x8d0>)
 800a7fc:	f7f5 fed4 	bl	80005a8 <__aeabi_dmul>
 800a800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a804:	e7bc      	b.n	800a780 <_dtoa_r+0x5e8>
 800a806:	d10c      	bne.n	800a822 <_dtoa_r+0x68a>
 800a808:	4b98      	ldr	r3, [pc, #608]	@ (800aa6c <_dtoa_r+0x8d4>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a810:	f7f5 feca 	bl	80005a8 <__aeabi_dmul>
 800a814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a818:	f7f6 f94c 	bl	8000ab4 <__aeabi_dcmpge>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	f000 8157 	beq.w	800aad0 <_dtoa_r+0x938>
 800a822:	2400      	movs	r4, #0
 800a824:	4625      	mov	r5, r4
 800a826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a828:	43db      	mvns	r3, r3
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	4656      	mov	r6, sl
 800a82e:	2700      	movs	r7, #0
 800a830:	4621      	mov	r1, r4
 800a832:	4658      	mov	r0, fp
 800a834:	f000 fbb4 	bl	800afa0 <_Bfree>
 800a838:	2d00      	cmp	r5, #0
 800a83a:	d0dc      	beq.n	800a7f6 <_dtoa_r+0x65e>
 800a83c:	b12f      	cbz	r7, 800a84a <_dtoa_r+0x6b2>
 800a83e:	42af      	cmp	r7, r5
 800a840:	d003      	beq.n	800a84a <_dtoa_r+0x6b2>
 800a842:	4639      	mov	r1, r7
 800a844:	4658      	mov	r0, fp
 800a846:	f000 fbab 	bl	800afa0 <_Bfree>
 800a84a:	4629      	mov	r1, r5
 800a84c:	4658      	mov	r0, fp
 800a84e:	f000 fba7 	bl	800afa0 <_Bfree>
 800a852:	e7d0      	b.n	800a7f6 <_dtoa_r+0x65e>
 800a854:	9704      	str	r7, [sp, #16]
 800a856:	4633      	mov	r3, r6
 800a858:	461e      	mov	r6, r3
 800a85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85e:	2a39      	cmp	r2, #57	@ 0x39
 800a860:	d107      	bne.n	800a872 <_dtoa_r+0x6da>
 800a862:	459a      	cmp	sl, r3
 800a864:	d1f8      	bne.n	800a858 <_dtoa_r+0x6c0>
 800a866:	9a04      	ldr	r2, [sp, #16]
 800a868:	3201      	adds	r2, #1
 800a86a:	9204      	str	r2, [sp, #16]
 800a86c:	2230      	movs	r2, #48	@ 0x30
 800a86e:	f88a 2000 	strb.w	r2, [sl]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	3201      	adds	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	e7bd      	b.n	800a7f6 <_dtoa_r+0x65e>
 800a87a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa68 <_dtoa_r+0x8d0>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	f7f5 fe93 	bl	80005a8 <__aeabi_dmul>
 800a882:	2200      	movs	r2, #0
 800a884:	2300      	movs	r3, #0
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	f7f6 f8f5 	bl	8000a78 <__aeabi_dcmpeq>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f43f aebb 	beq.w	800a60a <_dtoa_r+0x472>
 800a894:	e6f0      	b.n	800a678 <_dtoa_r+0x4e0>
 800a896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a898:	2a00      	cmp	r2, #0
 800a89a:	f000 80db 	beq.w	800aa54 <_dtoa_r+0x8bc>
 800a89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8a0:	2a01      	cmp	r2, #1
 800a8a2:	f300 80bf 	bgt.w	800aa24 <_dtoa_r+0x88c>
 800a8a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	f000 80b7 	beq.w	800aa1c <_dtoa_r+0x884>
 800a8ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8b4:	4646      	mov	r6, r8
 800a8b6:	9a08      	ldr	r2, [sp, #32]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	441a      	add	r2, r3
 800a8bc:	4658      	mov	r0, fp
 800a8be:	4498      	add	r8, r3
 800a8c0:	9208      	str	r2, [sp, #32]
 800a8c2:	f000 fc6b 	bl	800b19c <__i2b>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	b15e      	cbz	r6, 800a8e2 <_dtoa_r+0x74a>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dd08      	ble.n	800a8e2 <_dtoa_r+0x74a>
 800a8d0:	42b3      	cmp	r3, r6
 800a8d2:	9a08      	ldr	r2, [sp, #32]
 800a8d4:	bfa8      	it	ge
 800a8d6:	4633      	movge	r3, r6
 800a8d8:	eba8 0803 	sub.w	r8, r8, r3
 800a8dc:	1af6      	subs	r6, r6, r3
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	9308      	str	r3, [sp, #32]
 800a8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8e4:	b1f3      	cbz	r3, 800a924 <_dtoa_r+0x78c>
 800a8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80b7 	beq.w	800aa5c <_dtoa_r+0x8c4>
 800a8ee:	b18c      	cbz	r4, 800a914 <_dtoa_r+0x77c>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	4658      	mov	r0, fp
 800a8f6:	f000 fd11 	bl	800b31c <__pow5mult>
 800a8fa:	464a      	mov	r2, r9
 800a8fc:	4601      	mov	r1, r0
 800a8fe:	4605      	mov	r5, r0
 800a900:	4658      	mov	r0, fp
 800a902:	f000 fc61 	bl	800b1c8 <__multiply>
 800a906:	4649      	mov	r1, r9
 800a908:	9004      	str	r0, [sp, #16]
 800a90a:	4658      	mov	r0, fp
 800a90c:	f000 fb48 	bl	800afa0 <_Bfree>
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	4699      	mov	r9, r3
 800a914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a916:	1b1a      	subs	r2, r3, r4
 800a918:	d004      	beq.n	800a924 <_dtoa_r+0x78c>
 800a91a:	4649      	mov	r1, r9
 800a91c:	4658      	mov	r0, fp
 800a91e:	f000 fcfd 	bl	800b31c <__pow5mult>
 800a922:	4681      	mov	r9, r0
 800a924:	2101      	movs	r1, #1
 800a926:	4658      	mov	r0, fp
 800a928:	f000 fc38 	bl	800b19c <__i2b>
 800a92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a92e:	4604      	mov	r4, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 81cf 	beq.w	800acd4 <_dtoa_r+0xb3c>
 800a936:	461a      	mov	r2, r3
 800a938:	4601      	mov	r1, r0
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fcee 	bl	800b31c <__pow5mult>
 800a940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a942:	2b01      	cmp	r3, #1
 800a944:	4604      	mov	r4, r0
 800a946:	f300 8095 	bgt.w	800aa74 <_dtoa_r+0x8dc>
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f040 8087 	bne.w	800aa60 <_dtoa_r+0x8c8>
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f040 8089 	bne.w	800aa70 <_dtoa_r+0x8d8>
 800a95e:	9b03      	ldr	r3, [sp, #12]
 800a960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a964:	0d1b      	lsrs	r3, r3, #20
 800a966:	051b      	lsls	r3, r3, #20
 800a968:	b12b      	cbz	r3, 800a976 <_dtoa_r+0x7de>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	3301      	adds	r3, #1
 800a96e:	9308      	str	r3, [sp, #32]
 800a970:	f108 0801 	add.w	r8, r8, #1
 800a974:	2301      	movs	r3, #1
 800a976:	930a      	str	r3, [sp, #40]	@ 0x28
 800a978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 81b0 	beq.w	800ace0 <_dtoa_r+0xb48>
 800a980:	6923      	ldr	r3, [r4, #16]
 800a982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a986:	6918      	ldr	r0, [r3, #16]
 800a988:	f000 fbbc 	bl	800b104 <__hi0bits>
 800a98c:	f1c0 0020 	rsb	r0, r0, #32
 800a990:	9b08      	ldr	r3, [sp, #32]
 800a992:	4418      	add	r0, r3
 800a994:	f010 001f 	ands.w	r0, r0, #31
 800a998:	d077      	beq.n	800aa8a <_dtoa_r+0x8f2>
 800a99a:	f1c0 0320 	rsb	r3, r0, #32
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	dd6b      	ble.n	800aa7a <_dtoa_r+0x8e2>
 800a9a2:	9b08      	ldr	r3, [sp, #32]
 800a9a4:	f1c0 001c 	rsb	r0, r0, #28
 800a9a8:	4403      	add	r3, r0
 800a9aa:	4480      	add	r8, r0
 800a9ac:	4406      	add	r6, r0
 800a9ae:	9308      	str	r3, [sp, #32]
 800a9b0:	f1b8 0f00 	cmp.w	r8, #0
 800a9b4:	dd05      	ble.n	800a9c2 <_dtoa_r+0x82a>
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4642      	mov	r2, r8
 800a9ba:	4658      	mov	r0, fp
 800a9bc:	f000 fd08 	bl	800b3d0 <__lshift>
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dd05      	ble.n	800a9d4 <_dtoa_r+0x83c>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4658      	mov	r0, fp
 800a9ce:	f000 fcff 	bl	800b3d0 <__lshift>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d059      	beq.n	800aa8e <_dtoa_r+0x8f6>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4648      	mov	r0, r9
 800a9de:	f000 fd63 	bl	800b4a8 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da53      	bge.n	800aa8e <_dtoa_r+0x8f6>
 800a9e6:	1e7b      	subs	r3, r7, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	4649      	mov	r1, r9
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	220a      	movs	r2, #10
 800a9f0:	4658      	mov	r0, fp
 800a9f2:	f000 faf7 	bl	800afe4 <__multadd>
 800a9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9f8:	4681      	mov	r9, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 8172 	beq.w	800ace4 <_dtoa_r+0xb4c>
 800aa00:	2300      	movs	r3, #0
 800aa02:	4629      	mov	r1, r5
 800aa04:	220a      	movs	r2, #10
 800aa06:	4658      	mov	r0, fp
 800aa08:	f000 faec 	bl	800afe4 <__multadd>
 800aa0c:	9b00      	ldr	r3, [sp, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	4605      	mov	r5, r0
 800aa12:	dc67      	bgt.n	800aae4 <_dtoa_r+0x94c>
 800aa14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	dc41      	bgt.n	800aa9e <_dtoa_r+0x906>
 800aa1a:	e063      	b.n	800aae4 <_dtoa_r+0x94c>
 800aa1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa22:	e746      	b.n	800a8b2 <_dtoa_r+0x71a>
 800aa24:	9b07      	ldr	r3, [sp, #28]
 800aa26:	1e5c      	subs	r4, r3, #1
 800aa28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	bfbf      	itttt	lt
 800aa2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa34:	1ae3      	sublt	r3, r4, r3
 800aa36:	bfb4      	ite	lt
 800aa38:	18d2      	addlt	r2, r2, r3
 800aa3a:	1b1c      	subge	r4, r3, r4
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	bfbc      	itt	lt
 800aa40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa42:	2400      	movlt	r4, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfb5      	itete	lt
 800aa48:	eba8 0603 	sublt.w	r6, r8, r3
 800aa4c:	9b07      	ldrge	r3, [sp, #28]
 800aa4e:	2300      	movlt	r3, #0
 800aa50:	4646      	movge	r6, r8
 800aa52:	e730      	b.n	800a8b6 <_dtoa_r+0x71e>
 800aa54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa58:	4646      	mov	r6, r8
 800aa5a:	e735      	b.n	800a8c8 <_dtoa_r+0x730>
 800aa5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa5e:	e75c      	b.n	800a91a <_dtoa_r+0x782>
 800aa60:	2300      	movs	r3, #0
 800aa62:	e788      	b.n	800a976 <_dtoa_r+0x7de>
 800aa64:	3fe00000 	.word	0x3fe00000
 800aa68:	40240000 	.word	0x40240000
 800aa6c:	40140000 	.word	0x40140000
 800aa70:	9b02      	ldr	r3, [sp, #8]
 800aa72:	e780      	b.n	800a976 <_dtoa_r+0x7de>
 800aa74:	2300      	movs	r3, #0
 800aa76:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa78:	e782      	b.n	800a980 <_dtoa_r+0x7e8>
 800aa7a:	d099      	beq.n	800a9b0 <_dtoa_r+0x818>
 800aa7c:	9a08      	ldr	r2, [sp, #32]
 800aa7e:	331c      	adds	r3, #28
 800aa80:	441a      	add	r2, r3
 800aa82:	4498      	add	r8, r3
 800aa84:	441e      	add	r6, r3
 800aa86:	9208      	str	r2, [sp, #32]
 800aa88:	e792      	b.n	800a9b0 <_dtoa_r+0x818>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	e7f6      	b.n	800aa7c <_dtoa_r+0x8e4>
 800aa8e:	9b07      	ldr	r3, [sp, #28]
 800aa90:	9704      	str	r7, [sp, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dc20      	bgt.n	800aad8 <_dtoa_r+0x940>
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	dd1e      	ble.n	800aadc <_dtoa_r+0x944>
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f47f aec0 	bne.w	800a826 <_dtoa_r+0x68e>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	4658      	mov	r0, fp
 800aaac:	f000 fa9a 	bl	800afe4 <__multadd>
 800aab0:	4601      	mov	r1, r0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4648      	mov	r0, r9
 800aab6:	f000 fcf7 	bl	800b4a8 <__mcmp>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f77f aeb3 	ble.w	800a826 <_dtoa_r+0x68e>
 800aac0:	4656      	mov	r6, sl
 800aac2:	2331      	movs	r3, #49	@ 0x31
 800aac4:	f806 3b01 	strb.w	r3, [r6], #1
 800aac8:	9b04      	ldr	r3, [sp, #16]
 800aaca:	3301      	adds	r3, #1
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	e6ae      	b.n	800a82e <_dtoa_r+0x696>
 800aad0:	9c07      	ldr	r4, [sp, #28]
 800aad2:	9704      	str	r7, [sp, #16]
 800aad4:	4625      	mov	r5, r4
 800aad6:	e7f3      	b.n	800aac0 <_dtoa_r+0x928>
 800aad8:	9b07      	ldr	r3, [sp, #28]
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8104 	beq.w	800acec <_dtoa_r+0xb54>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	dd05      	ble.n	800aaf4 <_dtoa_r+0x95c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4632      	mov	r2, r6
 800aaec:	4658      	mov	r0, fp
 800aaee:	f000 fc6f 	bl	800b3d0 <__lshift>
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d05a      	beq.n	800abb0 <_dtoa_r+0xa18>
 800aafa:	6869      	ldr	r1, [r5, #4]
 800aafc:	4658      	mov	r0, fp
 800aafe:	f000 fa0f 	bl	800af20 <_Balloc>
 800ab02:	4606      	mov	r6, r0
 800ab04:	b928      	cbnz	r0, 800ab12 <_dtoa_r+0x97a>
 800ab06:	4b84      	ldr	r3, [pc, #528]	@ (800ad18 <_dtoa_r+0xb80>)
 800ab08:	4602      	mov	r2, r0
 800ab0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab0e:	f7ff bb5a 	b.w	800a1c6 <_dtoa_r+0x2e>
 800ab12:	692a      	ldr	r2, [r5, #16]
 800ab14:	3202      	adds	r2, #2
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	f105 010c 	add.w	r1, r5, #12
 800ab1c:	300c      	adds	r0, #12
 800ab1e:	f7ff fa9e 	bl	800a05e <memcpy>
 800ab22:	2201      	movs	r2, #1
 800ab24:	4631      	mov	r1, r6
 800ab26:	4658      	mov	r0, fp
 800ab28:	f000 fc52 	bl	800b3d0 <__lshift>
 800ab2c:	f10a 0301 	add.w	r3, sl, #1
 800ab30:	9307      	str	r3, [sp, #28]
 800ab32:	9b00      	ldr	r3, [sp, #0]
 800ab34:	4453      	add	r3, sl
 800ab36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	462f      	mov	r7, r5
 800ab40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab42:	4605      	mov	r5, r0
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	4621      	mov	r1, r4
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	4648      	mov	r0, r9
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	f7ff fa9b 	bl	800a088 <quorem>
 800ab52:	4639      	mov	r1, r7
 800ab54:	9002      	str	r0, [sp, #8]
 800ab56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	f000 fca4 	bl	800b4a8 <__mcmp>
 800ab60:	462a      	mov	r2, r5
 800ab62:	9008      	str	r0, [sp, #32]
 800ab64:	4621      	mov	r1, r4
 800ab66:	4658      	mov	r0, fp
 800ab68:	f000 fcba 	bl	800b4e0 <__mdiff>
 800ab6c:	68c2      	ldr	r2, [r0, #12]
 800ab6e:	4606      	mov	r6, r0
 800ab70:	bb02      	cbnz	r2, 800abb4 <_dtoa_r+0xa1c>
 800ab72:	4601      	mov	r1, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fc97 	bl	800b4a8 <__mcmp>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	4658      	mov	r0, fp
 800ab80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab82:	f000 fa0d 	bl	800afa0 <_Bfree>
 800ab86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab8a:	9e07      	ldr	r6, [sp, #28]
 800ab8c:	ea43 0102 	orr.w	r1, r3, r2
 800ab90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab92:	4319      	orrs	r1, r3
 800ab94:	d110      	bne.n	800abb8 <_dtoa_r+0xa20>
 800ab96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab9a:	d029      	beq.n	800abf0 <_dtoa_r+0xa58>
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd02      	ble.n	800aba8 <_dtoa_r+0xa10>
 800aba2:	9b02      	ldr	r3, [sp, #8]
 800aba4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	f883 8000 	strb.w	r8, [r3]
 800abae:	e63f      	b.n	800a830 <_dtoa_r+0x698>
 800abb0:	4628      	mov	r0, r5
 800abb2:	e7bb      	b.n	800ab2c <_dtoa_r+0x994>
 800abb4:	2201      	movs	r2, #1
 800abb6:	e7e1      	b.n	800ab7c <_dtoa_r+0x9e4>
 800abb8:	9b08      	ldr	r3, [sp, #32]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	db04      	blt.n	800abc8 <_dtoa_r+0xa30>
 800abbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abc0:	430b      	orrs	r3, r1
 800abc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abc4:	430b      	orrs	r3, r1
 800abc6:	d120      	bne.n	800ac0a <_dtoa_r+0xa72>
 800abc8:	2a00      	cmp	r2, #0
 800abca:	dded      	ble.n	800aba8 <_dtoa_r+0xa10>
 800abcc:	4649      	mov	r1, r9
 800abce:	2201      	movs	r2, #1
 800abd0:	4658      	mov	r0, fp
 800abd2:	f000 fbfd 	bl	800b3d0 <__lshift>
 800abd6:	4621      	mov	r1, r4
 800abd8:	4681      	mov	r9, r0
 800abda:	f000 fc65 	bl	800b4a8 <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	dc03      	bgt.n	800abea <_dtoa_r+0xa52>
 800abe2:	d1e1      	bne.n	800aba8 <_dtoa_r+0xa10>
 800abe4:	f018 0f01 	tst.w	r8, #1
 800abe8:	d0de      	beq.n	800aba8 <_dtoa_r+0xa10>
 800abea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abee:	d1d8      	bne.n	800aba2 <_dtoa_r+0xa0a>
 800abf0:	9a00      	ldr	r2, [sp, #0]
 800abf2:	2339      	movs	r3, #57	@ 0x39
 800abf4:	7013      	strb	r3, [r2, #0]
 800abf6:	4633      	mov	r3, r6
 800abf8:	461e      	mov	r6, r3
 800abfa:	3b01      	subs	r3, #1
 800abfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac00:	2a39      	cmp	r2, #57	@ 0x39
 800ac02:	d052      	beq.n	800acaa <_dtoa_r+0xb12>
 800ac04:	3201      	adds	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e612      	b.n	800a830 <_dtoa_r+0x698>
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	dd07      	ble.n	800ac1e <_dtoa_r+0xa86>
 800ac0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac12:	d0ed      	beq.n	800abf0 <_dtoa_r+0xa58>
 800ac14:	9a00      	ldr	r2, [sp, #0]
 800ac16:	f108 0301 	add.w	r3, r8, #1
 800ac1a:	7013      	strb	r3, [r2, #0]
 800ac1c:	e608      	b.n	800a830 <_dtoa_r+0x698>
 800ac1e:	9b07      	ldr	r3, [sp, #28]
 800ac20:	9a07      	ldr	r2, [sp, #28]
 800ac22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d028      	beq.n	800ac7e <_dtoa_r+0xae6>
 800ac2c:	4649      	mov	r1, r9
 800ac2e:	2300      	movs	r3, #0
 800ac30:	220a      	movs	r2, #10
 800ac32:	4658      	mov	r0, fp
 800ac34:	f000 f9d6 	bl	800afe4 <__multadd>
 800ac38:	42af      	cmp	r7, r5
 800ac3a:	4681      	mov	r9, r0
 800ac3c:	f04f 0300 	mov.w	r3, #0
 800ac40:	f04f 020a 	mov.w	r2, #10
 800ac44:	4639      	mov	r1, r7
 800ac46:	4658      	mov	r0, fp
 800ac48:	d107      	bne.n	800ac5a <_dtoa_r+0xac2>
 800ac4a:	f000 f9cb 	bl	800afe4 <__multadd>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	4605      	mov	r5, r0
 800ac52:	9b07      	ldr	r3, [sp, #28]
 800ac54:	3301      	adds	r3, #1
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	e774      	b.n	800ab44 <_dtoa_r+0x9ac>
 800ac5a:	f000 f9c3 	bl	800afe4 <__multadd>
 800ac5e:	4629      	mov	r1, r5
 800ac60:	4607      	mov	r7, r0
 800ac62:	2300      	movs	r3, #0
 800ac64:	220a      	movs	r2, #10
 800ac66:	4658      	mov	r0, fp
 800ac68:	f000 f9bc 	bl	800afe4 <__multadd>
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	e7f0      	b.n	800ac52 <_dtoa_r+0xaba>
 800ac70:	9b00      	ldr	r3, [sp, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfcc      	ite	gt
 800ac76:	461e      	movgt	r6, r3
 800ac78:	2601      	movle	r6, #1
 800ac7a:	4456      	add	r6, sl
 800ac7c:	2700      	movs	r7, #0
 800ac7e:	4649      	mov	r1, r9
 800ac80:	2201      	movs	r2, #1
 800ac82:	4658      	mov	r0, fp
 800ac84:	f000 fba4 	bl	800b3d0 <__lshift>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4681      	mov	r9, r0
 800ac8c:	f000 fc0c 	bl	800b4a8 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dcb0      	bgt.n	800abf6 <_dtoa_r+0xa5e>
 800ac94:	d102      	bne.n	800ac9c <_dtoa_r+0xb04>
 800ac96:	f018 0f01 	tst.w	r8, #1
 800ac9a:	d1ac      	bne.n	800abf6 <_dtoa_r+0xa5e>
 800ac9c:	4633      	mov	r3, r6
 800ac9e:	461e      	mov	r6, r3
 800aca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aca4:	2a30      	cmp	r2, #48	@ 0x30
 800aca6:	d0fa      	beq.n	800ac9e <_dtoa_r+0xb06>
 800aca8:	e5c2      	b.n	800a830 <_dtoa_r+0x698>
 800acaa:	459a      	cmp	sl, r3
 800acac:	d1a4      	bne.n	800abf8 <_dtoa_r+0xa60>
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	3301      	adds	r3, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	2331      	movs	r3, #49	@ 0x31
 800acb6:	f88a 3000 	strb.w	r3, [sl]
 800acba:	e5b9      	b.n	800a830 <_dtoa_r+0x698>
 800acbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad1c <_dtoa_r+0xb84>
 800acc2:	b11b      	cbz	r3, 800accc <_dtoa_r+0xb34>
 800acc4:	f10a 0308 	add.w	r3, sl, #8
 800acc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	4650      	mov	r0, sl
 800acce:	b019      	add	sp, #100	@ 0x64
 800acd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	f77f ae37 	ble.w	800a94a <_dtoa_r+0x7b2>
 800acdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acde:	930a      	str	r3, [sp, #40]	@ 0x28
 800ace0:	2001      	movs	r0, #1
 800ace2:	e655      	b.n	800a990 <_dtoa_r+0x7f8>
 800ace4:	9b00      	ldr	r3, [sp, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f77f aed6 	ble.w	800aa98 <_dtoa_r+0x900>
 800acec:	4656      	mov	r6, sl
 800acee:	4621      	mov	r1, r4
 800acf0:	4648      	mov	r0, r9
 800acf2:	f7ff f9c9 	bl	800a088 <quorem>
 800acf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800acfa:	f806 8b01 	strb.w	r8, [r6], #1
 800acfe:	9b00      	ldr	r3, [sp, #0]
 800ad00:	eba6 020a 	sub.w	r2, r6, sl
 800ad04:	4293      	cmp	r3, r2
 800ad06:	ddb3      	ble.n	800ac70 <_dtoa_r+0xad8>
 800ad08:	4649      	mov	r1, r9
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	4658      	mov	r0, fp
 800ad10:	f000 f968 	bl	800afe4 <__multadd>
 800ad14:	4681      	mov	r9, r0
 800ad16:	e7ea      	b.n	800acee <_dtoa_r+0xb56>
 800ad18:	0800db25 	.word	0x0800db25
 800ad1c:	0800daa9 	.word	0x0800daa9

0800ad20 <_free_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d041      	beq.n	800adac <_free_r+0x8c>
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f0c      	subs	r4, r1, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	18e4      	addlt	r4, r4, r3
 800ad34:	f000 f8e8 	bl	800af08 <__malloc_lock>
 800ad38:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <_free_r+0x90>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	b933      	cbnz	r3, 800ad4c <_free_r+0x2c>
 800ad3e:	6063      	str	r3, [r4, #4]
 800ad40:	6014      	str	r4, [r2, #0]
 800ad42:	4628      	mov	r0, r5
 800ad44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad48:	f000 b8e4 	b.w	800af14 <__malloc_unlock>
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	d908      	bls.n	800ad62 <_free_r+0x42>
 800ad50:	6820      	ldr	r0, [r4, #0]
 800ad52:	1821      	adds	r1, r4, r0
 800ad54:	428b      	cmp	r3, r1
 800ad56:	bf01      	itttt	eq
 800ad58:	6819      	ldreq	r1, [r3, #0]
 800ad5a:	685b      	ldreq	r3, [r3, #4]
 800ad5c:	1809      	addeq	r1, r1, r0
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	e7ed      	b.n	800ad3e <_free_r+0x1e>
 800ad62:	461a      	mov	r2, r3
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	b10b      	cbz	r3, 800ad6c <_free_r+0x4c>
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	d9fa      	bls.n	800ad62 <_free_r+0x42>
 800ad6c:	6811      	ldr	r1, [r2, #0]
 800ad6e:	1850      	adds	r0, r2, r1
 800ad70:	42a0      	cmp	r0, r4
 800ad72:	d10b      	bne.n	800ad8c <_free_r+0x6c>
 800ad74:	6820      	ldr	r0, [r4, #0]
 800ad76:	4401      	add	r1, r0
 800ad78:	1850      	adds	r0, r2, r1
 800ad7a:	4283      	cmp	r3, r0
 800ad7c:	6011      	str	r1, [r2, #0]
 800ad7e:	d1e0      	bne.n	800ad42 <_free_r+0x22>
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	6053      	str	r3, [r2, #4]
 800ad86:	4408      	add	r0, r1
 800ad88:	6010      	str	r0, [r2, #0]
 800ad8a:	e7da      	b.n	800ad42 <_free_r+0x22>
 800ad8c:	d902      	bls.n	800ad94 <_free_r+0x74>
 800ad8e:	230c      	movs	r3, #12
 800ad90:	602b      	str	r3, [r5, #0]
 800ad92:	e7d6      	b.n	800ad42 <_free_r+0x22>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	1821      	adds	r1, r4, r0
 800ad98:	428b      	cmp	r3, r1
 800ad9a:	bf04      	itt	eq
 800ad9c:	6819      	ldreq	r1, [r3, #0]
 800ad9e:	685b      	ldreq	r3, [r3, #4]
 800ada0:	6063      	str	r3, [r4, #4]
 800ada2:	bf04      	itt	eq
 800ada4:	1809      	addeq	r1, r1, r0
 800ada6:	6021      	streq	r1, [r4, #0]
 800ada8:	6054      	str	r4, [r2, #4]
 800adaa:	e7ca      	b.n	800ad42 <_free_r+0x22>
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20002ab4 	.word	0x20002ab4

0800adb4 <malloc>:
 800adb4:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <malloc+0xc>)
 800adb6:	4601      	mov	r1, r0
 800adb8:	6818      	ldr	r0, [r3, #0]
 800adba:	f000 b825 	b.w	800ae08 <_malloc_r>
 800adbe:	bf00      	nop
 800adc0:	20000034 	.word	0x20000034

0800adc4 <sbrk_aligned>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae04 <sbrk_aligned+0x40>)
 800adc8:	460c      	mov	r4, r1
 800adca:	6831      	ldr	r1, [r6, #0]
 800adcc:	4605      	mov	r5, r0
 800adce:	b911      	cbnz	r1, 800add6 <sbrk_aligned+0x12>
 800add0:	f001 fe0c 	bl	800c9ec <_sbrk_r>
 800add4:	6030      	str	r0, [r6, #0]
 800add6:	4621      	mov	r1, r4
 800add8:	4628      	mov	r0, r5
 800adda:	f001 fe07 	bl	800c9ec <_sbrk_r>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d103      	bne.n	800adea <sbrk_aligned+0x26>
 800ade2:	f04f 34ff 	mov.w	r4, #4294967295
 800ade6:	4620      	mov	r0, r4
 800ade8:	bd70      	pop	{r4, r5, r6, pc}
 800adea:	1cc4      	adds	r4, r0, #3
 800adec:	f024 0403 	bic.w	r4, r4, #3
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d0f8      	beq.n	800ade6 <sbrk_aligned+0x22>
 800adf4:	1a21      	subs	r1, r4, r0
 800adf6:	4628      	mov	r0, r5
 800adf8:	f001 fdf8 	bl	800c9ec <_sbrk_r>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d1f2      	bne.n	800ade6 <sbrk_aligned+0x22>
 800ae00:	e7ef      	b.n	800ade2 <sbrk_aligned+0x1e>
 800ae02:	bf00      	nop
 800ae04:	20002ab0 	.word	0x20002ab0

0800ae08 <_malloc_r>:
 800ae08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae0c:	1ccd      	adds	r5, r1, #3
 800ae0e:	f025 0503 	bic.w	r5, r5, #3
 800ae12:	3508      	adds	r5, #8
 800ae14:	2d0c      	cmp	r5, #12
 800ae16:	bf38      	it	cc
 800ae18:	250c      	movcc	r5, #12
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	db01      	blt.n	800ae24 <_malloc_r+0x1c>
 800ae20:	42a9      	cmp	r1, r5
 800ae22:	d904      	bls.n	800ae2e <_malloc_r+0x26>
 800ae24:	230c      	movs	r3, #12
 800ae26:	6033      	str	r3, [r6, #0]
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af04 <_malloc_r+0xfc>
 800ae32:	f000 f869 	bl	800af08 <__malloc_lock>
 800ae36:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3a:	461c      	mov	r4, r3
 800ae3c:	bb44      	cbnz	r4, 800ae90 <_malloc_r+0x88>
 800ae3e:	4629      	mov	r1, r5
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff ffbf 	bl	800adc4 <sbrk_aligned>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	4604      	mov	r4, r0
 800ae4a:	d158      	bne.n	800aefe <_malloc_r+0xf6>
 800ae4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae50:	4627      	mov	r7, r4
 800ae52:	2f00      	cmp	r7, #0
 800ae54:	d143      	bne.n	800aede <_malloc_r+0xd6>
 800ae56:	2c00      	cmp	r4, #0
 800ae58:	d04b      	beq.n	800aef2 <_malloc_r+0xea>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4630      	mov	r0, r6
 800ae60:	eb04 0903 	add.w	r9, r4, r3
 800ae64:	f001 fdc2 	bl	800c9ec <_sbrk_r>
 800ae68:	4581      	cmp	r9, r0
 800ae6a:	d142      	bne.n	800aef2 <_malloc_r+0xea>
 800ae6c:	6821      	ldr	r1, [r4, #0]
 800ae6e:	1a6d      	subs	r5, r5, r1
 800ae70:	4629      	mov	r1, r5
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7ff ffa6 	bl	800adc4 <sbrk_aligned>
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d03a      	beq.n	800aef2 <_malloc_r+0xea>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	442b      	add	r3, r5
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	f8d8 3000 	ldr.w	r3, [r8]
 800ae86:	685a      	ldr	r2, [r3, #4]
 800ae88:	bb62      	cbnz	r2, 800aee4 <_malloc_r+0xdc>
 800ae8a:	f8c8 7000 	str.w	r7, [r8]
 800ae8e:	e00f      	b.n	800aeb0 <_malloc_r+0xa8>
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	1b52      	subs	r2, r2, r5
 800ae94:	d420      	bmi.n	800aed8 <_malloc_r+0xd0>
 800ae96:	2a0b      	cmp	r2, #11
 800ae98:	d917      	bls.n	800aeca <_malloc_r+0xc2>
 800ae9a:	1961      	adds	r1, r4, r5
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	6025      	str	r5, [r4, #0]
 800aea0:	bf18      	it	ne
 800aea2:	6059      	strne	r1, [r3, #4]
 800aea4:	6863      	ldr	r3, [r4, #4]
 800aea6:	bf08      	it	eq
 800aea8:	f8c8 1000 	streq.w	r1, [r8]
 800aeac:	5162      	str	r2, [r4, r5]
 800aeae:	604b      	str	r3, [r1, #4]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f000 f82f 	bl	800af14 <__malloc_unlock>
 800aeb6:	f104 000b 	add.w	r0, r4, #11
 800aeba:	1d23      	adds	r3, r4, #4
 800aebc:	f020 0007 	bic.w	r0, r0, #7
 800aec0:	1ac2      	subs	r2, r0, r3
 800aec2:	bf1c      	itt	ne
 800aec4:	1a1b      	subne	r3, r3, r0
 800aec6:	50a3      	strne	r3, [r4, r2]
 800aec8:	e7af      	b.n	800ae2a <_malloc_r+0x22>
 800aeca:	6862      	ldr	r2, [r4, #4]
 800aecc:	42a3      	cmp	r3, r4
 800aece:	bf0c      	ite	eq
 800aed0:	f8c8 2000 	streq.w	r2, [r8]
 800aed4:	605a      	strne	r2, [r3, #4]
 800aed6:	e7eb      	b.n	800aeb0 <_malloc_r+0xa8>
 800aed8:	4623      	mov	r3, r4
 800aeda:	6864      	ldr	r4, [r4, #4]
 800aedc:	e7ae      	b.n	800ae3c <_malloc_r+0x34>
 800aede:	463c      	mov	r4, r7
 800aee0:	687f      	ldr	r7, [r7, #4]
 800aee2:	e7b6      	b.n	800ae52 <_malloc_r+0x4a>
 800aee4:	461a      	mov	r2, r3
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	42a3      	cmp	r3, r4
 800aeea:	d1fb      	bne.n	800aee4 <_malloc_r+0xdc>
 800aeec:	2300      	movs	r3, #0
 800aeee:	6053      	str	r3, [r2, #4]
 800aef0:	e7de      	b.n	800aeb0 <_malloc_r+0xa8>
 800aef2:	230c      	movs	r3, #12
 800aef4:	6033      	str	r3, [r6, #0]
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 f80c 	bl	800af14 <__malloc_unlock>
 800aefc:	e794      	b.n	800ae28 <_malloc_r+0x20>
 800aefe:	6005      	str	r5, [r0, #0]
 800af00:	e7d6      	b.n	800aeb0 <_malloc_r+0xa8>
 800af02:	bf00      	nop
 800af04:	20002ab4 	.word	0x20002ab4

0800af08 <__malloc_lock>:
 800af08:	4801      	ldr	r0, [pc, #4]	@ (800af10 <__malloc_lock+0x8>)
 800af0a:	f7ff b8a6 	b.w	800a05a <__retarget_lock_acquire_recursive>
 800af0e:	bf00      	nop
 800af10:	20002aac 	.word	0x20002aac

0800af14 <__malloc_unlock>:
 800af14:	4801      	ldr	r0, [pc, #4]	@ (800af1c <__malloc_unlock+0x8>)
 800af16:	f7ff b8a1 	b.w	800a05c <__retarget_lock_release_recursive>
 800af1a:	bf00      	nop
 800af1c:	20002aac 	.word	0x20002aac

0800af20 <_Balloc>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	69c6      	ldr	r6, [r0, #28]
 800af24:	4604      	mov	r4, r0
 800af26:	460d      	mov	r5, r1
 800af28:	b976      	cbnz	r6, 800af48 <_Balloc+0x28>
 800af2a:	2010      	movs	r0, #16
 800af2c:	f7ff ff42 	bl	800adb4 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	61e0      	str	r0, [r4, #28]
 800af34:	b920      	cbnz	r0, 800af40 <_Balloc+0x20>
 800af36:	4b18      	ldr	r3, [pc, #96]	@ (800af98 <_Balloc+0x78>)
 800af38:	4818      	ldr	r0, [pc, #96]	@ (800af9c <_Balloc+0x7c>)
 800af3a:	216b      	movs	r1, #107	@ 0x6b
 800af3c:	f001 fd70 	bl	800ca20 <__assert_func>
 800af40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af44:	6006      	str	r6, [r0, #0]
 800af46:	60c6      	str	r6, [r0, #12]
 800af48:	69e6      	ldr	r6, [r4, #28]
 800af4a:	68f3      	ldr	r3, [r6, #12]
 800af4c:	b183      	cbz	r3, 800af70 <_Balloc+0x50>
 800af4e:	69e3      	ldr	r3, [r4, #28]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af56:	b9b8      	cbnz	r0, 800af88 <_Balloc+0x68>
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f605 	lsl.w	r6, r1, r5
 800af5e:	1d72      	adds	r2, r6, #5
 800af60:	0092      	lsls	r2, r2, #2
 800af62:	4620      	mov	r0, r4
 800af64:	f001 fd7a 	bl	800ca5c <_calloc_r>
 800af68:	b160      	cbz	r0, 800af84 <_Balloc+0x64>
 800af6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af6e:	e00e      	b.n	800af8e <_Balloc+0x6e>
 800af70:	2221      	movs	r2, #33	@ 0x21
 800af72:	2104      	movs	r1, #4
 800af74:	4620      	mov	r0, r4
 800af76:	f001 fd71 	bl	800ca5c <_calloc_r>
 800af7a:	69e3      	ldr	r3, [r4, #28]
 800af7c:	60f0      	str	r0, [r6, #12]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1e4      	bne.n	800af4e <_Balloc+0x2e>
 800af84:	2000      	movs	r0, #0
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	6802      	ldr	r2, [r0, #0]
 800af8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af8e:	2300      	movs	r3, #0
 800af90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af94:	e7f7      	b.n	800af86 <_Balloc+0x66>
 800af96:	bf00      	nop
 800af98:	0800dab6 	.word	0x0800dab6
 800af9c:	0800db36 	.word	0x0800db36

0800afa0 <_Bfree>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	69c6      	ldr	r6, [r0, #28]
 800afa4:	4605      	mov	r5, r0
 800afa6:	460c      	mov	r4, r1
 800afa8:	b976      	cbnz	r6, 800afc8 <_Bfree+0x28>
 800afaa:	2010      	movs	r0, #16
 800afac:	f7ff ff02 	bl	800adb4 <malloc>
 800afb0:	4602      	mov	r2, r0
 800afb2:	61e8      	str	r0, [r5, #28]
 800afb4:	b920      	cbnz	r0, 800afc0 <_Bfree+0x20>
 800afb6:	4b09      	ldr	r3, [pc, #36]	@ (800afdc <_Bfree+0x3c>)
 800afb8:	4809      	ldr	r0, [pc, #36]	@ (800afe0 <_Bfree+0x40>)
 800afba:	218f      	movs	r1, #143	@ 0x8f
 800afbc:	f001 fd30 	bl	800ca20 <__assert_func>
 800afc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc4:	6006      	str	r6, [r0, #0]
 800afc6:	60c6      	str	r6, [r0, #12]
 800afc8:	b13c      	cbz	r4, 800afda <_Bfree+0x3a>
 800afca:	69eb      	ldr	r3, [r5, #28]
 800afcc:	6862      	ldr	r2, [r4, #4]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd4:	6021      	str	r1, [r4, #0]
 800afd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	0800dab6 	.word	0x0800dab6
 800afe0:	0800db36 	.word	0x0800db36

0800afe4 <__multadd>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	690d      	ldr	r5, [r1, #16]
 800afea:	4607      	mov	r7, r0
 800afec:	460c      	mov	r4, r1
 800afee:	461e      	mov	r6, r3
 800aff0:	f101 0c14 	add.w	ip, r1, #20
 800aff4:	2000      	movs	r0, #0
 800aff6:	f8dc 3000 	ldr.w	r3, [ip]
 800affa:	b299      	uxth	r1, r3
 800affc:	fb02 6101 	mla	r1, r2, r1, r6
 800b000:	0c1e      	lsrs	r6, r3, #16
 800b002:	0c0b      	lsrs	r3, r1, #16
 800b004:	fb02 3306 	mla	r3, r2, r6, r3
 800b008:	b289      	uxth	r1, r1
 800b00a:	3001      	adds	r0, #1
 800b00c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b010:	4285      	cmp	r5, r0
 800b012:	f84c 1b04 	str.w	r1, [ip], #4
 800b016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01a:	dcec      	bgt.n	800aff6 <__multadd+0x12>
 800b01c:	b30e      	cbz	r6, 800b062 <__multadd+0x7e>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	42ab      	cmp	r3, r5
 800b022:	dc19      	bgt.n	800b058 <__multadd+0x74>
 800b024:	6861      	ldr	r1, [r4, #4]
 800b026:	4638      	mov	r0, r7
 800b028:	3101      	adds	r1, #1
 800b02a:	f7ff ff79 	bl	800af20 <_Balloc>
 800b02e:	4680      	mov	r8, r0
 800b030:	b928      	cbnz	r0, 800b03e <__multadd+0x5a>
 800b032:	4602      	mov	r2, r0
 800b034:	4b0c      	ldr	r3, [pc, #48]	@ (800b068 <__multadd+0x84>)
 800b036:	480d      	ldr	r0, [pc, #52]	@ (800b06c <__multadd+0x88>)
 800b038:	21ba      	movs	r1, #186	@ 0xba
 800b03a:	f001 fcf1 	bl	800ca20 <__assert_func>
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	3202      	adds	r2, #2
 800b042:	f104 010c 	add.w	r1, r4, #12
 800b046:	0092      	lsls	r2, r2, #2
 800b048:	300c      	adds	r0, #12
 800b04a:	f7ff f808 	bl	800a05e <memcpy>
 800b04e:	4621      	mov	r1, r4
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff ffa5 	bl	800afa0 <_Bfree>
 800b056:	4644      	mov	r4, r8
 800b058:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b05c:	3501      	adds	r5, #1
 800b05e:	615e      	str	r6, [r3, #20]
 800b060:	6125      	str	r5, [r4, #16]
 800b062:	4620      	mov	r0, r4
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	0800db25 	.word	0x0800db25
 800b06c:	0800db36 	.word	0x0800db36

0800b070 <__s2b>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	460c      	mov	r4, r1
 800b076:	4615      	mov	r5, r2
 800b078:	461f      	mov	r7, r3
 800b07a:	2209      	movs	r2, #9
 800b07c:	3308      	adds	r3, #8
 800b07e:	4606      	mov	r6, r0
 800b080:	fb93 f3f2 	sdiv	r3, r3, r2
 800b084:	2100      	movs	r1, #0
 800b086:	2201      	movs	r2, #1
 800b088:	429a      	cmp	r2, r3
 800b08a:	db09      	blt.n	800b0a0 <__s2b+0x30>
 800b08c:	4630      	mov	r0, r6
 800b08e:	f7ff ff47 	bl	800af20 <_Balloc>
 800b092:	b940      	cbnz	r0, 800b0a6 <__s2b+0x36>
 800b094:	4602      	mov	r2, r0
 800b096:	4b19      	ldr	r3, [pc, #100]	@ (800b0fc <__s2b+0x8c>)
 800b098:	4819      	ldr	r0, [pc, #100]	@ (800b100 <__s2b+0x90>)
 800b09a:	21d3      	movs	r1, #211	@ 0xd3
 800b09c:	f001 fcc0 	bl	800ca20 <__assert_func>
 800b0a0:	0052      	lsls	r2, r2, #1
 800b0a2:	3101      	adds	r1, #1
 800b0a4:	e7f0      	b.n	800b088 <__s2b+0x18>
 800b0a6:	9b08      	ldr	r3, [sp, #32]
 800b0a8:	6143      	str	r3, [r0, #20]
 800b0aa:	2d09      	cmp	r5, #9
 800b0ac:	f04f 0301 	mov.w	r3, #1
 800b0b0:	6103      	str	r3, [r0, #16]
 800b0b2:	dd16      	ble.n	800b0e2 <__s2b+0x72>
 800b0b4:	f104 0909 	add.w	r9, r4, #9
 800b0b8:	46c8      	mov	r8, r9
 800b0ba:	442c      	add	r4, r5
 800b0bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0c0:	4601      	mov	r1, r0
 800b0c2:	3b30      	subs	r3, #48	@ 0x30
 800b0c4:	220a      	movs	r2, #10
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ff8c 	bl	800afe4 <__multadd>
 800b0cc:	45a0      	cmp	r8, r4
 800b0ce:	d1f5      	bne.n	800b0bc <__s2b+0x4c>
 800b0d0:	f1a5 0408 	sub.w	r4, r5, #8
 800b0d4:	444c      	add	r4, r9
 800b0d6:	1b2d      	subs	r5, r5, r4
 800b0d8:	1963      	adds	r3, r4, r5
 800b0da:	42bb      	cmp	r3, r7
 800b0dc:	db04      	blt.n	800b0e8 <__s2b+0x78>
 800b0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e2:	340a      	adds	r4, #10
 800b0e4:	2509      	movs	r5, #9
 800b0e6:	e7f6      	b.n	800b0d6 <__s2b+0x66>
 800b0e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0ec:	4601      	mov	r1, r0
 800b0ee:	3b30      	subs	r3, #48	@ 0x30
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f7ff ff76 	bl	800afe4 <__multadd>
 800b0f8:	e7ee      	b.n	800b0d8 <__s2b+0x68>
 800b0fa:	bf00      	nop
 800b0fc:	0800db25 	.word	0x0800db25
 800b100:	0800db36 	.word	0x0800db36

0800b104 <__hi0bits>:
 800b104:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b108:	4603      	mov	r3, r0
 800b10a:	bf36      	itet	cc
 800b10c:	0403      	lslcc	r3, r0, #16
 800b10e:	2000      	movcs	r0, #0
 800b110:	2010      	movcc	r0, #16
 800b112:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b116:	bf3c      	itt	cc
 800b118:	021b      	lslcc	r3, r3, #8
 800b11a:	3008      	addcc	r0, #8
 800b11c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b120:	bf3c      	itt	cc
 800b122:	011b      	lslcc	r3, r3, #4
 800b124:	3004      	addcc	r0, #4
 800b126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b12a:	bf3c      	itt	cc
 800b12c:	009b      	lslcc	r3, r3, #2
 800b12e:	3002      	addcc	r0, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	db05      	blt.n	800b140 <__hi0bits+0x3c>
 800b134:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b138:	f100 0001 	add.w	r0, r0, #1
 800b13c:	bf08      	it	eq
 800b13e:	2020      	moveq	r0, #32
 800b140:	4770      	bx	lr

0800b142 <__lo0bits>:
 800b142:	6803      	ldr	r3, [r0, #0]
 800b144:	4602      	mov	r2, r0
 800b146:	f013 0007 	ands.w	r0, r3, #7
 800b14a:	d00b      	beq.n	800b164 <__lo0bits+0x22>
 800b14c:	07d9      	lsls	r1, r3, #31
 800b14e:	d421      	bmi.n	800b194 <__lo0bits+0x52>
 800b150:	0798      	lsls	r0, r3, #30
 800b152:	bf49      	itett	mi
 800b154:	085b      	lsrmi	r3, r3, #1
 800b156:	089b      	lsrpl	r3, r3, #2
 800b158:	2001      	movmi	r0, #1
 800b15a:	6013      	strmi	r3, [r2, #0]
 800b15c:	bf5c      	itt	pl
 800b15e:	6013      	strpl	r3, [r2, #0]
 800b160:	2002      	movpl	r0, #2
 800b162:	4770      	bx	lr
 800b164:	b299      	uxth	r1, r3
 800b166:	b909      	cbnz	r1, 800b16c <__lo0bits+0x2a>
 800b168:	0c1b      	lsrs	r3, r3, #16
 800b16a:	2010      	movs	r0, #16
 800b16c:	b2d9      	uxtb	r1, r3
 800b16e:	b909      	cbnz	r1, 800b174 <__lo0bits+0x32>
 800b170:	3008      	adds	r0, #8
 800b172:	0a1b      	lsrs	r3, r3, #8
 800b174:	0719      	lsls	r1, r3, #28
 800b176:	bf04      	itt	eq
 800b178:	091b      	lsreq	r3, r3, #4
 800b17a:	3004      	addeq	r0, #4
 800b17c:	0799      	lsls	r1, r3, #30
 800b17e:	bf04      	itt	eq
 800b180:	089b      	lsreq	r3, r3, #2
 800b182:	3002      	addeq	r0, #2
 800b184:	07d9      	lsls	r1, r3, #31
 800b186:	d403      	bmi.n	800b190 <__lo0bits+0x4e>
 800b188:	085b      	lsrs	r3, r3, #1
 800b18a:	f100 0001 	add.w	r0, r0, #1
 800b18e:	d003      	beq.n	800b198 <__lo0bits+0x56>
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	4770      	bx	lr
 800b194:	2000      	movs	r0, #0
 800b196:	4770      	bx	lr
 800b198:	2020      	movs	r0, #32
 800b19a:	4770      	bx	lr

0800b19c <__i2b>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	460c      	mov	r4, r1
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	f7ff febd 	bl	800af20 <_Balloc>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	b928      	cbnz	r0, 800b1b6 <__i2b+0x1a>
 800b1aa:	4b05      	ldr	r3, [pc, #20]	@ (800b1c0 <__i2b+0x24>)
 800b1ac:	4805      	ldr	r0, [pc, #20]	@ (800b1c4 <__i2b+0x28>)
 800b1ae:	f240 1145 	movw	r1, #325	@ 0x145
 800b1b2:	f001 fc35 	bl	800ca20 <__assert_func>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	6144      	str	r4, [r0, #20]
 800b1ba:	6103      	str	r3, [r0, #16]
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800db25 	.word	0x0800db25
 800b1c4:	0800db36 	.word	0x0800db36

0800b1c8 <__multiply>:
 800b1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	690a      	ldr	r2, [r1, #16]
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	bfa8      	it	ge
 800b1d6:	4623      	movge	r3, r4
 800b1d8:	460f      	mov	r7, r1
 800b1da:	bfa4      	itt	ge
 800b1dc:	460c      	movge	r4, r1
 800b1de:	461f      	movge	r7, r3
 800b1e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b1e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b1e8:	68a3      	ldr	r3, [r4, #8]
 800b1ea:	6861      	ldr	r1, [r4, #4]
 800b1ec:	eb0a 0609 	add.w	r6, sl, r9
 800b1f0:	42b3      	cmp	r3, r6
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	bfb8      	it	lt
 800b1f6:	3101      	addlt	r1, #1
 800b1f8:	f7ff fe92 	bl	800af20 <_Balloc>
 800b1fc:	b930      	cbnz	r0, 800b20c <__multiply+0x44>
 800b1fe:	4602      	mov	r2, r0
 800b200:	4b44      	ldr	r3, [pc, #272]	@ (800b314 <__multiply+0x14c>)
 800b202:	4845      	ldr	r0, [pc, #276]	@ (800b318 <__multiply+0x150>)
 800b204:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b208:	f001 fc0a 	bl	800ca20 <__assert_func>
 800b20c:	f100 0514 	add.w	r5, r0, #20
 800b210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b214:	462b      	mov	r3, r5
 800b216:	2200      	movs	r2, #0
 800b218:	4543      	cmp	r3, r8
 800b21a:	d321      	bcc.n	800b260 <__multiply+0x98>
 800b21c:	f107 0114 	add.w	r1, r7, #20
 800b220:	f104 0214 	add.w	r2, r4, #20
 800b224:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b228:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	1b13      	subs	r3, r2, r4
 800b230:	3b15      	subs	r3, #21
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	3304      	adds	r3, #4
 800b238:	f104 0715 	add.w	r7, r4, #21
 800b23c:	42ba      	cmp	r2, r7
 800b23e:	bf38      	it	cc
 800b240:	2304      	movcc	r3, #4
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	9b02      	ldr	r3, [sp, #8]
 800b246:	9103      	str	r1, [sp, #12]
 800b248:	428b      	cmp	r3, r1
 800b24a:	d80c      	bhi.n	800b266 <__multiply+0x9e>
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	dd03      	ble.n	800b258 <__multiply+0x90>
 800b250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b254:	2b00      	cmp	r3, #0
 800b256:	d05b      	beq.n	800b310 <__multiply+0x148>
 800b258:	6106      	str	r6, [r0, #16]
 800b25a:	b005      	add	sp, #20
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	f843 2b04 	str.w	r2, [r3], #4
 800b264:	e7d8      	b.n	800b218 <__multiply+0x50>
 800b266:	f8b1 a000 	ldrh.w	sl, [r1]
 800b26a:	f1ba 0f00 	cmp.w	sl, #0
 800b26e:	d024      	beq.n	800b2ba <__multiply+0xf2>
 800b270:	f104 0e14 	add.w	lr, r4, #20
 800b274:	46a9      	mov	r9, r5
 800b276:	f04f 0c00 	mov.w	ip, #0
 800b27a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b27e:	f8d9 3000 	ldr.w	r3, [r9]
 800b282:	fa1f fb87 	uxth.w	fp, r7
 800b286:	b29b      	uxth	r3, r3
 800b288:	fb0a 330b 	mla	r3, sl, fp, r3
 800b28c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b290:	f8d9 7000 	ldr.w	r7, [r9]
 800b294:	4463      	add	r3, ip
 800b296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b29a:	fb0a c70b 	mla	r7, sl, fp, ip
 800b29e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2a8:	4572      	cmp	r2, lr
 800b2aa:	f849 3b04 	str.w	r3, [r9], #4
 800b2ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2b2:	d8e2      	bhi.n	800b27a <__multiply+0xb2>
 800b2b4:	9b01      	ldr	r3, [sp, #4]
 800b2b6:	f845 c003 	str.w	ip, [r5, r3]
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2c0:	3104      	adds	r1, #4
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	d021      	beq.n	800b30c <__multiply+0x144>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	f104 0c14 	add.w	ip, r4, #20
 800b2ce:	46ae      	mov	lr, r5
 800b2d0:	f04f 0a00 	mov.w	sl, #0
 800b2d4:	f8bc b000 	ldrh.w	fp, [ip]
 800b2d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b2dc:	fb09 770b 	mla	r7, r9, fp, r7
 800b2e0:	4457      	add	r7, sl
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2e8:	f84e 3b04 	str.w	r3, [lr], #4
 800b2ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2f4:	f8be 3000 	ldrh.w	r3, [lr]
 800b2f8:	fb09 330a 	mla	r3, r9, sl, r3
 800b2fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b300:	4562      	cmp	r2, ip
 800b302:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b306:	d8e5      	bhi.n	800b2d4 <__multiply+0x10c>
 800b308:	9f01      	ldr	r7, [sp, #4]
 800b30a:	51eb      	str	r3, [r5, r7]
 800b30c:	3504      	adds	r5, #4
 800b30e:	e799      	b.n	800b244 <__multiply+0x7c>
 800b310:	3e01      	subs	r6, #1
 800b312:	e79b      	b.n	800b24c <__multiply+0x84>
 800b314:	0800db25 	.word	0x0800db25
 800b318:	0800db36 	.word	0x0800db36

0800b31c <__pow5mult>:
 800b31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b320:	4615      	mov	r5, r2
 800b322:	f012 0203 	ands.w	r2, r2, #3
 800b326:	4607      	mov	r7, r0
 800b328:	460e      	mov	r6, r1
 800b32a:	d007      	beq.n	800b33c <__pow5mult+0x20>
 800b32c:	4c25      	ldr	r4, [pc, #148]	@ (800b3c4 <__pow5mult+0xa8>)
 800b32e:	3a01      	subs	r2, #1
 800b330:	2300      	movs	r3, #0
 800b332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b336:	f7ff fe55 	bl	800afe4 <__multadd>
 800b33a:	4606      	mov	r6, r0
 800b33c:	10ad      	asrs	r5, r5, #2
 800b33e:	d03d      	beq.n	800b3bc <__pow5mult+0xa0>
 800b340:	69fc      	ldr	r4, [r7, #28]
 800b342:	b97c      	cbnz	r4, 800b364 <__pow5mult+0x48>
 800b344:	2010      	movs	r0, #16
 800b346:	f7ff fd35 	bl	800adb4 <malloc>
 800b34a:	4602      	mov	r2, r0
 800b34c:	61f8      	str	r0, [r7, #28]
 800b34e:	b928      	cbnz	r0, 800b35c <__pow5mult+0x40>
 800b350:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c8 <__pow5mult+0xac>)
 800b352:	481e      	ldr	r0, [pc, #120]	@ (800b3cc <__pow5mult+0xb0>)
 800b354:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b358:	f001 fb62 	bl	800ca20 <__assert_func>
 800b35c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b360:	6004      	str	r4, [r0, #0]
 800b362:	60c4      	str	r4, [r0, #12]
 800b364:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b36c:	b94c      	cbnz	r4, 800b382 <__pow5mult+0x66>
 800b36e:	f240 2171 	movw	r1, #625	@ 0x271
 800b372:	4638      	mov	r0, r7
 800b374:	f7ff ff12 	bl	800b19c <__i2b>
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b37e:	4604      	mov	r4, r0
 800b380:	6003      	str	r3, [r0, #0]
 800b382:	f04f 0900 	mov.w	r9, #0
 800b386:	07eb      	lsls	r3, r5, #31
 800b388:	d50a      	bpl.n	800b3a0 <__pow5mult+0x84>
 800b38a:	4631      	mov	r1, r6
 800b38c:	4622      	mov	r2, r4
 800b38e:	4638      	mov	r0, r7
 800b390:	f7ff ff1a 	bl	800b1c8 <__multiply>
 800b394:	4631      	mov	r1, r6
 800b396:	4680      	mov	r8, r0
 800b398:	4638      	mov	r0, r7
 800b39a:	f7ff fe01 	bl	800afa0 <_Bfree>
 800b39e:	4646      	mov	r6, r8
 800b3a0:	106d      	asrs	r5, r5, #1
 800b3a2:	d00b      	beq.n	800b3bc <__pow5mult+0xa0>
 800b3a4:	6820      	ldr	r0, [r4, #0]
 800b3a6:	b938      	cbnz	r0, 800b3b8 <__pow5mult+0x9c>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff ff0b 	bl	800b1c8 <__multiply>
 800b3b2:	6020      	str	r0, [r4, #0]
 800b3b4:	f8c0 9000 	str.w	r9, [r0]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	e7e4      	b.n	800b386 <__pow5mult+0x6a>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800db90 	.word	0x0800db90
 800b3c8:	0800dab6 	.word	0x0800dab6
 800b3cc:	0800db36 	.word	0x0800db36

0800b3d0 <__lshift>:
 800b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	6849      	ldr	r1, [r1, #4]
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	4607      	mov	r7, r0
 800b3e2:	4691      	mov	r9, r2
 800b3e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e8:	f108 0601 	add.w	r6, r8, #1
 800b3ec:	42b3      	cmp	r3, r6
 800b3ee:	db0b      	blt.n	800b408 <__lshift+0x38>
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fd95 	bl	800af20 <_Balloc>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b948      	cbnz	r0, 800b40e <__lshift+0x3e>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	4b28      	ldr	r3, [pc, #160]	@ (800b4a0 <__lshift+0xd0>)
 800b3fe:	4829      	ldr	r0, [pc, #164]	@ (800b4a4 <__lshift+0xd4>)
 800b400:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b404:	f001 fb0c 	bl	800ca20 <__assert_func>
 800b408:	3101      	adds	r1, #1
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	e7ee      	b.n	800b3ec <__lshift+0x1c>
 800b40e:	2300      	movs	r3, #0
 800b410:	f100 0114 	add.w	r1, r0, #20
 800b414:	f100 0210 	add.w	r2, r0, #16
 800b418:	4618      	mov	r0, r3
 800b41a:	4553      	cmp	r3, sl
 800b41c:	db33      	blt.n	800b486 <__lshift+0xb6>
 800b41e:	6920      	ldr	r0, [r4, #16]
 800b420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b424:	f104 0314 	add.w	r3, r4, #20
 800b428:	f019 091f 	ands.w	r9, r9, #31
 800b42c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b434:	d02b      	beq.n	800b48e <__lshift+0xbe>
 800b436:	f1c9 0e20 	rsb	lr, r9, #32
 800b43a:	468a      	mov	sl, r1
 800b43c:	2200      	movs	r2, #0
 800b43e:	6818      	ldr	r0, [r3, #0]
 800b440:	fa00 f009 	lsl.w	r0, r0, r9
 800b444:	4310      	orrs	r0, r2
 800b446:	f84a 0b04 	str.w	r0, [sl], #4
 800b44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44e:	459c      	cmp	ip, r3
 800b450:	fa22 f20e 	lsr.w	r2, r2, lr
 800b454:	d8f3      	bhi.n	800b43e <__lshift+0x6e>
 800b456:	ebac 0304 	sub.w	r3, ip, r4
 800b45a:	3b15      	subs	r3, #21
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	f104 0015 	add.w	r0, r4, #21
 800b466:	4584      	cmp	ip, r0
 800b468:	bf38      	it	cc
 800b46a:	2304      	movcc	r3, #4
 800b46c:	50ca      	str	r2, [r1, r3]
 800b46e:	b10a      	cbz	r2, 800b474 <__lshift+0xa4>
 800b470:	f108 0602 	add.w	r6, r8, #2
 800b474:	3e01      	subs	r6, #1
 800b476:	4638      	mov	r0, r7
 800b478:	612e      	str	r6, [r5, #16]
 800b47a:	4621      	mov	r1, r4
 800b47c:	f7ff fd90 	bl	800afa0 <_Bfree>
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b486:	f842 0f04 	str.w	r0, [r2, #4]!
 800b48a:	3301      	adds	r3, #1
 800b48c:	e7c5      	b.n	800b41a <__lshift+0x4a>
 800b48e:	3904      	subs	r1, #4
 800b490:	f853 2b04 	ldr.w	r2, [r3], #4
 800b494:	f841 2f04 	str.w	r2, [r1, #4]!
 800b498:	459c      	cmp	ip, r3
 800b49a:	d8f9      	bhi.n	800b490 <__lshift+0xc0>
 800b49c:	e7ea      	b.n	800b474 <__lshift+0xa4>
 800b49e:	bf00      	nop
 800b4a0:	0800db25 	.word	0x0800db25
 800b4a4:	0800db36 	.word	0x0800db36

0800b4a8 <__mcmp>:
 800b4a8:	690a      	ldr	r2, [r1, #16]
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	6900      	ldr	r0, [r0, #16]
 800b4ae:	1a80      	subs	r0, r0, r2
 800b4b0:	b530      	push	{r4, r5, lr}
 800b4b2:	d10e      	bne.n	800b4d2 <__mcmp+0x2a>
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	3114      	adds	r1, #20
 800b4b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4c8:	4295      	cmp	r5, r2
 800b4ca:	d003      	beq.n	800b4d4 <__mcmp+0x2c>
 800b4cc:	d205      	bcs.n	800b4da <__mcmp+0x32>
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d2:	bd30      	pop	{r4, r5, pc}
 800b4d4:	42a3      	cmp	r3, r4
 800b4d6:	d3f3      	bcc.n	800b4c0 <__mcmp+0x18>
 800b4d8:	e7fb      	b.n	800b4d2 <__mcmp+0x2a>
 800b4da:	2001      	movs	r0, #1
 800b4dc:	e7f9      	b.n	800b4d2 <__mcmp+0x2a>
	...

0800b4e0 <__mdiff>:
 800b4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	4689      	mov	r9, r1
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	f7ff ffdb 	bl	800b4a8 <__mcmp>
 800b4f2:	1e05      	subs	r5, r0, #0
 800b4f4:	d112      	bne.n	800b51c <__mdiff+0x3c>
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff fd11 	bl	800af20 <_Balloc>
 800b4fe:	4602      	mov	r2, r0
 800b500:	b928      	cbnz	r0, 800b50e <__mdiff+0x2e>
 800b502:	4b3f      	ldr	r3, [pc, #252]	@ (800b600 <__mdiff+0x120>)
 800b504:	f240 2137 	movw	r1, #567	@ 0x237
 800b508:	483e      	ldr	r0, [pc, #248]	@ (800b604 <__mdiff+0x124>)
 800b50a:	f001 fa89 	bl	800ca20 <__assert_func>
 800b50e:	2301      	movs	r3, #1
 800b510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b514:	4610      	mov	r0, r2
 800b516:	b003      	add	sp, #12
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	bfbc      	itt	lt
 800b51e:	464b      	movlt	r3, r9
 800b520:	46a1      	movlt	r9, r4
 800b522:	4630      	mov	r0, r6
 800b524:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b528:	bfba      	itte	lt
 800b52a:	461c      	movlt	r4, r3
 800b52c:	2501      	movlt	r5, #1
 800b52e:	2500      	movge	r5, #0
 800b530:	f7ff fcf6 	bl	800af20 <_Balloc>
 800b534:	4602      	mov	r2, r0
 800b536:	b918      	cbnz	r0, 800b540 <__mdiff+0x60>
 800b538:	4b31      	ldr	r3, [pc, #196]	@ (800b600 <__mdiff+0x120>)
 800b53a:	f240 2145 	movw	r1, #581	@ 0x245
 800b53e:	e7e3      	b.n	800b508 <__mdiff+0x28>
 800b540:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b544:	6926      	ldr	r6, [r4, #16]
 800b546:	60c5      	str	r5, [r0, #12]
 800b548:	f109 0310 	add.w	r3, r9, #16
 800b54c:	f109 0514 	add.w	r5, r9, #20
 800b550:	f104 0e14 	add.w	lr, r4, #20
 800b554:	f100 0b14 	add.w	fp, r0, #20
 800b558:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b55c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	46d9      	mov	r9, fp
 800b564:	f04f 0c00 	mov.w	ip, #0
 800b568:	9b01      	ldr	r3, [sp, #4]
 800b56a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b56e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	fa1f f38a 	uxth.w	r3, sl
 800b578:	4619      	mov	r1, r3
 800b57a:	b283      	uxth	r3, r0
 800b57c:	1acb      	subs	r3, r1, r3
 800b57e:	0c00      	lsrs	r0, r0, #16
 800b580:	4463      	add	r3, ip
 800b582:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b586:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b590:	4576      	cmp	r6, lr
 800b592:	f849 3b04 	str.w	r3, [r9], #4
 800b596:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b59a:	d8e5      	bhi.n	800b568 <__mdiff+0x88>
 800b59c:	1b33      	subs	r3, r6, r4
 800b59e:	3b15      	subs	r3, #21
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
 800b5a4:	3415      	adds	r4, #21
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	42a6      	cmp	r6, r4
 800b5aa:	bf38      	it	cc
 800b5ac:	2304      	movcc	r3, #4
 800b5ae:	441d      	add	r5, r3
 800b5b0:	445b      	add	r3, fp
 800b5b2:	461e      	mov	r6, r3
 800b5b4:	462c      	mov	r4, r5
 800b5b6:	4544      	cmp	r4, r8
 800b5b8:	d30e      	bcc.n	800b5d8 <__mdiff+0xf8>
 800b5ba:	f108 0103 	add.w	r1, r8, #3
 800b5be:	1b49      	subs	r1, r1, r5
 800b5c0:	f021 0103 	bic.w	r1, r1, #3
 800b5c4:	3d03      	subs	r5, #3
 800b5c6:	45a8      	cmp	r8, r5
 800b5c8:	bf38      	it	cc
 800b5ca:	2100      	movcc	r1, #0
 800b5cc:	440b      	add	r3, r1
 800b5ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5d2:	b191      	cbz	r1, 800b5fa <__mdiff+0x11a>
 800b5d4:	6117      	str	r7, [r2, #16]
 800b5d6:	e79d      	b.n	800b514 <__mdiff+0x34>
 800b5d8:	f854 1b04 	ldr.w	r1, [r4], #4
 800b5dc:	46e6      	mov	lr, ip
 800b5de:	0c08      	lsrs	r0, r1, #16
 800b5e0:	fa1c fc81 	uxtah	ip, ip, r1
 800b5e4:	4471      	add	r1, lr
 800b5e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b5ea:	b289      	uxth	r1, r1
 800b5ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b5f0:	f846 1b04 	str.w	r1, [r6], #4
 800b5f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5f8:	e7dd      	b.n	800b5b6 <__mdiff+0xd6>
 800b5fa:	3f01      	subs	r7, #1
 800b5fc:	e7e7      	b.n	800b5ce <__mdiff+0xee>
 800b5fe:	bf00      	nop
 800b600:	0800db25 	.word	0x0800db25
 800b604:	0800db36 	.word	0x0800db36

0800b608 <__ulp>:
 800b608:	b082      	sub	sp, #8
 800b60a:	ed8d 0b00 	vstr	d0, [sp]
 800b60e:	9a01      	ldr	r2, [sp, #4]
 800b610:	4b0f      	ldr	r3, [pc, #60]	@ (800b650 <__ulp+0x48>)
 800b612:	4013      	ands	r3, r2
 800b614:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	dc08      	bgt.n	800b62e <__ulp+0x26>
 800b61c:	425b      	negs	r3, r3
 800b61e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b622:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b626:	da04      	bge.n	800b632 <__ulp+0x2a>
 800b628:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b62c:	4113      	asrs	r3, r2
 800b62e:	2200      	movs	r2, #0
 800b630:	e008      	b.n	800b644 <__ulp+0x3c>
 800b632:	f1a2 0314 	sub.w	r3, r2, #20
 800b636:	2b1e      	cmp	r3, #30
 800b638:	bfda      	itte	le
 800b63a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b63e:	40da      	lsrle	r2, r3
 800b640:	2201      	movgt	r2, #1
 800b642:	2300      	movs	r3, #0
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	ec41 0b10 	vmov	d0, r0, r1
 800b64c:	b002      	add	sp, #8
 800b64e:	4770      	bx	lr
 800b650:	7ff00000 	.word	0x7ff00000

0800b654 <__b2d>:
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	6906      	ldr	r6, [r0, #16]
 800b65a:	f100 0814 	add.w	r8, r0, #20
 800b65e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b662:	1f37      	subs	r7, r6, #4
 800b664:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b668:	4610      	mov	r0, r2
 800b66a:	f7ff fd4b 	bl	800b104 <__hi0bits>
 800b66e:	f1c0 0320 	rsb	r3, r0, #32
 800b672:	280a      	cmp	r0, #10
 800b674:	600b      	str	r3, [r1, #0]
 800b676:	491b      	ldr	r1, [pc, #108]	@ (800b6e4 <__b2d+0x90>)
 800b678:	dc15      	bgt.n	800b6a6 <__b2d+0x52>
 800b67a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b67e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b682:	45b8      	cmp	r8, r7
 800b684:	ea43 0501 	orr.w	r5, r3, r1
 800b688:	bf34      	ite	cc
 800b68a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b68e:	2300      	movcs	r3, #0
 800b690:	3015      	adds	r0, #21
 800b692:	fa02 f000 	lsl.w	r0, r2, r0
 800b696:	fa23 f30c 	lsr.w	r3, r3, ip
 800b69a:	4303      	orrs	r3, r0
 800b69c:	461c      	mov	r4, r3
 800b69e:	ec45 4b10 	vmov	d0, r4, r5
 800b6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a6:	45b8      	cmp	r8, r7
 800b6a8:	bf3a      	itte	cc
 800b6aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800b6b2:	2300      	movcs	r3, #0
 800b6b4:	380b      	subs	r0, #11
 800b6b6:	d012      	beq.n	800b6de <__b2d+0x8a>
 800b6b8:	f1c0 0120 	rsb	r1, r0, #32
 800b6bc:	fa23 f401 	lsr.w	r4, r3, r1
 800b6c0:	4082      	lsls	r2, r0
 800b6c2:	4322      	orrs	r2, r4
 800b6c4:	4547      	cmp	r7, r8
 800b6c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b6ca:	bf8c      	ite	hi
 800b6cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b6d0:	2200      	movls	r2, #0
 800b6d2:	4083      	lsls	r3, r0
 800b6d4:	40ca      	lsrs	r2, r1
 800b6d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	e7de      	b.n	800b69c <__b2d+0x48>
 800b6de:	ea42 0501 	orr.w	r5, r2, r1
 800b6e2:	e7db      	b.n	800b69c <__b2d+0x48>
 800b6e4:	3ff00000 	.word	0x3ff00000

0800b6e8 <__d2b>:
 800b6e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	ec59 8b10 	vmov	r8, r9, d0
 800b6f4:	4616      	mov	r6, r2
 800b6f6:	f7ff fc13 	bl	800af20 <_Balloc>
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	b930      	cbnz	r0, 800b70c <__d2b+0x24>
 800b6fe:	4602      	mov	r2, r0
 800b700:	4b23      	ldr	r3, [pc, #140]	@ (800b790 <__d2b+0xa8>)
 800b702:	4824      	ldr	r0, [pc, #144]	@ (800b794 <__d2b+0xac>)
 800b704:	f240 310f 	movw	r1, #783	@ 0x30f
 800b708:	f001 f98a 	bl	800ca20 <__assert_func>
 800b70c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b714:	b10d      	cbz	r5, 800b71a <__d2b+0x32>
 800b716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b71a:	9301      	str	r3, [sp, #4]
 800b71c:	f1b8 0300 	subs.w	r3, r8, #0
 800b720:	d023      	beq.n	800b76a <__d2b+0x82>
 800b722:	4668      	mov	r0, sp
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	f7ff fd0c 	bl	800b142 <__lo0bits>
 800b72a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b72e:	b1d0      	cbz	r0, 800b766 <__d2b+0x7e>
 800b730:	f1c0 0320 	rsb	r3, r0, #32
 800b734:	fa02 f303 	lsl.w	r3, r2, r3
 800b738:	430b      	orrs	r3, r1
 800b73a:	40c2      	lsrs	r2, r0
 800b73c:	6163      	str	r3, [r4, #20]
 800b73e:	9201      	str	r2, [sp, #4]
 800b740:	9b01      	ldr	r3, [sp, #4]
 800b742:	61a3      	str	r3, [r4, #24]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bf0c      	ite	eq
 800b748:	2201      	moveq	r2, #1
 800b74a:	2202      	movne	r2, #2
 800b74c:	6122      	str	r2, [r4, #16]
 800b74e:	b1a5      	cbz	r5, 800b77a <__d2b+0x92>
 800b750:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b754:	4405      	add	r5, r0
 800b756:	603d      	str	r5, [r7, #0]
 800b758:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b75c:	6030      	str	r0, [r6, #0]
 800b75e:	4620      	mov	r0, r4
 800b760:	b003      	add	sp, #12
 800b762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b766:	6161      	str	r1, [r4, #20]
 800b768:	e7ea      	b.n	800b740 <__d2b+0x58>
 800b76a:	a801      	add	r0, sp, #4
 800b76c:	f7ff fce9 	bl	800b142 <__lo0bits>
 800b770:	9b01      	ldr	r3, [sp, #4]
 800b772:	6163      	str	r3, [r4, #20]
 800b774:	3020      	adds	r0, #32
 800b776:	2201      	movs	r2, #1
 800b778:	e7e8      	b.n	800b74c <__d2b+0x64>
 800b77a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b77e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b782:	6038      	str	r0, [r7, #0]
 800b784:	6918      	ldr	r0, [r3, #16]
 800b786:	f7ff fcbd 	bl	800b104 <__hi0bits>
 800b78a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b78e:	e7e5      	b.n	800b75c <__d2b+0x74>
 800b790:	0800db25 	.word	0x0800db25
 800b794:	0800db36 	.word	0x0800db36

0800b798 <__ratio>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	b085      	sub	sp, #20
 800b79e:	e9cd 1000 	strd	r1, r0, [sp]
 800b7a2:	a902      	add	r1, sp, #8
 800b7a4:	f7ff ff56 	bl	800b654 <__b2d>
 800b7a8:	9800      	ldr	r0, [sp, #0]
 800b7aa:	a903      	add	r1, sp, #12
 800b7ac:	ec55 4b10 	vmov	r4, r5, d0
 800b7b0:	f7ff ff50 	bl	800b654 <__b2d>
 800b7b4:	9b01      	ldr	r3, [sp, #4]
 800b7b6:	6919      	ldr	r1, [r3, #16]
 800b7b8:	9b00      	ldr	r3, [sp, #0]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	1ac9      	subs	r1, r1, r3
 800b7be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	ec5b ab10 	vmov	sl, fp, d0
 800b7c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	bfce      	itee	gt
 800b7d0:	462a      	movgt	r2, r5
 800b7d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7d6:	465a      	movle	r2, fp
 800b7d8:	462f      	mov	r7, r5
 800b7da:	46d9      	mov	r9, fp
 800b7dc:	bfcc      	ite	gt
 800b7de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b7e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	4652      	mov	r2, sl
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f5 f805 	bl	80007fc <__aeabi_ddiv>
 800b7f2:	ec41 0b10 	vmov	d0, r0, r1
 800b7f6:	b005      	add	sp, #20
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7fc <__copybits>:
 800b7fc:	3901      	subs	r1, #1
 800b7fe:	b570      	push	{r4, r5, r6, lr}
 800b800:	1149      	asrs	r1, r1, #5
 800b802:	6914      	ldr	r4, [r2, #16]
 800b804:	3101      	adds	r1, #1
 800b806:	f102 0314 	add.w	r3, r2, #20
 800b80a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b80e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b812:	1f05      	subs	r5, r0, #4
 800b814:	42a3      	cmp	r3, r4
 800b816:	d30c      	bcc.n	800b832 <__copybits+0x36>
 800b818:	1aa3      	subs	r3, r4, r2
 800b81a:	3b11      	subs	r3, #17
 800b81c:	f023 0303 	bic.w	r3, r3, #3
 800b820:	3211      	adds	r2, #17
 800b822:	42a2      	cmp	r2, r4
 800b824:	bf88      	it	hi
 800b826:	2300      	movhi	r3, #0
 800b828:	4418      	add	r0, r3
 800b82a:	2300      	movs	r3, #0
 800b82c:	4288      	cmp	r0, r1
 800b82e:	d305      	bcc.n	800b83c <__copybits+0x40>
 800b830:	bd70      	pop	{r4, r5, r6, pc}
 800b832:	f853 6b04 	ldr.w	r6, [r3], #4
 800b836:	f845 6f04 	str.w	r6, [r5, #4]!
 800b83a:	e7eb      	b.n	800b814 <__copybits+0x18>
 800b83c:	f840 3b04 	str.w	r3, [r0], #4
 800b840:	e7f4      	b.n	800b82c <__copybits+0x30>

0800b842 <__any_on>:
 800b842:	f100 0214 	add.w	r2, r0, #20
 800b846:	6900      	ldr	r0, [r0, #16]
 800b848:	114b      	asrs	r3, r1, #5
 800b84a:	4298      	cmp	r0, r3
 800b84c:	b510      	push	{r4, lr}
 800b84e:	db11      	blt.n	800b874 <__any_on+0x32>
 800b850:	dd0a      	ble.n	800b868 <__any_on+0x26>
 800b852:	f011 011f 	ands.w	r1, r1, #31
 800b856:	d007      	beq.n	800b868 <__any_on+0x26>
 800b858:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b85c:	fa24 f001 	lsr.w	r0, r4, r1
 800b860:	fa00 f101 	lsl.w	r1, r0, r1
 800b864:	428c      	cmp	r4, r1
 800b866:	d10b      	bne.n	800b880 <__any_on+0x3e>
 800b868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d803      	bhi.n	800b878 <__any_on+0x36>
 800b870:	2000      	movs	r0, #0
 800b872:	bd10      	pop	{r4, pc}
 800b874:	4603      	mov	r3, r0
 800b876:	e7f7      	b.n	800b868 <__any_on+0x26>
 800b878:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d0f5      	beq.n	800b86c <__any_on+0x2a>
 800b880:	2001      	movs	r0, #1
 800b882:	e7f6      	b.n	800b872 <__any_on+0x30>

0800b884 <sulp>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	4604      	mov	r4, r0
 800b888:	460d      	mov	r5, r1
 800b88a:	ec45 4b10 	vmov	d0, r4, r5
 800b88e:	4616      	mov	r6, r2
 800b890:	f7ff feba 	bl	800b608 <__ulp>
 800b894:	ec51 0b10 	vmov	r0, r1, d0
 800b898:	b17e      	cbz	r6, 800b8ba <sulp+0x36>
 800b89a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b89e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dd09      	ble.n	800b8ba <sulp+0x36>
 800b8a6:	051b      	lsls	r3, r3, #20
 800b8a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b8ac:	2400      	movs	r4, #0
 800b8ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	f7f4 fe77 	bl	80005a8 <__aeabi_dmul>
 800b8ba:	ec41 0b10 	vmov	d0, r0, r1
 800b8be:	bd70      	pop	{r4, r5, r6, pc}

0800b8c0 <_strtod_l>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	b09f      	sub	sp, #124	@ 0x7c
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b8ce:	9005      	str	r0, [sp, #20]
 800b8d0:	f04f 0a00 	mov.w	sl, #0
 800b8d4:	f04f 0b00 	mov.w	fp, #0
 800b8d8:	460a      	mov	r2, r1
 800b8da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8dc:	7811      	ldrb	r1, [r2, #0]
 800b8de:	292b      	cmp	r1, #43	@ 0x2b
 800b8e0:	d04a      	beq.n	800b978 <_strtod_l+0xb8>
 800b8e2:	d838      	bhi.n	800b956 <_strtod_l+0x96>
 800b8e4:	290d      	cmp	r1, #13
 800b8e6:	d832      	bhi.n	800b94e <_strtod_l+0x8e>
 800b8e8:	2908      	cmp	r1, #8
 800b8ea:	d832      	bhi.n	800b952 <_strtod_l+0x92>
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d03b      	beq.n	800b968 <_strtod_l+0xa8>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b8f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b8f6:	782a      	ldrb	r2, [r5, #0]
 800b8f8:	2a30      	cmp	r2, #48	@ 0x30
 800b8fa:	f040 80b3 	bne.w	800ba64 <_strtod_l+0x1a4>
 800b8fe:	786a      	ldrb	r2, [r5, #1]
 800b900:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b904:	2a58      	cmp	r2, #88	@ 0x58
 800b906:	d16e      	bne.n	800b9e6 <_strtod_l+0x126>
 800b908:	9302      	str	r3, [sp, #8]
 800b90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4a8e      	ldr	r2, [pc, #568]	@ (800bb4c <_strtod_l+0x28c>)
 800b914:	9805      	ldr	r0, [sp, #20]
 800b916:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b918:	a919      	add	r1, sp, #100	@ 0x64
 800b91a:	f001 f91b 	bl	800cb54 <__gethex>
 800b91e:	f010 060f 	ands.w	r6, r0, #15
 800b922:	4604      	mov	r4, r0
 800b924:	d005      	beq.n	800b932 <_strtod_l+0x72>
 800b926:	2e06      	cmp	r6, #6
 800b928:	d128      	bne.n	800b97c <_strtod_l+0xbc>
 800b92a:	3501      	adds	r5, #1
 800b92c:	2300      	movs	r3, #0
 800b92e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b930:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 858e 	bne.w	800c456 <_strtod_l+0xb96>
 800b93a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b93c:	b1cb      	cbz	r3, 800b972 <_strtod_l+0xb2>
 800b93e:	4652      	mov	r2, sl
 800b940:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b944:	ec43 2b10 	vmov	d0, r2, r3
 800b948:	b01f      	add	sp, #124	@ 0x7c
 800b94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94e:	2920      	cmp	r1, #32
 800b950:	d1ce      	bne.n	800b8f0 <_strtod_l+0x30>
 800b952:	3201      	adds	r2, #1
 800b954:	e7c1      	b.n	800b8da <_strtod_l+0x1a>
 800b956:	292d      	cmp	r1, #45	@ 0x2d
 800b958:	d1ca      	bne.n	800b8f0 <_strtod_l+0x30>
 800b95a:	2101      	movs	r1, #1
 800b95c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b95e:	1c51      	adds	r1, r2, #1
 800b960:	9119      	str	r1, [sp, #100]	@ 0x64
 800b962:	7852      	ldrb	r2, [r2, #1]
 800b964:	2a00      	cmp	r2, #0
 800b966:	d1c5      	bne.n	800b8f4 <_strtod_l+0x34>
 800b968:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b96a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8570 	bne.w	800c452 <_strtod_l+0xb92>
 800b972:	4652      	mov	r2, sl
 800b974:	465b      	mov	r3, fp
 800b976:	e7e5      	b.n	800b944 <_strtod_l+0x84>
 800b978:	2100      	movs	r1, #0
 800b97a:	e7ef      	b.n	800b95c <_strtod_l+0x9c>
 800b97c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b97e:	b13a      	cbz	r2, 800b990 <_strtod_l+0xd0>
 800b980:	2135      	movs	r1, #53	@ 0x35
 800b982:	a81c      	add	r0, sp, #112	@ 0x70
 800b984:	f7ff ff3a 	bl	800b7fc <__copybits>
 800b988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b98a:	9805      	ldr	r0, [sp, #20]
 800b98c:	f7ff fb08 	bl	800afa0 <_Bfree>
 800b990:	3e01      	subs	r6, #1
 800b992:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b994:	2e04      	cmp	r6, #4
 800b996:	d806      	bhi.n	800b9a6 <_strtod_l+0xe6>
 800b998:	e8df f006 	tbb	[pc, r6]
 800b99c:	201d0314 	.word	0x201d0314
 800b9a0:	14          	.byte	0x14
 800b9a1:	00          	.byte	0x00
 800b9a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b9a6:	05e1      	lsls	r1, r4, #23
 800b9a8:	bf48      	it	mi
 800b9aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9b2:	0d1b      	lsrs	r3, r3, #20
 800b9b4:	051b      	lsls	r3, r3, #20
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1bb      	bne.n	800b932 <_strtod_l+0x72>
 800b9ba:	f7fe fb23 	bl	800a004 <__errno>
 800b9be:	2322      	movs	r3, #34	@ 0x22
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	e7b6      	b.n	800b932 <_strtod_l+0x72>
 800b9c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b9c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b9cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b9d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b9d4:	e7e7      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bb54 <_strtod_l+0x294>
 800b9da:	e7e4      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b9e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b9e4:	e7df      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b30      	cmp	r3, #48	@ 0x30
 800b9f0:	d0f9      	beq.n	800b9e6 <_strtod_l+0x126>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d09d      	beq.n	800b932 <_strtod_l+0x72>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9308      	str	r3, [sp, #32]
 800ba02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba04:	461f      	mov	r7, r3
 800ba06:	220a      	movs	r2, #10
 800ba08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba0a:	7805      	ldrb	r5, [r0, #0]
 800ba0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ba10:	b2d9      	uxtb	r1, r3
 800ba12:	2909      	cmp	r1, #9
 800ba14:	d928      	bls.n	800ba68 <_strtod_l+0x1a8>
 800ba16:	494e      	ldr	r1, [pc, #312]	@ (800bb50 <_strtod_l+0x290>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f000 ffd5 	bl	800c9c8 <strncmp>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d032      	beq.n	800ba88 <_strtod_l+0x1c8>
 800ba22:	2000      	movs	r0, #0
 800ba24:	462a      	mov	r2, r5
 800ba26:	4681      	mov	r9, r0
 800ba28:	463d      	mov	r5, r7
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	2a65      	cmp	r2, #101	@ 0x65
 800ba2e:	d001      	beq.n	800ba34 <_strtod_l+0x174>
 800ba30:	2a45      	cmp	r2, #69	@ 0x45
 800ba32:	d114      	bne.n	800ba5e <_strtod_l+0x19e>
 800ba34:	b91d      	cbnz	r5, 800ba3e <_strtod_l+0x17e>
 800ba36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba38:	4302      	orrs	r2, r0
 800ba3a:	d095      	beq.n	800b968 <_strtod_l+0xa8>
 800ba3c:	2500      	movs	r5, #0
 800ba3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba40:	1c62      	adds	r2, r4, #1
 800ba42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba44:	7862      	ldrb	r2, [r4, #1]
 800ba46:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba48:	d077      	beq.n	800bb3a <_strtod_l+0x27a>
 800ba4a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba4c:	d07b      	beq.n	800bb46 <_strtod_l+0x286>
 800ba4e:	f04f 0c00 	mov.w	ip, #0
 800ba52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ba56:	2909      	cmp	r1, #9
 800ba58:	f240 8082 	bls.w	800bb60 <_strtod_l+0x2a0>
 800ba5c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba5e:	f04f 0800 	mov.w	r8, #0
 800ba62:	e0a2      	b.n	800bbaa <_strtod_l+0x2ea>
 800ba64:	2300      	movs	r3, #0
 800ba66:	e7c7      	b.n	800b9f8 <_strtod_l+0x138>
 800ba68:	2f08      	cmp	r7, #8
 800ba6a:	bfd5      	itete	le
 800ba6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ba6e:	9908      	ldrgt	r1, [sp, #32]
 800ba70:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba74:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ba78:	f100 0001 	add.w	r0, r0, #1
 800ba7c:	bfd4      	ite	le
 800ba7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ba80:	9308      	strgt	r3, [sp, #32]
 800ba82:	3701      	adds	r7, #1
 800ba84:	9019      	str	r0, [sp, #100]	@ 0x64
 800ba86:	e7bf      	b.n	800ba08 <_strtod_l+0x148>
 800ba88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba8e:	785a      	ldrb	r2, [r3, #1]
 800ba90:	b37f      	cbz	r7, 800baf2 <_strtod_l+0x232>
 800ba92:	4681      	mov	r9, r0
 800ba94:	463d      	mov	r5, r7
 800ba96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ba9a:	2b09      	cmp	r3, #9
 800ba9c:	d912      	bls.n	800bac4 <_strtod_l+0x204>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e7c4      	b.n	800ba2c <_strtod_l+0x16c>
 800baa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	9219      	str	r2, [sp, #100]	@ 0x64
 800baa8:	785a      	ldrb	r2, [r3, #1]
 800baaa:	3001      	adds	r0, #1
 800baac:	2a30      	cmp	r2, #48	@ 0x30
 800baae:	d0f8      	beq.n	800baa2 <_strtod_l+0x1e2>
 800bab0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	f200 84d3 	bhi.w	800c460 <_strtod_l+0xba0>
 800baba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800babc:	930c      	str	r3, [sp, #48]	@ 0x30
 800babe:	4681      	mov	r9, r0
 800bac0:	2000      	movs	r0, #0
 800bac2:	4605      	mov	r5, r0
 800bac4:	3a30      	subs	r2, #48	@ 0x30
 800bac6:	f100 0301 	add.w	r3, r0, #1
 800baca:	d02a      	beq.n	800bb22 <_strtod_l+0x262>
 800bacc:	4499      	add	r9, r3
 800bace:	eb00 0c05 	add.w	ip, r0, r5
 800bad2:	462b      	mov	r3, r5
 800bad4:	210a      	movs	r1, #10
 800bad6:	4563      	cmp	r3, ip
 800bad8:	d10d      	bne.n	800baf6 <_strtod_l+0x236>
 800bada:	1c69      	adds	r1, r5, #1
 800badc:	4401      	add	r1, r0
 800bade:	4428      	add	r0, r5
 800bae0:	2808      	cmp	r0, #8
 800bae2:	dc16      	bgt.n	800bb12 <_strtod_l+0x252>
 800bae4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bae6:	230a      	movs	r3, #10
 800bae8:	fb03 2300 	mla	r3, r3, r0, r2
 800baec:	930a      	str	r3, [sp, #40]	@ 0x28
 800baee:	2300      	movs	r3, #0
 800baf0:	e018      	b.n	800bb24 <_strtod_l+0x264>
 800baf2:	4638      	mov	r0, r7
 800baf4:	e7da      	b.n	800baac <_strtod_l+0x1ec>
 800baf6:	2b08      	cmp	r3, #8
 800baf8:	f103 0301 	add.w	r3, r3, #1
 800bafc:	dc03      	bgt.n	800bb06 <_strtod_l+0x246>
 800bafe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb00:	434e      	muls	r6, r1
 800bb02:	960a      	str	r6, [sp, #40]	@ 0x28
 800bb04:	e7e7      	b.n	800bad6 <_strtod_l+0x216>
 800bb06:	2b10      	cmp	r3, #16
 800bb08:	bfde      	ittt	le
 800bb0a:	9e08      	ldrle	r6, [sp, #32]
 800bb0c:	434e      	mulle	r6, r1
 800bb0e:	9608      	strle	r6, [sp, #32]
 800bb10:	e7e1      	b.n	800bad6 <_strtod_l+0x216>
 800bb12:	280f      	cmp	r0, #15
 800bb14:	dceb      	bgt.n	800baee <_strtod_l+0x22e>
 800bb16:	9808      	ldr	r0, [sp, #32]
 800bb18:	230a      	movs	r3, #10
 800bb1a:	fb03 2300 	mla	r3, r3, r0, r2
 800bb1e:	9308      	str	r3, [sp, #32]
 800bb20:	e7e5      	b.n	800baee <_strtod_l+0x22e>
 800bb22:	4629      	mov	r1, r5
 800bb24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb26:	1c50      	adds	r0, r2, #1
 800bb28:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb2a:	7852      	ldrb	r2, [r2, #1]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	460d      	mov	r5, r1
 800bb30:	e7b1      	b.n	800ba96 <_strtod_l+0x1d6>
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	2301      	movs	r3, #1
 800bb38:	e77d      	b.n	800ba36 <_strtod_l+0x176>
 800bb3a:	f04f 0c00 	mov.w	ip, #0
 800bb3e:	1ca2      	adds	r2, r4, #2
 800bb40:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb42:	78a2      	ldrb	r2, [r4, #2]
 800bb44:	e785      	b.n	800ba52 <_strtod_l+0x192>
 800bb46:	f04f 0c01 	mov.w	ip, #1
 800bb4a:	e7f8      	b.n	800bb3e <_strtod_l+0x27e>
 800bb4c:	0800dca8 	.word	0x0800dca8
 800bb50:	0800dc90 	.word	0x0800dc90
 800bb54:	7ff00000 	.word	0x7ff00000
 800bb58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb5a:	1c51      	adds	r1, r2, #1
 800bb5c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb5e:	7852      	ldrb	r2, [r2, #1]
 800bb60:	2a30      	cmp	r2, #48	@ 0x30
 800bb62:	d0f9      	beq.n	800bb58 <_strtod_l+0x298>
 800bb64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bb68:	2908      	cmp	r1, #8
 800bb6a:	f63f af78 	bhi.w	800ba5e <_strtod_l+0x19e>
 800bb6e:	3a30      	subs	r2, #48	@ 0x30
 800bb70:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb74:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bb76:	f04f 080a 	mov.w	r8, #10
 800bb7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb7c:	1c56      	adds	r6, r2, #1
 800bb7e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bb80:	7852      	ldrb	r2, [r2, #1]
 800bb82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bb86:	f1be 0f09 	cmp.w	lr, #9
 800bb8a:	d939      	bls.n	800bc00 <_strtod_l+0x340>
 800bb8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bb8e:	1a76      	subs	r6, r6, r1
 800bb90:	2e08      	cmp	r6, #8
 800bb92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bb96:	dc03      	bgt.n	800bba0 <_strtod_l+0x2e0>
 800bb98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bb9a:	4588      	cmp	r8, r1
 800bb9c:	bfa8      	it	ge
 800bb9e:	4688      	movge	r8, r1
 800bba0:	f1bc 0f00 	cmp.w	ip, #0
 800bba4:	d001      	beq.n	800bbaa <_strtod_l+0x2ea>
 800bba6:	f1c8 0800 	rsb	r8, r8, #0
 800bbaa:	2d00      	cmp	r5, #0
 800bbac:	d14e      	bne.n	800bc4c <_strtod_l+0x38c>
 800bbae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbb0:	4308      	orrs	r0, r1
 800bbb2:	f47f aebe 	bne.w	800b932 <_strtod_l+0x72>
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f47f aed6 	bne.w	800b968 <_strtod_l+0xa8>
 800bbbc:	2a69      	cmp	r2, #105	@ 0x69
 800bbbe:	d028      	beq.n	800bc12 <_strtod_l+0x352>
 800bbc0:	dc25      	bgt.n	800bc0e <_strtod_l+0x34e>
 800bbc2:	2a49      	cmp	r2, #73	@ 0x49
 800bbc4:	d025      	beq.n	800bc12 <_strtod_l+0x352>
 800bbc6:	2a4e      	cmp	r2, #78	@ 0x4e
 800bbc8:	f47f aece 	bne.w	800b968 <_strtod_l+0xa8>
 800bbcc:	499b      	ldr	r1, [pc, #620]	@ (800be3c <_strtod_l+0x57c>)
 800bbce:	a819      	add	r0, sp, #100	@ 0x64
 800bbd0:	f001 f9e2 	bl	800cf98 <__match>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f43f aec7 	beq.w	800b968 <_strtod_l+0xa8>
 800bbda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b28      	cmp	r3, #40	@ 0x28
 800bbe0:	d12e      	bne.n	800bc40 <_strtod_l+0x380>
 800bbe2:	4997      	ldr	r1, [pc, #604]	@ (800be40 <_strtod_l+0x580>)
 800bbe4:	aa1c      	add	r2, sp, #112	@ 0x70
 800bbe6:	a819      	add	r0, sp, #100	@ 0x64
 800bbe8:	f001 f9ea 	bl	800cfc0 <__hexnan>
 800bbec:	2805      	cmp	r0, #5
 800bbee:	d127      	bne.n	800bc40 <_strtod_l+0x380>
 800bbf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbf2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bbf6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bbfa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bbfe:	e698      	b.n	800b932 <_strtod_l+0x72>
 800bc00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc02:	fb08 2101 	mla	r1, r8, r1, r2
 800bc06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc0a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc0c:	e7b5      	b.n	800bb7a <_strtod_l+0x2ba>
 800bc0e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc10:	e7da      	b.n	800bbc8 <_strtod_l+0x308>
 800bc12:	498c      	ldr	r1, [pc, #560]	@ (800be44 <_strtod_l+0x584>)
 800bc14:	a819      	add	r0, sp, #100	@ 0x64
 800bc16:	f001 f9bf 	bl	800cf98 <__match>
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	f43f aea4 	beq.w	800b968 <_strtod_l+0xa8>
 800bc20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc22:	4989      	ldr	r1, [pc, #548]	@ (800be48 <_strtod_l+0x588>)
 800bc24:	3b01      	subs	r3, #1
 800bc26:	a819      	add	r0, sp, #100	@ 0x64
 800bc28:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc2a:	f001 f9b5 	bl	800cf98 <__match>
 800bc2e:	b910      	cbnz	r0, 800bc36 <_strtod_l+0x376>
 800bc30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc32:	3301      	adds	r3, #1
 800bc34:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800be58 <_strtod_l+0x598>
 800bc3a:	f04f 0a00 	mov.w	sl, #0
 800bc3e:	e678      	b.n	800b932 <_strtod_l+0x72>
 800bc40:	4882      	ldr	r0, [pc, #520]	@ (800be4c <_strtod_l+0x58c>)
 800bc42:	f000 fee5 	bl	800ca10 <nan>
 800bc46:	ec5b ab10 	vmov	sl, fp, d0
 800bc4a:	e672      	b.n	800b932 <_strtod_l+0x72>
 800bc4c:	eba8 0309 	sub.w	r3, r8, r9
 800bc50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc52:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc54:	2f00      	cmp	r7, #0
 800bc56:	bf08      	it	eq
 800bc58:	462f      	moveq	r7, r5
 800bc5a:	2d10      	cmp	r5, #16
 800bc5c:	462c      	mov	r4, r5
 800bc5e:	bfa8      	it	ge
 800bc60:	2410      	movge	r4, #16
 800bc62:	f7f4 fc27 	bl	80004b4 <__aeabi_ui2d>
 800bc66:	2d09      	cmp	r5, #9
 800bc68:	4682      	mov	sl, r0
 800bc6a:	468b      	mov	fp, r1
 800bc6c:	dc13      	bgt.n	800bc96 <_strtod_l+0x3d6>
 800bc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f43f ae5e 	beq.w	800b932 <_strtod_l+0x72>
 800bc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc78:	dd78      	ble.n	800bd6c <_strtod_l+0x4ac>
 800bc7a:	2b16      	cmp	r3, #22
 800bc7c:	dc5f      	bgt.n	800bd3e <_strtod_l+0x47e>
 800bc7e:	4974      	ldr	r1, [pc, #464]	@ (800be50 <_strtod_l+0x590>)
 800bc80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc88:	4652      	mov	r2, sl
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	f7f4 fc8c 	bl	80005a8 <__aeabi_dmul>
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	e64d      	b.n	800b932 <_strtod_l+0x72>
 800bc96:	4b6e      	ldr	r3, [pc, #440]	@ (800be50 <_strtod_l+0x590>)
 800bc98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bca0:	f7f4 fc82 	bl	80005a8 <__aeabi_dmul>
 800bca4:	4682      	mov	sl, r0
 800bca6:	9808      	ldr	r0, [sp, #32]
 800bca8:	468b      	mov	fp, r1
 800bcaa:	f7f4 fc03 	bl	80004b4 <__aeabi_ui2d>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4650      	mov	r0, sl
 800bcb4:	4659      	mov	r1, fp
 800bcb6:	f7f4 fac1 	bl	800023c <__adddf3>
 800bcba:	2d0f      	cmp	r5, #15
 800bcbc:	4682      	mov	sl, r0
 800bcbe:	468b      	mov	fp, r1
 800bcc0:	ddd5      	ble.n	800bc6e <_strtod_l+0x3ae>
 800bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc4:	1b2c      	subs	r4, r5, r4
 800bcc6:	441c      	add	r4, r3
 800bcc8:	2c00      	cmp	r4, #0
 800bcca:	f340 8096 	ble.w	800bdfa <_strtod_l+0x53a>
 800bcce:	f014 030f 	ands.w	r3, r4, #15
 800bcd2:	d00a      	beq.n	800bcea <_strtod_l+0x42a>
 800bcd4:	495e      	ldr	r1, [pc, #376]	@ (800be50 <_strtod_l+0x590>)
 800bcd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcda:	4652      	mov	r2, sl
 800bcdc:	465b      	mov	r3, fp
 800bcde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce2:	f7f4 fc61 	bl	80005a8 <__aeabi_dmul>
 800bce6:	4682      	mov	sl, r0
 800bce8:	468b      	mov	fp, r1
 800bcea:	f034 040f 	bics.w	r4, r4, #15
 800bcee:	d073      	beq.n	800bdd8 <_strtod_l+0x518>
 800bcf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bcf4:	dd48      	ble.n	800bd88 <_strtod_l+0x4c8>
 800bcf6:	2400      	movs	r4, #0
 800bcf8:	46a0      	mov	r8, r4
 800bcfa:	940a      	str	r4, [sp, #40]	@ 0x28
 800bcfc:	46a1      	mov	r9, r4
 800bcfe:	9a05      	ldr	r2, [sp, #20]
 800bd00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be58 <_strtod_l+0x598>
 800bd04:	2322      	movs	r3, #34	@ 0x22
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	f04f 0a00 	mov.w	sl, #0
 800bd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f43f ae0f 	beq.w	800b932 <_strtod_l+0x72>
 800bd14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	f7ff f942 	bl	800afa0 <_Bfree>
 800bd1c:	9805      	ldr	r0, [sp, #20]
 800bd1e:	4649      	mov	r1, r9
 800bd20:	f7ff f93e 	bl	800afa0 <_Bfree>
 800bd24:	9805      	ldr	r0, [sp, #20]
 800bd26:	4641      	mov	r1, r8
 800bd28:	f7ff f93a 	bl	800afa0 <_Bfree>
 800bd2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd2e:	9805      	ldr	r0, [sp, #20]
 800bd30:	f7ff f936 	bl	800afa0 <_Bfree>
 800bd34:	9805      	ldr	r0, [sp, #20]
 800bd36:	4621      	mov	r1, r4
 800bd38:	f7ff f932 	bl	800afa0 <_Bfree>
 800bd3c:	e5f9      	b.n	800b932 <_strtod_l+0x72>
 800bd3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd44:	4293      	cmp	r3, r2
 800bd46:	dbbc      	blt.n	800bcc2 <_strtod_l+0x402>
 800bd48:	4c41      	ldr	r4, [pc, #260]	@ (800be50 <_strtod_l+0x590>)
 800bd4a:	f1c5 050f 	rsb	r5, r5, #15
 800bd4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd52:	4652      	mov	r2, sl
 800bd54:	465b      	mov	r3, fp
 800bd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd5a:	f7f4 fc25 	bl	80005a8 <__aeabi_dmul>
 800bd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd60:	1b5d      	subs	r5, r3, r5
 800bd62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd6a:	e78f      	b.n	800bc8c <_strtod_l+0x3cc>
 800bd6c:	3316      	adds	r3, #22
 800bd6e:	dba8      	blt.n	800bcc2 <_strtod_l+0x402>
 800bd70:	4b37      	ldr	r3, [pc, #220]	@ (800be50 <_strtod_l+0x590>)
 800bd72:	eba9 0808 	sub.w	r8, r9, r8
 800bd76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bd7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bd7e:	4650      	mov	r0, sl
 800bd80:	4659      	mov	r1, fp
 800bd82:	f7f4 fd3b 	bl	80007fc <__aeabi_ddiv>
 800bd86:	e783      	b.n	800bc90 <_strtod_l+0x3d0>
 800bd88:	4b32      	ldr	r3, [pc, #200]	@ (800be54 <_strtod_l+0x594>)
 800bd8a:	9308      	str	r3, [sp, #32]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	1124      	asrs	r4, r4, #4
 800bd90:	4650      	mov	r0, sl
 800bd92:	4659      	mov	r1, fp
 800bd94:	461e      	mov	r6, r3
 800bd96:	2c01      	cmp	r4, #1
 800bd98:	dc21      	bgt.n	800bdde <_strtod_l+0x51e>
 800bd9a:	b10b      	cbz	r3, 800bda0 <_strtod_l+0x4e0>
 800bd9c:	4682      	mov	sl, r0
 800bd9e:	468b      	mov	fp, r1
 800bda0:	492c      	ldr	r1, [pc, #176]	@ (800be54 <_strtod_l+0x594>)
 800bda2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bda6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bdaa:	4652      	mov	r2, sl
 800bdac:	465b      	mov	r3, fp
 800bdae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb2:	f7f4 fbf9 	bl	80005a8 <__aeabi_dmul>
 800bdb6:	4b28      	ldr	r3, [pc, #160]	@ (800be58 <_strtod_l+0x598>)
 800bdb8:	460a      	mov	r2, r1
 800bdba:	400b      	ands	r3, r1
 800bdbc:	4927      	ldr	r1, [pc, #156]	@ (800be5c <_strtod_l+0x59c>)
 800bdbe:	428b      	cmp	r3, r1
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	d898      	bhi.n	800bcf6 <_strtod_l+0x436>
 800bdc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bdc8:	428b      	cmp	r3, r1
 800bdca:	bf86      	itte	hi
 800bdcc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800be60 <_strtod_l+0x5a0>
 800bdd0:	f04f 3aff 	movhi.w	sl, #4294967295
 800bdd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9308      	str	r3, [sp, #32]
 800bddc:	e07a      	b.n	800bed4 <_strtod_l+0x614>
 800bdde:	07e2      	lsls	r2, r4, #31
 800bde0:	d505      	bpl.n	800bdee <_strtod_l+0x52e>
 800bde2:	9b08      	ldr	r3, [sp, #32]
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f7f4 fbde 	bl	80005a8 <__aeabi_dmul>
 800bdec:	2301      	movs	r3, #1
 800bdee:	9a08      	ldr	r2, [sp, #32]
 800bdf0:	3208      	adds	r2, #8
 800bdf2:	3601      	adds	r6, #1
 800bdf4:	1064      	asrs	r4, r4, #1
 800bdf6:	9208      	str	r2, [sp, #32]
 800bdf8:	e7cd      	b.n	800bd96 <_strtod_l+0x4d6>
 800bdfa:	d0ed      	beq.n	800bdd8 <_strtod_l+0x518>
 800bdfc:	4264      	negs	r4, r4
 800bdfe:	f014 020f 	ands.w	r2, r4, #15
 800be02:	d00a      	beq.n	800be1a <_strtod_l+0x55a>
 800be04:	4b12      	ldr	r3, [pc, #72]	@ (800be50 <_strtod_l+0x590>)
 800be06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be0a:	4650      	mov	r0, sl
 800be0c:	4659      	mov	r1, fp
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 fcf3 	bl	80007fc <__aeabi_ddiv>
 800be16:	4682      	mov	sl, r0
 800be18:	468b      	mov	fp, r1
 800be1a:	1124      	asrs	r4, r4, #4
 800be1c:	d0dc      	beq.n	800bdd8 <_strtod_l+0x518>
 800be1e:	2c1f      	cmp	r4, #31
 800be20:	dd20      	ble.n	800be64 <_strtod_l+0x5a4>
 800be22:	2400      	movs	r4, #0
 800be24:	46a0      	mov	r8, r4
 800be26:	940a      	str	r4, [sp, #40]	@ 0x28
 800be28:	46a1      	mov	r9, r4
 800be2a:	9a05      	ldr	r2, [sp, #20]
 800be2c:	2322      	movs	r3, #34	@ 0x22
 800be2e:	f04f 0a00 	mov.w	sl, #0
 800be32:	f04f 0b00 	mov.w	fp, #0
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	e768      	b.n	800bd0c <_strtod_l+0x44c>
 800be3a:	bf00      	nop
 800be3c:	0800da7d 	.word	0x0800da7d
 800be40:	0800dc94 	.word	0x0800dc94
 800be44:	0800da75 	.word	0x0800da75
 800be48:	0800daac 	.word	0x0800daac
 800be4c:	0800de3d 	.word	0x0800de3d
 800be50:	0800dbc8 	.word	0x0800dbc8
 800be54:	0800dba0 	.word	0x0800dba0
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	7ca00000 	.word	0x7ca00000
 800be60:	7fefffff 	.word	0x7fefffff
 800be64:	f014 0310 	ands.w	r3, r4, #16
 800be68:	bf18      	it	ne
 800be6a:	236a      	movne	r3, #106	@ 0x6a
 800be6c:	4ea9      	ldr	r6, [pc, #676]	@ (800c114 <_strtod_l+0x854>)
 800be6e:	9308      	str	r3, [sp, #32]
 800be70:	4650      	mov	r0, sl
 800be72:	4659      	mov	r1, fp
 800be74:	2300      	movs	r3, #0
 800be76:	07e2      	lsls	r2, r4, #31
 800be78:	d504      	bpl.n	800be84 <_strtod_l+0x5c4>
 800be7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be7e:	f7f4 fb93 	bl	80005a8 <__aeabi_dmul>
 800be82:	2301      	movs	r3, #1
 800be84:	1064      	asrs	r4, r4, #1
 800be86:	f106 0608 	add.w	r6, r6, #8
 800be8a:	d1f4      	bne.n	800be76 <_strtod_l+0x5b6>
 800be8c:	b10b      	cbz	r3, 800be92 <_strtod_l+0x5d2>
 800be8e:	4682      	mov	sl, r0
 800be90:	468b      	mov	fp, r1
 800be92:	9b08      	ldr	r3, [sp, #32]
 800be94:	b1b3      	cbz	r3, 800bec4 <_strtod_l+0x604>
 800be96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	4659      	mov	r1, fp
 800bea2:	dd0f      	ble.n	800bec4 <_strtod_l+0x604>
 800bea4:	2b1f      	cmp	r3, #31
 800bea6:	dd55      	ble.n	800bf54 <_strtod_l+0x694>
 800bea8:	2b34      	cmp	r3, #52	@ 0x34
 800beaa:	bfde      	ittt	le
 800beac:	f04f 33ff 	movle.w	r3, #4294967295
 800beb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800beb4:	4093      	lslle	r3, r2
 800beb6:	f04f 0a00 	mov.w	sl, #0
 800beba:	bfcc      	ite	gt
 800bebc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bec0:	ea03 0b01 	andle.w	fp, r3, r1
 800bec4:	2200      	movs	r2, #0
 800bec6:	2300      	movs	r3, #0
 800bec8:	4650      	mov	r0, sl
 800beca:	4659      	mov	r1, fp
 800becc:	f7f4 fdd4 	bl	8000a78 <__aeabi_dcmpeq>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1a6      	bne.n	800be22 <_strtod_l+0x562>
 800bed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800beda:	9805      	ldr	r0, [sp, #20]
 800bedc:	462b      	mov	r3, r5
 800bede:	463a      	mov	r2, r7
 800bee0:	f7ff f8c6 	bl	800b070 <__s2b>
 800bee4:	900a      	str	r0, [sp, #40]	@ 0x28
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f af05 	beq.w	800bcf6 <_strtod_l+0x436>
 800beec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beee:	2a00      	cmp	r2, #0
 800bef0:	eba9 0308 	sub.w	r3, r9, r8
 800bef4:	bfa8      	it	ge
 800bef6:	2300      	movge	r3, #0
 800bef8:	9312      	str	r3, [sp, #72]	@ 0x48
 800befa:	2400      	movs	r4, #0
 800befc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf00:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf02:	46a0      	mov	r8, r4
 800bf04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf06:	9805      	ldr	r0, [sp, #20]
 800bf08:	6859      	ldr	r1, [r3, #4]
 800bf0a:	f7ff f809 	bl	800af20 <_Balloc>
 800bf0e:	4681      	mov	r9, r0
 800bf10:	2800      	cmp	r0, #0
 800bf12:	f43f aef4 	beq.w	800bcfe <_strtod_l+0x43e>
 800bf16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	3202      	adds	r2, #2
 800bf1c:	f103 010c 	add.w	r1, r3, #12
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	300c      	adds	r0, #12
 800bf24:	f7fe f89b 	bl	800a05e <memcpy>
 800bf28:	ec4b ab10 	vmov	d0, sl, fp
 800bf2c:	9805      	ldr	r0, [sp, #20]
 800bf2e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf30:	a91b      	add	r1, sp, #108	@ 0x6c
 800bf32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf36:	f7ff fbd7 	bl	800b6e8 <__d2b>
 800bf3a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	f43f aede 	beq.w	800bcfe <_strtod_l+0x43e>
 800bf42:	9805      	ldr	r0, [sp, #20]
 800bf44:	2101      	movs	r1, #1
 800bf46:	f7ff f929 	bl	800b19c <__i2b>
 800bf4a:	4680      	mov	r8, r0
 800bf4c:	b948      	cbnz	r0, 800bf62 <_strtod_l+0x6a2>
 800bf4e:	f04f 0800 	mov.w	r8, #0
 800bf52:	e6d4      	b.n	800bcfe <_strtod_l+0x43e>
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295
 800bf58:	fa02 f303 	lsl.w	r3, r2, r3
 800bf5c:	ea03 0a0a 	and.w	sl, r3, sl
 800bf60:	e7b0      	b.n	800bec4 <_strtod_l+0x604>
 800bf62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bf64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	bfab      	itete	ge
 800bf6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bf6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bf6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bf70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bf72:	bfac      	ite	ge
 800bf74:	18ef      	addge	r7, r5, r3
 800bf76:	1b5e      	sublt	r6, r3, r5
 800bf78:	9b08      	ldr	r3, [sp, #32]
 800bf7a:	1aed      	subs	r5, r5, r3
 800bf7c:	4415      	add	r5, r2
 800bf7e:	4b66      	ldr	r3, [pc, #408]	@ (800c118 <_strtod_l+0x858>)
 800bf80:	3d01      	subs	r5, #1
 800bf82:	429d      	cmp	r5, r3
 800bf84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bf88:	da50      	bge.n	800c02c <_strtod_l+0x76c>
 800bf8a:	1b5b      	subs	r3, r3, r5
 800bf8c:	2b1f      	cmp	r3, #31
 800bf8e:	eba2 0203 	sub.w	r2, r2, r3
 800bf92:	f04f 0101 	mov.w	r1, #1
 800bf96:	dc3d      	bgt.n	800c014 <_strtod_l+0x754>
 800bf98:	fa01 f303 	lsl.w	r3, r1, r3
 800bf9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfa2:	18bd      	adds	r5, r7, r2
 800bfa4:	9b08      	ldr	r3, [sp, #32]
 800bfa6:	42af      	cmp	r7, r5
 800bfa8:	4416      	add	r6, r2
 800bfaa:	441e      	add	r6, r3
 800bfac:	463b      	mov	r3, r7
 800bfae:	bfa8      	it	ge
 800bfb0:	462b      	movge	r3, r5
 800bfb2:	42b3      	cmp	r3, r6
 800bfb4:	bfa8      	it	ge
 800bfb6:	4633      	movge	r3, r6
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	bfc2      	ittt	gt
 800bfbc:	1aed      	subgt	r5, r5, r3
 800bfbe:	1af6      	subgt	r6, r6, r3
 800bfc0:	1aff      	subgt	r7, r7, r3
 800bfc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd16      	ble.n	800bff6 <_strtod_l+0x736>
 800bfc8:	4641      	mov	r1, r8
 800bfca:	9805      	ldr	r0, [sp, #20]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	f7ff f9a5 	bl	800b31c <__pow5mult>
 800bfd2:	4680      	mov	r8, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d0ba      	beq.n	800bf4e <_strtod_l+0x68e>
 800bfd8:	4601      	mov	r1, r0
 800bfda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bfdc:	9805      	ldr	r0, [sp, #20]
 800bfde:	f7ff f8f3 	bl	800b1c8 <__multiply>
 800bfe2:	900e      	str	r0, [sp, #56]	@ 0x38
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f43f ae8a 	beq.w	800bcfe <_strtod_l+0x43e>
 800bfea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bfec:	9805      	ldr	r0, [sp, #20]
 800bfee:	f7fe ffd7 	bl	800afa0 <_Bfree>
 800bff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bff4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	dc1d      	bgt.n	800c036 <_strtod_l+0x776>
 800bffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dd23      	ble.n	800c048 <_strtod_l+0x788>
 800c000:	4649      	mov	r1, r9
 800c002:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c004:	9805      	ldr	r0, [sp, #20]
 800c006:	f7ff f989 	bl	800b31c <__pow5mult>
 800c00a:	4681      	mov	r9, r0
 800c00c:	b9e0      	cbnz	r0, 800c048 <_strtod_l+0x788>
 800c00e:	f04f 0900 	mov.w	r9, #0
 800c012:	e674      	b.n	800bcfe <_strtod_l+0x43e>
 800c014:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c018:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c01c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c020:	35e2      	adds	r5, #226	@ 0xe2
 800c022:	fa01 f305 	lsl.w	r3, r1, r5
 800c026:	9310      	str	r3, [sp, #64]	@ 0x40
 800c028:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c02a:	e7ba      	b.n	800bfa2 <_strtod_l+0x6e2>
 800c02c:	2300      	movs	r3, #0
 800c02e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c030:	2301      	movs	r3, #1
 800c032:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c034:	e7b5      	b.n	800bfa2 <_strtod_l+0x6e2>
 800c036:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c038:	9805      	ldr	r0, [sp, #20]
 800c03a:	462a      	mov	r2, r5
 800c03c:	f7ff f9c8 	bl	800b3d0 <__lshift>
 800c040:	901a      	str	r0, [sp, #104]	@ 0x68
 800c042:	2800      	cmp	r0, #0
 800c044:	d1d9      	bne.n	800bffa <_strtod_l+0x73a>
 800c046:	e65a      	b.n	800bcfe <_strtod_l+0x43e>
 800c048:	2e00      	cmp	r6, #0
 800c04a:	dd07      	ble.n	800c05c <_strtod_l+0x79c>
 800c04c:	4649      	mov	r1, r9
 800c04e:	9805      	ldr	r0, [sp, #20]
 800c050:	4632      	mov	r2, r6
 800c052:	f7ff f9bd 	bl	800b3d0 <__lshift>
 800c056:	4681      	mov	r9, r0
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0d8      	beq.n	800c00e <_strtod_l+0x74e>
 800c05c:	2f00      	cmp	r7, #0
 800c05e:	dd08      	ble.n	800c072 <_strtod_l+0x7b2>
 800c060:	4641      	mov	r1, r8
 800c062:	9805      	ldr	r0, [sp, #20]
 800c064:	463a      	mov	r2, r7
 800c066:	f7ff f9b3 	bl	800b3d0 <__lshift>
 800c06a:	4680      	mov	r8, r0
 800c06c:	2800      	cmp	r0, #0
 800c06e:	f43f ae46 	beq.w	800bcfe <_strtod_l+0x43e>
 800c072:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c074:	9805      	ldr	r0, [sp, #20]
 800c076:	464a      	mov	r2, r9
 800c078:	f7ff fa32 	bl	800b4e0 <__mdiff>
 800c07c:	4604      	mov	r4, r0
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f ae3d 	beq.w	800bcfe <_strtod_l+0x43e>
 800c084:	68c3      	ldr	r3, [r0, #12]
 800c086:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c088:	2300      	movs	r3, #0
 800c08a:	60c3      	str	r3, [r0, #12]
 800c08c:	4641      	mov	r1, r8
 800c08e:	f7ff fa0b 	bl	800b4a8 <__mcmp>
 800c092:	2800      	cmp	r0, #0
 800c094:	da46      	bge.n	800c124 <_strtod_l+0x864>
 800c096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c098:	ea53 030a 	orrs.w	r3, r3, sl
 800c09c:	d16c      	bne.n	800c178 <_strtod_l+0x8b8>
 800c09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d168      	bne.n	800c178 <_strtod_l+0x8b8>
 800c0a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0aa:	0d1b      	lsrs	r3, r3, #20
 800c0ac:	051b      	lsls	r3, r3, #20
 800c0ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0b2:	d961      	bls.n	800c178 <_strtod_l+0x8b8>
 800c0b4:	6963      	ldr	r3, [r4, #20]
 800c0b6:	b913      	cbnz	r3, 800c0be <_strtod_l+0x7fe>
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	dd5c      	ble.n	800c178 <_strtod_l+0x8b8>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	9805      	ldr	r0, [sp, #20]
 800c0c4:	f7ff f984 	bl	800b3d0 <__lshift>
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	f7ff f9ec 	bl	800b4a8 <__mcmp>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	dd51      	ble.n	800c178 <_strtod_l+0x8b8>
 800c0d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0d8:	9a08      	ldr	r2, [sp, #32]
 800c0da:	0d1b      	lsrs	r3, r3, #20
 800c0dc:	051b      	lsls	r3, r3, #20
 800c0de:	2a00      	cmp	r2, #0
 800c0e0:	d06b      	beq.n	800c1ba <_strtod_l+0x8fa>
 800c0e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0e6:	d868      	bhi.n	800c1ba <_strtod_l+0x8fa>
 800c0e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c0ec:	f67f ae9d 	bls.w	800be2a <_strtod_l+0x56a>
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c11c <_strtod_l+0x85c>)
 800c0f2:	4650      	mov	r0, sl
 800c0f4:	4659      	mov	r1, fp
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f7f4 fa56 	bl	80005a8 <__aeabi_dmul>
 800c0fc:	4b08      	ldr	r3, [pc, #32]	@ (800c120 <_strtod_l+0x860>)
 800c0fe:	400b      	ands	r3, r1
 800c100:	4682      	mov	sl, r0
 800c102:	468b      	mov	fp, r1
 800c104:	2b00      	cmp	r3, #0
 800c106:	f47f ae05 	bne.w	800bd14 <_strtod_l+0x454>
 800c10a:	9a05      	ldr	r2, [sp, #20]
 800c10c:	2322      	movs	r3, #34	@ 0x22
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	e600      	b.n	800bd14 <_strtod_l+0x454>
 800c112:	bf00      	nop
 800c114:	0800dcc0 	.word	0x0800dcc0
 800c118:	fffffc02 	.word	0xfffffc02
 800c11c:	39500000 	.word	0x39500000
 800c120:	7ff00000 	.word	0x7ff00000
 800c124:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c128:	d165      	bne.n	800c1f6 <_strtod_l+0x936>
 800c12a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c12c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c130:	b35a      	cbz	r2, 800c18a <_strtod_l+0x8ca>
 800c132:	4a9f      	ldr	r2, [pc, #636]	@ (800c3b0 <_strtod_l+0xaf0>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d12b      	bne.n	800c190 <_strtod_l+0x8d0>
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	4651      	mov	r1, sl
 800c13c:	b303      	cbz	r3, 800c180 <_strtod_l+0x8c0>
 800c13e:	4b9d      	ldr	r3, [pc, #628]	@ (800c3b4 <_strtod_l+0xaf4>)
 800c140:	465a      	mov	r2, fp
 800c142:	4013      	ands	r3, r2
 800c144:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c148:	f04f 32ff 	mov.w	r2, #4294967295
 800c14c:	d81b      	bhi.n	800c186 <_strtod_l+0x8c6>
 800c14e:	0d1b      	lsrs	r3, r3, #20
 800c150:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c154:	fa02 f303 	lsl.w	r3, r2, r3
 800c158:	4299      	cmp	r1, r3
 800c15a:	d119      	bne.n	800c190 <_strtod_l+0x8d0>
 800c15c:	4b96      	ldr	r3, [pc, #600]	@ (800c3b8 <_strtod_l+0xaf8>)
 800c15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c160:	429a      	cmp	r2, r3
 800c162:	d102      	bne.n	800c16a <_strtod_l+0x8aa>
 800c164:	3101      	adds	r1, #1
 800c166:	f43f adca 	beq.w	800bcfe <_strtod_l+0x43e>
 800c16a:	4b92      	ldr	r3, [pc, #584]	@ (800c3b4 <_strtod_l+0xaf4>)
 800c16c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c16e:	401a      	ands	r2, r3
 800c170:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c174:	f04f 0a00 	mov.w	sl, #0
 800c178:	9b08      	ldr	r3, [sp, #32]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1b8      	bne.n	800c0f0 <_strtod_l+0x830>
 800c17e:	e5c9      	b.n	800bd14 <_strtod_l+0x454>
 800c180:	f04f 33ff 	mov.w	r3, #4294967295
 800c184:	e7e8      	b.n	800c158 <_strtod_l+0x898>
 800c186:	4613      	mov	r3, r2
 800c188:	e7e6      	b.n	800c158 <_strtod_l+0x898>
 800c18a:	ea53 030a 	orrs.w	r3, r3, sl
 800c18e:	d0a1      	beq.n	800c0d4 <_strtod_l+0x814>
 800c190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c192:	b1db      	cbz	r3, 800c1cc <_strtod_l+0x90c>
 800c194:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c196:	4213      	tst	r3, r2
 800c198:	d0ee      	beq.n	800c178 <_strtod_l+0x8b8>
 800c19a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c19c:	9a08      	ldr	r2, [sp, #32]
 800c19e:	4650      	mov	r0, sl
 800c1a0:	4659      	mov	r1, fp
 800c1a2:	b1bb      	cbz	r3, 800c1d4 <_strtod_l+0x914>
 800c1a4:	f7ff fb6e 	bl	800b884 <sulp>
 800c1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ac:	ec53 2b10 	vmov	r2, r3, d0
 800c1b0:	f7f4 f844 	bl	800023c <__adddf3>
 800c1b4:	4682      	mov	sl, r0
 800c1b6:	468b      	mov	fp, r1
 800c1b8:	e7de      	b.n	800c178 <_strtod_l+0x8b8>
 800c1ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c1be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c1c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c1c6:	f04f 3aff 	mov.w	sl, #4294967295
 800c1ca:	e7d5      	b.n	800c178 <_strtod_l+0x8b8>
 800c1cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c1ce:	ea13 0f0a 	tst.w	r3, sl
 800c1d2:	e7e1      	b.n	800c198 <_strtod_l+0x8d8>
 800c1d4:	f7ff fb56 	bl	800b884 <sulp>
 800c1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1dc:	ec53 2b10 	vmov	r2, r3, d0
 800c1e0:	f7f4 f82a 	bl	8000238 <__aeabi_dsub>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	468b      	mov	fp, r1
 800c1ec:	f7f4 fc44 	bl	8000a78 <__aeabi_dcmpeq>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d0c1      	beq.n	800c178 <_strtod_l+0x8b8>
 800c1f4:	e619      	b.n	800be2a <_strtod_l+0x56a>
 800c1f6:	4641      	mov	r1, r8
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f7ff facd 	bl	800b798 <__ratio>
 800c1fe:	ec57 6b10 	vmov	r6, r7, d0
 800c202:	2200      	movs	r2, #0
 800c204:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 fc48 	bl	8000aa0 <__aeabi_dcmple>
 800c210:	2800      	cmp	r0, #0
 800c212:	d06f      	beq.n	800c2f4 <_strtod_l+0xa34>
 800c214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c216:	2b00      	cmp	r3, #0
 800c218:	d17a      	bne.n	800c310 <_strtod_l+0xa50>
 800c21a:	f1ba 0f00 	cmp.w	sl, #0
 800c21e:	d158      	bne.n	800c2d2 <_strtod_l+0xa12>
 800c220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c226:	2b00      	cmp	r3, #0
 800c228:	d15a      	bne.n	800c2e0 <_strtod_l+0xa20>
 800c22a:	4b64      	ldr	r3, [pc, #400]	@ (800c3bc <_strtod_l+0xafc>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	4630      	mov	r0, r6
 800c230:	4639      	mov	r1, r7
 800c232:	f7f4 fc2b 	bl	8000a8c <__aeabi_dcmplt>
 800c236:	2800      	cmp	r0, #0
 800c238:	d159      	bne.n	800c2ee <_strtod_l+0xa2e>
 800c23a:	4630      	mov	r0, r6
 800c23c:	4639      	mov	r1, r7
 800c23e:	4b60      	ldr	r3, [pc, #384]	@ (800c3c0 <_strtod_l+0xb00>)
 800c240:	2200      	movs	r2, #0
 800c242:	f7f4 f9b1 	bl	80005a8 <__aeabi_dmul>
 800c246:	4606      	mov	r6, r0
 800c248:	460f      	mov	r7, r1
 800c24a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c24e:	9606      	str	r6, [sp, #24]
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c256:	4d57      	ldr	r5, [pc, #348]	@ (800c3b4 <_strtod_l+0xaf4>)
 800c258:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c25e:	401d      	ands	r5, r3
 800c260:	4b58      	ldr	r3, [pc, #352]	@ (800c3c4 <_strtod_l+0xb04>)
 800c262:	429d      	cmp	r5, r3
 800c264:	f040 80b2 	bne.w	800c3cc <_strtod_l+0xb0c>
 800c268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c26a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c26e:	ec4b ab10 	vmov	d0, sl, fp
 800c272:	f7ff f9c9 	bl	800b608 <__ulp>
 800c276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c27a:	ec51 0b10 	vmov	r0, r1, d0
 800c27e:	f7f4 f993 	bl	80005a8 <__aeabi_dmul>
 800c282:	4652      	mov	r2, sl
 800c284:	465b      	mov	r3, fp
 800c286:	f7f3 ffd9 	bl	800023c <__adddf3>
 800c28a:	460b      	mov	r3, r1
 800c28c:	4949      	ldr	r1, [pc, #292]	@ (800c3b4 <_strtod_l+0xaf4>)
 800c28e:	4a4e      	ldr	r2, [pc, #312]	@ (800c3c8 <_strtod_l+0xb08>)
 800c290:	4019      	ands	r1, r3
 800c292:	4291      	cmp	r1, r2
 800c294:	4682      	mov	sl, r0
 800c296:	d942      	bls.n	800c31e <_strtod_l+0xa5e>
 800c298:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c29a:	4b47      	ldr	r3, [pc, #284]	@ (800c3b8 <_strtod_l+0xaf8>)
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d103      	bne.n	800c2a8 <_strtod_l+0x9e8>
 800c2a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	f43f ad2b 	beq.w	800bcfe <_strtod_l+0x43e>
 800c2a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c3b8 <_strtod_l+0xaf8>
 800c2ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c2b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2b2:	9805      	ldr	r0, [sp, #20]
 800c2b4:	f7fe fe74 	bl	800afa0 <_Bfree>
 800c2b8:	9805      	ldr	r0, [sp, #20]
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	f7fe fe70 	bl	800afa0 <_Bfree>
 800c2c0:	9805      	ldr	r0, [sp, #20]
 800c2c2:	4641      	mov	r1, r8
 800c2c4:	f7fe fe6c 	bl	800afa0 <_Bfree>
 800c2c8:	9805      	ldr	r0, [sp, #20]
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	f7fe fe68 	bl	800afa0 <_Bfree>
 800c2d0:	e618      	b.n	800bf04 <_strtod_l+0x644>
 800c2d2:	f1ba 0f01 	cmp.w	sl, #1
 800c2d6:	d103      	bne.n	800c2e0 <_strtod_l+0xa20>
 800c2d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f43f ada5 	beq.w	800be2a <_strtod_l+0x56a>
 800c2e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c390 <_strtod_l+0xad0>
 800c2e4:	4f35      	ldr	r7, [pc, #212]	@ (800c3bc <_strtod_l+0xafc>)
 800c2e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	e7b1      	b.n	800c252 <_strtod_l+0x992>
 800c2ee:	4f34      	ldr	r7, [pc, #208]	@ (800c3c0 <_strtod_l+0xb00>)
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	e7aa      	b.n	800c24a <_strtod_l+0x98a>
 800c2f4:	4b32      	ldr	r3, [pc, #200]	@ (800c3c0 <_strtod_l+0xb00>)
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f7f4 f954 	bl	80005a8 <__aeabi_dmul>
 800c300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c302:	4606      	mov	r6, r0
 800c304:	460f      	mov	r7, r1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d09f      	beq.n	800c24a <_strtod_l+0x98a>
 800c30a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c30e:	e7a0      	b.n	800c252 <_strtod_l+0x992>
 800c310:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c398 <_strtod_l+0xad8>
 800c314:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c318:	ec57 6b17 	vmov	r6, r7, d7
 800c31c:	e799      	b.n	800c252 <_strtod_l+0x992>
 800c31e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1c1      	bne.n	800c2b0 <_strtod_l+0x9f0>
 800c32c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c330:	0d1b      	lsrs	r3, r3, #20
 800c332:	051b      	lsls	r3, r3, #20
 800c334:	429d      	cmp	r5, r3
 800c336:	d1bb      	bne.n	800c2b0 <_strtod_l+0x9f0>
 800c338:	4630      	mov	r0, r6
 800c33a:	4639      	mov	r1, r7
 800c33c:	f7f4 fc94 	bl	8000c68 <__aeabi_d2lz>
 800c340:	f7f4 f904 	bl	800054c <__aeabi_l2d>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f3 ff74 	bl	8000238 <__aeabi_dsub>
 800c350:	460b      	mov	r3, r1
 800c352:	4602      	mov	r2, r0
 800c354:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c358:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c35e:	ea46 060a 	orr.w	r6, r6, sl
 800c362:	431e      	orrs	r6, r3
 800c364:	d06f      	beq.n	800c446 <_strtod_l+0xb86>
 800c366:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3a0 <_strtod_l+0xae0>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f4 fb8e 	bl	8000a8c <__aeabi_dcmplt>
 800c370:	2800      	cmp	r0, #0
 800c372:	f47f accf 	bne.w	800bd14 <_strtod_l+0x454>
 800c376:	a30c      	add	r3, pc, #48	@ (adr r3, 800c3a8 <_strtod_l+0xae8>)
 800c378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c380:	f7f4 fba2 	bl	8000ac8 <__aeabi_dcmpgt>
 800c384:	2800      	cmp	r0, #0
 800c386:	d093      	beq.n	800c2b0 <_strtod_l+0x9f0>
 800c388:	e4c4      	b.n	800bd14 <_strtod_l+0x454>
 800c38a:	bf00      	nop
 800c38c:	f3af 8000 	nop.w
 800c390:	00000000 	.word	0x00000000
 800c394:	bff00000 	.word	0xbff00000
 800c398:	00000000 	.word	0x00000000
 800c39c:	3ff00000 	.word	0x3ff00000
 800c3a0:	94a03595 	.word	0x94a03595
 800c3a4:	3fdfffff 	.word	0x3fdfffff
 800c3a8:	35afe535 	.word	0x35afe535
 800c3ac:	3fe00000 	.word	0x3fe00000
 800c3b0:	000fffff 	.word	0x000fffff
 800c3b4:	7ff00000 	.word	0x7ff00000
 800c3b8:	7fefffff 	.word	0x7fefffff
 800c3bc:	3ff00000 	.word	0x3ff00000
 800c3c0:	3fe00000 	.word	0x3fe00000
 800c3c4:	7fe00000 	.word	0x7fe00000
 800c3c8:	7c9fffff 	.word	0x7c9fffff
 800c3cc:	9b08      	ldr	r3, [sp, #32]
 800c3ce:	b323      	cbz	r3, 800c41a <_strtod_l+0xb5a>
 800c3d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c3d4:	d821      	bhi.n	800c41a <_strtod_l+0xb5a>
 800c3d6:	a328      	add	r3, pc, #160	@ (adr r3, 800c478 <_strtod_l+0xbb8>)
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	4630      	mov	r0, r6
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f4 fb5e 	bl	8000aa0 <__aeabi_dcmple>
 800c3e4:	b1a0      	cbz	r0, 800c410 <_strtod_l+0xb50>
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	f7f4 fbb5 	bl	8000b58 <__aeabi_d2uiz>
 800c3ee:	2801      	cmp	r0, #1
 800c3f0:	bf38      	it	cc
 800c3f2:	2001      	movcc	r0, #1
 800c3f4:	f7f4 f85e 	bl	80004b4 <__aeabi_ui2d>
 800c3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	b9fb      	cbnz	r3, 800c440 <_strtod_l+0xb80>
 800c400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c404:	9014      	str	r0, [sp, #80]	@ 0x50
 800c406:	9315      	str	r3, [sp, #84]	@ 0x54
 800c408:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c40c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c412:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c416:	1b5b      	subs	r3, r3, r5
 800c418:	9311      	str	r3, [sp, #68]	@ 0x44
 800c41a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c41e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c422:	f7ff f8f1 	bl	800b608 <__ulp>
 800c426:	4650      	mov	r0, sl
 800c428:	ec53 2b10 	vmov	r2, r3, d0
 800c42c:	4659      	mov	r1, fp
 800c42e:	f7f4 f8bb 	bl	80005a8 <__aeabi_dmul>
 800c432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c436:	f7f3 ff01 	bl	800023c <__adddf3>
 800c43a:	4682      	mov	sl, r0
 800c43c:	468b      	mov	fp, r1
 800c43e:	e770      	b.n	800c322 <_strtod_l+0xa62>
 800c440:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c444:	e7e0      	b.n	800c408 <_strtod_l+0xb48>
 800c446:	a30e      	add	r3, pc, #56	@ (adr r3, 800c480 <_strtod_l+0xbc0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7f4 fb1e 	bl	8000a8c <__aeabi_dcmplt>
 800c450:	e798      	b.n	800c384 <_strtod_l+0xac4>
 800c452:	2300      	movs	r3, #0
 800c454:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c456:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c45a:	6013      	str	r3, [r2, #0]
 800c45c:	f7ff ba6d 	b.w	800b93a <_strtod_l+0x7a>
 800c460:	2a65      	cmp	r2, #101	@ 0x65
 800c462:	f43f ab66 	beq.w	800bb32 <_strtod_l+0x272>
 800c466:	2a45      	cmp	r2, #69	@ 0x45
 800c468:	f43f ab63 	beq.w	800bb32 <_strtod_l+0x272>
 800c46c:	2301      	movs	r3, #1
 800c46e:	f7ff bb9e 	b.w	800bbae <_strtod_l+0x2ee>
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
 800c478:	ffc00000 	.word	0xffc00000
 800c47c:	41dfffff 	.word	0x41dfffff
 800c480:	94a03595 	.word	0x94a03595
 800c484:	3fcfffff 	.word	0x3fcfffff

0800c488 <_strtod_r>:
 800c488:	4b01      	ldr	r3, [pc, #4]	@ (800c490 <_strtod_r+0x8>)
 800c48a:	f7ff ba19 	b.w	800b8c0 <_strtod_l>
 800c48e:	bf00      	nop
 800c490:	20000084 	.word	0x20000084

0800c494 <_strtol_l.constprop.0>:
 800c494:	2b24      	cmp	r3, #36	@ 0x24
 800c496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c49a:	4686      	mov	lr, r0
 800c49c:	4690      	mov	r8, r2
 800c49e:	d801      	bhi.n	800c4a4 <_strtol_l.constprop.0+0x10>
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d106      	bne.n	800c4b2 <_strtol_l.constprop.0+0x1e>
 800c4a4:	f7fd fdae 	bl	800a004 <__errno>
 800c4a8:	2316      	movs	r3, #22
 800c4aa:	6003      	str	r3, [r0, #0]
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b2:	4834      	ldr	r0, [pc, #208]	@ (800c584 <_strtol_l.constprop.0+0xf0>)
 800c4b4:	460d      	mov	r5, r1
 800c4b6:	462a      	mov	r2, r5
 800c4b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4bc:	5d06      	ldrb	r6, [r0, r4]
 800c4be:	f016 0608 	ands.w	r6, r6, #8
 800c4c2:	d1f8      	bne.n	800c4b6 <_strtol_l.constprop.0+0x22>
 800c4c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c4c6:	d12d      	bne.n	800c524 <_strtol_l.constprop.0+0x90>
 800c4c8:	782c      	ldrb	r4, [r5, #0]
 800c4ca:	2601      	movs	r6, #1
 800c4cc:	1c95      	adds	r5, r2, #2
 800c4ce:	f033 0210 	bics.w	r2, r3, #16
 800c4d2:	d109      	bne.n	800c4e8 <_strtol_l.constprop.0+0x54>
 800c4d4:	2c30      	cmp	r4, #48	@ 0x30
 800c4d6:	d12a      	bne.n	800c52e <_strtol_l.constprop.0+0x9a>
 800c4d8:	782a      	ldrb	r2, [r5, #0]
 800c4da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c4de:	2a58      	cmp	r2, #88	@ 0x58
 800c4e0:	d125      	bne.n	800c52e <_strtol_l.constprop.0+0x9a>
 800c4e2:	786c      	ldrb	r4, [r5, #1]
 800c4e4:	2310      	movs	r3, #16
 800c4e6:	3502      	adds	r5, #2
 800c4e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c4ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	fbbc f9f3 	udiv	r9, ip, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800c4fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c500:	2f09      	cmp	r7, #9
 800c502:	d81b      	bhi.n	800c53c <_strtol_l.constprop.0+0xa8>
 800c504:	463c      	mov	r4, r7
 800c506:	42a3      	cmp	r3, r4
 800c508:	dd27      	ble.n	800c55a <_strtol_l.constprop.0+0xc6>
 800c50a:	1c57      	adds	r7, r2, #1
 800c50c:	d007      	beq.n	800c51e <_strtol_l.constprop.0+0x8a>
 800c50e:	4581      	cmp	r9, r0
 800c510:	d320      	bcc.n	800c554 <_strtol_l.constprop.0+0xc0>
 800c512:	d101      	bne.n	800c518 <_strtol_l.constprop.0+0x84>
 800c514:	45a2      	cmp	sl, r4
 800c516:	db1d      	blt.n	800c554 <_strtol_l.constprop.0+0xc0>
 800c518:	fb00 4003 	mla	r0, r0, r3, r4
 800c51c:	2201      	movs	r2, #1
 800c51e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c522:	e7eb      	b.n	800c4fc <_strtol_l.constprop.0+0x68>
 800c524:	2c2b      	cmp	r4, #43	@ 0x2b
 800c526:	bf04      	itt	eq
 800c528:	782c      	ldrbeq	r4, [r5, #0]
 800c52a:	1c95      	addeq	r5, r2, #2
 800c52c:	e7cf      	b.n	800c4ce <_strtol_l.constprop.0+0x3a>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1da      	bne.n	800c4e8 <_strtol_l.constprop.0+0x54>
 800c532:	2c30      	cmp	r4, #48	@ 0x30
 800c534:	bf0c      	ite	eq
 800c536:	2308      	moveq	r3, #8
 800c538:	230a      	movne	r3, #10
 800c53a:	e7d5      	b.n	800c4e8 <_strtol_l.constprop.0+0x54>
 800c53c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c540:	2f19      	cmp	r7, #25
 800c542:	d801      	bhi.n	800c548 <_strtol_l.constprop.0+0xb4>
 800c544:	3c37      	subs	r4, #55	@ 0x37
 800c546:	e7de      	b.n	800c506 <_strtol_l.constprop.0+0x72>
 800c548:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c54c:	2f19      	cmp	r7, #25
 800c54e:	d804      	bhi.n	800c55a <_strtol_l.constprop.0+0xc6>
 800c550:	3c57      	subs	r4, #87	@ 0x57
 800c552:	e7d8      	b.n	800c506 <_strtol_l.constprop.0+0x72>
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	e7e1      	b.n	800c51e <_strtol_l.constprop.0+0x8a>
 800c55a:	1c53      	adds	r3, r2, #1
 800c55c:	d108      	bne.n	800c570 <_strtol_l.constprop.0+0xdc>
 800c55e:	2322      	movs	r3, #34	@ 0x22
 800c560:	f8ce 3000 	str.w	r3, [lr]
 800c564:	4660      	mov	r0, ip
 800c566:	f1b8 0f00 	cmp.w	r8, #0
 800c56a:	d0a0      	beq.n	800c4ae <_strtol_l.constprop.0+0x1a>
 800c56c:	1e69      	subs	r1, r5, #1
 800c56e:	e006      	b.n	800c57e <_strtol_l.constprop.0+0xea>
 800c570:	b106      	cbz	r6, 800c574 <_strtol_l.constprop.0+0xe0>
 800c572:	4240      	negs	r0, r0
 800c574:	f1b8 0f00 	cmp.w	r8, #0
 800c578:	d099      	beq.n	800c4ae <_strtol_l.constprop.0+0x1a>
 800c57a:	2a00      	cmp	r2, #0
 800c57c:	d1f6      	bne.n	800c56c <_strtol_l.constprop.0+0xd8>
 800c57e:	f8c8 1000 	str.w	r1, [r8]
 800c582:	e794      	b.n	800c4ae <_strtol_l.constprop.0+0x1a>
 800c584:	0800dce9 	.word	0x0800dce9

0800c588 <_strtol_r>:
 800c588:	f7ff bf84 	b.w	800c494 <_strtol_l.constprop.0>

0800c58c <__ssputs_r>:
 800c58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c590:	688e      	ldr	r6, [r1, #8]
 800c592:	461f      	mov	r7, r3
 800c594:	42be      	cmp	r6, r7
 800c596:	680b      	ldr	r3, [r1, #0]
 800c598:	4682      	mov	sl, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4690      	mov	r8, r2
 800c59e:	d82d      	bhi.n	800c5fc <__ssputs_r+0x70>
 800c5a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5a8:	d026      	beq.n	800c5f8 <__ssputs_r+0x6c>
 800c5aa:	6965      	ldr	r5, [r4, #20]
 800c5ac:	6909      	ldr	r1, [r1, #16]
 800c5ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b2:	eba3 0901 	sub.w	r9, r3, r1
 800c5b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5ba:	1c7b      	adds	r3, r7, #1
 800c5bc:	444b      	add	r3, r9
 800c5be:	106d      	asrs	r5, r5, #1
 800c5c0:	429d      	cmp	r5, r3
 800c5c2:	bf38      	it	cc
 800c5c4:	461d      	movcc	r5, r3
 800c5c6:	0553      	lsls	r3, r2, #21
 800c5c8:	d527      	bpl.n	800c61a <__ssputs_r+0x8e>
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7fe fc1c 	bl	800ae08 <_malloc_r>
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	b360      	cbz	r0, 800c62e <__ssputs_r+0xa2>
 800c5d4:	6921      	ldr	r1, [r4, #16]
 800c5d6:	464a      	mov	r2, r9
 800c5d8:	f7fd fd41 	bl	800a05e <memcpy>
 800c5dc:	89a3      	ldrh	r3, [r4, #12]
 800c5de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	6126      	str	r6, [r4, #16]
 800c5ea:	6165      	str	r5, [r4, #20]
 800c5ec:	444e      	add	r6, r9
 800c5ee:	eba5 0509 	sub.w	r5, r5, r9
 800c5f2:	6026      	str	r6, [r4, #0]
 800c5f4:	60a5      	str	r5, [r4, #8]
 800c5f6:	463e      	mov	r6, r7
 800c5f8:	42be      	cmp	r6, r7
 800c5fa:	d900      	bls.n	800c5fe <__ssputs_r+0x72>
 800c5fc:	463e      	mov	r6, r7
 800c5fe:	6820      	ldr	r0, [r4, #0]
 800c600:	4632      	mov	r2, r6
 800c602:	4641      	mov	r1, r8
 800c604:	f000 f9c6 	bl	800c994 <memmove>
 800c608:	68a3      	ldr	r3, [r4, #8]
 800c60a:	1b9b      	subs	r3, r3, r6
 800c60c:	60a3      	str	r3, [r4, #8]
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	4433      	add	r3, r6
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	2000      	movs	r0, #0
 800c616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61a:	462a      	mov	r2, r5
 800c61c:	f000 fd7d 	bl	800d11a <_realloc_r>
 800c620:	4606      	mov	r6, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	d1e0      	bne.n	800c5e8 <__ssputs_r+0x5c>
 800c626:	6921      	ldr	r1, [r4, #16]
 800c628:	4650      	mov	r0, sl
 800c62a:	f7fe fb79 	bl	800ad20 <_free_r>
 800c62e:	230c      	movs	r3, #12
 800c630:	f8ca 3000 	str.w	r3, [sl]
 800c634:	89a3      	ldrh	r3, [r4, #12]
 800c636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	e7e9      	b.n	800c616 <__ssputs_r+0x8a>
	...

0800c644 <_svfiprintf_r>:
 800c644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	4698      	mov	r8, r3
 800c64a:	898b      	ldrh	r3, [r1, #12]
 800c64c:	061b      	lsls	r3, r3, #24
 800c64e:	b09d      	sub	sp, #116	@ 0x74
 800c650:	4607      	mov	r7, r0
 800c652:	460d      	mov	r5, r1
 800c654:	4614      	mov	r4, r2
 800c656:	d510      	bpl.n	800c67a <_svfiprintf_r+0x36>
 800c658:	690b      	ldr	r3, [r1, #16]
 800c65a:	b973      	cbnz	r3, 800c67a <_svfiprintf_r+0x36>
 800c65c:	2140      	movs	r1, #64	@ 0x40
 800c65e:	f7fe fbd3 	bl	800ae08 <_malloc_r>
 800c662:	6028      	str	r0, [r5, #0]
 800c664:	6128      	str	r0, [r5, #16]
 800c666:	b930      	cbnz	r0, 800c676 <_svfiprintf_r+0x32>
 800c668:	230c      	movs	r3, #12
 800c66a:	603b      	str	r3, [r7, #0]
 800c66c:	f04f 30ff 	mov.w	r0, #4294967295
 800c670:	b01d      	add	sp, #116	@ 0x74
 800c672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c676:	2340      	movs	r3, #64	@ 0x40
 800c678:	616b      	str	r3, [r5, #20]
 800c67a:	2300      	movs	r3, #0
 800c67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c67e:	2320      	movs	r3, #32
 800c680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c684:	f8cd 800c 	str.w	r8, [sp, #12]
 800c688:	2330      	movs	r3, #48	@ 0x30
 800c68a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c828 <_svfiprintf_r+0x1e4>
 800c68e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c692:	f04f 0901 	mov.w	r9, #1
 800c696:	4623      	mov	r3, r4
 800c698:	469a      	mov	sl, r3
 800c69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69e:	b10a      	cbz	r2, 800c6a4 <_svfiprintf_r+0x60>
 800c6a0:	2a25      	cmp	r2, #37	@ 0x25
 800c6a2:	d1f9      	bne.n	800c698 <_svfiprintf_r+0x54>
 800c6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a8:	d00b      	beq.n	800c6c2 <_svfiprintf_r+0x7e>
 800c6aa:	465b      	mov	r3, fp
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	f7ff ff6b 	bl	800c58c <__ssputs_r>
 800c6b6:	3001      	adds	r0, #1
 800c6b8:	f000 80a7 	beq.w	800c80a <_svfiprintf_r+0x1c6>
 800c6bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6be:	445a      	add	r2, fp
 800c6c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 809f 	beq.w	800c80a <_svfiprintf_r+0x1c6>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6d6:	f10a 0a01 	add.w	sl, sl, #1
 800c6da:	9304      	str	r3, [sp, #16]
 800c6dc:	9307      	str	r3, [sp, #28]
 800c6de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6e4:	4654      	mov	r4, sl
 800c6e6:	2205      	movs	r2, #5
 800c6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ec:	484e      	ldr	r0, [pc, #312]	@ (800c828 <_svfiprintf_r+0x1e4>)
 800c6ee:	f7f3 fd47 	bl	8000180 <memchr>
 800c6f2:	9a04      	ldr	r2, [sp, #16]
 800c6f4:	b9d8      	cbnz	r0, 800c72e <_svfiprintf_r+0xea>
 800c6f6:	06d0      	lsls	r0, r2, #27
 800c6f8:	bf44      	itt	mi
 800c6fa:	2320      	movmi	r3, #32
 800c6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c700:	0711      	lsls	r1, r2, #28
 800c702:	bf44      	itt	mi
 800c704:	232b      	movmi	r3, #43	@ 0x2b
 800c706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c70a:	f89a 3000 	ldrb.w	r3, [sl]
 800c70e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c710:	d015      	beq.n	800c73e <_svfiprintf_r+0xfa>
 800c712:	9a07      	ldr	r2, [sp, #28]
 800c714:	4654      	mov	r4, sl
 800c716:	2000      	movs	r0, #0
 800c718:	f04f 0c0a 	mov.w	ip, #10
 800c71c:	4621      	mov	r1, r4
 800c71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c722:	3b30      	subs	r3, #48	@ 0x30
 800c724:	2b09      	cmp	r3, #9
 800c726:	d94b      	bls.n	800c7c0 <_svfiprintf_r+0x17c>
 800c728:	b1b0      	cbz	r0, 800c758 <_svfiprintf_r+0x114>
 800c72a:	9207      	str	r2, [sp, #28]
 800c72c:	e014      	b.n	800c758 <_svfiprintf_r+0x114>
 800c72e:	eba0 0308 	sub.w	r3, r0, r8
 800c732:	fa09 f303 	lsl.w	r3, r9, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	46a2      	mov	sl, r4
 800c73c:	e7d2      	b.n	800c6e4 <_svfiprintf_r+0xa0>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	1d19      	adds	r1, r3, #4
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	9103      	str	r1, [sp, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	bfbb      	ittet	lt
 800c74a:	425b      	neglt	r3, r3
 800c74c:	f042 0202 	orrlt.w	r2, r2, #2
 800c750:	9307      	strge	r3, [sp, #28]
 800c752:	9307      	strlt	r3, [sp, #28]
 800c754:	bfb8      	it	lt
 800c756:	9204      	strlt	r2, [sp, #16]
 800c758:	7823      	ldrb	r3, [r4, #0]
 800c75a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c75c:	d10a      	bne.n	800c774 <_svfiprintf_r+0x130>
 800c75e:	7863      	ldrb	r3, [r4, #1]
 800c760:	2b2a      	cmp	r3, #42	@ 0x2a
 800c762:	d132      	bne.n	800c7ca <_svfiprintf_r+0x186>
 800c764:	9b03      	ldr	r3, [sp, #12]
 800c766:	1d1a      	adds	r2, r3, #4
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9203      	str	r2, [sp, #12]
 800c76c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c770:	3402      	adds	r4, #2
 800c772:	9305      	str	r3, [sp, #20]
 800c774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c838 <_svfiprintf_r+0x1f4>
 800c778:	7821      	ldrb	r1, [r4, #0]
 800c77a:	2203      	movs	r2, #3
 800c77c:	4650      	mov	r0, sl
 800c77e:	f7f3 fcff 	bl	8000180 <memchr>
 800c782:	b138      	cbz	r0, 800c794 <_svfiprintf_r+0x150>
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	eba0 000a 	sub.w	r0, r0, sl
 800c78a:	2240      	movs	r2, #64	@ 0x40
 800c78c:	4082      	lsls	r2, r0
 800c78e:	4313      	orrs	r3, r2
 800c790:	3401      	adds	r4, #1
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c798:	4824      	ldr	r0, [pc, #144]	@ (800c82c <_svfiprintf_r+0x1e8>)
 800c79a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c79e:	2206      	movs	r2, #6
 800c7a0:	f7f3 fcee 	bl	8000180 <memchr>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d036      	beq.n	800c816 <_svfiprintf_r+0x1d2>
 800c7a8:	4b21      	ldr	r3, [pc, #132]	@ (800c830 <_svfiprintf_r+0x1ec>)
 800c7aa:	bb1b      	cbnz	r3, 800c7f4 <_svfiprintf_r+0x1b0>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	3307      	adds	r3, #7
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	9303      	str	r3, [sp, #12]
 800c7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ba:	4433      	add	r3, r6
 800c7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7be:	e76a      	b.n	800c696 <_svfiprintf_r+0x52>
 800c7c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	2001      	movs	r0, #1
 800c7c8:	e7a8      	b.n	800c71c <_svfiprintf_r+0xd8>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	3401      	adds	r4, #1
 800c7ce:	9305      	str	r3, [sp, #20]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	f04f 0c0a 	mov.w	ip, #10
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7dc:	3a30      	subs	r2, #48	@ 0x30
 800c7de:	2a09      	cmp	r2, #9
 800c7e0:	d903      	bls.n	800c7ea <_svfiprintf_r+0x1a6>
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0c6      	beq.n	800c774 <_svfiprintf_r+0x130>
 800c7e6:	9105      	str	r1, [sp, #20]
 800c7e8:	e7c4      	b.n	800c774 <_svfiprintf_r+0x130>
 800c7ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e7f0      	b.n	800c7d6 <_svfiprintf_r+0x192>
 800c7f4:	ab03      	add	r3, sp, #12
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	462a      	mov	r2, r5
 800c7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c834 <_svfiprintf_r+0x1f0>)
 800c7fc:	a904      	add	r1, sp, #16
 800c7fe:	4638      	mov	r0, r7
 800c800:	f7fc fcbc 	bl	800917c <_printf_float>
 800c804:	1c42      	adds	r2, r0, #1
 800c806:	4606      	mov	r6, r0
 800c808:	d1d6      	bne.n	800c7b8 <_svfiprintf_r+0x174>
 800c80a:	89ab      	ldrh	r3, [r5, #12]
 800c80c:	065b      	lsls	r3, r3, #25
 800c80e:	f53f af2d 	bmi.w	800c66c <_svfiprintf_r+0x28>
 800c812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c814:	e72c      	b.n	800c670 <_svfiprintf_r+0x2c>
 800c816:	ab03      	add	r3, sp, #12
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	462a      	mov	r2, r5
 800c81c:	4b05      	ldr	r3, [pc, #20]	@ (800c834 <_svfiprintf_r+0x1f0>)
 800c81e:	a904      	add	r1, sp, #16
 800c820:	4638      	mov	r0, r7
 800c822:	f7fc ff43 	bl	80096ac <_printf_i>
 800c826:	e7ed      	b.n	800c804 <_svfiprintf_r+0x1c0>
 800c828:	0800dde9 	.word	0x0800dde9
 800c82c:	0800ddf3 	.word	0x0800ddf3
 800c830:	0800917d 	.word	0x0800917d
 800c834:	0800c58d 	.word	0x0800c58d
 800c838:	0800ddef 	.word	0x0800ddef

0800c83c <__sflush_r>:
 800c83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c844:	0716      	lsls	r6, r2, #28
 800c846:	4605      	mov	r5, r0
 800c848:	460c      	mov	r4, r1
 800c84a:	d454      	bmi.n	800c8f6 <__sflush_r+0xba>
 800c84c:	684b      	ldr	r3, [r1, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dc02      	bgt.n	800c858 <__sflush_r+0x1c>
 800c852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c854:	2b00      	cmp	r3, #0
 800c856:	dd48      	ble.n	800c8ea <__sflush_r+0xae>
 800c858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c85a:	2e00      	cmp	r6, #0
 800c85c:	d045      	beq.n	800c8ea <__sflush_r+0xae>
 800c85e:	2300      	movs	r3, #0
 800c860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c864:	682f      	ldr	r7, [r5, #0]
 800c866:	6a21      	ldr	r1, [r4, #32]
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	d030      	beq.n	800c8ce <__sflush_r+0x92>
 800c86c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c86e:	89a3      	ldrh	r3, [r4, #12]
 800c870:	0759      	lsls	r1, r3, #29
 800c872:	d505      	bpl.n	800c880 <__sflush_r+0x44>
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	1ad2      	subs	r2, r2, r3
 800c878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c87a:	b10b      	cbz	r3, 800c880 <__sflush_r+0x44>
 800c87c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c87e:	1ad2      	subs	r2, r2, r3
 800c880:	2300      	movs	r3, #0
 800c882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c884:	6a21      	ldr	r1, [r4, #32]
 800c886:	4628      	mov	r0, r5
 800c888:	47b0      	blx	r6
 800c88a:	1c43      	adds	r3, r0, #1
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	d106      	bne.n	800c89e <__sflush_r+0x62>
 800c890:	6829      	ldr	r1, [r5, #0]
 800c892:	291d      	cmp	r1, #29
 800c894:	d82b      	bhi.n	800c8ee <__sflush_r+0xb2>
 800c896:	4a2a      	ldr	r2, [pc, #168]	@ (800c940 <__sflush_r+0x104>)
 800c898:	410a      	asrs	r2, r1
 800c89a:	07d6      	lsls	r6, r2, #31
 800c89c:	d427      	bmi.n	800c8ee <__sflush_r+0xb2>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	6062      	str	r2, [r4, #4]
 800c8a2:	04d9      	lsls	r1, r3, #19
 800c8a4:	6922      	ldr	r2, [r4, #16]
 800c8a6:	6022      	str	r2, [r4, #0]
 800c8a8:	d504      	bpl.n	800c8b4 <__sflush_r+0x78>
 800c8aa:	1c42      	adds	r2, r0, #1
 800c8ac:	d101      	bne.n	800c8b2 <__sflush_r+0x76>
 800c8ae:	682b      	ldr	r3, [r5, #0]
 800c8b0:	b903      	cbnz	r3, 800c8b4 <__sflush_r+0x78>
 800c8b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8b6:	602f      	str	r7, [r5, #0]
 800c8b8:	b1b9      	cbz	r1, 800c8ea <__sflush_r+0xae>
 800c8ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8be:	4299      	cmp	r1, r3
 800c8c0:	d002      	beq.n	800c8c8 <__sflush_r+0x8c>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f7fe fa2c 	bl	800ad20 <_free_r>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8cc:	e00d      	b.n	800c8ea <__sflush_r+0xae>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	47b0      	blx	r6
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	1c50      	adds	r0, r2, #1
 800c8d8:	d1c9      	bne.n	800c86e <__sflush_r+0x32>
 800c8da:	682b      	ldr	r3, [r5, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0c6      	beq.n	800c86e <__sflush_r+0x32>
 800c8e0:	2b1d      	cmp	r3, #29
 800c8e2:	d001      	beq.n	800c8e8 <__sflush_r+0xac>
 800c8e4:	2b16      	cmp	r3, #22
 800c8e6:	d11e      	bne.n	800c926 <__sflush_r+0xea>
 800c8e8:	602f      	str	r7, [r5, #0]
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	e022      	b.n	800c934 <__sflush_r+0xf8>
 800c8ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8f2:	b21b      	sxth	r3, r3
 800c8f4:	e01b      	b.n	800c92e <__sflush_r+0xf2>
 800c8f6:	690f      	ldr	r7, [r1, #16]
 800c8f8:	2f00      	cmp	r7, #0
 800c8fa:	d0f6      	beq.n	800c8ea <__sflush_r+0xae>
 800c8fc:	0793      	lsls	r3, r2, #30
 800c8fe:	680e      	ldr	r6, [r1, #0]
 800c900:	bf08      	it	eq
 800c902:	694b      	ldreq	r3, [r1, #20]
 800c904:	600f      	str	r7, [r1, #0]
 800c906:	bf18      	it	ne
 800c908:	2300      	movne	r3, #0
 800c90a:	eba6 0807 	sub.w	r8, r6, r7
 800c90e:	608b      	str	r3, [r1, #8]
 800c910:	f1b8 0f00 	cmp.w	r8, #0
 800c914:	dde9      	ble.n	800c8ea <__sflush_r+0xae>
 800c916:	6a21      	ldr	r1, [r4, #32]
 800c918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c91a:	4643      	mov	r3, r8
 800c91c:	463a      	mov	r2, r7
 800c91e:	4628      	mov	r0, r5
 800c920:	47b0      	blx	r6
 800c922:	2800      	cmp	r0, #0
 800c924:	dc08      	bgt.n	800c938 <__sflush_r+0xfc>
 800c926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c92e:	81a3      	strh	r3, [r4, #12]
 800c930:	f04f 30ff 	mov.w	r0, #4294967295
 800c934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c938:	4407      	add	r7, r0
 800c93a:	eba8 0800 	sub.w	r8, r8, r0
 800c93e:	e7e7      	b.n	800c910 <__sflush_r+0xd4>
 800c940:	dfbffffe 	.word	0xdfbffffe

0800c944 <_fflush_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	690b      	ldr	r3, [r1, #16]
 800c948:	4605      	mov	r5, r0
 800c94a:	460c      	mov	r4, r1
 800c94c:	b913      	cbnz	r3, 800c954 <_fflush_r+0x10>
 800c94e:	2500      	movs	r5, #0
 800c950:	4628      	mov	r0, r5
 800c952:	bd38      	pop	{r3, r4, r5, pc}
 800c954:	b118      	cbz	r0, 800c95e <_fflush_r+0x1a>
 800c956:	6a03      	ldr	r3, [r0, #32]
 800c958:	b90b      	cbnz	r3, 800c95e <_fflush_r+0x1a>
 800c95a:	f7fd fa67 	bl	8009e2c <__sinit>
 800c95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0f3      	beq.n	800c94e <_fflush_r+0xa>
 800c966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c968:	07d0      	lsls	r0, r2, #31
 800c96a:	d404      	bmi.n	800c976 <_fflush_r+0x32>
 800c96c:	0599      	lsls	r1, r3, #22
 800c96e:	d402      	bmi.n	800c976 <_fflush_r+0x32>
 800c970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c972:	f7fd fb72 	bl	800a05a <__retarget_lock_acquire_recursive>
 800c976:	4628      	mov	r0, r5
 800c978:	4621      	mov	r1, r4
 800c97a:	f7ff ff5f 	bl	800c83c <__sflush_r>
 800c97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c980:	07da      	lsls	r2, r3, #31
 800c982:	4605      	mov	r5, r0
 800c984:	d4e4      	bmi.n	800c950 <_fflush_r+0xc>
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	059b      	lsls	r3, r3, #22
 800c98a:	d4e1      	bmi.n	800c950 <_fflush_r+0xc>
 800c98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c98e:	f7fd fb65 	bl	800a05c <__retarget_lock_release_recursive>
 800c992:	e7dd      	b.n	800c950 <_fflush_r+0xc>

0800c994 <memmove>:
 800c994:	4288      	cmp	r0, r1
 800c996:	b510      	push	{r4, lr}
 800c998:	eb01 0402 	add.w	r4, r1, r2
 800c99c:	d902      	bls.n	800c9a4 <memmove+0x10>
 800c99e:	4284      	cmp	r4, r0
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	d807      	bhi.n	800c9b4 <memmove+0x20>
 800c9a4:	1e43      	subs	r3, r0, #1
 800c9a6:	42a1      	cmp	r1, r4
 800c9a8:	d008      	beq.n	800c9bc <memmove+0x28>
 800c9aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9b2:	e7f8      	b.n	800c9a6 <memmove+0x12>
 800c9b4:	4402      	add	r2, r0
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	428a      	cmp	r2, r1
 800c9ba:	d100      	bne.n	800c9be <memmove+0x2a>
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9c6:	e7f7      	b.n	800c9b8 <memmove+0x24>

0800c9c8 <strncmp>:
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	b16a      	cbz	r2, 800c9e8 <strncmp+0x20>
 800c9cc:	3901      	subs	r1, #1
 800c9ce:	1884      	adds	r4, r0, r2
 800c9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d103      	bne.n	800c9e4 <strncmp+0x1c>
 800c9dc:	42a0      	cmp	r0, r4
 800c9de:	d001      	beq.n	800c9e4 <strncmp+0x1c>
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	d1f5      	bne.n	800c9d0 <strncmp+0x8>
 800c9e4:	1ad0      	subs	r0, r2, r3
 800c9e6:	bd10      	pop	{r4, pc}
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	e7fc      	b.n	800c9e6 <strncmp+0x1e>

0800c9ec <_sbrk_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4d06      	ldr	r5, [pc, #24]	@ (800ca08 <_sbrk_r+0x1c>)
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	602b      	str	r3, [r5, #0]
 800c9f8:	f7f5 fde0 	bl	80025bc <_sbrk>
 800c9fc:	1c43      	adds	r3, r0, #1
 800c9fe:	d102      	bne.n	800ca06 <_sbrk_r+0x1a>
 800ca00:	682b      	ldr	r3, [r5, #0]
 800ca02:	b103      	cbz	r3, 800ca06 <_sbrk_r+0x1a>
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	bd38      	pop	{r3, r4, r5, pc}
 800ca08:	20002aa8 	.word	0x20002aa8
 800ca0c:	00000000 	.word	0x00000000

0800ca10 <nan>:
 800ca10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca18 <nan+0x8>
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	00000000 	.word	0x00000000
 800ca1c:	7ff80000 	.word	0x7ff80000

0800ca20 <__assert_func>:
 800ca20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca22:	4614      	mov	r4, r2
 800ca24:	461a      	mov	r2, r3
 800ca26:	4b09      	ldr	r3, [pc, #36]	@ (800ca4c <__assert_func+0x2c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	68d8      	ldr	r0, [r3, #12]
 800ca2e:	b954      	cbnz	r4, 800ca46 <__assert_func+0x26>
 800ca30:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <__assert_func+0x30>)
 800ca32:	461c      	mov	r4, r3
 800ca34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca38:	9100      	str	r1, [sp, #0]
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	4905      	ldr	r1, [pc, #20]	@ (800ca54 <__assert_func+0x34>)
 800ca3e:	f000 fba7 	bl	800d190 <fiprintf>
 800ca42:	f000 fbb7 	bl	800d1b4 <abort>
 800ca46:	4b04      	ldr	r3, [pc, #16]	@ (800ca58 <__assert_func+0x38>)
 800ca48:	e7f4      	b.n	800ca34 <__assert_func+0x14>
 800ca4a:	bf00      	nop
 800ca4c:	20000034 	.word	0x20000034
 800ca50:	0800de3d 	.word	0x0800de3d
 800ca54:	0800de0f 	.word	0x0800de0f
 800ca58:	0800de02 	.word	0x0800de02

0800ca5c <_calloc_r>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	fba1 5402 	umull	r5, r4, r1, r2
 800ca62:	b93c      	cbnz	r4, 800ca74 <_calloc_r+0x18>
 800ca64:	4629      	mov	r1, r5
 800ca66:	f7fe f9cf 	bl	800ae08 <_malloc_r>
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	b928      	cbnz	r0, 800ca7a <_calloc_r+0x1e>
 800ca6e:	2600      	movs	r6, #0
 800ca70:	4630      	mov	r0, r6
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	220c      	movs	r2, #12
 800ca76:	6002      	str	r2, [r0, #0]
 800ca78:	e7f9      	b.n	800ca6e <_calloc_r+0x12>
 800ca7a:	462a      	mov	r2, r5
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	f7fd fa6e 	bl	8009f5e <memset>
 800ca82:	e7f5      	b.n	800ca70 <_calloc_r+0x14>

0800ca84 <rshift>:
 800ca84:	6903      	ldr	r3, [r0, #16]
 800ca86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca92:	f100 0414 	add.w	r4, r0, #20
 800ca96:	dd45      	ble.n	800cb24 <rshift+0xa0>
 800ca98:	f011 011f 	ands.w	r1, r1, #31
 800ca9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800caa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caa4:	d10c      	bne.n	800cac0 <rshift+0x3c>
 800caa6:	f100 0710 	add.w	r7, r0, #16
 800caaa:	4629      	mov	r1, r5
 800caac:	42b1      	cmp	r1, r6
 800caae:	d334      	bcc.n	800cb1a <rshift+0x96>
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	1eea      	subs	r2, r5, #3
 800cab6:	4296      	cmp	r6, r2
 800cab8:	bf38      	it	cc
 800caba:	2300      	movcc	r3, #0
 800cabc:	4423      	add	r3, r4
 800cabe:	e015      	b.n	800caec <rshift+0x68>
 800cac0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cac4:	f1c1 0820 	rsb	r8, r1, #32
 800cac8:	40cf      	lsrs	r7, r1
 800caca:	f105 0e04 	add.w	lr, r5, #4
 800cace:	46a1      	mov	r9, r4
 800cad0:	4576      	cmp	r6, lr
 800cad2:	46f4      	mov	ip, lr
 800cad4:	d815      	bhi.n	800cb02 <rshift+0x7e>
 800cad6:	1a9a      	subs	r2, r3, r2
 800cad8:	0092      	lsls	r2, r2, #2
 800cada:	3a04      	subs	r2, #4
 800cadc:	3501      	adds	r5, #1
 800cade:	42ae      	cmp	r6, r5
 800cae0:	bf38      	it	cc
 800cae2:	2200      	movcc	r2, #0
 800cae4:	18a3      	adds	r3, r4, r2
 800cae6:	50a7      	str	r7, [r4, r2]
 800cae8:	b107      	cbz	r7, 800caec <rshift+0x68>
 800caea:	3304      	adds	r3, #4
 800caec:	1b1a      	subs	r2, r3, r4
 800caee:	42a3      	cmp	r3, r4
 800caf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800caf4:	bf08      	it	eq
 800caf6:	2300      	moveq	r3, #0
 800caf8:	6102      	str	r2, [r0, #16]
 800cafa:	bf08      	it	eq
 800cafc:	6143      	streq	r3, [r0, #20]
 800cafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb02:	f8dc c000 	ldr.w	ip, [ip]
 800cb06:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb0a:	ea4c 0707 	orr.w	r7, ip, r7
 800cb0e:	f849 7b04 	str.w	r7, [r9], #4
 800cb12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb16:	40cf      	lsrs	r7, r1
 800cb18:	e7da      	b.n	800cad0 <rshift+0x4c>
 800cb1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb22:	e7c3      	b.n	800caac <rshift+0x28>
 800cb24:	4623      	mov	r3, r4
 800cb26:	e7e1      	b.n	800caec <rshift+0x68>

0800cb28 <__hexdig_fun>:
 800cb28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb2c:	2b09      	cmp	r3, #9
 800cb2e:	d802      	bhi.n	800cb36 <__hexdig_fun+0xe>
 800cb30:	3820      	subs	r0, #32
 800cb32:	b2c0      	uxtb	r0, r0
 800cb34:	4770      	bx	lr
 800cb36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb3a:	2b05      	cmp	r3, #5
 800cb3c:	d801      	bhi.n	800cb42 <__hexdig_fun+0x1a>
 800cb3e:	3847      	subs	r0, #71	@ 0x47
 800cb40:	e7f7      	b.n	800cb32 <__hexdig_fun+0xa>
 800cb42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d801      	bhi.n	800cb4e <__hexdig_fun+0x26>
 800cb4a:	3827      	subs	r0, #39	@ 0x27
 800cb4c:	e7f1      	b.n	800cb32 <__hexdig_fun+0xa>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	4770      	bx	lr
	...

0800cb54 <__gethex>:
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	b085      	sub	sp, #20
 800cb5a:	468a      	mov	sl, r1
 800cb5c:	9302      	str	r3, [sp, #8]
 800cb5e:	680b      	ldr	r3, [r1, #0]
 800cb60:	9001      	str	r0, [sp, #4]
 800cb62:	4690      	mov	r8, r2
 800cb64:	1c9c      	adds	r4, r3, #2
 800cb66:	46a1      	mov	r9, r4
 800cb68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cb6c:	2830      	cmp	r0, #48	@ 0x30
 800cb6e:	d0fa      	beq.n	800cb66 <__gethex+0x12>
 800cb70:	eba9 0303 	sub.w	r3, r9, r3
 800cb74:	f1a3 0b02 	sub.w	fp, r3, #2
 800cb78:	f7ff ffd6 	bl	800cb28 <__hexdig_fun>
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d168      	bne.n	800cc54 <__gethex+0x100>
 800cb82:	49a0      	ldr	r1, [pc, #640]	@ (800ce04 <__gethex+0x2b0>)
 800cb84:	2201      	movs	r2, #1
 800cb86:	4648      	mov	r0, r9
 800cb88:	f7ff ff1e 	bl	800c9c8 <strncmp>
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d167      	bne.n	800cc62 <__gethex+0x10e>
 800cb92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cb96:	4626      	mov	r6, r4
 800cb98:	f7ff ffc6 	bl	800cb28 <__hexdig_fun>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d062      	beq.n	800cc66 <__gethex+0x112>
 800cba0:	4623      	mov	r3, r4
 800cba2:	7818      	ldrb	r0, [r3, #0]
 800cba4:	2830      	cmp	r0, #48	@ 0x30
 800cba6:	4699      	mov	r9, r3
 800cba8:	f103 0301 	add.w	r3, r3, #1
 800cbac:	d0f9      	beq.n	800cba2 <__gethex+0x4e>
 800cbae:	f7ff ffbb 	bl	800cb28 <__hexdig_fun>
 800cbb2:	fab0 f580 	clz	r5, r0
 800cbb6:	096d      	lsrs	r5, r5, #5
 800cbb8:	f04f 0b01 	mov.w	fp, #1
 800cbbc:	464a      	mov	r2, r9
 800cbbe:	4616      	mov	r6, r2
 800cbc0:	3201      	adds	r2, #1
 800cbc2:	7830      	ldrb	r0, [r6, #0]
 800cbc4:	f7ff ffb0 	bl	800cb28 <__hexdig_fun>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d1f8      	bne.n	800cbbe <__gethex+0x6a>
 800cbcc:	498d      	ldr	r1, [pc, #564]	@ (800ce04 <__gethex+0x2b0>)
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff fef9 	bl	800c9c8 <strncmp>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d13f      	bne.n	800cc5a <__gethex+0x106>
 800cbda:	b944      	cbnz	r4, 800cbee <__gethex+0x9a>
 800cbdc:	1c74      	adds	r4, r6, #1
 800cbde:	4622      	mov	r2, r4
 800cbe0:	4616      	mov	r6, r2
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	7830      	ldrb	r0, [r6, #0]
 800cbe6:	f7ff ff9f 	bl	800cb28 <__hexdig_fun>
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d1f8      	bne.n	800cbe0 <__gethex+0x8c>
 800cbee:	1ba4      	subs	r4, r4, r6
 800cbf0:	00a7      	lsls	r7, r4, #2
 800cbf2:	7833      	ldrb	r3, [r6, #0]
 800cbf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cbf8:	2b50      	cmp	r3, #80	@ 0x50
 800cbfa:	d13e      	bne.n	800cc7a <__gethex+0x126>
 800cbfc:	7873      	ldrb	r3, [r6, #1]
 800cbfe:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc00:	d033      	beq.n	800cc6a <__gethex+0x116>
 800cc02:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc04:	d034      	beq.n	800cc70 <__gethex+0x11c>
 800cc06:	1c71      	adds	r1, r6, #1
 800cc08:	2400      	movs	r4, #0
 800cc0a:	7808      	ldrb	r0, [r1, #0]
 800cc0c:	f7ff ff8c 	bl	800cb28 <__hexdig_fun>
 800cc10:	1e43      	subs	r3, r0, #1
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b18      	cmp	r3, #24
 800cc16:	d830      	bhi.n	800cc7a <__gethex+0x126>
 800cc18:	f1a0 0210 	sub.w	r2, r0, #16
 800cc1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc20:	f7ff ff82 	bl	800cb28 <__hexdig_fun>
 800cc24:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc28:	fa5f fc8c 	uxtb.w	ip, ip
 800cc2c:	f1bc 0f18 	cmp.w	ip, #24
 800cc30:	f04f 030a 	mov.w	r3, #10
 800cc34:	d91e      	bls.n	800cc74 <__gethex+0x120>
 800cc36:	b104      	cbz	r4, 800cc3a <__gethex+0xe6>
 800cc38:	4252      	negs	r2, r2
 800cc3a:	4417      	add	r7, r2
 800cc3c:	f8ca 1000 	str.w	r1, [sl]
 800cc40:	b1ed      	cbz	r5, 800cc7e <__gethex+0x12a>
 800cc42:	f1bb 0f00 	cmp.w	fp, #0
 800cc46:	bf0c      	ite	eq
 800cc48:	2506      	moveq	r5, #6
 800cc4a:	2500      	movne	r5, #0
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	b005      	add	sp, #20
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	2500      	movs	r5, #0
 800cc56:	462c      	mov	r4, r5
 800cc58:	e7b0      	b.n	800cbbc <__gethex+0x68>
 800cc5a:	2c00      	cmp	r4, #0
 800cc5c:	d1c7      	bne.n	800cbee <__gethex+0x9a>
 800cc5e:	4627      	mov	r7, r4
 800cc60:	e7c7      	b.n	800cbf2 <__gethex+0x9e>
 800cc62:	464e      	mov	r6, r9
 800cc64:	462f      	mov	r7, r5
 800cc66:	2501      	movs	r5, #1
 800cc68:	e7c3      	b.n	800cbf2 <__gethex+0x9e>
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	1cb1      	adds	r1, r6, #2
 800cc6e:	e7cc      	b.n	800cc0a <__gethex+0xb6>
 800cc70:	2401      	movs	r4, #1
 800cc72:	e7fb      	b.n	800cc6c <__gethex+0x118>
 800cc74:	fb03 0002 	mla	r0, r3, r2, r0
 800cc78:	e7ce      	b.n	800cc18 <__gethex+0xc4>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	e7de      	b.n	800cc3c <__gethex+0xe8>
 800cc7e:	eba6 0309 	sub.w	r3, r6, r9
 800cc82:	3b01      	subs	r3, #1
 800cc84:	4629      	mov	r1, r5
 800cc86:	2b07      	cmp	r3, #7
 800cc88:	dc0a      	bgt.n	800cca0 <__gethex+0x14c>
 800cc8a:	9801      	ldr	r0, [sp, #4]
 800cc8c:	f7fe f948 	bl	800af20 <_Balloc>
 800cc90:	4604      	mov	r4, r0
 800cc92:	b940      	cbnz	r0, 800cca6 <__gethex+0x152>
 800cc94:	4b5c      	ldr	r3, [pc, #368]	@ (800ce08 <__gethex+0x2b4>)
 800cc96:	4602      	mov	r2, r0
 800cc98:	21e4      	movs	r1, #228	@ 0xe4
 800cc9a:	485c      	ldr	r0, [pc, #368]	@ (800ce0c <__gethex+0x2b8>)
 800cc9c:	f7ff fec0 	bl	800ca20 <__assert_func>
 800cca0:	3101      	adds	r1, #1
 800cca2:	105b      	asrs	r3, r3, #1
 800cca4:	e7ef      	b.n	800cc86 <__gethex+0x132>
 800cca6:	f100 0a14 	add.w	sl, r0, #20
 800ccaa:	2300      	movs	r3, #0
 800ccac:	4655      	mov	r5, sl
 800ccae:	469b      	mov	fp, r3
 800ccb0:	45b1      	cmp	r9, r6
 800ccb2:	d337      	bcc.n	800cd24 <__gethex+0x1d0>
 800ccb4:	f845 bb04 	str.w	fp, [r5], #4
 800ccb8:	eba5 050a 	sub.w	r5, r5, sl
 800ccbc:	10ad      	asrs	r5, r5, #2
 800ccbe:	6125      	str	r5, [r4, #16]
 800ccc0:	4658      	mov	r0, fp
 800ccc2:	f7fe fa1f 	bl	800b104 <__hi0bits>
 800ccc6:	016d      	lsls	r5, r5, #5
 800ccc8:	f8d8 6000 	ldr.w	r6, [r8]
 800cccc:	1a2d      	subs	r5, r5, r0
 800ccce:	42b5      	cmp	r5, r6
 800ccd0:	dd54      	ble.n	800cd7c <__gethex+0x228>
 800ccd2:	1bad      	subs	r5, r5, r6
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f7fe fdb3 	bl	800b842 <__any_on>
 800ccdc:	4681      	mov	r9, r0
 800ccde:	b178      	cbz	r0, 800cd00 <__gethex+0x1ac>
 800cce0:	1e6b      	subs	r3, r5, #1
 800cce2:	1159      	asrs	r1, r3, #5
 800cce4:	f003 021f 	and.w	r2, r3, #31
 800cce8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ccec:	f04f 0901 	mov.w	r9, #1
 800ccf0:	fa09 f202 	lsl.w	r2, r9, r2
 800ccf4:	420a      	tst	r2, r1
 800ccf6:	d003      	beq.n	800cd00 <__gethex+0x1ac>
 800ccf8:	454b      	cmp	r3, r9
 800ccfa:	dc36      	bgt.n	800cd6a <__gethex+0x216>
 800ccfc:	f04f 0902 	mov.w	r9, #2
 800cd00:	4629      	mov	r1, r5
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7ff febe 	bl	800ca84 <rshift>
 800cd08:	442f      	add	r7, r5
 800cd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd0e:	42bb      	cmp	r3, r7
 800cd10:	da42      	bge.n	800cd98 <__gethex+0x244>
 800cd12:	9801      	ldr	r0, [sp, #4]
 800cd14:	4621      	mov	r1, r4
 800cd16:	f7fe f943 	bl	800afa0 <_Bfree>
 800cd1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	25a3      	movs	r5, #163	@ 0xa3
 800cd22:	e793      	b.n	800cc4c <__gethex+0xf8>
 800cd24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd28:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd2a:	d012      	beq.n	800cd52 <__gethex+0x1fe>
 800cd2c:	2b20      	cmp	r3, #32
 800cd2e:	d104      	bne.n	800cd3a <__gethex+0x1e6>
 800cd30:	f845 bb04 	str.w	fp, [r5], #4
 800cd34:	f04f 0b00 	mov.w	fp, #0
 800cd38:	465b      	mov	r3, fp
 800cd3a:	7830      	ldrb	r0, [r6, #0]
 800cd3c:	9303      	str	r3, [sp, #12]
 800cd3e:	f7ff fef3 	bl	800cb28 <__hexdig_fun>
 800cd42:	9b03      	ldr	r3, [sp, #12]
 800cd44:	f000 000f 	and.w	r0, r0, #15
 800cd48:	4098      	lsls	r0, r3
 800cd4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd4e:	3304      	adds	r3, #4
 800cd50:	e7ae      	b.n	800ccb0 <__gethex+0x15c>
 800cd52:	45b1      	cmp	r9, r6
 800cd54:	d8ea      	bhi.n	800cd2c <__gethex+0x1d8>
 800cd56:	492b      	ldr	r1, [pc, #172]	@ (800ce04 <__gethex+0x2b0>)
 800cd58:	9303      	str	r3, [sp, #12]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f7ff fe33 	bl	800c9c8 <strncmp>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d1e1      	bne.n	800cd2c <__gethex+0x1d8>
 800cd68:	e7a2      	b.n	800ccb0 <__gethex+0x15c>
 800cd6a:	1ea9      	subs	r1, r5, #2
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7fe fd68 	bl	800b842 <__any_on>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d0c2      	beq.n	800ccfc <__gethex+0x1a8>
 800cd76:	f04f 0903 	mov.w	r9, #3
 800cd7a:	e7c1      	b.n	800cd00 <__gethex+0x1ac>
 800cd7c:	da09      	bge.n	800cd92 <__gethex+0x23e>
 800cd7e:	1b75      	subs	r5, r6, r5
 800cd80:	4621      	mov	r1, r4
 800cd82:	9801      	ldr	r0, [sp, #4]
 800cd84:	462a      	mov	r2, r5
 800cd86:	f7fe fb23 	bl	800b3d0 <__lshift>
 800cd8a:	1b7f      	subs	r7, r7, r5
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	f100 0a14 	add.w	sl, r0, #20
 800cd92:	f04f 0900 	mov.w	r9, #0
 800cd96:	e7b8      	b.n	800cd0a <__gethex+0x1b6>
 800cd98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd9c:	42bd      	cmp	r5, r7
 800cd9e:	dd6f      	ble.n	800ce80 <__gethex+0x32c>
 800cda0:	1bed      	subs	r5, r5, r7
 800cda2:	42ae      	cmp	r6, r5
 800cda4:	dc34      	bgt.n	800ce10 <__gethex+0x2bc>
 800cda6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d022      	beq.n	800cdf4 <__gethex+0x2a0>
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d024      	beq.n	800cdfc <__gethex+0x2a8>
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d115      	bne.n	800cde2 <__gethex+0x28e>
 800cdb6:	42ae      	cmp	r6, r5
 800cdb8:	d113      	bne.n	800cde2 <__gethex+0x28e>
 800cdba:	2e01      	cmp	r6, #1
 800cdbc:	d10b      	bne.n	800cdd6 <__gethex+0x282>
 800cdbe:	9a02      	ldr	r2, [sp, #8]
 800cdc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdc4:	6013      	str	r3, [r2, #0]
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	6123      	str	r3, [r4, #16]
 800cdca:	f8ca 3000 	str.w	r3, [sl]
 800cdce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdd0:	2562      	movs	r5, #98	@ 0x62
 800cdd2:	601c      	str	r4, [r3, #0]
 800cdd4:	e73a      	b.n	800cc4c <__gethex+0xf8>
 800cdd6:	1e71      	subs	r1, r6, #1
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f7fe fd32 	bl	800b842 <__any_on>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d1ed      	bne.n	800cdbe <__gethex+0x26a>
 800cde2:	9801      	ldr	r0, [sp, #4]
 800cde4:	4621      	mov	r1, r4
 800cde6:	f7fe f8db 	bl	800afa0 <_Bfree>
 800cdea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdec:	2300      	movs	r3, #0
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	2550      	movs	r5, #80	@ 0x50
 800cdf2:	e72b      	b.n	800cc4c <__gethex+0xf8>
 800cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1f3      	bne.n	800cde2 <__gethex+0x28e>
 800cdfa:	e7e0      	b.n	800cdbe <__gethex+0x26a>
 800cdfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1dd      	bne.n	800cdbe <__gethex+0x26a>
 800ce02:	e7ee      	b.n	800cde2 <__gethex+0x28e>
 800ce04:	0800dc90 	.word	0x0800dc90
 800ce08:	0800db25 	.word	0x0800db25
 800ce0c:	0800de3e 	.word	0x0800de3e
 800ce10:	1e6f      	subs	r7, r5, #1
 800ce12:	f1b9 0f00 	cmp.w	r9, #0
 800ce16:	d130      	bne.n	800ce7a <__gethex+0x326>
 800ce18:	b127      	cbz	r7, 800ce24 <__gethex+0x2d0>
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f7fe fd10 	bl	800b842 <__any_on>
 800ce22:	4681      	mov	r9, r0
 800ce24:	117a      	asrs	r2, r7, #5
 800ce26:	2301      	movs	r3, #1
 800ce28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce2c:	f007 071f 	and.w	r7, r7, #31
 800ce30:	40bb      	lsls	r3, r7
 800ce32:	4213      	tst	r3, r2
 800ce34:	4629      	mov	r1, r5
 800ce36:	4620      	mov	r0, r4
 800ce38:	bf18      	it	ne
 800ce3a:	f049 0902 	orrne.w	r9, r9, #2
 800ce3e:	f7ff fe21 	bl	800ca84 <rshift>
 800ce42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce46:	1b76      	subs	r6, r6, r5
 800ce48:	2502      	movs	r5, #2
 800ce4a:	f1b9 0f00 	cmp.w	r9, #0
 800ce4e:	d047      	beq.n	800cee0 <__gethex+0x38c>
 800ce50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d015      	beq.n	800ce84 <__gethex+0x330>
 800ce58:	2b03      	cmp	r3, #3
 800ce5a:	d017      	beq.n	800ce8c <__gethex+0x338>
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d109      	bne.n	800ce74 <__gethex+0x320>
 800ce60:	f019 0f02 	tst.w	r9, #2
 800ce64:	d006      	beq.n	800ce74 <__gethex+0x320>
 800ce66:	f8da 3000 	ldr.w	r3, [sl]
 800ce6a:	ea49 0903 	orr.w	r9, r9, r3
 800ce6e:	f019 0f01 	tst.w	r9, #1
 800ce72:	d10e      	bne.n	800ce92 <__gethex+0x33e>
 800ce74:	f045 0510 	orr.w	r5, r5, #16
 800ce78:	e032      	b.n	800cee0 <__gethex+0x38c>
 800ce7a:	f04f 0901 	mov.w	r9, #1
 800ce7e:	e7d1      	b.n	800ce24 <__gethex+0x2d0>
 800ce80:	2501      	movs	r5, #1
 800ce82:	e7e2      	b.n	800ce4a <__gethex+0x2f6>
 800ce84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce86:	f1c3 0301 	rsb	r3, r3, #1
 800ce8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0f0      	beq.n	800ce74 <__gethex+0x320>
 800ce92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce96:	f104 0314 	add.w	r3, r4, #20
 800ce9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ce9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cea2:	f04f 0c00 	mov.w	ip, #0
 800cea6:	4618      	mov	r0, r3
 800cea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ceb0:	d01b      	beq.n	800ceea <__gethex+0x396>
 800ceb2:	3201      	adds	r2, #1
 800ceb4:	6002      	str	r2, [r0, #0]
 800ceb6:	2d02      	cmp	r5, #2
 800ceb8:	f104 0314 	add.w	r3, r4, #20
 800cebc:	d13c      	bne.n	800cf38 <__gethex+0x3e4>
 800cebe:	f8d8 2000 	ldr.w	r2, [r8]
 800cec2:	3a01      	subs	r2, #1
 800cec4:	42b2      	cmp	r2, r6
 800cec6:	d109      	bne.n	800cedc <__gethex+0x388>
 800cec8:	1171      	asrs	r1, r6, #5
 800ceca:	2201      	movs	r2, #1
 800cecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ced0:	f006 061f 	and.w	r6, r6, #31
 800ced4:	fa02 f606 	lsl.w	r6, r2, r6
 800ced8:	421e      	tst	r6, r3
 800ceda:	d13a      	bne.n	800cf52 <__gethex+0x3fe>
 800cedc:	f045 0520 	orr.w	r5, r5, #32
 800cee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cee2:	601c      	str	r4, [r3, #0]
 800cee4:	9b02      	ldr	r3, [sp, #8]
 800cee6:	601f      	str	r7, [r3, #0]
 800cee8:	e6b0      	b.n	800cc4c <__gethex+0xf8>
 800ceea:	4299      	cmp	r1, r3
 800ceec:	f843 cc04 	str.w	ip, [r3, #-4]
 800cef0:	d8d9      	bhi.n	800cea6 <__gethex+0x352>
 800cef2:	68a3      	ldr	r3, [r4, #8]
 800cef4:	459b      	cmp	fp, r3
 800cef6:	db17      	blt.n	800cf28 <__gethex+0x3d4>
 800cef8:	6861      	ldr	r1, [r4, #4]
 800cefa:	9801      	ldr	r0, [sp, #4]
 800cefc:	3101      	adds	r1, #1
 800cefe:	f7fe f80f 	bl	800af20 <_Balloc>
 800cf02:	4681      	mov	r9, r0
 800cf04:	b918      	cbnz	r0, 800cf0e <__gethex+0x3ba>
 800cf06:	4b1a      	ldr	r3, [pc, #104]	@ (800cf70 <__gethex+0x41c>)
 800cf08:	4602      	mov	r2, r0
 800cf0a:	2184      	movs	r1, #132	@ 0x84
 800cf0c:	e6c5      	b.n	800cc9a <__gethex+0x146>
 800cf0e:	6922      	ldr	r2, [r4, #16]
 800cf10:	3202      	adds	r2, #2
 800cf12:	f104 010c 	add.w	r1, r4, #12
 800cf16:	0092      	lsls	r2, r2, #2
 800cf18:	300c      	adds	r0, #12
 800cf1a:	f7fd f8a0 	bl	800a05e <memcpy>
 800cf1e:	4621      	mov	r1, r4
 800cf20:	9801      	ldr	r0, [sp, #4]
 800cf22:	f7fe f83d 	bl	800afa0 <_Bfree>
 800cf26:	464c      	mov	r4, r9
 800cf28:	6923      	ldr	r3, [r4, #16]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf30:	6122      	str	r2, [r4, #16]
 800cf32:	2201      	movs	r2, #1
 800cf34:	615a      	str	r2, [r3, #20]
 800cf36:	e7be      	b.n	800ceb6 <__gethex+0x362>
 800cf38:	6922      	ldr	r2, [r4, #16]
 800cf3a:	455a      	cmp	r2, fp
 800cf3c:	dd0b      	ble.n	800cf56 <__gethex+0x402>
 800cf3e:	2101      	movs	r1, #1
 800cf40:	4620      	mov	r0, r4
 800cf42:	f7ff fd9f 	bl	800ca84 <rshift>
 800cf46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf4a:	3701      	adds	r7, #1
 800cf4c:	42bb      	cmp	r3, r7
 800cf4e:	f6ff aee0 	blt.w	800cd12 <__gethex+0x1be>
 800cf52:	2501      	movs	r5, #1
 800cf54:	e7c2      	b.n	800cedc <__gethex+0x388>
 800cf56:	f016 061f 	ands.w	r6, r6, #31
 800cf5a:	d0fa      	beq.n	800cf52 <__gethex+0x3fe>
 800cf5c:	4453      	add	r3, sl
 800cf5e:	f1c6 0620 	rsb	r6, r6, #32
 800cf62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf66:	f7fe f8cd 	bl	800b104 <__hi0bits>
 800cf6a:	42b0      	cmp	r0, r6
 800cf6c:	dbe7      	blt.n	800cf3e <__gethex+0x3ea>
 800cf6e:	e7f0      	b.n	800cf52 <__gethex+0x3fe>
 800cf70:	0800db25 	.word	0x0800db25

0800cf74 <L_shift>:
 800cf74:	f1c2 0208 	rsb	r2, r2, #8
 800cf78:	0092      	lsls	r2, r2, #2
 800cf7a:	b570      	push	{r4, r5, r6, lr}
 800cf7c:	f1c2 0620 	rsb	r6, r2, #32
 800cf80:	6843      	ldr	r3, [r0, #4]
 800cf82:	6804      	ldr	r4, [r0, #0]
 800cf84:	fa03 f506 	lsl.w	r5, r3, r6
 800cf88:	432c      	orrs	r4, r5
 800cf8a:	40d3      	lsrs	r3, r2
 800cf8c:	6004      	str	r4, [r0, #0]
 800cf8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf92:	4288      	cmp	r0, r1
 800cf94:	d3f4      	bcc.n	800cf80 <L_shift+0xc>
 800cf96:	bd70      	pop	{r4, r5, r6, pc}

0800cf98 <__match>:
 800cf98:	b530      	push	{r4, r5, lr}
 800cf9a:	6803      	ldr	r3, [r0, #0]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa2:	b914      	cbnz	r4, 800cfaa <__match+0x12>
 800cfa4:	6003      	str	r3, [r0, #0]
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	bd30      	pop	{r4, r5, pc}
 800cfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cfb2:	2d19      	cmp	r5, #25
 800cfb4:	bf98      	it	ls
 800cfb6:	3220      	addls	r2, #32
 800cfb8:	42a2      	cmp	r2, r4
 800cfba:	d0f0      	beq.n	800cf9e <__match+0x6>
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	e7f3      	b.n	800cfa8 <__match+0x10>

0800cfc0 <__hexnan>:
 800cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc4:	680b      	ldr	r3, [r1, #0]
 800cfc6:	6801      	ldr	r1, [r0, #0]
 800cfc8:	115e      	asrs	r6, r3, #5
 800cfca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cfce:	f013 031f 	ands.w	r3, r3, #31
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	bf18      	it	ne
 800cfd6:	3604      	addne	r6, #4
 800cfd8:	2500      	movs	r5, #0
 800cfda:	1f37      	subs	r7, r6, #4
 800cfdc:	4682      	mov	sl, r0
 800cfde:	4690      	mov	r8, r2
 800cfe0:	9301      	str	r3, [sp, #4]
 800cfe2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cfe6:	46b9      	mov	r9, r7
 800cfe8:	463c      	mov	r4, r7
 800cfea:	9502      	str	r5, [sp, #8]
 800cfec:	46ab      	mov	fp, r5
 800cfee:	784a      	ldrb	r2, [r1, #1]
 800cff0:	1c4b      	adds	r3, r1, #1
 800cff2:	9303      	str	r3, [sp, #12]
 800cff4:	b342      	cbz	r2, 800d048 <__hexnan+0x88>
 800cff6:	4610      	mov	r0, r2
 800cff8:	9105      	str	r1, [sp, #20]
 800cffa:	9204      	str	r2, [sp, #16]
 800cffc:	f7ff fd94 	bl	800cb28 <__hexdig_fun>
 800d000:	2800      	cmp	r0, #0
 800d002:	d151      	bne.n	800d0a8 <__hexnan+0xe8>
 800d004:	9a04      	ldr	r2, [sp, #16]
 800d006:	9905      	ldr	r1, [sp, #20]
 800d008:	2a20      	cmp	r2, #32
 800d00a:	d818      	bhi.n	800d03e <__hexnan+0x7e>
 800d00c:	9b02      	ldr	r3, [sp, #8]
 800d00e:	459b      	cmp	fp, r3
 800d010:	dd13      	ble.n	800d03a <__hexnan+0x7a>
 800d012:	454c      	cmp	r4, r9
 800d014:	d206      	bcs.n	800d024 <__hexnan+0x64>
 800d016:	2d07      	cmp	r5, #7
 800d018:	dc04      	bgt.n	800d024 <__hexnan+0x64>
 800d01a:	462a      	mov	r2, r5
 800d01c:	4649      	mov	r1, r9
 800d01e:	4620      	mov	r0, r4
 800d020:	f7ff ffa8 	bl	800cf74 <L_shift>
 800d024:	4544      	cmp	r4, r8
 800d026:	d952      	bls.n	800d0ce <__hexnan+0x10e>
 800d028:	2300      	movs	r3, #0
 800d02a:	f1a4 0904 	sub.w	r9, r4, #4
 800d02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d032:	f8cd b008 	str.w	fp, [sp, #8]
 800d036:	464c      	mov	r4, r9
 800d038:	461d      	mov	r5, r3
 800d03a:	9903      	ldr	r1, [sp, #12]
 800d03c:	e7d7      	b.n	800cfee <__hexnan+0x2e>
 800d03e:	2a29      	cmp	r2, #41	@ 0x29
 800d040:	d157      	bne.n	800d0f2 <__hexnan+0x132>
 800d042:	3102      	adds	r1, #2
 800d044:	f8ca 1000 	str.w	r1, [sl]
 800d048:	f1bb 0f00 	cmp.w	fp, #0
 800d04c:	d051      	beq.n	800d0f2 <__hexnan+0x132>
 800d04e:	454c      	cmp	r4, r9
 800d050:	d206      	bcs.n	800d060 <__hexnan+0xa0>
 800d052:	2d07      	cmp	r5, #7
 800d054:	dc04      	bgt.n	800d060 <__hexnan+0xa0>
 800d056:	462a      	mov	r2, r5
 800d058:	4649      	mov	r1, r9
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7ff ff8a 	bl	800cf74 <L_shift>
 800d060:	4544      	cmp	r4, r8
 800d062:	d936      	bls.n	800d0d2 <__hexnan+0x112>
 800d064:	f1a8 0204 	sub.w	r2, r8, #4
 800d068:	4623      	mov	r3, r4
 800d06a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d06e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d072:	429f      	cmp	r7, r3
 800d074:	d2f9      	bcs.n	800d06a <__hexnan+0xaa>
 800d076:	1b3b      	subs	r3, r7, r4
 800d078:	f023 0303 	bic.w	r3, r3, #3
 800d07c:	3304      	adds	r3, #4
 800d07e:	3401      	adds	r4, #1
 800d080:	3e03      	subs	r6, #3
 800d082:	42b4      	cmp	r4, r6
 800d084:	bf88      	it	hi
 800d086:	2304      	movhi	r3, #4
 800d088:	4443      	add	r3, r8
 800d08a:	2200      	movs	r2, #0
 800d08c:	f843 2b04 	str.w	r2, [r3], #4
 800d090:	429f      	cmp	r7, r3
 800d092:	d2fb      	bcs.n	800d08c <__hexnan+0xcc>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	b91b      	cbnz	r3, 800d0a0 <__hexnan+0xe0>
 800d098:	4547      	cmp	r7, r8
 800d09a:	d128      	bne.n	800d0ee <__hexnan+0x12e>
 800d09c:	2301      	movs	r3, #1
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	2005      	movs	r0, #5
 800d0a2:	b007      	add	sp, #28
 800d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a8:	3501      	adds	r5, #1
 800d0aa:	2d08      	cmp	r5, #8
 800d0ac:	f10b 0b01 	add.w	fp, fp, #1
 800d0b0:	dd06      	ble.n	800d0c0 <__hexnan+0x100>
 800d0b2:	4544      	cmp	r4, r8
 800d0b4:	d9c1      	bls.n	800d03a <__hexnan+0x7a>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0bc:	2501      	movs	r5, #1
 800d0be:	3c04      	subs	r4, #4
 800d0c0:	6822      	ldr	r2, [r4, #0]
 800d0c2:	f000 000f 	and.w	r0, r0, #15
 800d0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d0ca:	6020      	str	r0, [r4, #0]
 800d0cc:	e7b5      	b.n	800d03a <__hexnan+0x7a>
 800d0ce:	2508      	movs	r5, #8
 800d0d0:	e7b3      	b.n	800d03a <__hexnan+0x7a>
 800d0d2:	9b01      	ldr	r3, [sp, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d0dd      	beq.n	800d094 <__hexnan+0xd4>
 800d0d8:	f1c3 0320 	rsb	r3, r3, #32
 800d0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e0:	40da      	lsrs	r2, r3
 800d0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d0ec:	e7d2      	b.n	800d094 <__hexnan+0xd4>
 800d0ee:	3f04      	subs	r7, #4
 800d0f0:	e7d0      	b.n	800d094 <__hexnan+0xd4>
 800d0f2:	2004      	movs	r0, #4
 800d0f4:	e7d5      	b.n	800d0a2 <__hexnan+0xe2>

0800d0f6 <__ascii_mbtowc>:
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	b901      	cbnz	r1, 800d0fc <__ascii_mbtowc+0x6>
 800d0fa:	a901      	add	r1, sp, #4
 800d0fc:	b142      	cbz	r2, 800d110 <__ascii_mbtowc+0x1a>
 800d0fe:	b14b      	cbz	r3, 800d114 <__ascii_mbtowc+0x1e>
 800d100:	7813      	ldrb	r3, [r2, #0]
 800d102:	600b      	str	r3, [r1, #0]
 800d104:	7812      	ldrb	r2, [r2, #0]
 800d106:	1e10      	subs	r0, r2, #0
 800d108:	bf18      	it	ne
 800d10a:	2001      	movne	r0, #1
 800d10c:	b002      	add	sp, #8
 800d10e:	4770      	bx	lr
 800d110:	4610      	mov	r0, r2
 800d112:	e7fb      	b.n	800d10c <__ascii_mbtowc+0x16>
 800d114:	f06f 0001 	mvn.w	r0, #1
 800d118:	e7f8      	b.n	800d10c <__ascii_mbtowc+0x16>

0800d11a <_realloc_r>:
 800d11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11e:	4680      	mov	r8, r0
 800d120:	4615      	mov	r5, r2
 800d122:	460c      	mov	r4, r1
 800d124:	b921      	cbnz	r1, 800d130 <_realloc_r+0x16>
 800d126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	4611      	mov	r1, r2
 800d12c:	f7fd be6c 	b.w	800ae08 <_malloc_r>
 800d130:	b92a      	cbnz	r2, 800d13e <_realloc_r+0x24>
 800d132:	f7fd fdf5 	bl	800ad20 <_free_r>
 800d136:	2400      	movs	r4, #0
 800d138:	4620      	mov	r0, r4
 800d13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13e:	f000 f840 	bl	800d1c2 <_malloc_usable_size_r>
 800d142:	4285      	cmp	r5, r0
 800d144:	4606      	mov	r6, r0
 800d146:	d802      	bhi.n	800d14e <_realloc_r+0x34>
 800d148:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d14c:	d8f4      	bhi.n	800d138 <_realloc_r+0x1e>
 800d14e:	4629      	mov	r1, r5
 800d150:	4640      	mov	r0, r8
 800d152:	f7fd fe59 	bl	800ae08 <_malloc_r>
 800d156:	4607      	mov	r7, r0
 800d158:	2800      	cmp	r0, #0
 800d15a:	d0ec      	beq.n	800d136 <_realloc_r+0x1c>
 800d15c:	42b5      	cmp	r5, r6
 800d15e:	462a      	mov	r2, r5
 800d160:	4621      	mov	r1, r4
 800d162:	bf28      	it	cs
 800d164:	4632      	movcs	r2, r6
 800d166:	f7fc ff7a 	bl	800a05e <memcpy>
 800d16a:	4621      	mov	r1, r4
 800d16c:	4640      	mov	r0, r8
 800d16e:	f7fd fdd7 	bl	800ad20 <_free_r>
 800d172:	463c      	mov	r4, r7
 800d174:	e7e0      	b.n	800d138 <_realloc_r+0x1e>

0800d176 <__ascii_wctomb>:
 800d176:	4603      	mov	r3, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	b141      	cbz	r1, 800d18e <__ascii_wctomb+0x18>
 800d17c:	2aff      	cmp	r2, #255	@ 0xff
 800d17e:	d904      	bls.n	800d18a <__ascii_wctomb+0x14>
 800d180:	228a      	movs	r2, #138	@ 0x8a
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	4770      	bx	lr
 800d18a:	700a      	strb	r2, [r1, #0]
 800d18c:	2001      	movs	r0, #1
 800d18e:	4770      	bx	lr

0800d190 <fiprintf>:
 800d190:	b40e      	push	{r1, r2, r3}
 800d192:	b503      	push	{r0, r1, lr}
 800d194:	4601      	mov	r1, r0
 800d196:	ab03      	add	r3, sp, #12
 800d198:	4805      	ldr	r0, [pc, #20]	@ (800d1b0 <fiprintf+0x20>)
 800d19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19e:	6800      	ldr	r0, [r0, #0]
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	f000 f83f 	bl	800d224 <_vfiprintf_r>
 800d1a6:	b002      	add	sp, #8
 800d1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ac:	b003      	add	sp, #12
 800d1ae:	4770      	bx	lr
 800d1b0:	20000034 	.word	0x20000034

0800d1b4 <abort>:
 800d1b4:	b508      	push	{r3, lr}
 800d1b6:	2006      	movs	r0, #6
 800d1b8:	f000 fa08 	bl	800d5cc <raise>
 800d1bc:	2001      	movs	r0, #1
 800d1be:	f7f5 f9a1 	bl	8002504 <_exit>

0800d1c2 <_malloc_usable_size_r>:
 800d1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1c6:	1f18      	subs	r0, r3, #4
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	bfbc      	itt	lt
 800d1cc:	580b      	ldrlt	r3, [r1, r0]
 800d1ce:	18c0      	addlt	r0, r0, r3
 800d1d0:	4770      	bx	lr

0800d1d2 <__sfputc_r>:
 800d1d2:	6893      	ldr	r3, [r2, #8]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	b410      	push	{r4}
 800d1da:	6093      	str	r3, [r2, #8]
 800d1dc:	da08      	bge.n	800d1f0 <__sfputc_r+0x1e>
 800d1de:	6994      	ldr	r4, [r2, #24]
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	db01      	blt.n	800d1e8 <__sfputc_r+0x16>
 800d1e4:	290a      	cmp	r1, #10
 800d1e6:	d103      	bne.n	800d1f0 <__sfputc_r+0x1e>
 800d1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ec:	f000 b932 	b.w	800d454 <__swbuf_r>
 800d1f0:	6813      	ldr	r3, [r2, #0]
 800d1f2:	1c58      	adds	r0, r3, #1
 800d1f4:	6010      	str	r0, [r2, #0]
 800d1f6:	7019      	strb	r1, [r3, #0]
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <__sfputs_r>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	4606      	mov	r6, r0
 800d204:	460f      	mov	r7, r1
 800d206:	4614      	mov	r4, r2
 800d208:	18d5      	adds	r5, r2, r3
 800d20a:	42ac      	cmp	r4, r5
 800d20c:	d101      	bne.n	800d212 <__sfputs_r+0x12>
 800d20e:	2000      	movs	r0, #0
 800d210:	e007      	b.n	800d222 <__sfputs_r+0x22>
 800d212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d216:	463a      	mov	r2, r7
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ffda 	bl	800d1d2 <__sfputc_r>
 800d21e:	1c43      	adds	r3, r0, #1
 800d220:	d1f3      	bne.n	800d20a <__sfputs_r+0xa>
 800d222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d224 <_vfiprintf_r>:
 800d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d228:	460d      	mov	r5, r1
 800d22a:	b09d      	sub	sp, #116	@ 0x74
 800d22c:	4614      	mov	r4, r2
 800d22e:	4698      	mov	r8, r3
 800d230:	4606      	mov	r6, r0
 800d232:	b118      	cbz	r0, 800d23c <_vfiprintf_r+0x18>
 800d234:	6a03      	ldr	r3, [r0, #32]
 800d236:	b90b      	cbnz	r3, 800d23c <_vfiprintf_r+0x18>
 800d238:	f7fc fdf8 	bl	8009e2c <__sinit>
 800d23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d23e:	07d9      	lsls	r1, r3, #31
 800d240:	d405      	bmi.n	800d24e <_vfiprintf_r+0x2a>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d402      	bmi.n	800d24e <_vfiprintf_r+0x2a>
 800d248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d24a:	f7fc ff06 	bl	800a05a <__retarget_lock_acquire_recursive>
 800d24e:	89ab      	ldrh	r3, [r5, #12]
 800d250:	071b      	lsls	r3, r3, #28
 800d252:	d501      	bpl.n	800d258 <_vfiprintf_r+0x34>
 800d254:	692b      	ldr	r3, [r5, #16]
 800d256:	b99b      	cbnz	r3, 800d280 <_vfiprintf_r+0x5c>
 800d258:	4629      	mov	r1, r5
 800d25a:	4630      	mov	r0, r6
 800d25c:	f000 f938 	bl	800d4d0 <__swsetup_r>
 800d260:	b170      	cbz	r0, 800d280 <_vfiprintf_r+0x5c>
 800d262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d264:	07dc      	lsls	r4, r3, #31
 800d266:	d504      	bpl.n	800d272 <_vfiprintf_r+0x4e>
 800d268:	f04f 30ff 	mov.w	r0, #4294967295
 800d26c:	b01d      	add	sp, #116	@ 0x74
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	0598      	lsls	r0, r3, #22
 800d276:	d4f7      	bmi.n	800d268 <_vfiprintf_r+0x44>
 800d278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d27a:	f7fc feef 	bl	800a05c <__retarget_lock_release_recursive>
 800d27e:	e7f3      	b.n	800d268 <_vfiprintf_r+0x44>
 800d280:	2300      	movs	r3, #0
 800d282:	9309      	str	r3, [sp, #36]	@ 0x24
 800d284:	2320      	movs	r3, #32
 800d286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d28e:	2330      	movs	r3, #48	@ 0x30
 800d290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d440 <_vfiprintf_r+0x21c>
 800d294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d298:	f04f 0901 	mov.w	r9, #1
 800d29c:	4623      	mov	r3, r4
 800d29e:	469a      	mov	sl, r3
 800d2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2a4:	b10a      	cbz	r2, 800d2aa <_vfiprintf_r+0x86>
 800d2a6:	2a25      	cmp	r2, #37	@ 0x25
 800d2a8:	d1f9      	bne.n	800d29e <_vfiprintf_r+0x7a>
 800d2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ae:	d00b      	beq.n	800d2c8 <_vfiprintf_r+0xa4>
 800d2b0:	465b      	mov	r3, fp
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7ff ffa2 	bl	800d200 <__sfputs_r>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	f000 80a7 	beq.w	800d410 <_vfiprintf_r+0x1ec>
 800d2c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2c4:	445a      	add	r2, fp
 800d2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f000 809f 	beq.w	800d410 <_vfiprintf_r+0x1ec>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2dc:	f10a 0a01 	add.w	sl, sl, #1
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	9307      	str	r3, [sp, #28]
 800d2e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2ea:	4654      	mov	r4, sl
 800d2ec:	2205      	movs	r2, #5
 800d2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f2:	4853      	ldr	r0, [pc, #332]	@ (800d440 <_vfiprintf_r+0x21c>)
 800d2f4:	f7f2 ff44 	bl	8000180 <memchr>
 800d2f8:	9a04      	ldr	r2, [sp, #16]
 800d2fa:	b9d8      	cbnz	r0, 800d334 <_vfiprintf_r+0x110>
 800d2fc:	06d1      	lsls	r1, r2, #27
 800d2fe:	bf44      	itt	mi
 800d300:	2320      	movmi	r3, #32
 800d302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d306:	0713      	lsls	r3, r2, #28
 800d308:	bf44      	itt	mi
 800d30a:	232b      	movmi	r3, #43	@ 0x2b
 800d30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d310:	f89a 3000 	ldrb.w	r3, [sl]
 800d314:	2b2a      	cmp	r3, #42	@ 0x2a
 800d316:	d015      	beq.n	800d344 <_vfiprintf_r+0x120>
 800d318:	9a07      	ldr	r2, [sp, #28]
 800d31a:	4654      	mov	r4, sl
 800d31c:	2000      	movs	r0, #0
 800d31e:	f04f 0c0a 	mov.w	ip, #10
 800d322:	4621      	mov	r1, r4
 800d324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d328:	3b30      	subs	r3, #48	@ 0x30
 800d32a:	2b09      	cmp	r3, #9
 800d32c:	d94b      	bls.n	800d3c6 <_vfiprintf_r+0x1a2>
 800d32e:	b1b0      	cbz	r0, 800d35e <_vfiprintf_r+0x13a>
 800d330:	9207      	str	r2, [sp, #28]
 800d332:	e014      	b.n	800d35e <_vfiprintf_r+0x13a>
 800d334:	eba0 0308 	sub.w	r3, r0, r8
 800d338:	fa09 f303 	lsl.w	r3, r9, r3
 800d33c:	4313      	orrs	r3, r2
 800d33e:	9304      	str	r3, [sp, #16]
 800d340:	46a2      	mov	sl, r4
 800d342:	e7d2      	b.n	800d2ea <_vfiprintf_r+0xc6>
 800d344:	9b03      	ldr	r3, [sp, #12]
 800d346:	1d19      	adds	r1, r3, #4
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	9103      	str	r1, [sp, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfbb      	ittet	lt
 800d350:	425b      	neglt	r3, r3
 800d352:	f042 0202 	orrlt.w	r2, r2, #2
 800d356:	9307      	strge	r3, [sp, #28]
 800d358:	9307      	strlt	r3, [sp, #28]
 800d35a:	bfb8      	it	lt
 800d35c:	9204      	strlt	r2, [sp, #16]
 800d35e:	7823      	ldrb	r3, [r4, #0]
 800d360:	2b2e      	cmp	r3, #46	@ 0x2e
 800d362:	d10a      	bne.n	800d37a <_vfiprintf_r+0x156>
 800d364:	7863      	ldrb	r3, [r4, #1]
 800d366:	2b2a      	cmp	r3, #42	@ 0x2a
 800d368:	d132      	bne.n	800d3d0 <_vfiprintf_r+0x1ac>
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	9203      	str	r2, [sp, #12]
 800d372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d376:	3402      	adds	r4, #2
 800d378:	9305      	str	r3, [sp, #20]
 800d37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d450 <_vfiprintf_r+0x22c>
 800d37e:	7821      	ldrb	r1, [r4, #0]
 800d380:	2203      	movs	r2, #3
 800d382:	4650      	mov	r0, sl
 800d384:	f7f2 fefc 	bl	8000180 <memchr>
 800d388:	b138      	cbz	r0, 800d39a <_vfiprintf_r+0x176>
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	eba0 000a 	sub.w	r0, r0, sl
 800d390:	2240      	movs	r2, #64	@ 0x40
 800d392:	4082      	lsls	r2, r0
 800d394:	4313      	orrs	r3, r2
 800d396:	3401      	adds	r4, #1
 800d398:	9304      	str	r3, [sp, #16]
 800d39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39e:	4829      	ldr	r0, [pc, #164]	@ (800d444 <_vfiprintf_r+0x220>)
 800d3a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3a4:	2206      	movs	r2, #6
 800d3a6:	f7f2 feeb 	bl	8000180 <memchr>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d03f      	beq.n	800d42e <_vfiprintf_r+0x20a>
 800d3ae:	4b26      	ldr	r3, [pc, #152]	@ (800d448 <_vfiprintf_r+0x224>)
 800d3b0:	bb1b      	cbnz	r3, 800d3fa <_vfiprintf_r+0x1d6>
 800d3b2:	9b03      	ldr	r3, [sp, #12]
 800d3b4:	3307      	adds	r3, #7
 800d3b6:	f023 0307 	bic.w	r3, r3, #7
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3c0:	443b      	add	r3, r7
 800d3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3c4:	e76a      	b.n	800d29c <_vfiprintf_r+0x78>
 800d3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	e7a8      	b.n	800d322 <_vfiprintf_r+0xfe>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	3401      	adds	r4, #1
 800d3d4:	9305      	str	r3, [sp, #20]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	f04f 0c0a 	mov.w	ip, #10
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3e2:	3a30      	subs	r2, #48	@ 0x30
 800d3e4:	2a09      	cmp	r2, #9
 800d3e6:	d903      	bls.n	800d3f0 <_vfiprintf_r+0x1cc>
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d0c6      	beq.n	800d37a <_vfiprintf_r+0x156>
 800d3ec:	9105      	str	r1, [sp, #20]
 800d3ee:	e7c4      	b.n	800d37a <_vfiprintf_r+0x156>
 800d3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e7f0      	b.n	800d3dc <_vfiprintf_r+0x1b8>
 800d3fa:	ab03      	add	r3, sp, #12
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	462a      	mov	r2, r5
 800d400:	4b12      	ldr	r3, [pc, #72]	@ (800d44c <_vfiprintf_r+0x228>)
 800d402:	a904      	add	r1, sp, #16
 800d404:	4630      	mov	r0, r6
 800d406:	f7fb feb9 	bl	800917c <_printf_float>
 800d40a:	4607      	mov	r7, r0
 800d40c:	1c78      	adds	r0, r7, #1
 800d40e:	d1d6      	bne.n	800d3be <_vfiprintf_r+0x19a>
 800d410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d412:	07d9      	lsls	r1, r3, #31
 800d414:	d405      	bmi.n	800d422 <_vfiprintf_r+0x1fe>
 800d416:	89ab      	ldrh	r3, [r5, #12]
 800d418:	059a      	lsls	r2, r3, #22
 800d41a:	d402      	bmi.n	800d422 <_vfiprintf_r+0x1fe>
 800d41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d41e:	f7fc fe1d 	bl	800a05c <__retarget_lock_release_recursive>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	065b      	lsls	r3, r3, #25
 800d426:	f53f af1f 	bmi.w	800d268 <_vfiprintf_r+0x44>
 800d42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42c:	e71e      	b.n	800d26c <_vfiprintf_r+0x48>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4b05      	ldr	r3, [pc, #20]	@ (800d44c <_vfiprintf_r+0x228>)
 800d436:	a904      	add	r1, sp, #16
 800d438:	4630      	mov	r0, r6
 800d43a:	f7fc f937 	bl	80096ac <_printf_i>
 800d43e:	e7e4      	b.n	800d40a <_vfiprintf_r+0x1e6>
 800d440:	0800dde9 	.word	0x0800dde9
 800d444:	0800ddf3 	.word	0x0800ddf3
 800d448:	0800917d 	.word	0x0800917d
 800d44c:	0800d201 	.word	0x0800d201
 800d450:	0800ddef 	.word	0x0800ddef

0800d454 <__swbuf_r>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	460e      	mov	r6, r1
 800d458:	4614      	mov	r4, r2
 800d45a:	4605      	mov	r5, r0
 800d45c:	b118      	cbz	r0, 800d466 <__swbuf_r+0x12>
 800d45e:	6a03      	ldr	r3, [r0, #32]
 800d460:	b90b      	cbnz	r3, 800d466 <__swbuf_r+0x12>
 800d462:	f7fc fce3 	bl	8009e2c <__sinit>
 800d466:	69a3      	ldr	r3, [r4, #24]
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	071a      	lsls	r2, r3, #28
 800d46e:	d501      	bpl.n	800d474 <__swbuf_r+0x20>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b943      	cbnz	r3, 800d486 <__swbuf_r+0x32>
 800d474:	4621      	mov	r1, r4
 800d476:	4628      	mov	r0, r5
 800d478:	f000 f82a 	bl	800d4d0 <__swsetup_r>
 800d47c:	b118      	cbz	r0, 800d486 <__swbuf_r+0x32>
 800d47e:	f04f 37ff 	mov.w	r7, #4294967295
 800d482:	4638      	mov	r0, r7
 800d484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	6922      	ldr	r2, [r4, #16]
 800d48a:	1a98      	subs	r0, r3, r2
 800d48c:	6963      	ldr	r3, [r4, #20]
 800d48e:	b2f6      	uxtb	r6, r6
 800d490:	4283      	cmp	r3, r0
 800d492:	4637      	mov	r7, r6
 800d494:	dc05      	bgt.n	800d4a2 <__swbuf_r+0x4e>
 800d496:	4621      	mov	r1, r4
 800d498:	4628      	mov	r0, r5
 800d49a:	f7ff fa53 	bl	800c944 <_fflush_r>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d1ed      	bne.n	800d47e <__swbuf_r+0x2a>
 800d4a2:	68a3      	ldr	r3, [r4, #8]
 800d4a4:	3b01      	subs	r3, #1
 800d4a6:	60a3      	str	r3, [r4, #8]
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	6022      	str	r2, [r4, #0]
 800d4ae:	701e      	strb	r6, [r3, #0]
 800d4b0:	6962      	ldr	r2, [r4, #20]
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d004      	beq.n	800d4c2 <__swbuf_r+0x6e>
 800d4b8:	89a3      	ldrh	r3, [r4, #12]
 800d4ba:	07db      	lsls	r3, r3, #31
 800d4bc:	d5e1      	bpl.n	800d482 <__swbuf_r+0x2e>
 800d4be:	2e0a      	cmp	r6, #10
 800d4c0:	d1df      	bne.n	800d482 <__swbuf_r+0x2e>
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f7ff fa3d 	bl	800c944 <_fflush_r>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0d9      	beq.n	800d482 <__swbuf_r+0x2e>
 800d4ce:	e7d6      	b.n	800d47e <__swbuf_r+0x2a>

0800d4d0 <__swsetup_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4b29      	ldr	r3, [pc, #164]	@ (800d578 <__swsetup_r+0xa8>)
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	460c      	mov	r4, r1
 800d4da:	b118      	cbz	r0, 800d4e4 <__swsetup_r+0x14>
 800d4dc:	6a03      	ldr	r3, [r0, #32]
 800d4de:	b90b      	cbnz	r3, 800d4e4 <__swsetup_r+0x14>
 800d4e0:	f7fc fca4 	bl	8009e2c <__sinit>
 800d4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e8:	0719      	lsls	r1, r3, #28
 800d4ea:	d422      	bmi.n	800d532 <__swsetup_r+0x62>
 800d4ec:	06da      	lsls	r2, r3, #27
 800d4ee:	d407      	bmi.n	800d500 <__swsetup_r+0x30>
 800d4f0:	2209      	movs	r2, #9
 800d4f2:	602a      	str	r2, [r5, #0]
 800d4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f8:	81a3      	strh	r3, [r4, #12]
 800d4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d4fe:	e033      	b.n	800d568 <__swsetup_r+0x98>
 800d500:	0758      	lsls	r0, r3, #29
 800d502:	d512      	bpl.n	800d52a <__swsetup_r+0x5a>
 800d504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d506:	b141      	cbz	r1, 800d51a <__swsetup_r+0x4a>
 800d508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d50c:	4299      	cmp	r1, r3
 800d50e:	d002      	beq.n	800d516 <__swsetup_r+0x46>
 800d510:	4628      	mov	r0, r5
 800d512:	f7fd fc05 	bl	800ad20 <_free_r>
 800d516:	2300      	movs	r3, #0
 800d518:	6363      	str	r3, [r4, #52]	@ 0x34
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d520:	81a3      	strh	r3, [r4, #12]
 800d522:	2300      	movs	r3, #0
 800d524:	6063      	str	r3, [r4, #4]
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	89a3      	ldrh	r3, [r4, #12]
 800d52c:	f043 0308 	orr.w	r3, r3, #8
 800d530:	81a3      	strh	r3, [r4, #12]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	b94b      	cbnz	r3, 800d54a <__swsetup_r+0x7a>
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d540:	d003      	beq.n	800d54a <__swsetup_r+0x7a>
 800d542:	4621      	mov	r1, r4
 800d544:	4628      	mov	r0, r5
 800d546:	f000 f883 	bl	800d650 <__smakebuf_r>
 800d54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d54e:	f013 0201 	ands.w	r2, r3, #1
 800d552:	d00a      	beq.n	800d56a <__swsetup_r+0x9a>
 800d554:	2200      	movs	r2, #0
 800d556:	60a2      	str	r2, [r4, #8]
 800d558:	6962      	ldr	r2, [r4, #20]
 800d55a:	4252      	negs	r2, r2
 800d55c:	61a2      	str	r2, [r4, #24]
 800d55e:	6922      	ldr	r2, [r4, #16]
 800d560:	b942      	cbnz	r2, 800d574 <__swsetup_r+0xa4>
 800d562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d566:	d1c5      	bne.n	800d4f4 <__swsetup_r+0x24>
 800d568:	bd38      	pop	{r3, r4, r5, pc}
 800d56a:	0799      	lsls	r1, r3, #30
 800d56c:	bf58      	it	pl
 800d56e:	6962      	ldrpl	r2, [r4, #20]
 800d570:	60a2      	str	r2, [r4, #8]
 800d572:	e7f4      	b.n	800d55e <__swsetup_r+0x8e>
 800d574:	2000      	movs	r0, #0
 800d576:	e7f7      	b.n	800d568 <__swsetup_r+0x98>
 800d578:	20000034 	.word	0x20000034

0800d57c <_raise_r>:
 800d57c:	291f      	cmp	r1, #31
 800d57e:	b538      	push	{r3, r4, r5, lr}
 800d580:	4605      	mov	r5, r0
 800d582:	460c      	mov	r4, r1
 800d584:	d904      	bls.n	800d590 <_raise_r+0x14>
 800d586:	2316      	movs	r3, #22
 800d588:	6003      	str	r3, [r0, #0]
 800d58a:	f04f 30ff 	mov.w	r0, #4294967295
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d592:	b112      	cbz	r2, 800d59a <_raise_r+0x1e>
 800d594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d598:	b94b      	cbnz	r3, 800d5ae <_raise_r+0x32>
 800d59a:	4628      	mov	r0, r5
 800d59c:	f000 f830 	bl	800d600 <_getpid_r>
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	4628      	mov	r0, r5
 800d5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5aa:	f000 b817 	b.w	800d5dc <_kill_r>
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d00a      	beq.n	800d5c8 <_raise_r+0x4c>
 800d5b2:	1c59      	adds	r1, r3, #1
 800d5b4:	d103      	bne.n	800d5be <_raise_r+0x42>
 800d5b6:	2316      	movs	r3, #22
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	2001      	movs	r0, #1
 800d5bc:	e7e7      	b.n	800d58e <_raise_r+0x12>
 800d5be:	2100      	movs	r1, #0
 800d5c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	4798      	blx	r3
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	e7e0      	b.n	800d58e <_raise_r+0x12>

0800d5cc <raise>:
 800d5cc:	4b02      	ldr	r3, [pc, #8]	@ (800d5d8 <raise+0xc>)
 800d5ce:	4601      	mov	r1, r0
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	f7ff bfd3 	b.w	800d57c <_raise_r>
 800d5d6:	bf00      	nop
 800d5d8:	20000034 	.word	0x20000034

0800d5dc <_kill_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4d07      	ldr	r5, [pc, #28]	@ (800d5fc <_kill_r+0x20>)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	f7f4 ff7b 	bl	80024e4 <_kill>
 800d5ee:	1c43      	adds	r3, r0, #1
 800d5f0:	d102      	bne.n	800d5f8 <_kill_r+0x1c>
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	b103      	cbz	r3, 800d5f8 <_kill_r+0x1c>
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20002aa8 	.word	0x20002aa8

0800d600 <_getpid_r>:
 800d600:	f7f4 bf68 	b.w	80024d4 <_getpid>

0800d604 <__swhatbuf_r>:
 800d604:	b570      	push	{r4, r5, r6, lr}
 800d606:	460c      	mov	r4, r1
 800d608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60c:	2900      	cmp	r1, #0
 800d60e:	b096      	sub	sp, #88	@ 0x58
 800d610:	4615      	mov	r5, r2
 800d612:	461e      	mov	r6, r3
 800d614:	da0d      	bge.n	800d632 <__swhatbuf_r+0x2e>
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d61c:	f04f 0100 	mov.w	r1, #0
 800d620:	bf14      	ite	ne
 800d622:	2340      	movne	r3, #64	@ 0x40
 800d624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d628:	2000      	movs	r0, #0
 800d62a:	6031      	str	r1, [r6, #0]
 800d62c:	602b      	str	r3, [r5, #0]
 800d62e:	b016      	add	sp, #88	@ 0x58
 800d630:	bd70      	pop	{r4, r5, r6, pc}
 800d632:	466a      	mov	r2, sp
 800d634:	f000 f848 	bl	800d6c8 <_fstat_r>
 800d638:	2800      	cmp	r0, #0
 800d63a:	dbec      	blt.n	800d616 <__swhatbuf_r+0x12>
 800d63c:	9901      	ldr	r1, [sp, #4]
 800d63e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d646:	4259      	negs	r1, r3
 800d648:	4159      	adcs	r1, r3
 800d64a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d64e:	e7eb      	b.n	800d628 <__swhatbuf_r+0x24>

0800d650 <__smakebuf_r>:
 800d650:	898b      	ldrh	r3, [r1, #12]
 800d652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d654:	079d      	lsls	r5, r3, #30
 800d656:	4606      	mov	r6, r0
 800d658:	460c      	mov	r4, r1
 800d65a:	d507      	bpl.n	800d66c <__smakebuf_r+0x1c>
 800d65c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	6123      	str	r3, [r4, #16]
 800d664:	2301      	movs	r3, #1
 800d666:	6163      	str	r3, [r4, #20]
 800d668:	b003      	add	sp, #12
 800d66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d66c:	ab01      	add	r3, sp, #4
 800d66e:	466a      	mov	r2, sp
 800d670:	f7ff ffc8 	bl	800d604 <__swhatbuf_r>
 800d674:	9f00      	ldr	r7, [sp, #0]
 800d676:	4605      	mov	r5, r0
 800d678:	4639      	mov	r1, r7
 800d67a:	4630      	mov	r0, r6
 800d67c:	f7fd fbc4 	bl	800ae08 <_malloc_r>
 800d680:	b948      	cbnz	r0, 800d696 <__smakebuf_r+0x46>
 800d682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d686:	059a      	lsls	r2, r3, #22
 800d688:	d4ee      	bmi.n	800d668 <__smakebuf_r+0x18>
 800d68a:	f023 0303 	bic.w	r3, r3, #3
 800d68e:	f043 0302 	orr.w	r3, r3, #2
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	e7e2      	b.n	800d65c <__smakebuf_r+0xc>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	6020      	str	r0, [r4, #0]
 800d69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d69e:	81a3      	strh	r3, [r4, #12]
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6a6:	b15b      	cbz	r3, 800d6c0 <__smakebuf_r+0x70>
 800d6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f000 f81d 	bl	800d6ec <_isatty_r>
 800d6b2:	b128      	cbz	r0, 800d6c0 <__smakebuf_r+0x70>
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	f023 0303 	bic.w	r3, r3, #3
 800d6ba:	f043 0301 	orr.w	r3, r3, #1
 800d6be:	81a3      	strh	r3, [r4, #12]
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	431d      	orrs	r5, r3
 800d6c4:	81a5      	strh	r5, [r4, #12]
 800d6c6:	e7cf      	b.n	800d668 <__smakebuf_r+0x18>

0800d6c8 <_fstat_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d07      	ldr	r5, [pc, #28]	@ (800d6e8 <_fstat_r+0x20>)
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	602b      	str	r3, [r5, #0]
 800d6d6:	f7f4 ff49 	bl	800256c <_fstat>
 800d6da:	1c43      	adds	r3, r0, #1
 800d6dc:	d102      	bne.n	800d6e4 <_fstat_r+0x1c>
 800d6de:	682b      	ldr	r3, [r5, #0]
 800d6e0:	b103      	cbz	r3, 800d6e4 <_fstat_r+0x1c>
 800d6e2:	6023      	str	r3, [r4, #0]
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20002aa8 	.word	0x20002aa8

0800d6ec <_isatty_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	4d06      	ldr	r5, [pc, #24]	@ (800d708 <_isatty_r+0x1c>)
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	4608      	mov	r0, r1
 800d6f6:	602b      	str	r3, [r5, #0]
 800d6f8:	f7f4 ff48 	bl	800258c <_isatty>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d102      	bne.n	800d706 <_isatty_r+0x1a>
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	b103      	cbz	r3, 800d706 <_isatty_r+0x1a>
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	20002aa8 	.word	0x20002aa8

0800d70c <_init>:
 800d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70e:	bf00      	nop
 800d710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d712:	bc08      	pop	{r3}
 800d714:	469e      	mov	lr, r3
 800d716:	4770      	bx	lr

0800d718 <_fini>:
 800d718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71a:	bf00      	nop
 800d71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71e:	bc08      	pop	{r3}
 800d720:	469e      	mov	lr, r3
 800d722:	4770      	bx	lr
