
STM32WB55_LIS2DH_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a274  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800a3b8  0800a3b8  0000b3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a920  0800a920  0000b920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a928  0800a928  0000b928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a92c  0800a92c  0000b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000004  0800a930  0000c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000938  200001d8  0800ab04  0000c1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b10  0800ab04  0000cb10  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001afb3  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032c5  00000000  00000000  000271bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bc0  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000152d  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023a6f  00000000  00000000  0002d56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018d2f  00000000  00000000  00050fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000df95c  00000000  00000000  00069d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00149667  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b28  00000000  00000000  001496ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000047  00000000  00000000  001521d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a39c 	.word	0x0800a39c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	0800a39c 	.word	0x0800a39c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	72fb      	strb	r3, [r7, #11]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <lis2dh12_read_reg+0x20>
  {
    return -1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <lis2dh12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	685c      	ldr	r4, [r3, #4]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68d8      	ldr	r0, [r3, #12]
 8000fbc:	893b      	ldrh	r3, [r7, #8]
 8000fbe:	7af9      	ldrb	r1, [r7, #11]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	47a0      	blx	r4
 8000fc4:	6178      	str	r0, [r7, #20]

  return ret;
 8000fc6:	697b      	ldr	r3, [r7, #20]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}

08000fd0 <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	460b      	mov	r3, r1
 8000fde:	72fb      	strb	r3, [r7, #11]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d102      	bne.n	8000ff0 <lis2dh12_write_reg+0x20>
  {
    return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <lis2dh12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681c      	ldr	r4, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	68d8      	ldr	r0, [r3, #12]
 8000ff8:	893b      	ldrh	r3, [r7, #8]
 8000ffa:	7af9      	ldrb	r1, [r7, #11]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	47a0      	blx	r4
 8001000:	6178      	str	r0, [r7, #20]

  return ret;
 8001002:	697b      	ldr	r3, [r7, #20]
}
 8001004:	4618      	mov	r0, r3
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}

0800100c <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8001016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001026:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800102a:	eef0 7a66 	vmov.f32	s15, s13
}
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <lis2dh12_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001052:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001078 <lis2dh12_from_lsb_hr_to_celsius+0x3c>
 8001056:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800105a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001066:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	42800000 	.word	0x42800000

0800107c <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	2301      	movs	r3, #1
 800108c:	2107      	movs	r1, #7
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff80 	bl	8000f94 <lis2dh12_read_reg>
 8001094:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	701a      	strb	r2, [r3, #0]

  return ret;
 80010a4:	68fb      	ldr	r3, [r7, #12]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
 80010b8:	f107 0208 	add.w	r2, r7, #8
 80010bc:	2302      	movs	r3, #2
 80010be:	210c      	movs	r1, #12
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff67 	bl	8000f94 <lis2dh12_read_reg>
 80010c6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80010c8:	7a7b      	ldrb	r3, [r7, #9]
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b29b      	uxth	r3, r3
 80010dc:	7a3a      	ldrb	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	801a      	strh	r2, [r3, #0]

  return ret;
 80010e8:	68fb      	ldr	r3, [r7, #12]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(const stmdev_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	70fb      	strb	r3, [r7, #3]
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG,
 80010fe:	f107 0208 	add.w	r2, r7, #8
 8001102:	2301      	movs	r3, #1
 8001104:	211f      	movs	r1, #31
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff44 	bl	8000f94 <lis2dh12_read_reg>
 800110c:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10f      	bne.n	8001134 <lis2dh12_temperature_meas_set+0x42>
  {
    temp_cfg_reg.temp_en = (uint8_t) val;
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	7a3b      	ldrb	r3, [r7, #8]
 800111e:	f362 1387 	bfi	r3, r2, #6, #2
 8001122:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG,
 8001124:	f107 0208 	add.w	r2, r7, #8
 8001128:	2301      	movs	r3, #1
 800112a:	211f      	movs	r1, #31
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff4f 	bl	8000fd0 <lis2dh12_write_reg>
 8001132:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(const stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 800114a:	f107 0210 	add.w	r2, r7, #16
 800114e:	2301      	movs	r3, #1
 8001150:	2120      	movs	r1, #32
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff1e 	bl	8000f94 <lis2dh12_read_reg>
 8001158:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <lis2dh12_operating_mode_set+0x32>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	2301      	movs	r3, #1
 8001166:	2123      	movs	r1, #35	@ 0x23
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff13 	bl	8000f94 <lis2dh12_read_reg>
 800116e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d128      	bne.n	80011c8 <lis2dh12_operating_mode_set+0x8a>
  {
    if (val == LIS2DH12_HR_12bit)
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <lis2dh12_operating_mode_set+0x4e>
    {
      ctrl_reg1.lpen = 0;
 800117c:	7c3b      	ldrb	r3, [r7, #16]
 800117e:	f36f 03c3 	bfc	r3, #3, #1
 8001182:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 8001184:	7b3b      	ldrb	r3, [r7, #12]
 8001186:	f043 0308 	orr.w	r3, r3, #8
 800118a:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_NM_10bit)
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <lis2dh12_operating_mode_set+0x64>
    {
      ctrl_reg1.lpen = 0;
 8001192:	7c3b      	ldrb	r3, [r7, #16]
 8001194:	f36f 03c3 	bfc	r3, #3, #1
 8001198:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	f36f 03c3 	bfc	r3, #3, #1
 80011a0:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_LP_8bit)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d107      	bne.n	80011b8 <lis2dh12_operating_mode_set+0x7a>
    {
      ctrl_reg1.lpen = 1;
 80011a8:	7c3b      	ldrb	r3, [r7, #16]
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	f36f 03c3 	bfc	r3, #3, #1
 80011b6:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 80011b8:	f107 0210 	add.w	r2, r7, #16
 80011bc:	2301      	movs	r3, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff05 	bl	8000fd0 <lis2dh12_write_reg>
 80011c6:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <lis2dh12_operating_mode_set+0xa0>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 80011ce:	f107 020c 	add.w	r2, r7, #12
 80011d2:	2301      	movs	r3, #1
 80011d4:	2123      	movs	r1, #35	@ 0x23
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fefa 	bl	8000fd0 <lis2dh12_write_reg>
 80011dc:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 80011de:	697b      	ldr	r3, [r7, #20]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(const stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2301      	movs	r3, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fec9 	bl	8000f94 <lis2dh12_read_reg>
 8001202:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <lis2dh12_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	b2da      	uxtb	r2, r3
 8001212:	7a3b      	ldrb	r3, [r7, #8]
 8001214:	f362 1307 	bfi	r3, r2, #4, #4
 8001218:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	2301      	movs	r3, #1
 8001220:	2120      	movs	r1, #32
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fed4 	bl	8000fd0 <lis2dh12_write_reg>
 8001228:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(const stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8001240:	f107 0208 	add.w	r2, r7, #8
 8001244:	2301      	movs	r3, #1
 8001246:	2123      	movs	r1, #35	@ 0x23
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fea3 	bl	8000f94 <lis2dh12_read_reg>
 800124e:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <lis2dh12_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	b2da      	uxtb	r2, r3
 800125e:	7a3b      	ldrb	r3, [r7, #8]
 8001260:	f362 1305 	bfi	r3, r2, #4, #2
 8001264:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8001266:	f107 0208 	add.w	r2, r7, #8
 800126a:	2301      	movs	r3, #1
 800126c:	2123      	movs	r1, #35	@ 0x23
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff feae 	bl	8000fd0 <lis2dh12_write_reg>
 8001274:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 800128c:	f107 0208 	add.w	r2, r7, #8
 8001290:	2301      	movs	r3, #1
 8001292:	2123      	movs	r1, #35	@ 0x23
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fe7d 	bl	8000f94 <lis2dh12_read_reg>
 800129a:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10f      	bne.n	80012c2 <lis2dh12_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	7a3b      	ldrb	r3, [r7, #8]
 80012ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80012b0:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2301      	movs	r3, #1
 80012b8:	2123      	movs	r1, #35	@ 0x23
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fe88 	bl	8000fd0 <lis2dh12_write_reg>
 80012c0:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	2301      	movs	r3, #1
 80012dc:	2127      	movs	r1, #39	@ 0x27
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fe58 	bl	8000f94 <lis2dh12_read_reg>
 80012e4:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
 80012e6:	7a3b      	ldrb	r3, [r7, #8]
 80012e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	701a      	strb	r2, [r3, #0]

  return ret;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	2306      	movs	r3, #6
 800130e:	2128      	movs	r1, #40	@ 0x28
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fe3f 	bl	8000f94 <lis2dh12_read_reg>
 8001316:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	b21a      	sxth	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	b29b      	uxth	r3, r3
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b29b      	uxth	r3, r3
 800132c:	7b3a      	ldrb	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	b21a      	sxth	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3302      	adds	r3, #2
 800133e:	b212      	sxth	r2, r2
 8001340:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3302      	adds	r3, #2
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	b29b      	uxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	7bba      	ldrb	r2, [r7, #14]
 8001352:	4413      	add	r3, r2
 8001354:	b29a      	uxth	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3302      	adds	r3, #2
 800135a:	b212      	sxth	r2, r2
 800135c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800135e:	7c7a      	ldrb	r2, [r7, #17]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3304      	adds	r3, #4
 8001364:	b212      	sxth	r2, r2
 8001366:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3304      	adds	r3, #4
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	b29b      	uxth	r3, r3
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	7c3a      	ldrb	r2, [r7, #16]
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	b212      	sxth	r2, r2
 8001382:	801a      	strh	r2, [r3, #0]

  return ret;
 8001384:	697b      	ldr	r3, [r7, #20]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 8001398:	2301      	movs	r3, #1
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fdf8 	bl	8000f94 <lis2dh12_read_reg>
 80013a4:	60f8      	str	r0, [r7, #12]

  return ret;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80013d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013d8:	e000      	b.n	80013dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80013da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f9      	beq.n	80013da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800140e:	f023 0218 	bic.w	r2, r3, #24
 8001412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4313      	orrs	r3, r2
 800141a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4313      	orrs	r3, r2
 8001440:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001446:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4013      	ands	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < len; i++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e009      	b.n	8001482 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	60ba      	str	r2, [r7, #8]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff9a 	bl	80013b0 <ITM_SendChar>
  for (int i = 0; i < len; i++)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	dbf1      	blt.n	800146e <_write+0x12>
  }
  return len;
 800148a:	687b      	ldr	r3, [r7, #4]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <lis2dh12_read_data_polling>:

/* Main Example --------------------------------------------------------------*/
void lis2dh12_read_data_polling(void)
{
 8001494:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001498:	b08a      	sub	sp, #40	@ 0x28
 800149a:	af04      	add	r7, sp, #16
  /* Initialize mems driver interface */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 800149c:	4b62      	ldr	r3, [pc, #392]	@ (8001628 <lis2dh12_read_data_polling+0x194>)
 800149e:	60bb      	str	r3, [r7, #8]
  dev_ctx.read_reg = platform_read;
 80014a0:	4b62      	ldr	r3, [pc, #392]	@ (800162c <lis2dh12_read_data_polling+0x198>)
 80014a2:	60fb      	str	r3, [r7, #12]
  dev_ctx.mdelay = platform_delay;
 80014a4:	4b62      	ldr	r3, [pc, #392]	@ (8001630 <lis2dh12_read_data_polling+0x19c>)
 80014a6:	613b      	str	r3, [r7, #16]
  dev_ctx.handle = &hi2c1;
 80014a8:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <lis2dh12_read_data_polling+0x1a0>)
 80014aa:	617b      	str	r3, [r7, #20]
  /* Wait boot time and initialize platform specific hardware */
//  platform_init();
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f927 	bl	8001700 <platform_delay>
  /* Check device ID */
  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	4960      	ldr	r1, [pc, #384]	@ (8001638 <lis2dh12_read_data_polling+0x1a4>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff68 	bl	800138e <lis2dh12_device_id_get>

  if (whoamI != LIS2DH12_ID)
 80014be:	4b5e      	ldr	r3, [pc, #376]	@ (8001638 <lis2dh12_read_data_polling+0x1a4>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b33      	cmp	r3, #51	@ 0x33
 80014c4:	d001      	beq.n	80014ca <lis2dh12_read_data_polling+0x36>
  {
    while (1)
 80014c6:	bf00      	nop
 80014c8:	e7fd      	b.n	80014c6 <lis2dh12_read_data_polling+0x32>
    {
      /* manage here device not found */
    }
  }
  /* Enable Block Data Update. */
  lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2101      	movs	r1, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fed5 	bl	8001280 <lis2dh12_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_1Hz);
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe83 	bl	80011e8 <lis2dh12_data_rate_set>
  /* Set full scale to 2g. */
  lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fea3 	bl	8001234 <lis2dh12_full_scale_set>
  /* Enable temperature sensor. */
  lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2103      	movs	r1, #3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fdfc 	bl	80010f2 <lis2dh12_temperature_meas_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fe1c 	bl	800113e <lis2dh12_operating_mode_set>
  /* Read samples in polling mode (no int) */
  while (1)
  {
    lis2dh12_reg_t reg;
    /* Read output only if new value available */
    lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8001506:	1d3a      	adds	r2, r7, #4
 8001508:	f107 0308 	add.w	r3, r7, #8
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fedc 	bl	80012cc <lis2dh12_xl_data_ready_get>

    if (reg.byte)
 8001514:	793b      	ldrb	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d053      	beq.n	80015c2 <lis2dh12_read_data_polling+0x12e>
    {
      /* Read accelerometer data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800151a:	2206      	movs	r2, #6
 800151c:	2100      	movs	r1, #0
 800151e:	4847      	ldr	r0, [pc, #284]	@ (800163c <lis2dh12_read_data_polling+0x1a8>)
 8001520:	f005 fb67 	bl	8006bf2 <memset>
      lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	4944      	ldr	r1, [pc, #272]	@ (800163c <lis2dh12_read_data_polling+0x1a8>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fee7 	bl	80012fe <lis2dh12_acceleration_raw_get>
      acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8001530:	4b42      	ldr	r3, [pc, #264]	@ (800163c <lis2dh12_read_data_polling+0x1a8>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fd68 	bl	800100c <lis2dh12_from_fs2_hr_to_mg>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
 8001540:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8001546:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <lis2dh12_read_data_polling+0x1a8>)
 8001548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fd5d 	bl	800100c <lis2dh12_from_fs2_hr_to_mg>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 8001558:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 800155c:	4b37      	ldr	r3, [pc, #220]	@ (800163c <lis2dh12_read_data_polling+0x1a8>)
 800155e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fd52 	bl	800100c <lis2dh12_from_fs2_hr_to_mg>
 8001568:	eef0 7a40 	vmov.f32	s15, s0
 800156c:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 800156e:	edc3 7a02 	vstr	s15, [r3, #8]
      sprintf(
          (char*) tx_buffer,
          "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
          acceleration_mg[0],
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
      sprintf(
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ffbe 	bl	80004f8 <__aeabi_f2d>
 800157c:	4680      	mov	r8, r0
 800157e:	4689      	mov	r9, r1
          acceleration_mg[1],
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 8001582:	685b      	ldr	r3, [r3, #4]
      sprintf(
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffb7 	bl	80004f8 <__aeabi_f2d>
 800158a:	4604      	mov	r4, r0
 800158c:	460d      	mov	r5, r1
          acceleration_mg[2]);
 800158e:	4b2c      	ldr	r3, [pc, #176]	@ (8001640 <lis2dh12_read_data_polling+0x1ac>)
 8001590:	689b      	ldr	r3, [r3, #8]
      sprintf(
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffb0 	bl	80004f8 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015a0:	e9cd 4500 	strd	r4, r5, [sp]
 80015a4:	4642      	mov	r2, r8
 80015a6:	464b      	mov	r3, r9
 80015a8:	4926      	ldr	r1, [pc, #152]	@ (8001644 <lis2dh12_read_data_polling+0x1b0>)
 80015aa:	4827      	ldr	r0, [pc, #156]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 80015ac:	f005 fabe 	bl	8006b2c <siprintf>
      tx_com(tx_buffer, strlen((char const*) tx_buffer));
 80015b0:	4825      	ldr	r0, [pc, #148]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 80015b2:	f7fe fe35 	bl	8000220 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	4822      	ldr	r0, [pc, #136]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 80015be:	f000 f88b 	bl	80016d8 <tx_com>
    }

    lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);
 80015c2:	1d3a      	adds	r2, r7, #4
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd56 	bl	800107c <lis2dh12_temp_data_ready_get>

    if (reg.byte)
 80015d0:	793b      	ldrb	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d097      	beq.n	8001506 <lis2dh12_read_data_polling+0x72>
    {
      /* Read temperature data */
      memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80015d6:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <lis2dh12_read_data_polling+0x1b8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
      lis2dh12_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	491a      	ldr	r1, [pc, #104]	@ (800164c <lis2dh12_read_data_polling+0x1b8>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fd63 	bl	80010ae <lis2dh12_temperature_raw_get>
      temperature_degC = lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature);
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <lis2dh12_read_data_polling+0x1b8>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fd24 	bl	800103c <lis2dh12_from_lsb_hr_to_celsius>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <lis2dh12_read_data_polling+0x1bc>)
 80015fa:	edc3 7a00 	vstr	s15, [r3]
      sprintf((char*) tx_buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC);
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <lis2dh12_read_data_polling+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff78 	bl	80004f8 <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4911      	ldr	r1, [pc, #68]	@ (8001654 <lis2dh12_read_data_polling+0x1c0>)
 800160e:	480e      	ldr	r0, [pc, #56]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 8001610:	f005 fa8c 	bl	8006b2c <siprintf>
      tx_com(tx_buffer, strlen((char const*) tx_buffer));
 8001614:	480c      	ldr	r0, [pc, #48]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 8001616:	f7fe fe03 	bl	8000220 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29b      	uxth	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <lis2dh12_read_data_polling+0x1b4>)
 8001622:	f000 f859 	bl	80016d8 <tx_com>
  {
 8001626:	e76e      	b.n	8001506 <lis2dh12_read_data_polling+0x72>
 8001628:	08001659 	.word	0x08001659
 800162c:	08001699 	.word	0x08001699
 8001630:	08001701 	.word	0x08001701
 8001634:	200001f4 	.word	0x200001f4
 8001638:	200005d0 	.word	0x200005d0
 800163c:	200005b8 	.word	0x200005b8
 8001640:	200005c0 	.word	0x200005c0
 8001644:	0800a3b8 	.word	0x0800a3b8
 8001648:	200005d4 	.word	0x200005d4
 800164c:	200005be 	.word	0x200005be
 8001650:	200005cc 	.word	0x200005cc
 8001654:	0800a3e0 	.word	0x0800a3e0

08001658 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static void platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af04      	add	r7, sp, #16
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	72fb      	strb	r3, [r7, #11]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001672:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	b29a      	uxth	r2, r3
 8001678:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	893b      	ldrh	r3, [r7, #8]
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2132      	movs	r1, #50	@ 0x32
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f001 f83e 	bl	800270c <HAL_I2C_Mem_Write>
  I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <platform_read>:

static void platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af04      	add	r7, sp, #16
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	72fb      	strb	r3, [r7, #11]
 80016a8:	4613      	mov	r3, r2
 80016aa:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b2:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg,
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	893b      	ldrh	r3, [r7, #8]
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2301      	movs	r3, #1
 80016c8:	2132      	movs	r1, #50	@ 0x32
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f001 f932 	bl	8002934 <HAL_I2C_Mem_Read>
  I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <tx_com>:

static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <tx_com+0x24>)
 80016ee:	f003 fcde 	bl	80050ae <HAL_UART_Transmit>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000248 	.word	0x20000248

08001700 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  HAL_Delay(ms);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fcd3 	bl	80020b4 <HAL_Delay>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171a:	f000 fc45 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171e:	f000 f813 	bl	8001748 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001722:	f000 f887 	bl	8001834 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001726:	f000 f957 	bl	80019d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800172a:	f000 f8e1 	bl	80018f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800172e:	f000 f92b 	bl	8001988 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8001732:	f000 f89d 	bl	8001870 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lis2dh12_read_data_polling();
 8001736:	f7ff fead 	bl	8001494 <lis2dh12_read_data_polling>
  HAL_Delay(1000);
 800173a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800173e:	f000 fcb9 	bl	80020b4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001742:	bf00      	nop
 8001744:	e7fd      	b.n	8001742 <main+0x2c>
	...

08001748 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2248      	movs	r2, #72	@ 0x48
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fa4b 	bl	8006bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
   */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800177c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f023 0303 	bic.w	r3, r3, #3
 8001788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001792:	f001 fe3b 	bl	800340c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fe31 	bl	80013fe <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <SystemClock_Config+0xe8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <SystemClock_Config+0xe8>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b20      	ldr	r3, [pc, #128]	@ (8001830 <SystemClock_Config+0xe8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
 80017b8:	2327      	movs	r3, #39	@ 0x27
 80017ba:	623b      	str	r3, [r7, #32]
      | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	2340      	movs	r3, #64	@ 0x40
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d8:	2360      	movs	r3, #96	@ 0x60
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e0:	f107 0320 	add.w	r3, r7, #32
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f9a5 	bl	8003b34 <HAL_RCC_OscConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80017f0:	f000 f93a 	bl	8001a68 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017f4:	236f      	movs	r3, #111	@ 0x6f
 80017f6:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017f8:	2302      	movs	r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fd01 	bl	800421c <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001820:	f000 f922 	bl	8001a68 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8001824:	f003 fabc 	bl	8004da0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001828:	bf00      	nop
 800182a:	3768      	adds	r7, #104	@ 0x68
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	58000400 	.word	0x58000400

08001834 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	@ 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800183a:	463b      	mov	r3, r7
 800183c:	2250      	movs	r2, #80	@ 0x50
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 f9d6 	bl	8006bf2 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800184c:	2300      	movs	r3, #0
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001850:	2300      	movs	r3, #0
 8001852:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001854:	463b      	mov	r3, r7
 8001856:	4618      	mov	r0, r3
 8001858:	f003 f92c 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001862:	f000 f901 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001866:	bf00      	nop
 8001868:	3750      	adds	r7, #80	@ 0x50
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_I2C1_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <MX_I2C1_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_I2C1_Init+0x74>)
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <MX_I2C1_Init+0x7c>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_I2C1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_I2C1_Init+0x74>)
 8001888:	2201      	movs	r2, #1
 800188a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_I2C1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_I2C1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <MX_I2C1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_I2C1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_I2C1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018aa:	480e      	ldr	r0, [pc, #56]	@ (80018e4 <MX_I2C1_Init+0x74>)
 80018ac:	f000 fe92 	bl	80025d4 <HAL_I2C_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018b6:	f000 f8d7 	bl	8001a68 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <MX_I2C1_Init+0x74>)
 80018be:	f001 fc15 	bl	80030ec <HAL_I2CEx_ConfigAnalogFilter>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018c8:	f000 f8ce 	bl	8001a68 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_I2C1_Init+0x74>)
 80018d0:	f001 fc57 	bl	8003182 <HAL_I2CEx_ConfigDigitalFilter>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018da:	f000 f8c5 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001f4 	.word	0x200001f4
 80018e8:	40005400 	.word	0x40005400
 80018ec:	00b07cb4 	.word	0x00b07cb4

080018f0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 80018f6:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <MX_USART1_UART_Init+0x94>)
 80018f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 80018fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001916:	220c      	movs	r2, #12
 8001918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800192e:	2200      	movs	r2, #0
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001938:	4811      	ldr	r0, [pc, #68]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800193a:	f003 fb68 	bl	800500e <HAL_UART_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001944:	f000 f890 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001948:	2100      	movs	r1, #0
 800194a:	480d      	ldr	r0, [pc, #52]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800194c:	f004 f8be 	bl	8005acc <HAL_UARTEx_SetTxFifoThreshold>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001956:	f000 f887 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195a:	2100      	movs	r1, #0
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800195e:	f004 f8f3 	bl	8005b48 <HAL_UARTEx_SetRxFifoThreshold>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001968:	f000 f87e 	bl	8001a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <MX_USART1_UART_Init+0x90>)
 800196e:	f004 f874 	bl	8005a5a <HAL_UARTEx_DisableFifoMode>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001978:	f000 f876 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000248 	.word	0x20000248
 8001984:	40013800 	.word	0x40013800

08001988 <MX_USB_PCD_Init>:
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800198c:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 800198e:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <MX_USB_PCD_Init+0x4c>)
 8001990:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 8001994:	2208      	movs	r2, #8
 8001996:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001998:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 800199a:	2202      	movs	r2, #2
 800199c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800199e:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	@ (80019d0 <MX_USB_PCD_Init+0x48>)
 80019be:	f001 fc2c 	bl	800321a <HAL_PCD_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80019c8:	f000 f84e 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200002dc 	.word	0x200002dc
 80019d4:	40006800 	.word	0x40006800

080019d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff fd1c 	bl	800142a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2002      	movs	r0, #2
 80019f4:	f7ff fd19 	bl	800142a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fd16 	bl	800142a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	2008      	movs	r0, #8
 8001a00:	f7ff fd13 	bl	800142a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2123      	movs	r1, #35	@ 0x23
 8001a08:	4814      	ldr	r0, [pc, #80]	@ (8001a5c <MX_GPIO_Init+0x84>)
 8001a0a:	f000 fdcb 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0e:	2310      	movs	r3, #16
 8001a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <MX_GPIO_Init+0x88>)
 8001a20:	f000 fc50 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 8001a24:	2323      	movs	r3, #35	@ 0x23
 8001a26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4808      	ldr	r0, [pc, #32]	@ (8001a5c <MX_GPIO_Init+0x84>)
 8001a3a:	f000 fc43 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_GPIO_Init+0x8c>)
 8001a50:	f000 fc38 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	48000400 	.word	0x48000400
 8001a60:	48000800 	.word	0x48000800
 8001a64:	48000c00 	.word	0x48000c00

08001a68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <LL_AHB2_GRP1_EnableClock>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ab4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ae6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001afc:	68fb      	ldr	r3, [r7, #12]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b09c      	sub	sp, #112	@ 0x70
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2250      	movs	r2, #80	@ 0x50
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 f85a 	bl	8006bf2 <memset>
  if(hi2c->Instance==I2C1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a17      	ldr	r2, [pc, #92]	@ (8001ba0 <HAL_I2C_MspInit+0x88>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d126      	bne.n	8001b96 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b4c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 ffac 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b62:	f7ff ff81 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2002      	movs	r0, #2
 8001b68:	f7ff ff84 	bl	8001a74 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b6c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <HAL_I2C_MspInit+0x8c>)
 8001b8a:	f000 fb9b 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001b92:	f7ff ff88 	bl	8001aa6 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b96:	bf00      	nop
 8001b98:	3770      	adds	r7, #112	@ 0x70
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09c      	sub	sp, #112	@ 0x70
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2250      	movs	r2, #80	@ 0x50
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 f812 	bl	8006bf2 <memset>
  if(huart->Instance==USART1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_UART_MspInit+0x84>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d124      	bne.n	8001c22 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 ff65 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bf0:	f7ff ff3a 	bl	8001a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bf4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bf8:	f7ff ff6e 	bl	8001ad8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7ff ff39 	bl	8001a74 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c02:	23c0      	movs	r3, #192	@ 0xc0
 8001c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c12:	2307      	movs	r3, #7
 8001c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <HAL_UART_MspInit+0x88>)
 8001c1e:	f000 fb51 	bl	80022c4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c22:	bf00      	nop
 8001c24:	3770      	adds	r7, #112	@ 0x70
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	48000400 	.word	0x48000400

08001c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09c      	sub	sp, #112	@ 0x70
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	2250      	movs	r2, #80	@ 0x50
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 ffcc 	bl	8006bf2 <memset>
  if(hpcd->Instance==USB)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <HAL_PCD_MspInit+0xa8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d136      	bne.n	8001cd2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c68:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001c6a:	2318      	movs	r3, #24
 8001c6c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001c6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001c7a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001c80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c84:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c86:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c8a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 ff0f 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001c9c:	f7ff fee4 	bl	8001a68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fee7 	bl	8001a74 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ca6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001cb8:	230a      	movs	r3, #10
 8001cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc6:	f000 fafd 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001cce:	f7ff feea 	bl	8001aa6 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END USB_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3770      	adds	r7, #112	@ 0x70
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40006800 	.word	0x40006800

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <BusFault_Handler+0x4>

08001d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <UsageFault_Handler+0x4>

08001d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d36:	f000 f991 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
	return 1;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_kill>:

int _kill(int pid, int sig)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d58:	f004 ff9e 	bl	8006c98 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2216      	movs	r2, #22
 8001d60:	601a      	str	r2, [r3, #0]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_exit>:

void _exit (int status)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d76:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffe7 	bl	8001d4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <_exit+0x12>

08001d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e00a      	b.n	8001dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d96:	f3af 8000 	nop.w
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	60ba      	str	r2, [r7, #8]
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	dbf0      	blt.n	8001d96 <_read+0x12>
	}

return len;
 8001db4:	687b      	ldr	r3, [r7, #4]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de6:	605a      	str	r2, [r3, #4]
	return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_isatty>:

int _isatty(int file)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
	return 0;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f004 ff1e 	bl	8006c98 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20030000 	.word	0x20030000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	200009bc 	.word	0x200009bc
 8001e90:	20000b10 	.word	0x20000b10

08001e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <SystemInit+0x98>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <SystemInit+0x98>)
 8001ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ebc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001ec0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <SystemInit+0x9c>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ede:	f023 0305 	bic.w	r3, r3, #5
 8001ee2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001efe:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <SystemInit+0xa0>)
 8001f00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f06:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <SystemInit+0xa0>)
 8001f08:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00
 8001f30:	faf6fefb 	.word	0xfaf6fefb
 8001f34:	22041000 	.word	0x22041000

08001f38 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f38:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f3a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3c:	3304      	adds	r3, #4

08001f3e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f40:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f42:	d3f9      	bcc.n	8001f38 <CopyDataInit>
  bx lr
 8001f44:	4770      	bx	lr

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f46:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f48:	3004      	adds	r0, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f4a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>
  bx lr
 8001f4e:	4770      	bx	lr

08001f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f50:	480c      	ldr	r0, [pc, #48]	@ (8001f84 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001f52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f54:	f7ff ff9e 	bl	8001e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <LoopForever+0x8>)
 8001f5a:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <LoopForever+0xc>)
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <LoopForever+0x10>)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f7ff ffed 	bl	8001f3e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f64:	480b      	ldr	r0, [pc, #44]	@ (8001f94 <LoopForever+0x14>)
 8001f66:	490c      	ldr	r1, [pc, #48]	@ (8001f98 <LoopForever+0x18>)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f7ff ffee 	bl	8001f4a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f6e:	480b      	ldr	r0, [pc, #44]	@ (8001f9c <LoopForever+0x1c>)
 8001f70:	490b      	ldr	r1, [pc, #44]	@ (8001fa0 <LoopForever+0x20>)
 8001f72:	2300      	movs	r3, #0
 8001f74:	f7ff ffe9 	bl	8001f4a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f78:	f004 fe94 	bl	8006ca4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f7c:	f7ff fbcb 	bl	8001716 <main>

08001f80 <LoopForever>:

LoopForever:
  b LoopForever
 8001f80:	e7fe      	b.n	8001f80 <LoopForever>
 8001f82:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f84:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	200001d8 	.word	0x200001d8
 8001f90:	0800a930 	.word	0x0800a930
  INIT_BSS _sbss, _ebss
 8001f94:	200001d8 	.word	0x200001d8
 8001f98:	20000b10 	.word	0x20000b10
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f9c:	20030000 	.word	0x20030000
 8001fa0:	20030000 	.word	0x20030000

08001fa4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_Init+0x3c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <HAL_Init+0x3c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 f94e 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f80f 	bl	8001fe8 <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	e001      	b.n	8001fda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd6:	f7ff fd98 	bl	8001b0a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	58004000 	.word	0x58004000

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_InitTick+0x6c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d024      	beq.n	8002046 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ffc:	f002 faba 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_InitTick+0x6c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f948 	bl	80022aa <HAL_SYSTICK_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10f      	bne.n	8002040 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d809      	bhi.n	800203a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	f04f 30ff 	mov.w	r0, #4294967295
 800202e:	f000 f922 	bl	8002276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_InitTick+0x70>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e007      	b.n	800204a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e004      	b.n	800204a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000008 	.word	0x20000008

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000000c 	.word	0x2000000c
 8002080:	200009c0 	.word	0x200009c0

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200009c0 	.word	0x200009c0

0800209c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_GetTickPrio+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000008 	.word	0x20000008

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffe2 	bl	8002084 <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffd2 	bl	8002084 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000000c 	.word	0x2000000c

080020fc <__NVIC_SetPriorityGrouping>:
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_SetPriority>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff47 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff5e 	bl	8002144 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff90 	bl	80021b4 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5f 	bl	8002160 <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffb2 	bl	800221c <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e14c      	b.n	800256e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 813e 	beq.w	8002568 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d005      	beq.n	8002304 <HAL_GPIO_Init+0x40>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b03      	cmp	r3, #3
 8002370:	d017      	beq.n	80023a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8098 	beq.w	8002568 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002438:	4a54      	ldr	r2, [pc, #336]	@ (800258c <HAL_GPIO_Init+0x2c8>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002462:	d019      	beq.n	8002498 <HAL_GPIO_Init+0x1d4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_GPIO_Init+0x2cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_GPIO_Init+0x1d0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_GPIO_Init+0x2d0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00d      	beq.n	8002490 <HAL_GPIO_Init+0x1cc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_GPIO_Init+0x2d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <HAL_GPIO_Init+0x1c8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a47      	ldr	r2, [pc, #284]	@ (800259c <HAL_GPIO_Init+0x2d8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_GPIO_Init+0x1c4>
 8002484:	2304      	movs	r3, #4
 8002486:	e008      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002488:	2307      	movs	r3, #7
 800248a:	e006      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 800248c:	2303      	movs	r3, #3
 800248e:	e004      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002490:	2302      	movs	r3, #2
 8002492:	e002      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_GPIO_Init+0x1d6>
 8002498:	2300      	movs	r3, #0
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024aa:	4938      	ldr	r1, [pc, #224]	@ (800258c <HAL_GPIO_Init+0x2c8>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	4b39      	ldr	r3, [pc, #228]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024dc:	4a30      	ldr	r2, [pc, #192]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024e2:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002506:	4a26      	ldr	r2, [pc, #152]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800250c:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002532:	4a1b      	ldr	r2, [pc, #108]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_GPIO_Init+0x2dc>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aeab 	bne.w	80022d4 <HAL_GPIO_Init+0x10>
  }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48001000 	.word	0x48001000
 80025a0:	58000800 	.word	0x58000800

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e08d      	b.n	8002702 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fa8c 	bl	8001b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	@ 0x24
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e006      	b.n	800265c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800265a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d108      	bne.n	8002676 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e007      	b.n	8002686 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	4608      	mov	r0, r1
 8002716:	4611      	mov	r1, r2
 8002718:	461a      	mov	r2, r3
 800271a:	4603      	mov	r3, r0
 800271c:	817b      	strh	r3, [r7, #10]
 800271e:	460b      	mov	r3, r1
 8002720:	813b      	strh	r3, [r7, #8]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	f040 80f9 	bne.w	8002926 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_I2C_Mem_Write+0x34>
 800273a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0ed      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2C_Mem_Write+0x4e>
 8002756:	2302      	movs	r3, #2
 8002758:	e0e6      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002762:	f7ff fc8f 	bl	8002084 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2319      	movs	r3, #25
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fac3 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0d1      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2221      	movs	r2, #33	@ 0x21
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ac:	88f8      	ldrh	r0, [r7, #6]
 80027ae:	893a      	ldrh	r2, [r7, #8]
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4603      	mov	r3, r0
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 f9d3 	bl	8002b68 <I2C_RequestMemoryWrite>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0a9      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2bff      	cmp	r3, #255	@ 0xff
 80027dc:	d90e      	bls.n	80027fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	2300      	movs	r3, #0
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fc47 	bl	8003088 <I2C_TransferConfig>
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	2300      	movs	r3, #0
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fc36 	bl	8003088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fac6 	bl	8002db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e07b      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d034      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d130      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fa3f 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e04d      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	2bff      	cmp	r3, #255	@ 0xff
 8002894:	d90e      	bls.n	80028b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	2300      	movs	r3, #0
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fbeb 	bl	8003088 <I2C_TransferConfig>
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fbda 	bl	8003088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d19e      	bne.n	800281c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 faac 	bl	8002e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e01a      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0a      	ldr	r3, [pc, #40]	@ (8002930 <HAL_I2C_Mem_Write+0x224>)
 8002906:	400b      	ands	r3, r1
 8002908:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	fe00e800 	.word	0xfe00e800

08002934 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 80fd 	bne.w	8002b56 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_I2C_Mem_Read+0x34>
 8002962:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0f1      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_I2C_Mem_Read+0x4e>
 800297e:	2302      	movs	r3, #2
 8002980:	e0ea      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800298a:	f7ff fb7b 	bl	8002084 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2319      	movs	r3, #25
 8002996:	2201      	movs	r2, #1
 8002998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f9af 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0d5      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2222      	movs	r2, #34	@ 0x22
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2240      	movs	r2, #64	@ 0x40
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029d4:	88f8      	ldrh	r0, [r7, #6]
 80029d6:	893a      	ldrh	r2, [r7, #8]
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4603      	mov	r3, r0
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f913 	bl	8002c10 <I2C_RequestMemoryRead>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0ad      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2bff      	cmp	r3, #255	@ 0xff
 8002a04:	d90e      	bls.n	8002a24 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	@ 0xff
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	4b52      	ldr	r3, [pc, #328]	@ (8002b60 <HAL_I2C_Mem_Read+0x22c>)
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fb33 	bl	8003088 <I2C_TransferConfig>
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	4b4a      	ldr	r3, [pc, #296]	@ (8002b60 <HAL_I2C_Mem_Read+0x22c>)
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fb22 	bl	8003088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f956 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07c      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d034      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d130      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f927 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e04d      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	@ 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	@ 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fad3 	bl	8003088 <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fac2 	bl	8003088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d19a      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f994 	bl	8002e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e01a      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_I2C_Mem_Read+0x230>)
 8002b36:	400b      	ands	r3, r1
 8002b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	80002400 	.word	0x80002400
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	817b      	strh	r3, [r7, #10]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	813b      	strh	r3, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	4b20      	ldr	r3, [pc, #128]	@ (8002c0c <I2C_RequestMemoryWrite+0xa4>)
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fa79 	bl	8003088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f909 	bl	8002db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02c      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bba:	e015      	b.n	8002be8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bbc:	893b      	ldrh	r3, [r7, #8]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	69b9      	ldr	r1, [r7, #24]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8ef 	bl	8002db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e012      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f884 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	80002000 	.word	0x80002000

08002c10 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	4608      	mov	r0, r1
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	817b      	strh	r3, [r7, #10]
 8002c22:	460b      	mov	r3, r1
 8002c24:	813b      	strh	r3, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b20      	ldr	r3, [pc, #128]	@ (8002cb4 <I2C_RequestMemoryRead+0xa4>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2300      	movs	r3, #0
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fa26 	bl	8003088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8b6 	bl	8002db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e02c      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c56:	893b      	ldrh	r3, [r7, #8]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c60:	e015      	b.n	8002c8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c62:	893b      	ldrh	r3, [r7, #8]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f89c 	bl	8002db2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e012      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2140      	movs	r1, #64	@ 0x40
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f831 	bl	8002d00 <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e000      	b.n	8002caa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	80002000 	.word	0x80002000

08002cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d103      	bne.n	8002cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d007      	beq.n	8002cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	619a      	str	r2, [r3, #24]
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	e03b      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8d6 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e041      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d02d      	beq.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7ff f9a9 	bl	8002084 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d122      	bne.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d113      	bne.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e00f      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4013      	ands	r3, r2
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	bf0c      	ite	eq
 8002d9a:	2301      	moveq	r3, #1
 8002d9c:	2300      	movne	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d0b4      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dbe:	e033      	b.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 f87f 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e031      	b.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dda:	d025      	beq.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ddc:	f7ff f952 	bl	8002084 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11a      	bne.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d013      	beq.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d1c4      	bne.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4c:	e02f      	b.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f838 	bl	8002ec8 <I2C_IsErrorOccurred>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02d      	b.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7ff f90f 	bl	8002084 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11a      	bne.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d013      	beq.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d1c8      	bne.n	8002e4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d068      	beq.n	8002fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2210      	movs	r2, #16
 8002efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002efc:	e049      	b.n	8002f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d045      	beq.n	8002f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f06:	f7ff f8bd 	bl	8002084 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d302      	bcc.n	8002f1c <I2C_IsErrorOccurred+0x54>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d13a      	bne.n	8002f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3e:	d121      	bne.n	8002f84 <I2C_IsErrorOccurred+0xbc>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f46:	d01d      	beq.n	8002f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d01a      	beq.n	8002f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f5e:	f7ff f891 	bl	8002084 <HAL_GetTick>
 8002f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f64:	e00e      	b.n	8002f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f66:	f7ff f88d 	bl	8002084 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b19      	cmp	r3, #25
 8002f72:	d907      	bls.n	8002f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f043 0320 	orr.w	r3, r3, #32
 8002f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f82:	e006      	b.n	8002f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d1e9      	bne.n	8002f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d003      	beq.n	8002fa8 <I2C_IsErrorOccurred+0xe0>
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0aa      	beq.n	8002efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d103      	bne.n	8002fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800302c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fe3b 	bl	8002cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <I2C_IsErrorOccurred+0x1bc>)
 800304e:	400b      	ands	r3, r1
 8003050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800307a:	4618      	mov	r0, r3
 800307c:	3728      	adds	r7, #40	@ 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	fe00e800 	.word	0xfe00e800

08003088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	817b      	strh	r3, [r7, #10]
 8003096:	4613      	mov	r3, r2
 8003098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a0:	7a7b      	ldrb	r3, [r7, #9]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	0d5b      	lsrs	r3, r3, #21
 80030c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <I2C_TransferConfig+0x60>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	43db      	mvns	r3, r3
 80030cc:	ea02 0103 	and.w	r1, r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030da:	bf00      	nop
 80030dc:	371c      	adds	r7, #28
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	03ff63ff 	.word	0x03ff63ff

080030ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d138      	bne.n	8003174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800310c:	2302      	movs	r3, #2
 800310e:	e032      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2224      	movs	r2, #36	@ 0x24
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800313e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b20      	cmp	r3, #32
 8003196:	d139      	bne.n	800320c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e033      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	@ 0x24
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e000      	b.n	800320e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0c0      	b.n	80033ae <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fe fcf7 	bl	8001c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2203      	movs	r2, #3
 800324a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fd04 	bl	8005c60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e03e      	b.n	80032dc <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	440b      	add	r3, r1
 800326c:	3311      	adds	r3, #17
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3310      	adds	r3, #16
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3313      	adds	r3, #19
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3320      	adds	r3, #32
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3324      	adds	r3, #36	@ 0x24
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3301      	adds	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	791b      	ldrb	r3, [r3, #4]
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3bb      	bcc.n	800325e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
 80032ea:	e044      	b.n	8003376 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	440b      	add	r3, r1
 8003310:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003344:	7bfa      	ldrb	r2, [r7, #15]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	440b      	add	r3, r1
 8003352:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	440b      	add	r3, r1
 8003368:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	3301      	adds	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	791b      	ldrb	r3, [r3, #4]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3b5      	bcc.n	80032ec <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	e893 0006 	ldmia.w	r3, {r1, r2}
 800338c:	f002 fc83 	bl	8005c96 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7a9b      	ldrb	r3, [r3, #10]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f805 	bl	80033b6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003410:	4b05      	ldr	r3, [pc, #20]	@ (8003428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	58000400 	.word	0x58000400

0800342c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <HAL_PWREx_GetVoltageRange+0x18>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	58000400 	.word	0x58000400

08003448 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800344c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d101      	bne.n	8003460 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_RCC_HSE_Enable>:
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800347a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_RCC_HSE_Disable>:
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_HSE_IsReady>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034ba:	d101      	bne.n	80034c0 <LL_RCC_HSE_IsReady+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_RCC_HSE_IsReady+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_RCC_HSI_Enable>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_RCC_HSI_Disable>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80034ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034fc:	6013      	str	r3, [r2, #0]
}
 80034fe:	bf00      	nop
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_RCC_HSI_IsReady>:
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351a:	d101      	bne.n	8003520 <LL_RCC_HSI_IsReady+0x18>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <LL_RCC_HSI_IsReady+0x1a>
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_RCC_HSI_SetCalibTrimming>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_RCC_HSI48_Enable>:
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_RCC_HSI48_Disable>:
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003580:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_HSI48_IsReady>:
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d101      	bne.n	80035b2 <LL_RCC_HSI48_IsReady+0x18>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_RCC_HSI48_IsReady+0x1a>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_RCC_LSE_Enable>:
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_LSE_Disable>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RCC_LSE_EnableBypass>:
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_RCC_LSE_DisableBypass>:
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d101      	bne.n	800365e <LL_RCC_LSE_IsReady+0x18>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <LL_RCC_LSE_IsReady+0x1a>
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800366e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003698:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d101      	bne.n	80036c6 <LL_RCC_LSI1_IsReady+0x18>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <LL_RCC_LSI1_IsReady+0x1a>
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80036f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b08      	cmp	r3, #8
 8003728:	d101      	bne.n	800372e <LL_RCC_LSI2_IsReady+0x18>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <LL_RCC_LSI2_IsReady+0x1a>
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800378a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6013      	str	r3, [r2, #0]
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d101      	bne.n	80037ba <LL_RCC_MSI_IsReady+0x16>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <LL_RCC_MSI_IsReady+0x18>
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2bb0      	cmp	r3, #176	@ 0xb0
 8003804:	d901      	bls.n	800380a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003806:	23b0      	movs	r3, #176	@ 0xb0
 8003808:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800380a:	687b      	ldr	r3, [r7, #4]
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f023 0203 	bic.w	r2, r3, #3
 8003854:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80038e6:	f023 020f 	bic.w	r2, r3, #15
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800390c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4313      	orrs	r3, r2
 800391e:	608b      	str	r3, [r1, #8]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800393e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4313      	orrs	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003974:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80039f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a06:	d101      	bne.n	8003a0c <LL_RCC_PLL_IsReady+0x18>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <LL_RCC_PLL_IsReady+0x1a>
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	0a1b      	lsrs	r3, r3, #8
 8003a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003a32:	b480      	push	{r7}
 8003a34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a8c:	d101      	bne.n	8003a92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ab2:	d101      	bne.n	8003ab8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003acc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad8:	d101      	bne.n	8003ade <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003aea:	b480      	push	{r7}
 8003aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003afc:	d101      	bne.n	8003b02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b20:	d101      	bne.n	8003b26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b08d      	sub	sp, #52	@ 0x34
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e363      	b.n	800420e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808d 	beq.w	8003c6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b54:	f7ff fe89 	bl	800386a <LL_RCC_GetSysClkSource>
 8003b58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5a:	f7ff ff82 	bl	8003a62 <LL_RCC_PLL_GetMainSource>
 8003b5e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_RCC_OscConfig+0x3e>
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	d147      	bne.n	8003bfc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d144      	bne.n	8003bfc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e347      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003b82:	f7ff fe34 	bl	80037ee <LL_RCC_MSI_GetRange>
 8003b86:	4603      	mov	r3, r0
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d914      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd2f 	bl	80045f4 <RCC_SetFlashLatencyFromMSIRange>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e336      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fe0e 	bl	80037c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fe32 	bl	8003818 <LL_RCC_MSI_SetCalibTrimming>
 8003bb4:	e013      	b.n	8003bde <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff fe03 	bl	80037c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fe27 	bl	8003818 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fd10 	bl	80045f4 <RCC_SetFlashLatencyFromMSIRange>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e317      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bde:	f000 fcc9 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4aa4      	ldr	r2, [pc, #656]	@ (8003e78 <HAL_RCC_OscConfig+0x344>)
 8003be6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003be8:	4ba4      	ldr	r3, [pc, #656]	@ (8003e7c <HAL_RCC_OscConfig+0x348>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe f9fb 	bl	8001fe8 <HAL_InitTick>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d039      	beq.n	8003c6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e308      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d01e      	beq.n	8003c42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c04:	f7ff fdb0 	bl	8003768 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c08:	f7fe fa3c 	bl	8002084 <HAL_GetTick>
 8003c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c10:	f7fe fa38 	bl	8002084 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e2f5      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c22:	f7ff fdbf 	bl	80037a4 <LL_RCC_MSI_IsReady>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f1      	beq.n	8003c10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fdc8 	bl	80037c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fdec 	bl	8003818 <LL_RCC_MSI_SetCalibTrimming>
 8003c40:	e015      	b.n	8003c6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c42:	f7ff fda0 	bl	8003786 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c46:	f7fe fa1d 	bl	8002084 <HAL_GetTick>
 8003c4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c4e:	f7fe fa19 	bl	8002084 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e2d6      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003c60:	f7ff fda0 	bl	80037a4 <LL_RCC_MSI_IsReady>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f1      	bne.n	8003c4e <HAL_RCC_OscConfig+0x11a>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003c6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d047      	beq.n	8003d0a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7a:	f7ff fdf6 	bl	800386a <LL_RCC_GetSysClkSource>
 8003c7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c80:	f7ff feef 	bl	8003a62 <LL_RCC_PLL_GetMainSource>
 8003c84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_OscConfig+0x164>
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b0c      	cmp	r3, #12
 8003c90:	d108      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d134      	bne.n	8003d0a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e2b4      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cac:	d102      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x180>
 8003cae:	f7ff fbdd 	bl	800346c <LL_RCC_HSE_Enable>
 8003cb2:	e001      	b.n	8003cb8 <HAL_RCC_OscConfig+0x184>
 8003cb4:	f7ff fbe9 	bl	800348a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f9e0 	bl	8002084 <HAL_GetTick>
 8003cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc8:	f7fe f9dc 	bl	8002084 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b64      	cmp	r3, #100	@ 0x64
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e299      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003cda:	f7ff fbe5 	bl	80034a8 <LL_RCC_HSE_IsReady>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f1      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x194>
 8003ce4:	e011      	b.n	8003d0a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f9cd 	bl	8002084 <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cee:	f7fe f9c9 	bl	8002084 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b64      	cmp	r3, #100	@ 0x64
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e286      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003d00:	f7ff fbd2 	bl	80034a8 <LL_RCC_HSE_IsReady>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f1      	bne.n	8003cee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d04c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d16:	f7ff fda8 	bl	800386a <LL_RCC_GetSysClkSource>
 8003d1a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	f7ff fea1 	bl	8003a62 <LL_RCC_PLL_GetMainSource>
 8003d20:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_OscConfig+0x200>
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d10e      	bne.n	8003d4c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e266      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fbf1 	bl	800352c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003d4a:	e031      	b.n	8003db0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d019      	beq.n	8003d88 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d54:	f7ff fbba 	bl	80034cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe f994 	bl	8002084 <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d60:	f7fe f990 	bl	8002084 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e24d      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003d72:	f7ff fbc9 	bl	8003508 <LL_RCC_HSI_IsReady>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f1      	beq.n	8003d60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fbd3 	bl	800352c <LL_RCC_HSI_SetCalibTrimming>
 8003d86:	e013      	b.n	8003db0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d88:	f7ff fbaf 	bl	80034ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f97a 	bl	8002084 <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fe f976 	bl	8002084 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e233      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003da6:	f7ff fbaf 	bl	8003508 <LL_RCC_HSI_IsReady>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f1      	bne.n	8003d94 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d106      	bne.n	8003dca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a3 	beq.w	8003f10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d076      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d046      	beq.n	8003e6c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003dde:	f7ff fc66 	bl	80036ae <LL_RCC_LSI1_IsReady>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003de8:	f7ff fc3f 	bl	800366a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dec:	f7fe f94a 	bl	8002084 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003df4:	f7fe f946 	bl	8002084 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e203      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003e06:	f7ff fc52 	bl	80036ae <LL_RCC_LSI1_IsReady>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f1      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003e10:	f7ff fc5f 	bl	80036d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe f936 	bl	8002084 <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e1c:	f7fe f932 	bl	8002084 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1ef      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003e2e:	f7ff fc72 	bl	8003716 <LL_RCC_LSI2_IsReady>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f1      	beq.n	8003e1c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fc7c 	bl	800373a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003e42:	f7ff fc23 	bl	800368c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe f91d 	bl	8002084 <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e4e:	f7fe f919 	bl	8002084 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1d6      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003e60:	f7ff fc25 	bl	80036ae <LL_RCC_LSI1_IsReady>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f1      	bne.n	8003e4e <HAL_RCC_OscConfig+0x31a>
 8003e6a:	e051      	b.n	8003f10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003e6c:	f7ff fbfd 	bl	800366a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fe f908 	bl	8002084 <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003e76:	e00c      	b.n	8003e92 <HAL_RCC_OscConfig+0x35e>
 8003e78:	20000004 	.word	0x20000004
 8003e7c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e80:	f7fe f900 	bl	8002084 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1bd      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003e92:	f7ff fc0c 	bl	80036ae <LL_RCC_LSI1_IsReady>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f1      	beq.n	8003e80 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003e9c:	f7ff fc2a 	bl	80036f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ea2:	f7fe f8ef 	bl	8002084 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1ac      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003eb4:	f7ff fc2f 	bl	8003716 <LL_RCC_LSI2_IsReady>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f1      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x36e>
 8003ebe:	e027      	b.n	8003f10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003ec0:	f7ff fc18 	bl	80036f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f8de 	bl	8002084 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ecc:	f7fe f8da 	bl	8002084 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e197      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003ede:	f7ff fc1a 	bl	8003716 <LL_RCC_LSI2_IsReady>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f1      	bne.n	8003ecc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003ee8:	f7ff fbd0 	bl	800368c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fe f8ca 	bl	8002084 <HAL_GetTick>
 8003ef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ef4:	f7fe f8c6 	bl	8002084 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e183      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003f06:	f7ff fbd2 	bl	80036ae <LL_RCC_LSI1_IsReady>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f1      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d05b      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	4ba7      	ldr	r3, [pc, #668]	@ (80041bc <HAL_RCC_OscConfig+0x688>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f28:	f7ff fa70 	bl	800340c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2c:	f7fe f8aa 	bl	8002084 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f34:	f7fe f8a6 	bl	8002084 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e163      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f46:	4b9d      	ldr	r3, [pc, #628]	@ (80041bc <HAL_RCC_OscConfig+0x688>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_OscConfig+0x42c>
 8003f5a:	f7ff fb30 	bl	80035be <LL_RCC_LSE_Enable>
 8003f5e:	e00c      	b.n	8003f7a <HAL_RCC_OscConfig+0x446>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d104      	bne.n	8003f72 <HAL_RCC_OscConfig+0x43e>
 8003f68:	f7ff fb4b 	bl	8003602 <LL_RCC_LSE_EnableBypass>
 8003f6c:	f7ff fb27 	bl	80035be <LL_RCC_LSE_Enable>
 8003f70:	e003      	b.n	8003f7a <HAL_RCC_OscConfig+0x446>
 8003f72:	f7ff fb35 	bl	80035e0 <LL_RCC_LSE_Disable>
 8003f76:	f7ff fb55 	bl	8003624 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fe f87f 	bl	8002084 <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fe f87b 	bl	8002084 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e136      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003fa0:	f7ff fb51 	bl	8003646 <LL_RCC_LSE_IsReady>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCC_OscConfig+0x456>
 8003faa:	e013      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fe f86a 	bl	8002084 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fe f866 	bl	8002084 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e121      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003fca:	f7ff fb3c 	bl	8003646 <LL_RCC_LSE_IsReady>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d02c      	beq.n	800403a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d014      	beq.n	8004012 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fe8:	f7ff fab5 	bl	8003556 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fe f84a 	bl	8002084 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff4:	f7fe f846 	bl	8002084 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e103      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004006:	f7ff fac8 	bl	800359a <LL_RCC_HSI48_IsReady>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f1      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x4c0>
 8004010:	e013      	b.n	800403a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004012:	f7ff fab1 	bl	8003578 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004016:	f7fe f835 	bl	8002084 <HAL_GetTick>
 800401a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800401c:	e008      	b.n	8004030 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800401e:	f7fe f831 	bl	8002084 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e0ee      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004030:	f7ff fab3 	bl	800359a <LL_RCC_HSI48_IsReady>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f1      	bne.n	800401e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80e4 	beq.w	800420c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004044:	f7ff fc11 	bl	800386a <LL_RCC_GetSysClkSource>
 8004048:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	2b02      	cmp	r3, #2
 8004058:	f040 80b4 	bne.w	80041c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0203 	and.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	429a      	cmp	r2, r3
 8004068:	d123      	bne.n	80040b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d11c      	bne.n	80040b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d114      	bne.n	80040b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d10d      	bne.n	80040b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d05d      	beq.n	800416e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d058      	beq.n	800416a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0a1      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040ca:	f7ff fc84 	bl	80039d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ce:	f7fd ffd9 	bl	8002084 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd ffd5 	bl	8002084 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e092      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	4b30      	ldr	r3, [pc, #192]	@ (80041c0 <HAL_RCC_OscConfig+0x68c>)
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004108:	4311      	orrs	r1, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800410e:	0212      	lsls	r2, r2, #8
 8004110:	4311      	orrs	r1, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800411c:	4311      	orrs	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004122:	430a      	orrs	r2, r1
 8004124:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004128:	4313      	orrs	r3, r2
 800412a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800412c:	f7ff fc44 	bl	80039b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004140:	f7fd ffa0 	bl	8002084 <HAL_GetTick>
 8004144:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004148:	f7fd ff9c 	bl	8002084 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e059      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ef      	beq.n	8004148 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004168:	e050      	b.n	800420c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e04f      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d147      	bne.n	800420c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800417c:	f7ff fc1c 	bl	80039b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004190:	f7fd ff78 	bl	8002084 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fd ff74 	bl	8002084 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e031      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ef      	beq.n	8004198 <HAL_RCC_OscConfig+0x664>
 80041b8:	e028      	b.n	800420c <HAL_RCC_OscConfig+0x6d8>
 80041ba:	bf00      	nop
 80041bc:	58000400 	.word	0x58000400
 80041c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d01e      	beq.n	8004208 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ca:	f7ff fc04 	bl	80039d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd ff59 	bl	8002084 <HAL_GetTick>
 80041d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd ff55 	bl	8002084 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e012      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1ef      	bne.n	80041d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCC_OscConfig+0x6e4>)
 8004202:	4013      	ands	r3, r2
 8004204:	60cb      	str	r3, [r1, #12]
 8004206:	e001      	b.n	800420c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3734      	adds	r7, #52	@ 0x34
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	bf00      	nop
 8004218:	eefefffc 	.word	0xeefefffc

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e12d      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b98      	ldr	r3, [pc, #608]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d91b      	bls.n	8004276 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b95      	ldr	r3, [pc, #596]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	4993      	ldr	r1, [pc, #588]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424e:	f7fd ff19 	bl	8002084 <HAL_GetTick>
 8004252:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004254:	e008      	b.n	8004268 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004256:	f7fd ff15 	bl	8002084 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e111      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004268:	4b8a      	ldr	r3, [pc, #552]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d1ef      	bne.n	8004256 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fafb 	bl	8003882 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800428c:	f7fd fefa 	bl	8002084 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004294:	f7fd fef6 	bl	8002084 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0f2      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80042a6:	f7ff fbe8 	bl	8003a7a <LL_RCC_IsActiveFlag_HPRE>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f1      	beq.n	8004294 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d016      	beq.n	80042ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff faf2 	bl	80038aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80042c6:	f7fd fedd 	bl	8002084 <HAL_GetTick>
 80042ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80042ce:	f7fd fed9 	bl	8002084 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0d5      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80042e0:	f7ff fbdd 	bl	8003a9e <LL_RCC_IsActiveFlag_C2HPRE>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f1      	beq.n	80042ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff faeb 	bl	80038d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004300:	f7fd fec0 	bl	8002084 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004308:	f7fd febc 	bl	8002084 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0b8      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800431a:	f7ff fbd3 	bl	8003ac4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f1      	beq.n	8004308 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d016      	beq.n	800435e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fae5 	bl	8003904 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800433a:	f7fd fea3 	bl	8002084 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004342:	f7fd fe9f 	bl	8002084 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e09b      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004354:	f7ff fbc9 	bl	8003aea <LL_RCC_IsActiveFlag_PPRE1>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f1      	beq.n	8004342 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d017      	beq.n	800439a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fadb 	bl	800392c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004376:	f7fd fe85 	bl	8002084 <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800437e:	f7fd fe81 	bl	8002084 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e07d      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004390:	f7ff fbbd 	bl	8003b0e <LL_RCC_IsActiveFlag_PPRE2>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f1      	beq.n	800437e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d043      	beq.n	800442e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d106      	bne.n	80043bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80043ae:	f7ff f87b 	bl	80034a8 <LL_RCC_HSE_IsReady>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11e      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e067      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80043c4:	f7ff fb16 	bl	80039f4 <LL_RCC_PLL_IsReady>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e05c      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80043da:	f7ff f9e3 	bl	80037a4 <LL_RCC_MSI_IsReady>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e051      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80043e8:	f7ff f88e 	bl	8003508 <LL_RCC_HSI_IsReady>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e04a      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fa21 	bl	8003842 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fd fe40 	bl	8002084 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fd fe3c 	bl	8002084 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e036      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	f7ff fa24 	bl	800386a <LL_RCC_GetSysClkSource>
 8004422:	4602      	mov	r2, r0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	429a      	cmp	r2, r3
 800442c:	d1ec      	bne.n	8004408 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442e:	4b19      	ldr	r3, [pc, #100]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d21b      	bcs.n	8004474 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443c:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 0207 	bic.w	r2, r3, #7
 8004444:	4913      	ldr	r1, [pc, #76]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fd fe1a 	bl	8002084 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004452:	e008      	b.n	8004466 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004454:	f7fd fe16 	bl	8002084 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e012      	b.n	800448c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_ClockConfig+0x278>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d1ef      	bne.n	8004454 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004474:	f000 f87e 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8004478:	4603      	mov	r3, r0
 800447a:	4a07      	ldr	r2, [pc, #28]	@ (8004498 <HAL_RCC_ClockConfig+0x27c>)
 800447c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800447e:	f7fd fe0d 	bl	800209c <HAL_GetTickPrio>
 8004482:	4603      	mov	r3, r0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fdaf 	bl	8001fe8 <HAL_InitTick>
 800448a:	4603      	mov	r3, r0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	58004000 	.word	0x58004000
 8004498:	20000004 	.word	0x20000004

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	f7ff f9e2 	bl	800386a <LL_RCC_GetSysClkSource>
 80044a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80044ae:	f7ff f99e 	bl	80037ee <LL_RCC_MSI_GetRange>
 80044b2:	4603      	mov	r3, r0
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	4a2b      	ldr	r2, [pc, #172]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e04b      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d102      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044ca:	4b28      	ldr	r3, [pc, #160]	@ (800456c <HAL_RCC_GetSysClockFreq+0xd0>)
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	e045      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d10a      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80044d6:	f7fe ffb7 	bl	8003448 <LL_RCC_HSE_IsEnabledDiv2>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80044e0:	4b22      	ldr	r3, [pc, #136]	@ (800456c <HAL_RCC_GetSysClockFreq+0xd0>)
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e03a      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80044e6:	4b22      	ldr	r3, [pc, #136]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e037      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80044ec:	f7ff fab9 	bl	8003a62 <LL_RCC_PLL_GetMainSource>
 80044f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d003      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x64>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x6a>
 80044fe:	e00d      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004502:	60bb      	str	r3, [r7, #8]
        break;
 8004504:	e015      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004506:	f7fe ff9f 	bl	8003448 <LL_RCC_HSE_IsEnabledDiv2>
 800450a:	4603      	mov	r3, r0
 800450c:	2b01      	cmp	r3, #1
 800450e:	d102      	bne.n	8004516 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004510:	4b16      	ldr	r3, [pc, #88]	@ (800456c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004512:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004514:	e00d      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004516:	4b16      	ldr	r3, [pc, #88]	@ (8004570 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004518:	60bb      	str	r3, [r7, #8]
        break;
 800451a:	e00a      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800451c:	f7ff f967 	bl	80037ee <LL_RCC_MSI_GetRange>
 8004520:	4603      	mov	r3, r0
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xcc>)
 800452a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452e:	60bb      	str	r3, [r7, #8]
        break;
 8004530:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004532:	f7ff fa71 	bl	8003a18 <LL_RCC_PLL_GetN>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	fb03 f402 	mul.w	r4, r3, r2
 800453e:	f7ff fa84 	bl	8003a4a <LL_RCC_PLL_GetDivider>
 8004542:	4603      	mov	r3, r0
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	3301      	adds	r3, #1
 8004548:	fbb4 f4f3 	udiv	r4, r4, r3
 800454c:	f7ff fa71 	bl	8003a32 <LL_RCC_PLL_GetR>
 8004550:	4603      	mov	r3, r0
 8004552:	0f5b      	lsrs	r3, r3, #29
 8004554:	3301      	adds	r3, #1
 8004556:	fbb4 f3f3 	udiv	r3, r4, r3
 800455a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	bd90      	pop	{r4, r7, pc}
 8004566:	bf00      	nop
 8004568:	0800a488 	.word	0x0800a488
 800456c:	00f42400 	.word	0x00f42400
 8004570:	01e84800 	.word	0x01e84800

08004574 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004574:	b598      	push	{r3, r4, r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004578:	f7ff ff90 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800457c:	4604      	mov	r4, r0
 800457e:	f7ff f9e9 	bl	8003954 <LL_RCC_GetAHBPrescaler>
 8004582:	4603      	mov	r3, r0
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4a03      	ldr	r2, [pc, #12]	@ (8004598 <HAL_RCC_GetHCLKFreq+0x24>)
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd98      	pop	{r3, r4, r7, pc}
 8004598:	0800a428 	.word	0x0800a428

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b598      	push	{r3, r4, r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045a0:	f7ff ffe8 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 80045a4:	4604      	mov	r4, r0
 80045a6:	f7ff f9ef 	bl	8003988 <LL_RCC_GetAPB1Prescaler>
 80045aa:	4603      	mov	r3, r0
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	f003 031f 	and.w	r3, r3, #31
 80045bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd98      	pop	{r3, r4, r7, pc}
 80045c4:	0800a468 	.word	0x0800a468

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b598      	push	{r3, r4, r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80045cc:	f7ff ffd2 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 80045d0:	4604      	mov	r4, r0
 80045d2:	f7ff f9e5 	bl	80039a0 <LL_RCC_GetAPB2Prescaler>
 80045d6:	4603      	mov	r3, r0
 80045d8:	0adb      	lsrs	r3, r3, #11
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd98      	pop	{r3, r4, r7, pc}
 80045f0:	0800a468 	.word	0x0800a468

080045f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2bb0      	cmp	r3, #176	@ 0xb0
 8004600:	d903      	bls.n	800460a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e007      	b.n	800461a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	4a11      	ldr	r2, [pc, #68]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004618:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800461a:	f7ff f9a7 	bl	800396c <LL_RCC_GetAHB4Prescaler>
 800461e:	4603      	mov	r3, r0
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	4a0d      	ldr	r2, [pc, #52]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	0c9c      	lsrs	r4, r3, #18
 800463e:	f7fe fef5 	bl	800342c <HAL_PWREx_GetVoltageRange>
 8004642:	4603      	mov	r3, r0
 8004644:	4619      	mov	r1, r3
 8004646:	4620      	mov	r0, r4
 8004648:	f000 f80c 	bl	8004664 <RCC_SetFlashLatency>
 800464c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bd90      	pop	{r4, r7, pc}
 8004656:	bf00      	nop
 8004658:	0800a488 	.word	0x0800a488
 800465c:	0800a428 	.word	0x0800a428
 8004660:	431bde83 	.word	0x431bde83

08004664 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b093      	sub	sp, #76	@ 0x4c
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800466e:	4b37      	ldr	r3, [pc, #220]	@ (800474c <RCC_SetFlashLatency+0xe8>)
 8004670:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800467a:	4a35      	ldr	r2, [pc, #212]	@ (8004750 <RCC_SetFlashLatency+0xec>)
 800467c:	f107 031c 	add.w	r3, r7, #28
 8004680:	ca07      	ldmia	r2, {r0, r1, r2}
 8004682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004686:	4b33      	ldr	r3, [pc, #204]	@ (8004754 <RCC_SetFlashLatency+0xf0>)
 8004688:	f107 040c 	add.w	r4, r7, #12
 800468c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800468e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004692:	2300      	movs	r3, #0
 8004694:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469c:	d11a      	bne.n	80046d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800469e:	2300      	movs	r3, #0
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80046a2:	e013      	b.n	80046cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80046a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	3348      	adds	r3, #72	@ 0x48
 80046aa:	443b      	add	r3, r7
 80046ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d807      	bhi.n	80046c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80046b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3348      	adds	r3, #72	@ 0x48
 80046bc:	443b      	add	r3, r7
 80046be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80046c2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80046c4:	e020      	b.n	8004708 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80046c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046c8:	3301      	adds	r3, #1
 80046ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80046cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d9e8      	bls.n	80046a4 <RCC_SetFlashLatency+0x40>
 80046d2:	e019      	b.n	8004708 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d8:	e013      	b.n	8004702 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80046da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3348      	adds	r3, #72	@ 0x48
 80046e0:	443b      	add	r3, r7
 80046e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d807      	bhi.n	80046fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80046ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	3348      	adds	r3, #72	@ 0x48
 80046f2:	443b      	add	r3, r7
 80046f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80046f8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80046fa:	e005      	b.n	8004708 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80046fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fe:	3301      	adds	r3, #1
 8004700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004704:	2b02      	cmp	r3, #2
 8004706:	d9e8      	bls.n	80046da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <RCC_SetFlashLatency+0xf4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 0207 	bic.w	r2, r3, #7
 8004710:	4911      	ldr	r1, [pc, #68]	@ (8004758 <RCC_SetFlashLatency+0xf4>)
 8004712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004714:	4313      	orrs	r3, r2
 8004716:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004718:	f7fd fcb4 	bl	8002084 <HAL_GetTick>
 800471c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800471e:	e008      	b.n	8004732 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004720:	f7fd fcb0 	bl	8002084 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e007      	b.n	8004742 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <RCC_SetFlashLatency+0xf4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800473c:	429a      	cmp	r2, r3
 800473e:	d1ef      	bne.n	8004720 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	374c      	adds	r7, #76	@ 0x4c
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop
 800474c:	0800a3fc 	.word	0x0800a3fc
 8004750:	0800a40c 	.word	0x0800a40c
 8004754:	0800a418 	.word	0x0800a418
 8004758:	58004000 	.word	0x58004000

0800475c <LL_RCC_LSE_IsEnabled>:
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <LL_RCC_LSE_IsEnabled+0x18>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <LL_RCC_LSE_IsEnabled+0x1a>
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <LL_RCC_LSE_IsReady>:
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d101      	bne.n	8004798 <LL_RCC_LSE_IsReady+0x18>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <LL_RCC_LSE_IsReady+0x1a>
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_RCC_MSI_EnablePLLMode>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047b2:	f043 0304 	orr.w	r3, r3, #4
 80047b6:	6013      	str	r3, [r2, #0]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <LL_RCC_SetRFWKPClockSource>:
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <LL_RCC_SetSMPSClockSource>:
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f023 0203 	bic.w	r2, r3, #3
 8004800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4313      	orrs	r3, r2
 8004808:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <LL_RCC_SetSMPSPrescaler>:
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004828:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4313      	orrs	r3, r2
 8004830:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <LL_RCC_SetUSARTClockSource>:
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	f023 0203 	bic.w	r2, r3, #3
 8004852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_SetLPUARTClockSource>:
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800487e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <LL_RCC_SetI2CClockSource>:
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80048ae:	43db      	mvns	r3, r3
 80048b0:	401a      	ands	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80048ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_RCC_SetLPTIMClockSource>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	43db      	mvns	r3, r3
 80048e8:	401a      	ands	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_SetSAIClockSource>:
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_SetRNGClockSource>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <LL_RCC_SetCLK48ClockSource>:
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_RCC_SetUSBClockSource>:
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ffe3 	bl	800495c <LL_RCC_SetCLK48ClockSource>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <LL_RCC_SetADCClockSource>:
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80049a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_SetRTCClockSource>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_GetRTCClockSource>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_ForceBackupDomainReset>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_PLLSAI1_Enable>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_RCC_PLLSAI1_Disable>:
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a84:	6013      	str	r3, [r2, #0]
}
 8004a86:	bf00      	nop
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_RCC_PLLSAI1_IsReady>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aa2:	d101      	bne.n	8004aa8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004abc:	2300      	movs	r3, #0
 8004abe:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d034      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ad8:	d021      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004ada:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ade:	d81b      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ae0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ae4:	d01d      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ae6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aea:	d815      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004af4:	d110      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b04:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b06:	e00d      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f94d 	bl	8004dac <RCCEx_PLLSAI1_ConfigNP>
 8004b12:	4603      	mov	r3, r0
 8004b14:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b16:	e005      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77fb      	strb	r3, [r7, #31]
        break;
 8004b1c:	e002      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b1e:	bf00      	nop
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fee8 	bl	8004904 <LL_RCC_SetSAIClockSource>
 8004b34:	e001      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	7ffb      	ldrb	r3, [r7, #31]
 8004b38:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d046      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004b46:	f7ff ff56 	bl	80049f6 <LL_RCC_GetRTCClockSource>
 8004b4a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d03c      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b56:	f7fe fc59 	bl	800340c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ff30 	bl	80049ca <LL_RCC_SetRTCClockSource>
 8004b6a:	e02e      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004b76:	f7ff ff4b 	bl	8004a10 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004b7a:	f7ff ff5a 	bl	8004a32 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004b96:	f7ff fde1 	bl	800475c <LL_RCC_LSE_IsEnabled>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d114      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ba0:	f7fd fa70 	bl	8002084 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ba6:	e00b      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fa6c 	bl	8002084 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d902      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	77fb      	strb	r3, [r7, #31]
              break;
 8004bbe:	e004      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004bc0:	f7ff fdde 	bl	8004780 <LL_RCC_LSE_IsReady>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d1ee      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	77bb      	strb	r3, [r7, #30]
 8004bce:	e001      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fe2a 	bl	800483e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fe35 	bl	800486a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fe5d 	bl	80048d0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d004      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fe52 	bl	80048d0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fe2a 	bl	8004896 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fe1f 	bl	8004896 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d022      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fe8d 	bl	8004988 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c76:	d107      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f8e3 	bl	8004e62 <RCCEx_PLLSAI1_ConfigNQ>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02b      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fe2a 	bl	8004930 <LL_RCC_SetRNGClockSource>
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f7ff fe21 	bl	8004930 <LL_RCC_SetRNGClockSource>
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff fe34 	bl	800495c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d022      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fe3d 	bl	800499e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d46:	d10b      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f8e3 	bl	8004f18 <RCCEx_PLLSAI1_ConfigNR>
 8004d52:	4603      	mov	r3, r0
 8004d54:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004d5c:	7ffb      	ldrb	r3, [r7, #31]
 8004d5e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fd26 	bl	80047c2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fd45 	bl	8004816 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fd2c 	bl	80047ee <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004d96:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004da4:	f7ff fcfe 	bl	80047a4 <LL_RCC_MSI_EnablePLLMode>
}
 8004da8:	bf00      	nop
 8004daa:	bd80      	pop	{r7, pc}

08004dac <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004db8:	f7ff fe5b 	bl	8004a72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dbc:	f7fd f962 	bl	8002084 <HAL_GetTick>
 8004dc0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004dc2:	e009      	b.n	8004dd8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dc4:	f7fd f95e 	bl	8002084 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d902      	bls.n	8004dd8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd6:	e004      	b.n	8004de2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004dd8:	f7ff fe5a 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d137      	bne.n	8004e58 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e12:	4313      	orrs	r3, r2
 8004e14:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e16:	f7ff fe1d 	bl	8004a54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fd f933 	bl	8002084 <HAL_GetTick>
 8004e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e20:	e009      	b.n	8004e36 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e22:	f7fd f92f 	bl	8002084 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d902      	bls.n	8004e36 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	73fb      	strb	r3, [r7, #15]
        break;
 8004e34:	e004      	b.n	8004e40 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e36:	f7ff fe2b 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d1f0      	bne.n	8004e22 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e54:	4313      	orrs	r3, r2
 8004e56:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e6e:	f7ff fe00 	bl	8004a72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e72:	f7fd f907 	bl	8002084 <HAL_GetTick>
 8004e76:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e78:	e009      	b.n	8004e8e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e7a:	f7fd f903 	bl	8002084 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d902      	bls.n	8004e8e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e004      	b.n	8004e98 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e8e:	f7ff fdff 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d137      	bne.n	8004f0e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ecc:	f7ff fdc2 	bl	8004a54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fd f8d8 	bl	8002084 <HAL_GetTick>
 8004ed4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ed6:	e009      	b.n	8004eec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed8:	f7fd f8d4 	bl	8002084 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d902      	bls.n	8004eec <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eea:	e004      	b.n	8004ef6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004eec:	f7ff fdd0 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d1f0      	bne.n	8004ed8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f24:	f7ff fda5 	bl	8004a72 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f28:	f7fd f8ac 	bl	8002084 <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f2e:	e009      	b.n	8004f44 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f30:	f7fd f8a8 	bl	8002084 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d902      	bls.n	8004f44 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	73fb      	strb	r3, [r7, #15]
      break;
 8004f42:	e004      	b.n	8004f4e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f44:	f7ff fda4 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d137      	bne.n	8004fc4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f82:	f7ff fd67 	bl	8004a54 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fd f87d 	bl	8002084 <HAL_GetTick>
 8004f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f8c:	e009      	b.n	8004fa2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f8e:	f7fd f879 	bl	8002084 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d902      	bls.n	8004fa2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004fa0:	e004      	b.n	8004fac <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fa2:	f7ff fd75 	bl	8004a90 <LL_RCC_PLLSAI1_IsReady>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d1f0      	bne.n	8004f8e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <LL_RCC_GetUSARTClockSource>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4013      	ands	r3, r2
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_RCC_GetLPUARTClockSource>:
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4013      	ands	r3, r2
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e042      	b.n	80050a6 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fc fdb8 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2224      	movs	r2, #36	@ 0x24
 800503c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fadf 	bl	800561c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8b4 	bl	80051cc <UART_SetConfig>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e01b      	b.n	80050a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800507c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800508c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb5e 	bl	8005760 <UART_CheckIdleState>
 80050a4:	4603      	mov	r3, r0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08a      	sub	sp, #40	@ 0x28
 80050b2:	af02      	add	r7, sp, #8
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d17b      	bne.n	80051c0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UART_Transmit+0x26>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e074      	b.n	80051c2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2221      	movs	r2, #33	@ 0x21
 80050e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050e8:	f7fc ffcc 	bl	8002084 <HAL_GetTick>
 80050ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	88fa      	ldrh	r2, [r7, #6]
 80050f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005106:	d108      	bne.n	800511a <HAL_UART_Transmit+0x6c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e003      	b.n	8005122 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005122:	e030      	b.n	8005186 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	@ 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fbc0 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e03d      	b.n	80051c2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	3302      	adds	r3, #2
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e007      	b.n	8005174 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1c8      	bne.n	8005124 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	@ 0x40
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fb89 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e006      	b.n	80051c2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051d0:	b08c      	sub	sp, #48	@ 0x30
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4baf      	ldr	r3, [pc, #700]	@ (80054b8 <UART_SetConfig+0x2ec>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005204:	430b      	orrs	r3, r1
 8005206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4aa4      	ldr	r2, [pc, #656]	@ (80054bc <UART_SetConfig+0x2f0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005234:	4313      	orrs	r3, r2
 8005236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005242:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800524c:	430b      	orrs	r3, r1
 800524e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005256:	f023 010f 	bic.w	r1, r3, #15
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a95      	ldr	r2, [pc, #596]	@ (80054c0 <UART_SetConfig+0x2f4>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d125      	bne.n	80052bc <UART_SetConfig+0xf0>
 8005270:	2003      	movs	r0, #3
 8005272:	f7ff feac 	bl	8004fce <LL_RCC_GetUSARTClockSource>
 8005276:	4603      	mov	r3, r0
 8005278:	2b03      	cmp	r3, #3
 800527a:	d81b      	bhi.n	80052b4 <UART_SetConfig+0xe8>
 800527c:	a201      	add	r2, pc, #4	@ (adr r2, 8005284 <UART_SetConfig+0xb8>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	08005295 	.word	0x08005295
 8005288:	080052a5 	.word	0x080052a5
 800528c:	0800529d 	.word	0x0800529d
 8005290:	080052ad 	.word	0x080052ad
 8005294:	2301      	movs	r3, #1
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529a:	e042      	b.n	8005322 <UART_SetConfig+0x156>
 800529c:	2302      	movs	r3, #2
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a2:	e03e      	b.n	8005322 <UART_SetConfig+0x156>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052aa:	e03a      	b.n	8005322 <UART_SetConfig+0x156>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e036      	b.n	8005322 <UART_SetConfig+0x156>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e032      	b.n	8005322 <UART_SetConfig+0x156>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7e      	ldr	r2, [pc, #504]	@ (80054bc <UART_SetConfig+0x2f0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d12a      	bne.n	800531c <UART_SetConfig+0x150>
 80052c6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80052ca:	f7ff fe90 	bl	8004fee <LL_RCC_GetLPUARTClockSource>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052d4:	d01a      	beq.n	800530c <UART_SetConfig+0x140>
 80052d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052da:	d81b      	bhi.n	8005314 <UART_SetConfig+0x148>
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e0:	d00c      	beq.n	80052fc <UART_SetConfig+0x130>
 80052e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e6:	d815      	bhi.n	8005314 <UART_SetConfig+0x148>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <UART_SetConfig+0x128>
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f0:	d008      	beq.n	8005304 <UART_SetConfig+0x138>
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x148>
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fa:	e012      	b.n	8005322 <UART_SetConfig+0x156>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005302:	e00e      	b.n	8005322 <UART_SetConfig+0x156>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530a:	e00a      	b.n	8005322 <UART_SetConfig+0x156>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e006      	b.n	8005322 <UART_SetConfig+0x156>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e002      	b.n	8005322 <UART_SetConfig+0x156>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a65      	ldr	r2, [pc, #404]	@ (80054bc <UART_SetConfig+0x2f0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	f040 8097 	bne.w	800545c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005332:	2b08      	cmp	r3, #8
 8005334:	d823      	bhi.n	800537e <UART_SetConfig+0x1b2>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x170>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	08005369 	.word	0x08005369
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800536f 	.word	0x0800536f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800537f 	.word	0x0800537f
 800535c:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7ff f91c 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b56      	ldr	r3, [pc, #344]	@ (80054c4 <UART_SetConfig+0x2f8>)
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7ff f895 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005372:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 812b 	beq.w	80055e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	4a4c      	ldr	r2, [pc, #304]	@ (80054c8 <UART_SetConfig+0x2fc>)
 8005398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539c:	461a      	mov	r2, r3
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	4413      	add	r3, r2
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d305      	bcc.n	80053c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d903      	bls.n	80053ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053c8:	e10e      	b.n	80055e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	2200      	movs	r2, #0
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	60fa      	str	r2, [r7, #12]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	4a3c      	ldr	r2, [pc, #240]	@ (80054c8 <UART_SetConfig+0x2fc>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2200      	movs	r2, #0
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053ec:	f7fb fc24 	bl	8000c38 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	020b      	lsls	r3, r1, #8
 8005402:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005406:	0202      	lsls	r2, r0, #8
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	6849      	ldr	r1, [r1, #4]
 800540c:	0849      	lsrs	r1, r1, #1
 800540e:	2000      	movs	r0, #0
 8005410:	460c      	mov	r4, r1
 8005412:	4605      	mov	r5, r0
 8005414:	eb12 0804 	adds.w	r8, r2, r4
 8005418:	eb43 0905 	adc.w	r9, r3, r5
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	469a      	mov	sl, r3
 8005424:	4693      	mov	fp, r2
 8005426:	4652      	mov	r2, sl
 8005428:	465b      	mov	r3, fp
 800542a:	4640      	mov	r0, r8
 800542c:	4649      	mov	r1, r9
 800542e:	f7fb fc03 	bl	8000c38 <__aeabi_uldivmod>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4613      	mov	r3, r2
 8005438:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005440:	d308      	bcc.n	8005454 <UART_SetConfig+0x288>
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005448:	d204      	bcs.n	8005454 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	60da      	str	r2, [r3, #12]
 8005452:	e0c9      	b.n	80055e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800545a:	e0c5      	b.n	80055e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005464:	d16d      	bne.n	8005542 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005466:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800546a:	3b01      	subs	r3, #1
 800546c:	2b07      	cmp	r3, #7
 800546e:	d82d      	bhi.n	80054cc <UART_SetConfig+0x300>
 8005470:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <UART_SetConfig+0x2ac>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	08005499 	.word	0x08005499
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054cd 	.word	0x080054cd
 8005484:	080054a7 	.word	0x080054a7
 8005488:	080054cd 	.word	0x080054cd
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054cd 	.word	0x080054cd
 8005494:	080054af 	.word	0x080054af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005498:	f7ff f896 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 800549c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800549e:	e01b      	b.n	80054d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b08      	ldr	r3, [pc, #32]	@ (80054c4 <UART_SetConfig+0x2f8>)
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054a4:	e018      	b.n	80054d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fe fff9 	bl	800449c <HAL_RCC_GetSysClockFreq>
 80054aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ac:	e014      	b.n	80054d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054b4:	e010      	b.n	80054d8 <UART_SetConfig+0x30c>
 80054b6:	bf00      	nop
 80054b8:	cfff69f3 	.word	0xcfff69f3
 80054bc:	40008000 	.word	0x40008000
 80054c0:	40013800 	.word	0x40013800
 80054c4:	00f42400 	.word	0x00f42400
 80054c8:	0800a4c8 	.word	0x0800a4c8
      default:
        pclk = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8084 	beq.w	80055e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005614 <UART_SetConfig+0x448>)
 80054e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f2:	005a      	lsls	r2, r3, #1
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	441a      	add	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	fbb2 f3f3 	udiv	r3, r2, r3
 8005504:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	2b0f      	cmp	r3, #15
 800550a:	d916      	bls.n	800553a <UART_SetConfig+0x36e>
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005512:	d212      	bcs.n	800553a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f023 030f 	bic.w	r3, r3, #15
 800551c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	b29b      	uxth	r3, r3
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	b29a      	uxth	r2, r3
 800552a:	8bfb      	ldrh	r3, [r7, #30]
 800552c:	4313      	orrs	r3, r2
 800552e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	8bfa      	ldrh	r2, [r7, #30]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e056      	b.n	80055e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005540:	e052      	b.n	80055e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005542:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005546:	3b01      	subs	r3, #1
 8005548:	2b07      	cmp	r3, #7
 800554a:	d822      	bhi.n	8005592 <UART_SetConfig+0x3c6>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <UART_SetConfig+0x388>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005575 	.word	0x08005575
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005593 	.word	0x08005593
 8005560:	08005583 	.word	0x08005583
 8005564:	08005593 	.word	0x08005593
 8005568:	08005593 	.word	0x08005593
 800556c:	08005593 	.word	0x08005593
 8005570:	0800558b 	.word	0x0800558b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005574:	f7ff f828 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 8005578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557a:	e010      	b.n	800559e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800557c:	4b26      	ldr	r3, [pc, #152]	@ (8005618 <UART_SetConfig+0x44c>)
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005580:	e00d      	b.n	800559e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005582:	f7fe ff8b 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8005586:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005588:	e009      	b.n	800559e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005590:	e005      	b.n	800559e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800559c:	bf00      	nop
    }

    if (pclk != 0U)
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d021      	beq.n	80055e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <UART_SetConfig+0x448>)
 80055aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	085b      	lsrs	r3, r3, #1
 80055bc:	441a      	add	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d909      	bls.n	80055e2 <UART_SetConfig+0x416>
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d205      	bcs.n	80055e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e002      	b.n	80055e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005604:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005608:	4618      	mov	r0, r3
 800560a:	3730      	adds	r7, #48	@ 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005612:	bf00      	nop
 8005614:	0800a4c8 	.word	0x0800a4c8
 8005618:	00f42400 	.word	0x00f42400

0800561c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01a      	beq.n	8005732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571a:	d10a      	bne.n	8005732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  }
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b098      	sub	sp, #96	@ 0x60
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005770:	f7fc fc88 	bl	8002084 <HAL_GetTick>
 8005774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b08      	cmp	r3, #8
 8005782:	d12f      	bne.n	80057e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800578c:	2200      	movs	r2, #0
 800578e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f88e 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d022      	beq.n	80057e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e063      	b.n	80058ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d149      	bne.n	8005886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fa:	2200      	movs	r2, #0
 80057fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f857 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03c      	beq.n	8005886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	e853 3f00 	ldrex	r3, [r3]
 8005818:	623b      	str	r3, [r7, #32]
   return(result);
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800582a:	633b      	str	r3, [r7, #48]	@ 0x30
 800582c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e6      	bne.n	800580c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	60fb      	str	r3, [r7, #12]
   return(result);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3308      	adds	r3, #8
 800585c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800585e:	61fa      	str	r2, [r7, #28]
 8005860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	617b      	str	r3, [r7, #20]
   return(result);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e5      	bne.n	800583e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e012      	b.n	80058ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3758      	adds	r7, #88	@ 0x58
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e04f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d04b      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fc fbd9 	bl	8002084 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e04e      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d037      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b80      	cmp	r3, #128	@ 0x80
 80058fa:	d034      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b40      	cmp	r3, #64	@ 0x40
 8005900:	d031      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d110      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2208      	movs	r2, #8
 8005916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f838 	bl	800598e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2208      	movs	r2, #8
 8005922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e029      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005940:	d111      	bne.n	8005966 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800594a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f81e 	bl	800598e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e00f      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4013      	ands	r3, r2
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	429a      	cmp	r2, r3
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	429a      	cmp	r2, r3
 8005982:	d0a0      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800598e:	b480      	push	{r7}
 8005990:	b095      	sub	sp, #84	@ 0x54
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3308      	adds	r3, #8
 80059ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e3      	bne.n	80059c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d118      	bne.n	8005a3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 0310 	bic.w	r3, r3, #16
 8005a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	613b      	str	r3, [r7, #16]
   return(result);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e6      	bne.n	8005a08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a4e:	bf00      	nop
 8005a50:	3754      	adds	r7, #84	@ 0x54
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e027      	b.n	8005ac0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	@ 0x24
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e02d      	b.n	8005b40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	@ 0x24
 8005af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f84f 	bl	8005bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e02d      	b.n	8005bbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2224      	movs	r2, #36	@ 0x24
 8005b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f811 	bl	8005bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d108      	bne.n	8005be6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005be4:	e031      	b.n	8005c4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005be6:	2308      	movs	r3, #8
 8005be8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bea:	2308      	movs	r3, #8
 8005bec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	0e5b      	lsrs	r3, r3, #25
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	0f5b      	lsrs	r3, r3, #29
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	7b3a      	ldrb	r2, [r7, #12]
 8005c12:	4911      	ldr	r1, [pc, #68]	@ (8005c58 <UARTEx_SetNbDataToProcess+0x94>)
 8005c14:	5c8a      	ldrb	r2, [r1, r2]
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c1a:	7b3a      	ldrb	r2, [r7, #12]
 8005c1c:	490f      	ldr	r1, [pc, #60]	@ (8005c5c <UARTEx_SetNbDataToProcess+0x98>)
 8005c1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	7b7a      	ldrb	r2, [r7, #13]
 8005c30:	4909      	ldr	r1, [pc, #36]	@ (8005c58 <UARTEx_SetNbDataToProcess+0x94>)
 8005c32:	5c8a      	ldrb	r2, [r1, r2]
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c38:	7b7a      	ldrb	r2, [r7, #13]
 8005c3a:	4908      	ldr	r1, [pc, #32]	@ (8005c5c <UARTEx_SetNbDataToProcess+0x98>)
 8005c3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	0800a4e0 	.word	0x0800a4e0
 8005c5c:	0800a4e8 	.word	0x0800a4e8

08005c60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c68:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005c6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4013      	ands	r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b085      	sub	sp, #20
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <__cvt>:
 8005cd2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd6:	ec57 6b10 	vmov	r6, r7, d0
 8005cda:	2f00      	cmp	r7, #0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	4619      	mov	r1, r3
 8005ce0:	463b      	mov	r3, r7
 8005ce2:	bfbb      	ittet	lt
 8005ce4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ce8:	461f      	movlt	r7, r3
 8005cea:	2300      	movge	r3, #0
 8005cec:	232d      	movlt	r3, #45	@ 0x2d
 8005cee:	700b      	strb	r3, [r1, #0]
 8005cf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005cf6:	4691      	mov	r9, r2
 8005cf8:	f023 0820 	bic.w	r8, r3, #32
 8005cfc:	bfbc      	itt	lt
 8005cfe:	4632      	movlt	r2, r6
 8005d00:	4616      	movlt	r6, r2
 8005d02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d06:	d005      	beq.n	8005d14 <__cvt+0x42>
 8005d08:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d0c:	d100      	bne.n	8005d10 <__cvt+0x3e>
 8005d0e:	3401      	adds	r4, #1
 8005d10:	2102      	movs	r1, #2
 8005d12:	e000      	b.n	8005d16 <__cvt+0x44>
 8005d14:	2103      	movs	r1, #3
 8005d16:	ab03      	add	r3, sp, #12
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	ab02      	add	r3, sp, #8
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	ec47 6b10 	vmov	d0, r6, r7
 8005d22:	4653      	mov	r3, sl
 8005d24:	4622      	mov	r2, r4
 8005d26:	f001 f873 	bl	8006e10 <_dtoa_r>
 8005d2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d2e:	4605      	mov	r5, r0
 8005d30:	d119      	bne.n	8005d66 <__cvt+0x94>
 8005d32:	f019 0f01 	tst.w	r9, #1
 8005d36:	d00e      	beq.n	8005d56 <__cvt+0x84>
 8005d38:	eb00 0904 	add.w	r9, r0, r4
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4630      	mov	r0, r6
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fe98 	bl	8000a78 <__aeabi_dcmpeq>
 8005d48:	b108      	cbz	r0, 8005d4e <__cvt+0x7c>
 8005d4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d4e:	2230      	movs	r2, #48	@ 0x30
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	454b      	cmp	r3, r9
 8005d54:	d31e      	bcc.n	8005d94 <__cvt+0xc2>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d5a:	1b5b      	subs	r3, r3, r5
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	b004      	add	sp, #16
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d6a:	eb00 0904 	add.w	r9, r0, r4
 8005d6e:	d1e5      	bne.n	8005d3c <__cvt+0x6a>
 8005d70:	7803      	ldrb	r3, [r0, #0]
 8005d72:	2b30      	cmp	r3, #48	@ 0x30
 8005d74:	d10a      	bne.n	8005d8c <__cvt+0xba>
 8005d76:	2200      	movs	r2, #0
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 8005d82:	b918      	cbnz	r0, 8005d8c <__cvt+0xba>
 8005d84:	f1c4 0401 	rsb	r4, r4, #1
 8005d88:	f8ca 4000 	str.w	r4, [sl]
 8005d8c:	f8da 3000 	ldr.w	r3, [sl]
 8005d90:	4499      	add	r9, r3
 8005d92:	e7d3      	b.n	8005d3c <__cvt+0x6a>
 8005d94:	1c59      	adds	r1, r3, #1
 8005d96:	9103      	str	r1, [sp, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e7d9      	b.n	8005d50 <__cvt+0x7e>

08005d9c <__exponent>:
 8005d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	bfba      	itte	lt
 8005da2:	4249      	neglt	r1, r1
 8005da4:	232d      	movlt	r3, #45	@ 0x2d
 8005da6:	232b      	movge	r3, #43	@ 0x2b
 8005da8:	2909      	cmp	r1, #9
 8005daa:	7002      	strb	r2, [r0, #0]
 8005dac:	7043      	strb	r3, [r0, #1]
 8005dae:	dd29      	ble.n	8005e04 <__exponent+0x68>
 8005db0:	f10d 0307 	add.w	r3, sp, #7
 8005db4:	461d      	mov	r5, r3
 8005db6:	270a      	movs	r7, #10
 8005db8:	461a      	mov	r2, r3
 8005dba:	fbb1 f6f7 	udiv	r6, r1, r7
 8005dbe:	fb07 1416 	mls	r4, r7, r6, r1
 8005dc2:	3430      	adds	r4, #48	@ 0x30
 8005dc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dc8:	460c      	mov	r4, r1
 8005dca:	2c63      	cmp	r4, #99	@ 0x63
 8005dcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	dcf1      	bgt.n	8005db8 <__exponent+0x1c>
 8005dd4:	3130      	adds	r1, #48	@ 0x30
 8005dd6:	1e94      	subs	r4, r2, #2
 8005dd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ddc:	1c41      	adds	r1, r0, #1
 8005dde:	4623      	mov	r3, r4
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	d30a      	bcc.n	8005dfa <__exponent+0x5e>
 8005de4:	f10d 0309 	add.w	r3, sp, #9
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	42ac      	cmp	r4, r5
 8005dec:	bf88      	it	hi
 8005dee:	2300      	movhi	r3, #0
 8005df0:	3302      	adds	r3, #2
 8005df2:	4403      	add	r3, r0
 8005df4:	1a18      	subs	r0, r3, r0
 8005df6:	b003      	add	sp, #12
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005dfe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e02:	e7ed      	b.n	8005de0 <__exponent+0x44>
 8005e04:	2330      	movs	r3, #48	@ 0x30
 8005e06:	3130      	adds	r1, #48	@ 0x30
 8005e08:	7083      	strb	r3, [r0, #2]
 8005e0a:	70c1      	strb	r1, [r0, #3]
 8005e0c:	1d03      	adds	r3, r0, #4
 8005e0e:	e7f1      	b.n	8005df4 <__exponent+0x58>

08005e10 <_printf_float>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	b08d      	sub	sp, #52	@ 0x34
 8005e16:	460c      	mov	r4, r1
 8005e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	461f      	mov	r7, r3
 8005e20:	4605      	mov	r5, r0
 8005e22:	f000 feef 	bl	8006c04 <_localeconv_r>
 8005e26:	6803      	ldr	r3, [r0, #0]
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa f9f8 	bl	8000220 <strlen>
 8005e30:	2300      	movs	r3, #0
 8005e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e34:	f8d8 3000 	ldr.w	r3, [r8]
 8005e38:	9005      	str	r0, [sp, #20]
 8005e3a:	3307      	adds	r3, #7
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	f103 0208 	add.w	r2, r3, #8
 8005e44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e48:	f8d4 b000 	ldr.w	fp, [r4]
 8005e4c:	f8c8 2000 	str.w	r2, [r8]
 8005e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e66:	4b9c      	ldr	r3, [pc, #624]	@ (80060d8 <_printf_float+0x2c8>)
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	f7fa fe36 	bl	8000adc <__aeabi_dcmpun>
 8005e70:	bb70      	cbnz	r0, 8005ed0 <_printf_float+0xc0>
 8005e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e76:	4b98      	ldr	r3, [pc, #608]	@ (80060d8 <_printf_float+0x2c8>)
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	f7fa fe10 	bl	8000aa0 <__aeabi_dcmple>
 8005e80:	bb30      	cbnz	r0, 8005ed0 <_printf_float+0xc0>
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fdff 	bl	8000a8c <__aeabi_dcmplt>
 8005e8e:	b110      	cbz	r0, 8005e96 <_printf_float+0x86>
 8005e90:	232d      	movs	r3, #45	@ 0x2d
 8005e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e96:	4a91      	ldr	r2, [pc, #580]	@ (80060dc <_printf_float+0x2cc>)
 8005e98:	4b91      	ldr	r3, [pc, #580]	@ (80060e0 <_printf_float+0x2d0>)
 8005e9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e9e:	bf94      	ite	ls
 8005ea0:	4690      	movls	r8, r2
 8005ea2:	4698      	movhi	r8, r3
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f02b 0304 	bic.w	r3, fp, #4
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	f04f 0900 	mov.w	r9, #0
 8005eb2:	9700      	str	r7, [sp, #0]
 8005eb4:	4633      	mov	r3, r6
 8005eb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f9d2 	bl	8006264 <_printf_common>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f040 808d 	bne.w	8005fe0 <_printf_float+0x1d0>
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eca:	b00d      	add	sp, #52	@ 0x34
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fe00 	bl	8000adc <__aeabi_dcmpun>
 8005edc:	b140      	cbz	r0, 8005ef0 <_printf_float+0xe0>
 8005ede:	464b      	mov	r3, r9
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bfbc      	itt	lt
 8005ee4:	232d      	movlt	r3, #45	@ 0x2d
 8005ee6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005eea:	4a7e      	ldr	r2, [pc, #504]	@ (80060e4 <_printf_float+0x2d4>)
 8005eec:	4b7e      	ldr	r3, [pc, #504]	@ (80060e8 <_printf_float+0x2d8>)
 8005eee:	e7d4      	b.n	8005e9a <_printf_float+0x8a>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ef6:	9206      	str	r2, [sp, #24]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	d13b      	bne.n	8005f74 <_printf_float+0x164>
 8005efc:	2306      	movs	r3, #6
 8005efe:	6063      	str	r3, [r4, #4]
 8005f00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f04:	2300      	movs	r3, #0
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f10:	ab09      	add	r3, sp, #36	@ 0x24
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	ec49 8b10 	vmov	d0, r8, r9
 8005f1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f7ff fed7 	bl	8005cd2 <__cvt>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f28:	2b47      	cmp	r3, #71	@ 0x47
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	d129      	bne.n	8005f82 <_printf_float+0x172>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x128>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd41      	ble.n	8005fbc <_printf_float+0x1ac>
 8005f38:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f40:	3901      	subs	r1, #1
 8005f42:	4652      	mov	r2, sl
 8005f44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f48:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f4a:	f7ff ff27 	bl	8005d9c <__exponent>
 8005f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f50:	1813      	adds	r3, r2, r0
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	4681      	mov	r9, r0
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	dc02      	bgt.n	8005f60 <_printf_float+0x150>
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	07d2      	lsls	r2, r2, #31
 8005f5e:	d501      	bpl.n	8005f64 <_printf_float+0x154>
 8005f60:	3301      	adds	r3, #1
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0a2      	beq.n	8005eb2 <_printf_float+0xa2>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f72:	e79e      	b.n	8005eb2 <_printf_float+0xa2>
 8005f74:	9a06      	ldr	r2, [sp, #24]
 8005f76:	2a47      	cmp	r2, #71	@ 0x47
 8005f78:	d1c2      	bne.n	8005f00 <_printf_float+0xf0>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1c0      	bne.n	8005f00 <_printf_float+0xf0>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7bd      	b.n	8005efe <_printf_float+0xee>
 8005f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f86:	d9db      	bls.n	8005f40 <_printf_float+0x130>
 8005f88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f8c:	d118      	bne.n	8005fc0 <_printf_float+0x1b0>
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	dd0b      	ble.n	8005fac <_printf_float+0x19c>
 8005f94:	6121      	str	r1, [r4, #16]
 8005f96:	b913      	cbnz	r3, 8005f9e <_printf_float+0x18e>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d0      	lsls	r0, r2, #31
 8005f9c:	d502      	bpl.n	8005fa4 <_printf_float+0x194>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	440b      	add	r3, r1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fa6:	f04f 0900 	mov.w	r9, #0
 8005faa:	e7db      	b.n	8005f64 <_printf_float+0x154>
 8005fac:	b913      	cbnz	r3, 8005fb4 <_printf_float+0x1a4>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	07d2      	lsls	r2, r2, #31
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_float+0x1a8>
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x192>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f2      	b.n	8005fa2 <_printf_float+0x192>
 8005fbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	db05      	blt.n	8005fd2 <_printf_float+0x1c2>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	6121      	str	r1, [r4, #16]
 8005fca:	07d8      	lsls	r0, r3, #31
 8005fcc:	d5ea      	bpl.n	8005fa4 <_printf_float+0x194>
 8005fce:	1c4b      	adds	r3, r1, #1
 8005fd0:	e7e7      	b.n	8005fa2 <_printf_float+0x192>
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	bfd4      	ite	le
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	2201      	movgt	r2, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	e7e0      	b.n	8005fa2 <_printf_float+0x192>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	055a      	lsls	r2, r3, #21
 8005fe4:	d407      	bmi.n	8005ff6 <_printf_float+0x1e6>
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	4642      	mov	r2, r8
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d12b      	bne.n	800604c <_printf_float+0x23c>
 8005ff4:	e767      	b.n	8005ec6 <_printf_float+0xb6>
 8005ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ffa:	f240 80dd 	bls.w	80061b8 <_printf_float+0x3a8>
 8005ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f7fa fd37 	bl	8000a78 <__aeabi_dcmpeq>
 800600a:	2800      	cmp	r0, #0
 800600c:	d033      	beq.n	8006076 <_printf_float+0x266>
 800600e:	4a37      	ldr	r2, [pc, #220]	@ (80060ec <_printf_float+0x2dc>)
 8006010:	2301      	movs	r3, #1
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f af54 	beq.w	8005ec6 <_printf_float+0xb6>
 800601e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006022:	4543      	cmp	r3, r8
 8006024:	db02      	blt.n	800602c <_printf_float+0x21c>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	07d8      	lsls	r0, r3, #31
 800602a:	d50f      	bpl.n	800604c <_printf_float+0x23c>
 800602c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af45 	beq.w	8005ec6 <_printf_float+0xb6>
 800603c:	f04f 0900 	mov.w	r9, #0
 8006040:	f108 38ff 	add.w	r8, r8, #4294967295
 8006044:	f104 0a1a 	add.w	sl, r4, #26
 8006048:	45c8      	cmp	r8, r9
 800604a:	dc09      	bgt.n	8006060 <_printf_float+0x250>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	f100 8103 	bmi.w	800625a <_printf_float+0x44a>
 8006054:	68e0      	ldr	r0, [r4, #12]
 8006056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006058:	4298      	cmp	r0, r3
 800605a:	bfb8      	it	lt
 800605c:	4618      	movlt	r0, r3
 800605e:	e734      	b.n	8005eca <_printf_float+0xba>
 8006060:	2301      	movs	r3, #1
 8006062:	4652      	mov	r2, sl
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f af2b 	beq.w	8005ec6 <_printf_float+0xb6>
 8006070:	f109 0901 	add.w	r9, r9, #1
 8006074:	e7e8      	b.n	8006048 <_printf_float+0x238>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc39      	bgt.n	80060f0 <_printf_float+0x2e0>
 800607c:	4a1b      	ldr	r2, [pc, #108]	@ (80060ec <_printf_float+0x2dc>)
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af1d 	beq.w	8005ec6 <_printf_float+0xb6>
 800608c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006090:	ea59 0303 	orrs.w	r3, r9, r3
 8006094:	d102      	bne.n	800609c <_printf_float+0x28c>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	07d9      	lsls	r1, r3, #31
 800609a:	d5d7      	bpl.n	800604c <_printf_float+0x23c>
 800609c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af0d 	beq.w	8005ec6 <_printf_float+0xb6>
 80060ac:	f04f 0a00 	mov.w	sl, #0
 80060b0:	f104 0b1a 	add.w	fp, r4, #26
 80060b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b6:	425b      	negs	r3, r3
 80060b8:	4553      	cmp	r3, sl
 80060ba:	dc01      	bgt.n	80060c0 <_printf_float+0x2b0>
 80060bc:	464b      	mov	r3, r9
 80060be:	e793      	b.n	8005fe8 <_printf_float+0x1d8>
 80060c0:	2301      	movs	r3, #1
 80060c2:	465a      	mov	r2, fp
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f aefb 	beq.w	8005ec6 <_printf_float+0xb6>
 80060d0:	f10a 0a01 	add.w	sl, sl, #1
 80060d4:	e7ee      	b.n	80060b4 <_printf_float+0x2a4>
 80060d6:	bf00      	nop
 80060d8:	7fefffff 	.word	0x7fefffff
 80060dc:	0800a4f0 	.word	0x0800a4f0
 80060e0:	0800a4f4 	.word	0x0800a4f4
 80060e4:	0800a4f8 	.word	0x0800a4f8
 80060e8:	0800a4fc 	.word	0x0800a4fc
 80060ec:	0800a500 	.word	0x0800a500
 80060f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060f6:	4553      	cmp	r3, sl
 80060f8:	bfa8      	it	ge
 80060fa:	4653      	movge	r3, sl
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	4699      	mov	r9, r3
 8006100:	dc36      	bgt.n	8006170 <_printf_float+0x360>
 8006102:	f04f 0b00 	mov.w	fp, #0
 8006106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800610a:	f104 021a 	add.w	r2, r4, #26
 800610e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006110:	9306      	str	r3, [sp, #24]
 8006112:	eba3 0309 	sub.w	r3, r3, r9
 8006116:	455b      	cmp	r3, fp
 8006118:	dc31      	bgt.n	800617e <_printf_float+0x36e>
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	459a      	cmp	sl, r3
 800611e:	dc3a      	bgt.n	8006196 <_printf_float+0x386>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	07da      	lsls	r2, r3, #31
 8006124:	d437      	bmi.n	8006196 <_printf_float+0x386>
 8006126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006128:	ebaa 0903 	sub.w	r9, sl, r3
 800612c:	9b06      	ldr	r3, [sp, #24]
 800612e:	ebaa 0303 	sub.w	r3, sl, r3
 8006132:	4599      	cmp	r9, r3
 8006134:	bfa8      	it	ge
 8006136:	4699      	movge	r9, r3
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	dc33      	bgt.n	80061a6 <_printf_float+0x396>
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006146:	f104 0b1a 	add.w	fp, r4, #26
 800614a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614c:	ebaa 0303 	sub.w	r3, sl, r3
 8006150:	eba3 0309 	sub.w	r3, r3, r9
 8006154:	4543      	cmp	r3, r8
 8006156:	f77f af79 	ble.w	800604c <_printf_float+0x23c>
 800615a:	2301      	movs	r3, #1
 800615c:	465a      	mov	r2, fp
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	f43f aeae 	beq.w	8005ec6 <_printf_float+0xb6>
 800616a:	f108 0801 	add.w	r8, r8, #1
 800616e:	e7ec      	b.n	800614a <_printf_float+0x33a>
 8006170:	4642      	mov	r2, r8
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	d1c2      	bne.n	8006102 <_printf_float+0x2f2>
 800617c:	e6a3      	b.n	8005ec6 <_printf_float+0xb6>
 800617e:	2301      	movs	r3, #1
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	9206      	str	r2, [sp, #24]
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae9c 	beq.w	8005ec6 <_printf_float+0xb6>
 800618e:	9a06      	ldr	r2, [sp, #24]
 8006190:	f10b 0b01 	add.w	fp, fp, #1
 8006194:	e7bb      	b.n	800610e <_printf_float+0x2fe>
 8006196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1c0      	bne.n	8006126 <_printf_float+0x316>
 80061a4:	e68f      	b.n	8005ec6 <_printf_float+0xb6>
 80061a6:	9a06      	ldr	r2, [sp, #24]
 80061a8:	464b      	mov	r3, r9
 80061aa:	4442      	add	r2, r8
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	d1c3      	bne.n	800613e <_printf_float+0x32e>
 80061b6:	e686      	b.n	8005ec6 <_printf_float+0xb6>
 80061b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061bc:	f1ba 0f01 	cmp.w	sl, #1
 80061c0:	dc01      	bgt.n	80061c6 <_printf_float+0x3b6>
 80061c2:	07db      	lsls	r3, r3, #31
 80061c4:	d536      	bpl.n	8006234 <_printf_float+0x424>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4642      	mov	r2, r8
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae78 	beq.w	8005ec6 <_printf_float+0xb6>
 80061d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f ae70 	beq.w	8005ec6 <_printf_float+0xb6>
 80061e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061ea:	2200      	movs	r2, #0
 80061ec:	2300      	movs	r3, #0
 80061ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061f2:	f7fa fc41 	bl	8000a78 <__aeabi_dcmpeq>
 80061f6:	b9c0      	cbnz	r0, 800622a <_printf_float+0x41a>
 80061f8:	4653      	mov	r3, sl
 80061fa:	f108 0201 	add.w	r2, r8, #1
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d10c      	bne.n	8006222 <_printf_float+0x412>
 8006208:	e65d      	b.n	8005ec6 <_printf_float+0xb6>
 800620a:	2301      	movs	r3, #1
 800620c:	465a      	mov	r2, fp
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae56 	beq.w	8005ec6 <_printf_float+0xb6>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	45d0      	cmp	r8, sl
 8006220:	dbf3      	blt.n	800620a <_printf_float+0x3fa>
 8006222:	464b      	mov	r3, r9
 8006224:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006228:	e6df      	b.n	8005fea <_printf_float+0x1da>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	f104 0b1a 	add.w	fp, r4, #26
 8006232:	e7f4      	b.n	800621e <_printf_float+0x40e>
 8006234:	2301      	movs	r3, #1
 8006236:	4642      	mov	r2, r8
 8006238:	e7e1      	b.n	80061fe <_printf_float+0x3ee>
 800623a:	2301      	movs	r3, #1
 800623c:	464a      	mov	r2, r9
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f ae3e 	beq.w	8005ec6 <_printf_float+0xb6>
 800624a:	f108 0801 	add.w	r8, r8, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	4543      	cmp	r3, r8
 8006256:	dcf0      	bgt.n	800623a <_printf_float+0x42a>
 8006258:	e6fc      	b.n	8006054 <_printf_float+0x244>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	f104 0919 	add.w	r9, r4, #25
 8006262:	e7f4      	b.n	800624e <_printf_float+0x43e>

08006264 <_printf_common>:
 8006264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006268:	4616      	mov	r6, r2
 800626a:	4698      	mov	r8, r3
 800626c:	688a      	ldr	r2, [r1, #8]
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006274:	4293      	cmp	r3, r2
 8006276:	bfb8      	it	lt
 8006278:	4613      	movlt	r3, r2
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006280:	4607      	mov	r7, r0
 8006282:	460c      	mov	r4, r1
 8006284:	b10a      	cbz	r2, 800628a <_printf_common+0x26>
 8006286:	3301      	adds	r3, #1
 8006288:	6033      	str	r3, [r6, #0]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	0699      	lsls	r1, r3, #26
 800628e:	bf42      	ittt	mi
 8006290:	6833      	ldrmi	r3, [r6, #0]
 8006292:	3302      	addmi	r3, #2
 8006294:	6033      	strmi	r3, [r6, #0]
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	f015 0506 	ands.w	r5, r5, #6
 800629c:	d106      	bne.n	80062ac <_printf_common+0x48>
 800629e:	f104 0a19 	add.w	sl, r4, #25
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	6832      	ldr	r2, [r6, #0]
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	dc26      	bgt.n	80062fa <_printf_common+0x96>
 80062ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	3b00      	subs	r3, #0
 80062b4:	bf18      	it	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	0692      	lsls	r2, r2, #26
 80062ba:	d42b      	bmi.n	8006314 <_printf_common+0xb0>
 80062bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062c0:	4641      	mov	r1, r8
 80062c2:	4638      	mov	r0, r7
 80062c4:	47c8      	blx	r9
 80062c6:	3001      	adds	r0, #1
 80062c8:	d01e      	beq.n	8006308 <_printf_common+0xa4>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	f003 0306 	and.w	r3, r3, #6
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	bf02      	ittt	eq
 80062d6:	68e5      	ldreq	r5, [r4, #12]
 80062d8:	6833      	ldreq	r3, [r6, #0]
 80062da:	1aed      	subeq	r5, r5, r3
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	bf0c      	ite	eq
 80062e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e4:	2500      	movne	r5, #0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	bfc4      	itt	gt
 80062ea:	1a9b      	subgt	r3, r3, r2
 80062ec:	18ed      	addgt	r5, r5, r3
 80062ee:	2600      	movs	r6, #0
 80062f0:	341a      	adds	r4, #26
 80062f2:	42b5      	cmp	r5, r6
 80062f4:	d11a      	bne.n	800632c <_printf_common+0xc8>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e008      	b.n	800630c <_printf_common+0xa8>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4652      	mov	r2, sl
 80062fe:	4641      	mov	r1, r8
 8006300:	4638      	mov	r0, r7
 8006302:	47c8      	blx	r9
 8006304:	3001      	adds	r0, #1
 8006306:	d103      	bne.n	8006310 <_printf_common+0xac>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	3501      	adds	r5, #1
 8006312:	e7c6      	b.n	80062a2 <_printf_common+0x3e>
 8006314:	18e1      	adds	r1, r4, r3
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	2030      	movs	r0, #48	@ 0x30
 800631a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800631e:	4422      	add	r2, r4
 8006320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006328:	3302      	adds	r3, #2
 800632a:	e7c7      	b.n	80062bc <_printf_common+0x58>
 800632c:	2301      	movs	r3, #1
 800632e:	4622      	mov	r2, r4
 8006330:	4641      	mov	r1, r8
 8006332:	4638      	mov	r0, r7
 8006334:	47c8      	blx	r9
 8006336:	3001      	adds	r0, #1
 8006338:	d0e6      	beq.n	8006308 <_printf_common+0xa4>
 800633a:	3601      	adds	r6, #1
 800633c:	e7d9      	b.n	80062f2 <_printf_common+0x8e>
	...

08006340 <_printf_i>:
 8006340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	7e0f      	ldrb	r7, [r1, #24]
 8006346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006348:	2f78      	cmp	r7, #120	@ 0x78
 800634a:	4691      	mov	r9, r2
 800634c:	4680      	mov	r8, r0
 800634e:	460c      	mov	r4, r1
 8006350:	469a      	mov	sl, r3
 8006352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006356:	d807      	bhi.n	8006368 <_printf_i+0x28>
 8006358:	2f62      	cmp	r7, #98	@ 0x62
 800635a:	d80a      	bhi.n	8006372 <_printf_i+0x32>
 800635c:	2f00      	cmp	r7, #0
 800635e:	f000 80d2 	beq.w	8006506 <_printf_i+0x1c6>
 8006362:	2f58      	cmp	r7, #88	@ 0x58
 8006364:	f000 80b9 	beq.w	80064da <_printf_i+0x19a>
 8006368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800636c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006370:	e03a      	b.n	80063e8 <_printf_i+0xa8>
 8006372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006376:	2b15      	cmp	r3, #21
 8006378:	d8f6      	bhi.n	8006368 <_printf_i+0x28>
 800637a:	a101      	add	r1, pc, #4	@ (adr r1, 8006380 <_printf_i+0x40>)
 800637c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063ed 	.word	0x080063ed
 8006388:	08006369 	.word	0x08006369
 800638c:	08006369 	.word	0x08006369
 8006390:	08006369 	.word	0x08006369
 8006394:	08006369 	.word	0x08006369
 8006398:	080063ed 	.word	0x080063ed
 800639c:	08006369 	.word	0x08006369
 80063a0:	08006369 	.word	0x08006369
 80063a4:	08006369 	.word	0x08006369
 80063a8:	08006369 	.word	0x08006369
 80063ac:	080064ed 	.word	0x080064ed
 80063b0:	08006417 	.word	0x08006417
 80063b4:	080064a7 	.word	0x080064a7
 80063b8:	08006369 	.word	0x08006369
 80063bc:	08006369 	.word	0x08006369
 80063c0:	0800650f 	.word	0x0800650f
 80063c4:	08006369 	.word	0x08006369
 80063c8:	08006417 	.word	0x08006417
 80063cc:	08006369 	.word	0x08006369
 80063d0:	08006369 	.word	0x08006369
 80063d4:	080064af 	.word	0x080064af
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6032      	str	r2, [r6, #0]
 80063e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063e8:	2301      	movs	r3, #1
 80063ea:	e09d      	b.n	8006528 <_printf_i+0x1e8>
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	1d19      	adds	r1, r3, #4
 80063f2:	6031      	str	r1, [r6, #0]
 80063f4:	0606      	lsls	r6, r0, #24
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0xbc>
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	e003      	b.n	8006404 <_printf_i+0xc4>
 80063fc:	0645      	lsls	r5, r0, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0xb8>
 8006400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006404:	2d00      	cmp	r5, #0
 8006406:	da03      	bge.n	8006410 <_printf_i+0xd0>
 8006408:	232d      	movs	r3, #45	@ 0x2d
 800640a:	426d      	negs	r5, r5
 800640c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006410:	4859      	ldr	r0, [pc, #356]	@ (8006578 <_printf_i+0x238>)
 8006412:	230a      	movs	r3, #10
 8006414:	e011      	b.n	800643a <_printf_i+0xfa>
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	0608      	lsls	r0, r1, #24
 800641c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0xe8>
 8006422:	0649      	lsls	r1, r1, #25
 8006424:	bf48      	it	mi
 8006426:	b2ad      	uxthmi	r5, r5
 8006428:	2f6f      	cmp	r7, #111	@ 0x6f
 800642a:	4853      	ldr	r0, [pc, #332]	@ (8006578 <_printf_i+0x238>)
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	bf14      	ite	ne
 8006430:	230a      	movne	r3, #10
 8006432:	2308      	moveq	r3, #8
 8006434:	2100      	movs	r1, #0
 8006436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800643a:	6866      	ldr	r6, [r4, #4]
 800643c:	60a6      	str	r6, [r4, #8]
 800643e:	2e00      	cmp	r6, #0
 8006440:	bfa2      	ittt	ge
 8006442:	6821      	ldrge	r1, [r4, #0]
 8006444:	f021 0104 	bicge.w	r1, r1, #4
 8006448:	6021      	strge	r1, [r4, #0]
 800644a:	b90d      	cbnz	r5, 8006450 <_printf_i+0x110>
 800644c:	2e00      	cmp	r6, #0
 800644e:	d04b      	beq.n	80064e8 <_printf_i+0x1a8>
 8006450:	4616      	mov	r6, r2
 8006452:	fbb5 f1f3 	udiv	r1, r5, r3
 8006456:	fb03 5711 	mls	r7, r3, r1, r5
 800645a:	5dc7      	ldrb	r7, [r0, r7]
 800645c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006460:	462f      	mov	r7, r5
 8006462:	42bb      	cmp	r3, r7
 8006464:	460d      	mov	r5, r1
 8006466:	d9f4      	bls.n	8006452 <_printf_i+0x112>
 8006468:	2b08      	cmp	r3, #8
 800646a:	d10b      	bne.n	8006484 <_printf_i+0x144>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07df      	lsls	r7, r3, #31
 8006470:	d508      	bpl.n	8006484 <_printf_i+0x144>
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	6861      	ldr	r1, [r4, #4]
 8006476:	4299      	cmp	r1, r3
 8006478:	bfde      	ittt	le
 800647a:	2330      	movle	r3, #48	@ 0x30
 800647c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006480:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006484:	1b92      	subs	r2, r2, r6
 8006486:	6122      	str	r2, [r4, #16]
 8006488:	f8cd a000 	str.w	sl, [sp]
 800648c:	464b      	mov	r3, r9
 800648e:	aa03      	add	r2, sp, #12
 8006490:	4621      	mov	r1, r4
 8006492:	4640      	mov	r0, r8
 8006494:	f7ff fee6 	bl	8006264 <_printf_common>
 8006498:	3001      	adds	r0, #1
 800649a:	d14a      	bne.n	8006532 <_printf_i+0x1f2>
 800649c:	f04f 30ff 	mov.w	r0, #4294967295
 80064a0:	b004      	add	sp, #16
 80064a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	f043 0320 	orr.w	r3, r3, #32
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	4833      	ldr	r0, [pc, #204]	@ (800657c <_printf_i+0x23c>)
 80064b0:	2778      	movs	r7, #120	@ 0x78
 80064b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064b6:	6823      	ldr	r3, [r4, #0]
 80064b8:	6831      	ldr	r1, [r6, #0]
 80064ba:	061f      	lsls	r7, r3, #24
 80064bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80064c0:	d402      	bmi.n	80064c8 <_printf_i+0x188>
 80064c2:	065f      	lsls	r7, r3, #25
 80064c4:	bf48      	it	mi
 80064c6:	b2ad      	uxthmi	r5, r5
 80064c8:	6031      	str	r1, [r6, #0]
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	bf44      	itt	mi
 80064ce:	f043 0320 	orrmi.w	r3, r3, #32
 80064d2:	6023      	strmi	r3, [r4, #0]
 80064d4:	b11d      	cbz	r5, 80064de <_printf_i+0x19e>
 80064d6:	2310      	movs	r3, #16
 80064d8:	e7ac      	b.n	8006434 <_printf_i+0xf4>
 80064da:	4827      	ldr	r0, [pc, #156]	@ (8006578 <_printf_i+0x238>)
 80064dc:	e7e9      	b.n	80064b2 <_printf_i+0x172>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f023 0320 	bic.w	r3, r3, #32
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	e7f6      	b.n	80064d6 <_printf_i+0x196>
 80064e8:	4616      	mov	r6, r2
 80064ea:	e7bd      	b.n	8006468 <_printf_i+0x128>
 80064ec:	6833      	ldr	r3, [r6, #0]
 80064ee:	6825      	ldr	r5, [r4, #0]
 80064f0:	6961      	ldr	r1, [r4, #20]
 80064f2:	1d18      	adds	r0, r3, #4
 80064f4:	6030      	str	r0, [r6, #0]
 80064f6:	062e      	lsls	r6, r5, #24
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	d501      	bpl.n	8006500 <_printf_i+0x1c0>
 80064fc:	6019      	str	r1, [r3, #0]
 80064fe:	e002      	b.n	8006506 <_printf_i+0x1c6>
 8006500:	0668      	lsls	r0, r5, #25
 8006502:	d5fb      	bpl.n	80064fc <_printf_i+0x1bc>
 8006504:	8019      	strh	r1, [r3, #0]
 8006506:	2300      	movs	r3, #0
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	4616      	mov	r6, r2
 800650c:	e7bc      	b.n	8006488 <_printf_i+0x148>
 800650e:	6833      	ldr	r3, [r6, #0]
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	6032      	str	r2, [r6, #0]
 8006514:	681e      	ldr	r6, [r3, #0]
 8006516:	6862      	ldr	r2, [r4, #4]
 8006518:	2100      	movs	r1, #0
 800651a:	4630      	mov	r0, r6
 800651c:	f7f9 fe30 	bl	8000180 <memchr>
 8006520:	b108      	cbz	r0, 8006526 <_printf_i+0x1e6>
 8006522:	1b80      	subs	r0, r0, r6
 8006524:	6060      	str	r0, [r4, #4]
 8006526:	6863      	ldr	r3, [r4, #4]
 8006528:	6123      	str	r3, [r4, #16]
 800652a:	2300      	movs	r3, #0
 800652c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006530:	e7aa      	b.n	8006488 <_printf_i+0x148>
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	4632      	mov	r2, r6
 8006536:	4649      	mov	r1, r9
 8006538:	4640      	mov	r0, r8
 800653a:	47d0      	blx	sl
 800653c:	3001      	adds	r0, #1
 800653e:	d0ad      	beq.n	800649c <_printf_i+0x15c>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	079b      	lsls	r3, r3, #30
 8006544:	d413      	bmi.n	800656e <_printf_i+0x22e>
 8006546:	68e0      	ldr	r0, [r4, #12]
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	4298      	cmp	r0, r3
 800654c:	bfb8      	it	lt
 800654e:	4618      	movlt	r0, r3
 8006550:	e7a6      	b.n	80064a0 <_printf_i+0x160>
 8006552:	2301      	movs	r3, #1
 8006554:	4632      	mov	r2, r6
 8006556:	4649      	mov	r1, r9
 8006558:	4640      	mov	r0, r8
 800655a:	47d0      	blx	sl
 800655c:	3001      	adds	r0, #1
 800655e:	d09d      	beq.n	800649c <_printf_i+0x15c>
 8006560:	3501      	adds	r5, #1
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	9903      	ldr	r1, [sp, #12]
 8006566:	1a5b      	subs	r3, r3, r1
 8006568:	42ab      	cmp	r3, r5
 800656a:	dcf2      	bgt.n	8006552 <_printf_i+0x212>
 800656c:	e7eb      	b.n	8006546 <_printf_i+0x206>
 800656e:	2500      	movs	r5, #0
 8006570:	f104 0619 	add.w	r6, r4, #25
 8006574:	e7f5      	b.n	8006562 <_printf_i+0x222>
 8006576:	bf00      	nop
 8006578:	0800a502 	.word	0x0800a502
 800657c:	0800a513 	.word	0x0800a513

08006580 <_scanf_float>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	b087      	sub	sp, #28
 8006586:	4617      	mov	r7, r2
 8006588:	9303      	str	r3, [sp, #12]
 800658a:	688b      	ldr	r3, [r1, #8]
 800658c:	1e5a      	subs	r2, r3, #1
 800658e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006592:	bf81      	itttt	hi
 8006594:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006598:	eb03 0b05 	addhi.w	fp, r3, r5
 800659c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80065a0:	608b      	strhi	r3, [r1, #8]
 80065a2:	680b      	ldr	r3, [r1, #0]
 80065a4:	460a      	mov	r2, r1
 80065a6:	f04f 0500 	mov.w	r5, #0
 80065aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80065ae:	f842 3b1c 	str.w	r3, [r2], #28
 80065b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065b6:	4680      	mov	r8, r0
 80065b8:	460c      	mov	r4, r1
 80065ba:	bf98      	it	ls
 80065bc:	f04f 0b00 	movls.w	fp, #0
 80065c0:	9201      	str	r2, [sp, #4]
 80065c2:	4616      	mov	r6, r2
 80065c4:	46aa      	mov	sl, r5
 80065c6:	46a9      	mov	r9, r5
 80065c8:	9502      	str	r5, [sp, #8]
 80065ca:	68a2      	ldr	r2, [r4, #8]
 80065cc:	b152      	cbz	r2, 80065e4 <_scanf_float+0x64>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80065d4:	d864      	bhi.n	80066a0 <_scanf_float+0x120>
 80065d6:	2b40      	cmp	r3, #64	@ 0x40
 80065d8:	d83c      	bhi.n	8006654 <_scanf_float+0xd4>
 80065da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80065de:	b2c8      	uxtb	r0, r1
 80065e0:	280e      	cmp	r0, #14
 80065e2:	d93a      	bls.n	800665a <_scanf_float+0xda>
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	d003      	beq.n	80065f2 <_scanf_float+0x72>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065f6:	f1ba 0f01 	cmp.w	sl, #1
 80065fa:	f200 8117 	bhi.w	800682c <_scanf_float+0x2ac>
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	429e      	cmp	r6, r3
 8006602:	f200 8108 	bhi.w	8006816 <_scanf_float+0x296>
 8006606:	2001      	movs	r0, #1
 8006608:	b007      	add	sp, #28
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006612:	2a0d      	cmp	r2, #13
 8006614:	d8e6      	bhi.n	80065e4 <_scanf_float+0x64>
 8006616:	a101      	add	r1, pc, #4	@ (adr r1, 800661c <_scanf_float+0x9c>)
 8006618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800661c:	08006763 	.word	0x08006763
 8006620:	080065e5 	.word	0x080065e5
 8006624:	080065e5 	.word	0x080065e5
 8006628:	080065e5 	.word	0x080065e5
 800662c:	080067c3 	.word	0x080067c3
 8006630:	0800679b 	.word	0x0800679b
 8006634:	080065e5 	.word	0x080065e5
 8006638:	080065e5 	.word	0x080065e5
 800663c:	08006771 	.word	0x08006771
 8006640:	080065e5 	.word	0x080065e5
 8006644:	080065e5 	.word	0x080065e5
 8006648:	080065e5 	.word	0x080065e5
 800664c:	080065e5 	.word	0x080065e5
 8006650:	08006729 	.word	0x08006729
 8006654:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006658:	e7db      	b.n	8006612 <_scanf_float+0x92>
 800665a:	290e      	cmp	r1, #14
 800665c:	d8c2      	bhi.n	80065e4 <_scanf_float+0x64>
 800665e:	a001      	add	r0, pc, #4	@ (adr r0, 8006664 <_scanf_float+0xe4>)
 8006660:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006664:	08006719 	.word	0x08006719
 8006668:	080065e5 	.word	0x080065e5
 800666c:	08006719 	.word	0x08006719
 8006670:	080067af 	.word	0x080067af
 8006674:	080065e5 	.word	0x080065e5
 8006678:	080066c1 	.word	0x080066c1
 800667c:	080066ff 	.word	0x080066ff
 8006680:	080066ff 	.word	0x080066ff
 8006684:	080066ff 	.word	0x080066ff
 8006688:	080066ff 	.word	0x080066ff
 800668c:	080066ff 	.word	0x080066ff
 8006690:	080066ff 	.word	0x080066ff
 8006694:	080066ff 	.word	0x080066ff
 8006698:	080066ff 	.word	0x080066ff
 800669c:	080066ff 	.word	0x080066ff
 80066a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80066a2:	d809      	bhi.n	80066b8 <_scanf_float+0x138>
 80066a4:	2b60      	cmp	r3, #96	@ 0x60
 80066a6:	d8b2      	bhi.n	800660e <_scanf_float+0x8e>
 80066a8:	2b54      	cmp	r3, #84	@ 0x54
 80066aa:	d07b      	beq.n	80067a4 <_scanf_float+0x224>
 80066ac:	2b59      	cmp	r3, #89	@ 0x59
 80066ae:	d199      	bne.n	80065e4 <_scanf_float+0x64>
 80066b0:	2d07      	cmp	r5, #7
 80066b2:	d197      	bne.n	80065e4 <_scanf_float+0x64>
 80066b4:	2508      	movs	r5, #8
 80066b6:	e02c      	b.n	8006712 <_scanf_float+0x192>
 80066b8:	2b74      	cmp	r3, #116	@ 0x74
 80066ba:	d073      	beq.n	80067a4 <_scanf_float+0x224>
 80066bc:	2b79      	cmp	r3, #121	@ 0x79
 80066be:	e7f6      	b.n	80066ae <_scanf_float+0x12e>
 80066c0:	6821      	ldr	r1, [r4, #0]
 80066c2:	05c8      	lsls	r0, r1, #23
 80066c4:	d51b      	bpl.n	80066fe <_scanf_float+0x17e>
 80066c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80066ca:	6021      	str	r1, [r4, #0]
 80066cc:	f109 0901 	add.w	r9, r9, #1
 80066d0:	f1bb 0f00 	cmp.w	fp, #0
 80066d4:	d003      	beq.n	80066de <_scanf_float+0x15e>
 80066d6:	3201      	adds	r2, #1
 80066d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066dc:	60a2      	str	r2, [r4, #8]
 80066de:	68a3      	ldr	r3, [r4, #8]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	60a3      	str	r3, [r4, #8]
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	3301      	adds	r3, #1
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	f340 8087 	ble.w	8006804 <_scanf_float+0x284>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	e765      	b.n	80065ca <_scanf_float+0x4a>
 80066fe:	eb1a 0105 	adds.w	r1, sl, r5
 8006702:	f47f af6f 	bne.w	80065e4 <_scanf_float+0x64>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	460d      	mov	r5, r1
 8006710:	468a      	mov	sl, r1
 8006712:	f806 3b01 	strb.w	r3, [r6], #1
 8006716:	e7e2      	b.n	80066de <_scanf_float+0x15e>
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	0610      	lsls	r0, r2, #24
 800671c:	f57f af62 	bpl.w	80065e4 <_scanf_float+0x64>
 8006720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006724:	6022      	str	r2, [r4, #0]
 8006726:	e7f4      	b.n	8006712 <_scanf_float+0x192>
 8006728:	f1ba 0f00 	cmp.w	sl, #0
 800672c:	d10e      	bne.n	800674c <_scanf_float+0x1cc>
 800672e:	f1b9 0f00 	cmp.w	r9, #0
 8006732:	d10e      	bne.n	8006752 <_scanf_float+0x1d2>
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800673a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800673e:	d108      	bne.n	8006752 <_scanf_float+0x1d2>
 8006740:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006744:	6022      	str	r2, [r4, #0]
 8006746:	f04f 0a01 	mov.w	sl, #1
 800674a:	e7e2      	b.n	8006712 <_scanf_float+0x192>
 800674c:	f1ba 0f02 	cmp.w	sl, #2
 8006750:	d055      	beq.n	80067fe <_scanf_float+0x27e>
 8006752:	2d01      	cmp	r5, #1
 8006754:	d002      	beq.n	800675c <_scanf_float+0x1dc>
 8006756:	2d04      	cmp	r5, #4
 8006758:	f47f af44 	bne.w	80065e4 <_scanf_float+0x64>
 800675c:	3501      	adds	r5, #1
 800675e:	b2ed      	uxtb	r5, r5
 8006760:	e7d7      	b.n	8006712 <_scanf_float+0x192>
 8006762:	f1ba 0f01 	cmp.w	sl, #1
 8006766:	f47f af3d 	bne.w	80065e4 <_scanf_float+0x64>
 800676a:	f04f 0a02 	mov.w	sl, #2
 800676e:	e7d0      	b.n	8006712 <_scanf_float+0x192>
 8006770:	b97d      	cbnz	r5, 8006792 <_scanf_float+0x212>
 8006772:	f1b9 0f00 	cmp.w	r9, #0
 8006776:	f47f af38 	bne.w	80065ea <_scanf_float+0x6a>
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006780:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006784:	f040 8108 	bne.w	8006998 <_scanf_float+0x418>
 8006788:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	2501      	movs	r5, #1
 8006790:	e7bf      	b.n	8006712 <_scanf_float+0x192>
 8006792:	2d03      	cmp	r5, #3
 8006794:	d0e2      	beq.n	800675c <_scanf_float+0x1dc>
 8006796:	2d05      	cmp	r5, #5
 8006798:	e7de      	b.n	8006758 <_scanf_float+0x1d8>
 800679a:	2d02      	cmp	r5, #2
 800679c:	f47f af22 	bne.w	80065e4 <_scanf_float+0x64>
 80067a0:	2503      	movs	r5, #3
 80067a2:	e7b6      	b.n	8006712 <_scanf_float+0x192>
 80067a4:	2d06      	cmp	r5, #6
 80067a6:	f47f af1d 	bne.w	80065e4 <_scanf_float+0x64>
 80067aa:	2507      	movs	r5, #7
 80067ac:	e7b1      	b.n	8006712 <_scanf_float+0x192>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	0591      	lsls	r1, r2, #22
 80067b2:	f57f af17 	bpl.w	80065e4 <_scanf_float+0x64>
 80067b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80067c0:	e7a7      	b.n	8006712 <_scanf_float+0x192>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80067c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80067cc:	d006      	beq.n	80067dc <_scanf_float+0x25c>
 80067ce:	0550      	lsls	r0, r2, #21
 80067d0:	f57f af08 	bpl.w	80065e4 <_scanf_float+0x64>
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	f000 80de 	beq.w	8006998 <_scanf_float+0x418>
 80067dc:	0591      	lsls	r1, r2, #22
 80067de:	bf58      	it	pl
 80067e0:	9902      	ldrpl	r1, [sp, #8]
 80067e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067e6:	bf58      	it	pl
 80067e8:	eba9 0101 	subpl.w	r1, r9, r1
 80067ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80067f0:	bf58      	it	pl
 80067f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	f04f 0900 	mov.w	r9, #0
 80067fc:	e789      	b.n	8006712 <_scanf_float+0x192>
 80067fe:	f04f 0a03 	mov.w	sl, #3
 8006802:	e786      	b.n	8006712 <_scanf_float+0x192>
 8006804:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006808:	4639      	mov	r1, r7
 800680a:	4640      	mov	r0, r8
 800680c:	4798      	blx	r3
 800680e:	2800      	cmp	r0, #0
 8006810:	f43f aedb 	beq.w	80065ca <_scanf_float+0x4a>
 8006814:	e6e6      	b.n	80065e4 <_scanf_float+0x64>
 8006816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800681a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800681e:	463a      	mov	r2, r7
 8006820:	4640      	mov	r0, r8
 8006822:	4798      	blx	r3
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	3b01      	subs	r3, #1
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	e6e8      	b.n	80065fe <_scanf_float+0x7e>
 800682c:	1e6b      	subs	r3, r5, #1
 800682e:	2b06      	cmp	r3, #6
 8006830:	d824      	bhi.n	800687c <_scanf_float+0x2fc>
 8006832:	2d02      	cmp	r5, #2
 8006834:	d836      	bhi.n	80068a4 <_scanf_float+0x324>
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	429e      	cmp	r6, r3
 800683a:	f67f aee4 	bls.w	8006606 <_scanf_float+0x86>
 800683e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006846:	463a      	mov	r2, r7
 8006848:	4640      	mov	r0, r8
 800684a:	4798      	blx	r3
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	3b01      	subs	r3, #1
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	e7f0      	b.n	8006836 <_scanf_float+0x2b6>
 8006854:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006858:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800685c:	463a      	mov	r2, r7
 800685e:	4640      	mov	r0, r8
 8006860:	4798      	blx	r3
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	3b01      	subs	r3, #1
 8006866:	6123      	str	r3, [r4, #16]
 8006868:	f10a 3aff 	add.w	sl, sl, #4294967295
 800686c:	fa5f fa8a 	uxtb.w	sl, sl
 8006870:	f1ba 0f02 	cmp.w	sl, #2
 8006874:	d1ee      	bne.n	8006854 <_scanf_float+0x2d4>
 8006876:	3d03      	subs	r5, #3
 8006878:	b2ed      	uxtb	r5, r5
 800687a:	1b76      	subs	r6, r6, r5
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	05da      	lsls	r2, r3, #23
 8006880:	d530      	bpl.n	80068e4 <_scanf_float+0x364>
 8006882:	055b      	lsls	r3, r3, #21
 8006884:	d511      	bpl.n	80068aa <_scanf_float+0x32a>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	429e      	cmp	r6, r3
 800688a:	f67f aebc 	bls.w	8006606 <_scanf_float+0x86>
 800688e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006896:	463a      	mov	r2, r7
 8006898:	4640      	mov	r0, r8
 800689a:	4798      	blx	r3
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	3b01      	subs	r3, #1
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	e7f0      	b.n	8006886 <_scanf_float+0x306>
 80068a4:	46aa      	mov	sl, r5
 80068a6:	46b3      	mov	fp, r6
 80068a8:	e7de      	b.n	8006868 <_scanf_float+0x2e8>
 80068aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	2965      	cmp	r1, #101	@ 0x65
 80068b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	d00c      	beq.n	80068d8 <_scanf_float+0x358>
 80068be:	2945      	cmp	r1, #69	@ 0x45
 80068c0:	d00a      	beq.n	80068d8 <_scanf_float+0x358>
 80068c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068c6:	463a      	mov	r2, r7
 80068c8:	4640      	mov	r0, r8
 80068ca:	4798      	blx	r3
 80068cc:	6923      	ldr	r3, [r4, #16]
 80068ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	1eb5      	subs	r5, r6, #2
 80068d6:	6123      	str	r3, [r4, #16]
 80068d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068dc:	463a      	mov	r2, r7
 80068de:	4640      	mov	r0, r8
 80068e0:	4798      	blx	r3
 80068e2:	462e      	mov	r6, r5
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	f012 0210 	ands.w	r2, r2, #16
 80068ea:	d001      	beq.n	80068f0 <_scanf_float+0x370>
 80068ec:	2000      	movs	r0, #0
 80068ee:	e68b      	b.n	8006608 <_scanf_float+0x88>
 80068f0:	7032      	strb	r2, [r6, #0]
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068fc:	d11c      	bne.n	8006938 <_scanf_float+0x3b8>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	454b      	cmp	r3, r9
 8006902:	eba3 0209 	sub.w	r2, r3, r9
 8006906:	d123      	bne.n	8006950 <_scanf_float+0x3d0>
 8006908:	9901      	ldr	r1, [sp, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	4640      	mov	r0, r8
 800690e:	f002 fbf7 	bl	8009100 <_strtod_r>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f011 0f02 	tst.w	r1, #2
 800691c:	ec57 6b10 	vmov	r6, r7, d0
 8006920:	f103 0204 	add.w	r2, r3, #4
 8006924:	d01f      	beq.n	8006966 <_scanf_float+0x3e6>
 8006926:	9903      	ldr	r1, [sp, #12]
 8006928:	600a      	str	r2, [r1, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	e9c3 6700 	strd	r6, r7, [r3]
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	3301      	adds	r3, #1
 8006934:	60e3      	str	r3, [r4, #12]
 8006936:	e7d9      	b.n	80068ec <_scanf_float+0x36c>
 8006938:	9b04      	ldr	r3, [sp, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0e4      	beq.n	8006908 <_scanf_float+0x388>
 800693e:	9905      	ldr	r1, [sp, #20]
 8006940:	230a      	movs	r3, #10
 8006942:	3101      	adds	r1, #1
 8006944:	4640      	mov	r0, r8
 8006946:	f002 fc5b 	bl	8009200 <_strtol_r>
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	9e05      	ldr	r6, [sp, #20]
 800694e:	1ac2      	subs	r2, r0, r3
 8006950:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006954:	429e      	cmp	r6, r3
 8006956:	bf28      	it	cs
 8006958:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800695c:	4910      	ldr	r1, [pc, #64]	@ (80069a0 <_scanf_float+0x420>)
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f8e4 	bl	8006b2c <siprintf>
 8006964:	e7d0      	b.n	8006908 <_scanf_float+0x388>
 8006966:	f011 0f04 	tst.w	r1, #4
 800696a:	9903      	ldr	r1, [sp, #12]
 800696c:	600a      	str	r2, [r1, #0]
 800696e:	d1dc      	bne.n	800692a <_scanf_float+0x3aa>
 8006970:	681d      	ldr	r5, [r3, #0]
 8006972:	4632      	mov	r2, r6
 8006974:	463b      	mov	r3, r7
 8006976:	4630      	mov	r0, r6
 8006978:	4639      	mov	r1, r7
 800697a:	f7fa f8af 	bl	8000adc <__aeabi_dcmpun>
 800697e:	b128      	cbz	r0, 800698c <_scanf_float+0x40c>
 8006980:	4808      	ldr	r0, [pc, #32]	@ (80069a4 <_scanf_float+0x424>)
 8006982:	f000 f9b7 	bl	8006cf4 <nanf>
 8006986:	ed85 0a00 	vstr	s0, [r5]
 800698a:	e7d1      	b.n	8006930 <_scanf_float+0x3b0>
 800698c:	4630      	mov	r0, r6
 800698e:	4639      	mov	r1, r7
 8006990:	f7fa f902 	bl	8000b98 <__aeabi_d2f>
 8006994:	6028      	str	r0, [r5, #0]
 8006996:	e7cb      	b.n	8006930 <_scanf_float+0x3b0>
 8006998:	f04f 0900 	mov.w	r9, #0
 800699c:	e629      	b.n	80065f2 <_scanf_float+0x72>
 800699e:	bf00      	nop
 80069a0:	0800a524 	.word	0x0800a524
 80069a4:	0800a8bd 	.word	0x0800a8bd

080069a8 <std>:
 80069a8:	2300      	movs	r3, #0
 80069aa:	b510      	push	{r4, lr}
 80069ac:	4604      	mov	r4, r0
 80069ae:	e9c0 3300 	strd	r3, r3, [r0]
 80069b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069b6:	6083      	str	r3, [r0, #8]
 80069b8:	8181      	strh	r1, [r0, #12]
 80069ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80069bc:	81c2      	strh	r2, [r0, #14]
 80069be:	6183      	str	r3, [r0, #24]
 80069c0:	4619      	mov	r1, r3
 80069c2:	2208      	movs	r2, #8
 80069c4:	305c      	adds	r0, #92	@ 0x5c
 80069c6:	f000 f914 	bl	8006bf2 <memset>
 80069ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006a00 <std+0x58>)
 80069cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <std+0x5c>)
 80069d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a08 <std+0x60>)
 80069d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <std+0x64>)
 80069d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <std+0x68>)
 80069dc:	6224      	str	r4, [r4, #32]
 80069de:	429c      	cmp	r4, r3
 80069e0:	d006      	beq.n	80069f0 <std+0x48>
 80069e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069e6:	4294      	cmp	r4, r2
 80069e8:	d002      	beq.n	80069f0 <std+0x48>
 80069ea:	33d0      	adds	r3, #208	@ 0xd0
 80069ec:	429c      	cmp	r4, r3
 80069ee:	d105      	bne.n	80069fc <std+0x54>
 80069f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f8:	f000 b978 	b.w	8006cec <__retarget_lock_init_recursive>
 80069fc:	bd10      	pop	{r4, pc}
 80069fe:	bf00      	nop
 8006a00:	08006b6d 	.word	0x08006b6d
 8006a04:	08006b8f 	.word	0x08006b8f
 8006a08:	08006bc7 	.word	0x08006bc7
 8006a0c:	08006beb 	.word	0x08006beb
 8006a10:	200009c4 	.word	0x200009c4

08006a14 <stdio_exit_handler>:
 8006a14:	4a02      	ldr	r2, [pc, #8]	@ (8006a20 <stdio_exit_handler+0xc>)
 8006a16:	4903      	ldr	r1, [pc, #12]	@ (8006a24 <stdio_exit_handler+0x10>)
 8006a18:	4803      	ldr	r0, [pc, #12]	@ (8006a28 <stdio_exit_handler+0x14>)
 8006a1a:	f000 b869 	b.w	8006af0 <_fwalk_sglue>
 8006a1e:	bf00      	nop
 8006a20:	20000010 	.word	0x20000010
 8006a24:	080095bd 	.word	0x080095bd
 8006a28:	20000020 	.word	0x20000020

08006a2c <cleanup_stdio>:
 8006a2c:	6841      	ldr	r1, [r0, #4]
 8006a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <cleanup_stdio+0x34>)
 8006a30:	4299      	cmp	r1, r3
 8006a32:	b510      	push	{r4, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	d001      	beq.n	8006a3c <cleanup_stdio+0x10>
 8006a38:	f002 fdc0 	bl	80095bc <_fflush_r>
 8006a3c:	68a1      	ldr	r1, [r4, #8]
 8006a3e:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <cleanup_stdio+0x38>)
 8006a40:	4299      	cmp	r1, r3
 8006a42:	d002      	beq.n	8006a4a <cleanup_stdio+0x1e>
 8006a44:	4620      	mov	r0, r4
 8006a46:	f002 fdb9 	bl	80095bc <_fflush_r>
 8006a4a:	68e1      	ldr	r1, [r4, #12]
 8006a4c:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <cleanup_stdio+0x3c>)
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	d004      	beq.n	8006a5c <cleanup_stdio+0x30>
 8006a52:	4620      	mov	r0, r4
 8006a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a58:	f002 bdb0 	b.w	80095bc <_fflush_r>
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	200009c4 	.word	0x200009c4
 8006a64:	20000a2c 	.word	0x20000a2c
 8006a68:	20000a94 	.word	0x20000a94

08006a6c <global_stdio_init.part.0>:
 8006a6c:	b510      	push	{r4, lr}
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <global_stdio_init.part.0+0x30>)
 8006a70:	4c0b      	ldr	r4, [pc, #44]	@ (8006aa0 <global_stdio_init.part.0+0x34>)
 8006a72:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa4 <global_stdio_init.part.0+0x38>)
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	4620      	mov	r0, r4
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2104      	movs	r1, #4
 8006a7c:	f7ff ff94 	bl	80069a8 <std>
 8006a80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a84:	2201      	movs	r2, #1
 8006a86:	2109      	movs	r1, #9
 8006a88:	f7ff ff8e 	bl	80069a8 <std>
 8006a8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a90:	2202      	movs	r2, #2
 8006a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a96:	2112      	movs	r1, #18
 8006a98:	f7ff bf86 	b.w	80069a8 <std>
 8006a9c:	20000afc 	.word	0x20000afc
 8006aa0:	200009c4 	.word	0x200009c4
 8006aa4:	08006a15 	.word	0x08006a15

08006aa8 <__sfp_lock_acquire>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	@ (8006ab0 <__sfp_lock_acquire+0x8>)
 8006aaa:	f000 b920 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20000b05 	.word	0x20000b05

08006ab4 <__sfp_lock_release>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__sfp_lock_release+0x8>)
 8006ab6:	f000 b91b 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000b05 	.word	0x20000b05

08006ac0 <__sinit>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	f7ff fff0 	bl	8006aa8 <__sfp_lock_acquire>
 8006ac8:	6a23      	ldr	r3, [r4, #32]
 8006aca:	b11b      	cbz	r3, 8006ad4 <__sinit+0x14>
 8006acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad0:	f7ff bff0 	b.w	8006ab4 <__sfp_lock_release>
 8006ad4:	4b04      	ldr	r3, [pc, #16]	@ (8006ae8 <__sinit+0x28>)
 8006ad6:	6223      	str	r3, [r4, #32]
 8006ad8:	4b04      	ldr	r3, [pc, #16]	@ (8006aec <__sinit+0x2c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f5      	bne.n	8006acc <__sinit+0xc>
 8006ae0:	f7ff ffc4 	bl	8006a6c <global_stdio_init.part.0>
 8006ae4:	e7f2      	b.n	8006acc <__sinit+0xc>
 8006ae6:	bf00      	nop
 8006ae8:	08006a2d 	.word	0x08006a2d
 8006aec:	20000afc 	.word	0x20000afc

08006af0 <_fwalk_sglue>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	4607      	mov	r7, r0
 8006af6:	4688      	mov	r8, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	2600      	movs	r6, #0
 8006afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b00:	f1b9 0901 	subs.w	r9, r9, #1
 8006b04:	d505      	bpl.n	8006b12 <_fwalk_sglue+0x22>
 8006b06:	6824      	ldr	r4, [r4, #0]
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d1f7      	bne.n	8006afc <_fwalk_sglue+0xc>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d907      	bls.n	8006b28 <_fwalk_sglue+0x38>
 8006b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	d003      	beq.n	8006b28 <_fwalk_sglue+0x38>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4638      	mov	r0, r7
 8006b24:	47c0      	blx	r8
 8006b26:	4306      	orrs	r6, r0
 8006b28:	3568      	adds	r5, #104	@ 0x68
 8006b2a:	e7e9      	b.n	8006b00 <_fwalk_sglue+0x10>

08006b2c <siprintf>:
 8006b2c:	b40e      	push	{r1, r2, r3}
 8006b2e:	b500      	push	{lr}
 8006b30:	b09c      	sub	sp, #112	@ 0x70
 8006b32:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b34:	9002      	str	r0, [sp, #8]
 8006b36:	9006      	str	r0, [sp, #24]
 8006b38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b3c:	4809      	ldr	r0, [pc, #36]	@ (8006b64 <siprintf+0x38>)
 8006b3e:	9107      	str	r1, [sp, #28]
 8006b40:	9104      	str	r1, [sp, #16]
 8006b42:	4909      	ldr	r1, [pc, #36]	@ (8006b68 <siprintf+0x3c>)
 8006b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	a902      	add	r1, sp, #8
 8006b50:	f002 fbb4 	bl	80092bc <_svfiprintf_r>
 8006b54:	9b02      	ldr	r3, [sp, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	b01c      	add	sp, #112	@ 0x70
 8006b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b60:	b003      	add	sp, #12
 8006b62:	4770      	bx	lr
 8006b64:	2000001c 	.word	0x2000001c
 8006b68:	ffff0208 	.word	0xffff0208

08006b6c <__sread>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	460c      	mov	r4, r1
 8006b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b74:	f000 f86c 	bl	8006c50 <_read_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	bfab      	itete	ge
 8006b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8006b80:	181b      	addge	r3, r3, r0
 8006b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b86:	bfac      	ite	ge
 8006b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b8a:	81a3      	strhlt	r3, [r4, #12]
 8006b8c:	bd10      	pop	{r4, pc}

08006b8e <__swrite>:
 8006b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b92:	461f      	mov	r7, r3
 8006b94:	898b      	ldrh	r3, [r1, #12]
 8006b96:	05db      	lsls	r3, r3, #23
 8006b98:	4605      	mov	r5, r0
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4616      	mov	r6, r2
 8006b9e:	d505      	bpl.n	8006bac <__swrite+0x1e>
 8006ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f000 f840 	bl	8006c2c <_lseek_r>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	4632      	mov	r2, r6
 8006bba:	463b      	mov	r3, r7
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc2:	f000 b857 	b.w	8006c74 <_write_r>

08006bc6 <__sseek>:
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	460c      	mov	r4, r1
 8006bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bce:	f000 f82d 	bl	8006c2c <_lseek_r>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	bf15      	itete	ne
 8006bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006be2:	81a3      	strheq	r3, [r4, #12]
 8006be4:	bf18      	it	ne
 8006be6:	81a3      	strhne	r3, [r4, #12]
 8006be8:	bd10      	pop	{r4, pc}

08006bea <__sclose>:
 8006bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bee:	f000 b80d 	b.w	8006c0c <_close_r>

08006bf2 <memset>:
 8006bf2:	4402      	add	r2, r0
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d100      	bne.n	8006bfc <memset+0xa>
 8006bfa:	4770      	bx	lr
 8006bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8006c00:	e7f9      	b.n	8006bf6 <memset+0x4>
	...

08006c04 <_localeconv_r>:
 8006c04:	4800      	ldr	r0, [pc, #0]	@ (8006c08 <_localeconv_r+0x4>)
 8006c06:	4770      	bx	lr
 8006c08:	2000015c 	.word	0x2000015c

08006c0c <_close_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d06      	ldr	r5, [pc, #24]	@ (8006c28 <_close_r+0x1c>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fb f8d1 	bl	8001dbe <_close>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_close_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_close_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20000b00 	.word	0x20000b00

08006c2c <_lseek_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d07      	ldr	r5, [pc, #28]	@ (8006c4c <_lseek_r+0x20>)
 8006c30:	4604      	mov	r4, r0
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	602a      	str	r2, [r5, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fb f8e6 	bl	8001e0c <_lseek>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_lseek_r+0x1e>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_lseek_r+0x1e>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20000b00 	.word	0x20000b00

08006c50 <_read_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d07      	ldr	r5, [pc, #28]	@ (8006c70 <_read_r+0x20>)
 8006c54:	4604      	mov	r4, r0
 8006c56:	4608      	mov	r0, r1
 8006c58:	4611      	mov	r1, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	602a      	str	r2, [r5, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f7fb f890 	bl	8001d84 <_read>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_read_r+0x1e>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_read_r+0x1e>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20000b00 	.word	0x20000b00

08006c74 <_write_r>:
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4d07      	ldr	r5, [pc, #28]	@ (8006c94 <_write_r+0x20>)
 8006c78:	4604      	mov	r4, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	4611      	mov	r1, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	602a      	str	r2, [r5, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f7fa fbea 	bl	800145c <_write>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_write_r+0x1e>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_write_r+0x1e>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20000b00 	.word	0x20000b00

08006c98 <__errno>:
 8006c98:	4b01      	ldr	r3, [pc, #4]	@ (8006ca0 <__errno+0x8>)
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	2000001c 	.word	0x2000001c

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8006cdc <__libc_init_array+0x38>)
 8006ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce0 <__libc_init_array+0x3c>)
 8006caa:	1b64      	subs	r4, r4, r5
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ce4 <__libc_init_array+0x40>)
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ce8 <__libc_init_array+0x44>)
 8006cb8:	f003 fb70 	bl	800a39c <_init>
 8006cbc:	1b64      	subs	r4, r4, r5
 8006cbe:	10a4      	asrs	r4, r4, #2
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	0800a928 	.word	0x0800a928
 8006ce0:	0800a928 	.word	0x0800a928
 8006ce4:	0800a928 	.word	0x0800a928
 8006ce8:	0800a92c 	.word	0x0800a92c

08006cec <__retarget_lock_init_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_acquire_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__retarget_lock_release_recursive>:
 8006cf0:	4770      	bx	lr
	...

08006cf4 <nanf>:
 8006cf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006cfc <nanf+0x8>
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	7fc00000 	.word	0x7fc00000

08006d00 <quorem>:
 8006d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	6903      	ldr	r3, [r0, #16]
 8006d06:	690c      	ldr	r4, [r1, #16]
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	db7e      	blt.n	8006e0c <quorem+0x10c>
 8006d0e:	3c01      	subs	r4, #1
 8006d10:	f101 0814 	add.w	r8, r1, #20
 8006d14:	00a3      	lsls	r3, r4, #2
 8006d16:	f100 0514 	add.w	r5, r0, #20
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d32:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d36:	d32e      	bcc.n	8006d96 <quorem+0x96>
 8006d38:	f04f 0a00 	mov.w	sl, #0
 8006d3c:	46c4      	mov	ip, r8
 8006d3e:	46ae      	mov	lr, r5
 8006d40:	46d3      	mov	fp, sl
 8006d42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d46:	b298      	uxth	r0, r3
 8006d48:	fb06 a000 	mla	r0, r6, r0, sl
 8006d4c:	0c02      	lsrs	r2, r0, #16
 8006d4e:	0c1b      	lsrs	r3, r3, #16
 8006d50:	fb06 2303 	mla	r3, r6, r3, r2
 8006d54:	f8de 2000 	ldr.w	r2, [lr]
 8006d58:	b280      	uxth	r0, r0
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	1a12      	subs	r2, r2, r0
 8006d5e:	445a      	add	r2, fp
 8006d60:	f8de 0000 	ldr.w	r0, [lr]
 8006d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d72:	b292      	uxth	r2, r2
 8006d74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d78:	45e1      	cmp	r9, ip
 8006d7a:	f84e 2b04 	str.w	r2, [lr], #4
 8006d7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d82:	d2de      	bcs.n	8006d42 <quorem+0x42>
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	58eb      	ldr	r3, [r5, r3]
 8006d88:	b92b      	cbnz	r3, 8006d96 <quorem+0x96>
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	d32f      	bcc.n	8006df4 <quorem+0xf4>
 8006d94:	613c      	str	r4, [r7, #16]
 8006d96:	4638      	mov	r0, r7
 8006d98:	f001 f9c2 	bl	8008120 <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	db25      	blt.n	8006dec <quorem+0xec>
 8006da0:	4629      	mov	r1, r5
 8006da2:	2000      	movs	r0, #0
 8006da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006da8:	f8d1 c000 	ldr.w	ip, [r1]
 8006dac:	fa1f fe82 	uxth.w	lr, r2
 8006db0:	fa1f f38c 	uxth.w	r3, ip
 8006db4:	eba3 030e 	sub.w	r3, r3, lr
 8006db8:	4403      	add	r3, r0
 8006dba:	0c12      	lsrs	r2, r2, #16
 8006dbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dca:	45c1      	cmp	r9, r8
 8006dcc:	f841 3b04 	str.w	r3, [r1], #4
 8006dd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006dd4:	d2e6      	bcs.n	8006da4 <quorem+0xa4>
 8006dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dde:	b922      	cbnz	r2, 8006dea <quorem+0xea>
 8006de0:	3b04      	subs	r3, #4
 8006de2:	429d      	cmp	r5, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	d30b      	bcc.n	8006e00 <quorem+0x100>
 8006de8:	613c      	str	r4, [r7, #16]
 8006dea:	3601      	adds	r6, #1
 8006dec:	4630      	mov	r0, r6
 8006dee:	b003      	add	sp, #12
 8006df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	3b04      	subs	r3, #4
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	d1cb      	bne.n	8006d94 <quorem+0x94>
 8006dfc:	3c01      	subs	r4, #1
 8006dfe:	e7c6      	b.n	8006d8e <quorem+0x8e>
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	3b04      	subs	r3, #4
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	d1ef      	bne.n	8006de8 <quorem+0xe8>
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	e7ea      	b.n	8006de2 <quorem+0xe2>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e7ee      	b.n	8006dee <quorem+0xee>

08006e10 <_dtoa_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	69c7      	ldr	r7, [r0, #28]
 8006e16:	b099      	sub	sp, #100	@ 0x64
 8006e18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e1c:	ec55 4b10 	vmov	r4, r5, d0
 8006e20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e22:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e24:	4683      	mov	fp, r0
 8006e26:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e2a:	b97f      	cbnz	r7, 8006e4c <_dtoa_r+0x3c>
 8006e2c:	2010      	movs	r0, #16
 8006e2e:	f000 fdfd 	bl	8007a2c <malloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e38:	b920      	cbnz	r0, 8006e44 <_dtoa_r+0x34>
 8006e3a:	4ba7      	ldr	r3, [pc, #668]	@ (80070d8 <_dtoa_r+0x2c8>)
 8006e3c:	21ef      	movs	r1, #239	@ 0xef
 8006e3e:	48a7      	ldr	r0, [pc, #668]	@ (80070dc <_dtoa_r+0x2cc>)
 8006e40:	f002 fc36 	bl	80096b0 <__assert_func>
 8006e44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e48:	6007      	str	r7, [r0, #0]
 8006e4a:	60c7      	str	r7, [r0, #12]
 8006e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e50:	6819      	ldr	r1, [r3, #0]
 8006e52:	b159      	cbz	r1, 8006e6c <_dtoa_r+0x5c>
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	604a      	str	r2, [r1, #4]
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4093      	lsls	r3, r2
 8006e5c:	608b      	str	r3, [r1, #8]
 8006e5e:	4658      	mov	r0, fp
 8006e60:	f000 feda 	bl	8007c18 <_Bfree>
 8006e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	1e2b      	subs	r3, r5, #0
 8006e6e:	bfb9      	ittee	lt
 8006e70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e74:	9303      	strlt	r3, [sp, #12]
 8006e76:	2300      	movge	r3, #0
 8006e78:	6033      	strge	r3, [r6, #0]
 8006e7a:	9f03      	ldr	r7, [sp, #12]
 8006e7c:	4b98      	ldr	r3, [pc, #608]	@ (80070e0 <_dtoa_r+0x2d0>)
 8006e7e:	bfbc      	itt	lt
 8006e80:	2201      	movlt	r2, #1
 8006e82:	6032      	strlt	r2, [r6, #0]
 8006e84:	43bb      	bics	r3, r7
 8006e86:	d112      	bne.n	8006eae <_dtoa_r+0x9e>
 8006e88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e94:	4323      	orrs	r3, r4
 8006e96:	f000 854d 	beq.w	8007934 <_dtoa_r+0xb24>
 8006e9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070f4 <_dtoa_r+0x2e4>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 854f 	beq.w	8007944 <_dtoa_r+0xb34>
 8006ea6:	f10a 0303 	add.w	r3, sl, #3
 8006eaa:	f000 bd49 	b.w	8007940 <_dtoa_r+0xb30>
 8006eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	2300      	movs	r3, #0
 8006eba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ebe:	f7f9 fddb 	bl	8000a78 <__aeabi_dcmpeq>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	b158      	cbz	r0, 8006ede <_dtoa_r+0xce>
 8006ec6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ec8:	2301      	movs	r3, #1
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ece:	b113      	cbz	r3, 8006ed6 <_dtoa_r+0xc6>
 8006ed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ed2:	4b84      	ldr	r3, [pc, #528]	@ (80070e4 <_dtoa_r+0x2d4>)
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070f8 <_dtoa_r+0x2e8>
 8006eda:	f000 bd33 	b.w	8007944 <_dtoa_r+0xb34>
 8006ede:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ee2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ee4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f001 fa3a 	bl	8008360 <__d2b>
 8006eec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ef0:	4681      	mov	r9, r0
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	d077      	beq.n	8006fe6 <_dtoa_r+0x1d6>
 8006ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ef8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f10:	4619      	mov	r1, r3
 8006f12:	2200      	movs	r2, #0
 8006f14:	4b74      	ldr	r3, [pc, #464]	@ (80070e8 <_dtoa_r+0x2d8>)
 8006f16:	f7f9 f98f 	bl	8000238 <__aeabi_dsub>
 8006f1a:	a369      	add	r3, pc, #420	@ (adr r3, 80070c0 <_dtoa_r+0x2b0>)
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	f7f9 fb42 	bl	80005a8 <__aeabi_dmul>
 8006f24:	a368      	add	r3, pc, #416	@ (adr r3, 80070c8 <_dtoa_r+0x2b8>)
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f7f9 f987 	bl	800023c <__adddf3>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4630      	mov	r0, r6
 8006f32:	460d      	mov	r5, r1
 8006f34:	f7f9 face 	bl	80004d4 <__aeabi_i2d>
 8006f38:	a365      	add	r3, pc, #404	@ (adr r3, 80070d0 <_dtoa_r+0x2c0>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	f7f9 fb33 	bl	80005a8 <__aeabi_dmul>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4620      	mov	r0, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	f7f9 f977 	bl	800023c <__adddf3>
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	f7f9 fdd9 	bl	8000b08 <__aeabi_d2iz>
 8006f56:	2200      	movs	r2, #0
 8006f58:	4607      	mov	r7, r0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	f7f9 fd94 	bl	8000a8c <__aeabi_dcmplt>
 8006f64:	b140      	cbz	r0, 8006f78 <_dtoa_r+0x168>
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7f9 fab4 	bl	80004d4 <__aeabi_i2d>
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	462b      	mov	r3, r5
 8006f70:	f7f9 fd82 	bl	8000a78 <__aeabi_dcmpeq>
 8006f74:	b900      	cbnz	r0, 8006f78 <_dtoa_r+0x168>
 8006f76:	3f01      	subs	r7, #1
 8006f78:	2f16      	cmp	r7, #22
 8006f7a:	d851      	bhi.n	8007020 <_dtoa_r+0x210>
 8006f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80070ec <_dtoa_r+0x2dc>)
 8006f7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f8a:	f7f9 fd7f 	bl	8000a8c <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d048      	beq.n	8007024 <_dtoa_r+0x214>
 8006f92:	3f01      	subs	r7, #1
 8006f94:	2300      	movs	r3, #0
 8006f96:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f9a:	1b9b      	subs	r3, r3, r6
 8006f9c:	1e5a      	subs	r2, r3, #1
 8006f9e:	bf44      	itt	mi
 8006fa0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fa4:	2300      	movmi	r3, #0
 8006fa6:	9208      	str	r2, [sp, #32]
 8006fa8:	bf54      	ite	pl
 8006faa:	f04f 0800 	movpl.w	r8, #0
 8006fae:	9308      	strmi	r3, [sp, #32]
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	db39      	blt.n	8007028 <_dtoa_r+0x218>
 8006fb4:	9b08      	ldr	r3, [sp, #32]
 8006fb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006fb8:	443b      	add	r3, r7
 8006fba:	9308      	str	r3, [sp, #32]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	d864      	bhi.n	8007090 <_dtoa_r+0x280>
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	bfc4      	itt	gt
 8006fca:	3b04      	subgt	r3, #4
 8006fcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fd4:	bfcc      	ite	gt
 8006fd6:	2400      	movgt	r4, #0
 8006fd8:	2401      	movle	r4, #1
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d863      	bhi.n	80070a6 <_dtoa_r+0x296>
 8006fde:	e8df f003 	tbb	[pc, r3]
 8006fe2:	372a      	.short	0x372a
 8006fe4:	5535      	.short	0x5535
 8006fe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fea:	441e      	add	r6, r3
 8006fec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	bfc1      	itttt	gt
 8006ff4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ff8:	409f      	lslgt	r7, r3
 8006ffa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ffe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007002:	bfd6      	itet	le
 8007004:	f1c3 0320 	rsble	r3, r3, #32
 8007008:	ea47 0003 	orrgt.w	r0, r7, r3
 800700c:	fa04 f003 	lslle.w	r0, r4, r3
 8007010:	f7f9 fa50 	bl	80004b4 <__aeabi_ui2d>
 8007014:	2201      	movs	r2, #1
 8007016:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800701a:	3e01      	subs	r6, #1
 800701c:	9214      	str	r2, [sp, #80]	@ 0x50
 800701e:	e777      	b.n	8006f10 <_dtoa_r+0x100>
 8007020:	2301      	movs	r3, #1
 8007022:	e7b8      	b.n	8006f96 <_dtoa_r+0x186>
 8007024:	9012      	str	r0, [sp, #72]	@ 0x48
 8007026:	e7b7      	b.n	8006f98 <_dtoa_r+0x188>
 8007028:	427b      	negs	r3, r7
 800702a:	930a      	str	r3, [sp, #40]	@ 0x28
 800702c:	2300      	movs	r3, #0
 800702e:	eba8 0807 	sub.w	r8, r8, r7
 8007032:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007034:	e7c4      	b.n	8006fc0 <_dtoa_r+0x1b0>
 8007036:	2300      	movs	r3, #0
 8007038:	930b      	str	r3, [sp, #44]	@ 0x2c
 800703a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800703c:	2b00      	cmp	r3, #0
 800703e:	dc35      	bgt.n	80070ac <_dtoa_r+0x29c>
 8007040:	2301      	movs	r3, #1
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	461a      	mov	r2, r3
 8007048:	920e      	str	r2, [sp, #56]	@ 0x38
 800704a:	e00b      	b.n	8007064 <_dtoa_r+0x254>
 800704c:	2301      	movs	r3, #1
 800704e:	e7f3      	b.n	8007038 <_dtoa_r+0x228>
 8007050:	2300      	movs	r3, #0
 8007052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	9307      	str	r3, [sp, #28]
 8007060:	bfb8      	it	lt
 8007062:	2301      	movlt	r3, #1
 8007064:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007068:	2100      	movs	r1, #0
 800706a:	2204      	movs	r2, #4
 800706c:	f102 0514 	add.w	r5, r2, #20
 8007070:	429d      	cmp	r5, r3
 8007072:	d91f      	bls.n	80070b4 <_dtoa_r+0x2a4>
 8007074:	6041      	str	r1, [r0, #4]
 8007076:	4658      	mov	r0, fp
 8007078:	f000 fd8e 	bl	8007b98 <_Balloc>
 800707c:	4682      	mov	sl, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d13c      	bne.n	80070fc <_dtoa_r+0x2ec>
 8007082:	4b1b      	ldr	r3, [pc, #108]	@ (80070f0 <_dtoa_r+0x2e0>)
 8007084:	4602      	mov	r2, r0
 8007086:	f240 11af 	movw	r1, #431	@ 0x1af
 800708a:	e6d8      	b.n	8006e3e <_dtoa_r+0x2e>
 800708c:	2301      	movs	r3, #1
 800708e:	e7e0      	b.n	8007052 <_dtoa_r+0x242>
 8007090:	2401      	movs	r4, #1
 8007092:	2300      	movs	r3, #0
 8007094:	9309      	str	r3, [sp, #36]	@ 0x24
 8007096:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007098:	f04f 33ff 	mov.w	r3, #4294967295
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	9307      	str	r3, [sp, #28]
 80070a0:	2200      	movs	r2, #0
 80070a2:	2312      	movs	r3, #18
 80070a4:	e7d0      	b.n	8007048 <_dtoa_r+0x238>
 80070a6:	2301      	movs	r3, #1
 80070a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070aa:	e7f5      	b.n	8007098 <_dtoa_r+0x288>
 80070ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	9307      	str	r3, [sp, #28]
 80070b2:	e7d7      	b.n	8007064 <_dtoa_r+0x254>
 80070b4:	3101      	adds	r1, #1
 80070b6:	0052      	lsls	r2, r2, #1
 80070b8:	e7d8      	b.n	800706c <_dtoa_r+0x25c>
 80070ba:	bf00      	nop
 80070bc:	f3af 8000 	nop.w
 80070c0:	636f4361 	.word	0x636f4361
 80070c4:	3fd287a7 	.word	0x3fd287a7
 80070c8:	8b60c8b3 	.word	0x8b60c8b3
 80070cc:	3fc68a28 	.word	0x3fc68a28
 80070d0:	509f79fb 	.word	0x509f79fb
 80070d4:	3fd34413 	.word	0x3fd34413
 80070d8:	0800a536 	.word	0x0800a536
 80070dc:	0800a54d 	.word	0x0800a54d
 80070e0:	7ff00000 	.word	0x7ff00000
 80070e4:	0800a501 	.word	0x0800a501
 80070e8:	3ff80000 	.word	0x3ff80000
 80070ec:	0800a648 	.word	0x0800a648
 80070f0:	0800a5a5 	.word	0x0800a5a5
 80070f4:	0800a532 	.word	0x0800a532
 80070f8:	0800a500 	.word	0x0800a500
 80070fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007100:	6018      	str	r0, [r3, #0]
 8007102:	9b07      	ldr	r3, [sp, #28]
 8007104:	2b0e      	cmp	r3, #14
 8007106:	f200 80a4 	bhi.w	8007252 <_dtoa_r+0x442>
 800710a:	2c00      	cmp	r4, #0
 800710c:	f000 80a1 	beq.w	8007252 <_dtoa_r+0x442>
 8007110:	2f00      	cmp	r7, #0
 8007112:	dd33      	ble.n	800717c <_dtoa_r+0x36c>
 8007114:	4bad      	ldr	r3, [pc, #692]	@ (80073cc <_dtoa_r+0x5bc>)
 8007116:	f007 020f 	and.w	r2, r7, #15
 800711a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800711e:	ed93 7b00 	vldr	d7, [r3]
 8007122:	05f8      	lsls	r0, r7, #23
 8007124:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800712c:	d516      	bpl.n	800715c <_dtoa_r+0x34c>
 800712e:	4ba8      	ldr	r3, [pc, #672]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007138:	f7f9 fb60 	bl	80007fc <__aeabi_ddiv>
 800713c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007140:	f004 040f 	and.w	r4, r4, #15
 8007144:	2603      	movs	r6, #3
 8007146:	4da2      	ldr	r5, [pc, #648]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007148:	b954      	cbnz	r4, 8007160 <_dtoa_r+0x350>
 800714a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	f7f9 fb53 	bl	80007fc <__aeabi_ddiv>
 8007156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800715a:	e028      	b.n	80071ae <_dtoa_r+0x39e>
 800715c:	2602      	movs	r6, #2
 800715e:	e7f2      	b.n	8007146 <_dtoa_r+0x336>
 8007160:	07e1      	lsls	r1, r4, #31
 8007162:	d508      	bpl.n	8007176 <_dtoa_r+0x366>
 8007164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800716c:	f7f9 fa1c 	bl	80005a8 <__aeabi_dmul>
 8007170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007174:	3601      	adds	r6, #1
 8007176:	1064      	asrs	r4, r4, #1
 8007178:	3508      	adds	r5, #8
 800717a:	e7e5      	b.n	8007148 <_dtoa_r+0x338>
 800717c:	f000 80d2 	beq.w	8007324 <_dtoa_r+0x514>
 8007180:	427c      	negs	r4, r7
 8007182:	4b92      	ldr	r3, [pc, #584]	@ (80073cc <_dtoa_r+0x5bc>)
 8007184:	4d92      	ldr	r5, [pc, #584]	@ (80073d0 <_dtoa_r+0x5c0>)
 8007186:	f004 020f 	and.w	r2, r4, #15
 800718a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007196:	f7f9 fa07 	bl	80005a8 <__aeabi_dmul>
 800719a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800719e:	1124      	asrs	r4, r4, #4
 80071a0:	2300      	movs	r3, #0
 80071a2:	2602      	movs	r6, #2
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	f040 80b2 	bne.w	800730e <_dtoa_r+0x4fe>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d3      	bne.n	8007156 <_dtoa_r+0x346>
 80071ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 80b7 	beq.w	8007328 <_dtoa_r+0x518>
 80071ba:	4b86      	ldr	r3, [pc, #536]	@ (80073d4 <_dtoa_r+0x5c4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc63 	bl	8000a8c <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f000 80ae 	beq.w	8007328 <_dtoa_r+0x518>
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 80aa 	beq.w	8007328 <_dtoa_r+0x518>
 80071d4:	9b00      	ldr	r3, [sp, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd37      	ble.n	800724a <_dtoa_r+0x43a>
 80071da:	1e7b      	subs	r3, r7, #1
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	4620      	mov	r0, r4
 80071e0:	4b7d      	ldr	r3, [pc, #500]	@ (80073d8 <_dtoa_r+0x5c8>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f9df 	bl	80005a8 <__aeabi_dmul>
 80071ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ee:	9c00      	ldr	r4, [sp, #0]
 80071f0:	3601      	adds	r6, #1
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7f9 f96e 	bl	80004d4 <__aeabi_i2d>
 80071f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071fc:	f7f9 f9d4 	bl	80005a8 <__aeabi_dmul>
 8007200:	4b76      	ldr	r3, [pc, #472]	@ (80073dc <_dtoa_r+0x5cc>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 f81a 	bl	800023c <__adddf3>
 8007208:	4605      	mov	r5, r0
 800720a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800720e:	2c00      	cmp	r4, #0
 8007210:	f040 808d 	bne.w	800732e <_dtoa_r+0x51e>
 8007214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007218:	4b71      	ldr	r3, [pc, #452]	@ (80073e0 <_dtoa_r+0x5d0>)
 800721a:	2200      	movs	r2, #0
 800721c:	f7f9 f80c 	bl	8000238 <__aeabi_dsub>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007228:	462a      	mov	r2, r5
 800722a:	4633      	mov	r3, r6
 800722c:	f7f9 fc4c 	bl	8000ac8 <__aeabi_dcmpgt>
 8007230:	2800      	cmp	r0, #0
 8007232:	f040 828b 	bne.w	800774c <_dtoa_r+0x93c>
 8007236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723a:	462a      	mov	r2, r5
 800723c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007240:	f7f9 fc24 	bl	8000a8c <__aeabi_dcmplt>
 8007244:	2800      	cmp	r0, #0
 8007246:	f040 8128 	bne.w	800749a <_dtoa_r+0x68a>
 800724a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800724e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007254:	2b00      	cmp	r3, #0
 8007256:	f2c0 815a 	blt.w	800750e <_dtoa_r+0x6fe>
 800725a:	2f0e      	cmp	r7, #14
 800725c:	f300 8157 	bgt.w	800750e <_dtoa_r+0x6fe>
 8007260:	4b5a      	ldr	r3, [pc, #360]	@ (80073cc <_dtoa_r+0x5bc>)
 8007262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007266:	ed93 7b00 	vldr	d7, [r3]
 800726a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800726c:	2b00      	cmp	r3, #0
 800726e:	ed8d 7b00 	vstr	d7, [sp]
 8007272:	da03      	bge.n	800727c <_dtoa_r+0x46c>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f340 8101 	ble.w	800747e <_dtoa_r+0x66e>
 800727c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007280:	4656      	mov	r6, sl
 8007282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007286:	4620      	mov	r0, r4
 8007288:	4629      	mov	r1, r5
 800728a:	f7f9 fab7 	bl	80007fc <__aeabi_ddiv>
 800728e:	f7f9 fc3b 	bl	8000b08 <__aeabi_d2iz>
 8007292:	4680      	mov	r8, r0
 8007294:	f7f9 f91e 	bl	80004d4 <__aeabi_i2d>
 8007298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800729c:	f7f9 f984 	bl	80005a8 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4620      	mov	r0, r4
 80072a6:	4629      	mov	r1, r5
 80072a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072ac:	f7f8 ffc4 	bl	8000238 <__aeabi_dsub>
 80072b0:	f806 4b01 	strb.w	r4, [r6], #1
 80072b4:	9d07      	ldr	r5, [sp, #28]
 80072b6:	eba6 040a 	sub.w	r4, r6, sl
 80072ba:	42a5      	cmp	r5, r4
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	f040 8117 	bne.w	80074f2 <_dtoa_r+0x6e2>
 80072c4:	f7f8 ffba 	bl	800023c <__adddf3>
 80072c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f7f9 fbfa 	bl	8000ac8 <__aeabi_dcmpgt>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f040 80f9 	bne.w	80074cc <_dtoa_r+0x6bc>
 80072da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f7f9 fbc9 	bl	8000a78 <__aeabi_dcmpeq>
 80072e6:	b118      	cbz	r0, 80072f0 <_dtoa_r+0x4e0>
 80072e8:	f018 0f01 	tst.w	r8, #1
 80072ec:	f040 80ee 	bne.w	80074cc <_dtoa_r+0x6bc>
 80072f0:	4649      	mov	r1, r9
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fc90 	bl	8007c18 <_Bfree>
 80072f8:	2300      	movs	r3, #0
 80072fa:	7033      	strb	r3, [r6, #0]
 80072fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072fe:	3701      	adds	r7, #1
 8007300:	601f      	str	r7, [r3, #0]
 8007302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 831d 	beq.w	8007944 <_dtoa_r+0xb34>
 800730a:	601e      	str	r6, [r3, #0]
 800730c:	e31a      	b.n	8007944 <_dtoa_r+0xb34>
 800730e:	07e2      	lsls	r2, r4, #31
 8007310:	d505      	bpl.n	800731e <_dtoa_r+0x50e>
 8007312:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007316:	f7f9 f947 	bl	80005a8 <__aeabi_dmul>
 800731a:	3601      	adds	r6, #1
 800731c:	2301      	movs	r3, #1
 800731e:	1064      	asrs	r4, r4, #1
 8007320:	3508      	adds	r5, #8
 8007322:	e73f      	b.n	80071a4 <_dtoa_r+0x394>
 8007324:	2602      	movs	r6, #2
 8007326:	e742      	b.n	80071ae <_dtoa_r+0x39e>
 8007328:	9c07      	ldr	r4, [sp, #28]
 800732a:	9704      	str	r7, [sp, #16]
 800732c:	e761      	b.n	80071f2 <_dtoa_r+0x3e2>
 800732e:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <_dtoa_r+0x5bc>)
 8007330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007336:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800733a:	4454      	add	r4, sl
 800733c:	2900      	cmp	r1, #0
 800733e:	d053      	beq.n	80073e8 <_dtoa_r+0x5d8>
 8007340:	4928      	ldr	r1, [pc, #160]	@ (80073e4 <_dtoa_r+0x5d4>)
 8007342:	2000      	movs	r0, #0
 8007344:	f7f9 fa5a 	bl	80007fc <__aeabi_ddiv>
 8007348:	4633      	mov	r3, r6
 800734a:	462a      	mov	r2, r5
 800734c:	f7f8 ff74 	bl	8000238 <__aeabi_dsub>
 8007350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007354:	4656      	mov	r6, sl
 8007356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735a:	f7f9 fbd5 	bl	8000b08 <__aeabi_d2iz>
 800735e:	4605      	mov	r5, r0
 8007360:	f7f9 f8b8 	bl	80004d4 <__aeabi_i2d>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800736c:	f7f8 ff64 	bl	8000238 <__aeabi_dsub>
 8007370:	3530      	adds	r5, #48	@ 0x30
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800737a:	f806 5b01 	strb.w	r5, [r6], #1
 800737e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007382:	f7f9 fb83 	bl	8000a8c <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d171      	bne.n	800746e <_dtoa_r+0x65e>
 800738a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800738e:	4911      	ldr	r1, [pc, #68]	@ (80073d4 <_dtoa_r+0x5c4>)
 8007390:	2000      	movs	r0, #0
 8007392:	f7f8 ff51 	bl	8000238 <__aeabi_dsub>
 8007396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800739a:	f7f9 fb77 	bl	8000a8c <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f040 8095 	bne.w	80074ce <_dtoa_r+0x6be>
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	f43f af50 	beq.w	800724a <_dtoa_r+0x43a>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073ae:	4b0a      	ldr	r3, [pc, #40]	@ (80073d8 <_dtoa_r+0x5c8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7f9 f8f9 	bl	80005a8 <__aeabi_dmul>
 80073b6:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <_dtoa_r+0x5c8>)
 80073b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073bc:	2200      	movs	r2, #0
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 f8f1 	bl	80005a8 <__aeabi_dmul>
 80073c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ca:	e7c4      	b.n	8007356 <_dtoa_r+0x546>
 80073cc:	0800a648 	.word	0x0800a648
 80073d0:	0800a620 	.word	0x0800a620
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	40240000 	.word	0x40240000
 80073dc:	401c0000 	.word	0x401c0000
 80073e0:	40140000 	.word	0x40140000
 80073e4:	3fe00000 	.word	0x3fe00000
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7f9 f8dc 	bl	80005a8 <__aeabi_dmul>
 80073f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073f6:	4656      	mov	r6, sl
 80073f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fc:	f7f9 fb84 	bl	8000b08 <__aeabi_d2iz>
 8007400:	4605      	mov	r5, r0
 8007402:	f7f9 f867 	bl	80004d4 <__aeabi_i2d>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740e:	f7f8 ff13 	bl	8000238 <__aeabi_dsub>
 8007412:	3530      	adds	r5, #48	@ 0x30
 8007414:	f806 5b01 	strb.w	r5, [r6], #1
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	42a6      	cmp	r6, r4
 800741e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	d124      	bne.n	8007472 <_dtoa_r+0x662>
 8007428:	4bac      	ldr	r3, [pc, #688]	@ (80076dc <_dtoa_r+0x8cc>)
 800742a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800742e:	f7f8 ff05 	bl	800023c <__adddf3>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	f7f9 fb45 	bl	8000ac8 <__aeabi_dcmpgt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d145      	bne.n	80074ce <_dtoa_r+0x6be>
 8007442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007446:	49a5      	ldr	r1, [pc, #660]	@ (80076dc <_dtoa_r+0x8cc>)
 8007448:	2000      	movs	r0, #0
 800744a:	f7f8 fef5 	bl	8000238 <__aeabi_dsub>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007456:	f7f9 fb19 	bl	8000a8c <__aeabi_dcmplt>
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f aef5 	beq.w	800724a <_dtoa_r+0x43a>
 8007460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007462:	1e73      	subs	r3, r6, #1
 8007464:	9315      	str	r3, [sp, #84]	@ 0x54
 8007466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800746a:	2b30      	cmp	r3, #48	@ 0x30
 800746c:	d0f8      	beq.n	8007460 <_dtoa_r+0x650>
 800746e:	9f04      	ldr	r7, [sp, #16]
 8007470:	e73e      	b.n	80072f0 <_dtoa_r+0x4e0>
 8007472:	4b9b      	ldr	r3, [pc, #620]	@ (80076e0 <_dtoa_r+0x8d0>)
 8007474:	f7f9 f898 	bl	80005a8 <__aeabi_dmul>
 8007478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800747c:	e7bc      	b.n	80073f8 <_dtoa_r+0x5e8>
 800747e:	d10c      	bne.n	800749a <_dtoa_r+0x68a>
 8007480:	4b98      	ldr	r3, [pc, #608]	@ (80076e4 <_dtoa_r+0x8d4>)
 8007482:	2200      	movs	r2, #0
 8007484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007488:	f7f9 f88e 	bl	80005a8 <__aeabi_dmul>
 800748c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007490:	f7f9 fb10 	bl	8000ab4 <__aeabi_dcmpge>
 8007494:	2800      	cmp	r0, #0
 8007496:	f000 8157 	beq.w	8007748 <_dtoa_r+0x938>
 800749a:	2400      	movs	r4, #0
 800749c:	4625      	mov	r5, r4
 800749e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074a0:	43db      	mvns	r3, r3
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	4656      	mov	r6, sl
 80074a6:	2700      	movs	r7, #0
 80074a8:	4621      	mov	r1, r4
 80074aa:	4658      	mov	r0, fp
 80074ac:	f000 fbb4 	bl	8007c18 <_Bfree>
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	d0dc      	beq.n	800746e <_dtoa_r+0x65e>
 80074b4:	b12f      	cbz	r7, 80074c2 <_dtoa_r+0x6b2>
 80074b6:	42af      	cmp	r7, r5
 80074b8:	d003      	beq.n	80074c2 <_dtoa_r+0x6b2>
 80074ba:	4639      	mov	r1, r7
 80074bc:	4658      	mov	r0, fp
 80074be:	f000 fbab 	bl	8007c18 <_Bfree>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fba7 	bl	8007c18 <_Bfree>
 80074ca:	e7d0      	b.n	800746e <_dtoa_r+0x65e>
 80074cc:	9704      	str	r7, [sp, #16]
 80074ce:	4633      	mov	r3, r6
 80074d0:	461e      	mov	r6, r3
 80074d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074d6:	2a39      	cmp	r2, #57	@ 0x39
 80074d8:	d107      	bne.n	80074ea <_dtoa_r+0x6da>
 80074da:	459a      	cmp	sl, r3
 80074dc:	d1f8      	bne.n	80074d0 <_dtoa_r+0x6c0>
 80074de:	9a04      	ldr	r2, [sp, #16]
 80074e0:	3201      	adds	r2, #1
 80074e2:	9204      	str	r2, [sp, #16]
 80074e4:	2230      	movs	r2, #48	@ 0x30
 80074e6:	f88a 2000 	strb.w	r2, [sl]
 80074ea:	781a      	ldrb	r2, [r3, #0]
 80074ec:	3201      	adds	r2, #1
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	e7bd      	b.n	800746e <_dtoa_r+0x65e>
 80074f2:	4b7b      	ldr	r3, [pc, #492]	@ (80076e0 <_dtoa_r+0x8d0>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	f7f9 f857 	bl	80005a8 <__aeabi_dmul>
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	460d      	mov	r5, r1
 8007502:	f7f9 fab9 	bl	8000a78 <__aeabi_dcmpeq>
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f aebb 	beq.w	8007282 <_dtoa_r+0x472>
 800750c:	e6f0      	b.n	80072f0 <_dtoa_r+0x4e0>
 800750e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007510:	2a00      	cmp	r2, #0
 8007512:	f000 80db 	beq.w	80076cc <_dtoa_r+0x8bc>
 8007516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007518:	2a01      	cmp	r2, #1
 800751a:	f300 80bf 	bgt.w	800769c <_dtoa_r+0x88c>
 800751e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007520:	2a00      	cmp	r2, #0
 8007522:	f000 80b7 	beq.w	8007694 <_dtoa_r+0x884>
 8007526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800752a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800752c:	4646      	mov	r6, r8
 800752e:	9a08      	ldr	r2, [sp, #32]
 8007530:	2101      	movs	r1, #1
 8007532:	441a      	add	r2, r3
 8007534:	4658      	mov	r0, fp
 8007536:	4498      	add	r8, r3
 8007538:	9208      	str	r2, [sp, #32]
 800753a:	f000 fc6b 	bl	8007e14 <__i2b>
 800753e:	4605      	mov	r5, r0
 8007540:	b15e      	cbz	r6, 800755a <_dtoa_r+0x74a>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dd08      	ble.n	800755a <_dtoa_r+0x74a>
 8007548:	42b3      	cmp	r3, r6
 800754a:	9a08      	ldr	r2, [sp, #32]
 800754c:	bfa8      	it	ge
 800754e:	4633      	movge	r3, r6
 8007550:	eba8 0803 	sub.w	r8, r8, r3
 8007554:	1af6      	subs	r6, r6, r3
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	9308      	str	r3, [sp, #32]
 800755a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755c:	b1f3      	cbz	r3, 800759c <_dtoa_r+0x78c>
 800755e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80b7 	beq.w	80076d4 <_dtoa_r+0x8c4>
 8007566:	b18c      	cbz	r4, 800758c <_dtoa_r+0x77c>
 8007568:	4629      	mov	r1, r5
 800756a:	4622      	mov	r2, r4
 800756c:	4658      	mov	r0, fp
 800756e:	f000 fd11 	bl	8007f94 <__pow5mult>
 8007572:	464a      	mov	r2, r9
 8007574:	4601      	mov	r1, r0
 8007576:	4605      	mov	r5, r0
 8007578:	4658      	mov	r0, fp
 800757a:	f000 fc61 	bl	8007e40 <__multiply>
 800757e:	4649      	mov	r1, r9
 8007580:	9004      	str	r0, [sp, #16]
 8007582:	4658      	mov	r0, fp
 8007584:	f000 fb48 	bl	8007c18 <_Bfree>
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	4699      	mov	r9, r3
 800758c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800758e:	1b1a      	subs	r2, r3, r4
 8007590:	d004      	beq.n	800759c <_dtoa_r+0x78c>
 8007592:	4649      	mov	r1, r9
 8007594:	4658      	mov	r0, fp
 8007596:	f000 fcfd 	bl	8007f94 <__pow5mult>
 800759a:	4681      	mov	r9, r0
 800759c:	2101      	movs	r1, #1
 800759e:	4658      	mov	r0, fp
 80075a0:	f000 fc38 	bl	8007e14 <__i2b>
 80075a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a6:	4604      	mov	r4, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 81cf 	beq.w	800794c <_dtoa_r+0xb3c>
 80075ae:	461a      	mov	r2, r3
 80075b0:	4601      	mov	r1, r0
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fcee 	bl	8007f94 <__pow5mult>
 80075b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	4604      	mov	r4, r0
 80075be:	f300 8095 	bgt.w	80076ec <_dtoa_r+0x8dc>
 80075c2:	9b02      	ldr	r3, [sp, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 8087 	bne.w	80076d8 <_dtoa_r+0x8c8>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 8089 	bne.w	80076e8 <_dtoa_r+0x8d8>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075dc:	0d1b      	lsrs	r3, r3, #20
 80075de:	051b      	lsls	r3, r3, #20
 80075e0:	b12b      	cbz	r3, 80075ee <_dtoa_r+0x7de>
 80075e2:	9b08      	ldr	r3, [sp, #32]
 80075e4:	3301      	adds	r3, #1
 80075e6:	9308      	str	r3, [sp, #32]
 80075e8:	f108 0801 	add.w	r8, r8, #1
 80075ec:	2301      	movs	r3, #1
 80075ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 81b0 	beq.w	8007958 <_dtoa_r+0xb48>
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075fe:	6918      	ldr	r0, [r3, #16]
 8007600:	f000 fbbc 	bl	8007d7c <__hi0bits>
 8007604:	f1c0 0020 	rsb	r0, r0, #32
 8007608:	9b08      	ldr	r3, [sp, #32]
 800760a:	4418      	add	r0, r3
 800760c:	f010 001f 	ands.w	r0, r0, #31
 8007610:	d077      	beq.n	8007702 <_dtoa_r+0x8f2>
 8007612:	f1c0 0320 	rsb	r3, r0, #32
 8007616:	2b04      	cmp	r3, #4
 8007618:	dd6b      	ble.n	80076f2 <_dtoa_r+0x8e2>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	f1c0 001c 	rsb	r0, r0, #28
 8007620:	4403      	add	r3, r0
 8007622:	4480      	add	r8, r0
 8007624:	4406      	add	r6, r0
 8007626:	9308      	str	r3, [sp, #32]
 8007628:	f1b8 0f00 	cmp.w	r8, #0
 800762c:	dd05      	ble.n	800763a <_dtoa_r+0x82a>
 800762e:	4649      	mov	r1, r9
 8007630:	4642      	mov	r2, r8
 8007632:	4658      	mov	r0, fp
 8007634:	f000 fd08 	bl	8008048 <__lshift>
 8007638:	4681      	mov	r9, r0
 800763a:	9b08      	ldr	r3, [sp, #32]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd05      	ble.n	800764c <_dtoa_r+0x83c>
 8007640:	4621      	mov	r1, r4
 8007642:	461a      	mov	r2, r3
 8007644:	4658      	mov	r0, fp
 8007646:	f000 fcff 	bl	8008048 <__lshift>
 800764a:	4604      	mov	r4, r0
 800764c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800764e:	2b00      	cmp	r3, #0
 8007650:	d059      	beq.n	8007706 <_dtoa_r+0x8f6>
 8007652:	4621      	mov	r1, r4
 8007654:	4648      	mov	r0, r9
 8007656:	f000 fd63 	bl	8008120 <__mcmp>
 800765a:	2800      	cmp	r0, #0
 800765c:	da53      	bge.n	8007706 <_dtoa_r+0x8f6>
 800765e:	1e7b      	subs	r3, r7, #1
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	4649      	mov	r1, r9
 8007664:	2300      	movs	r3, #0
 8007666:	220a      	movs	r2, #10
 8007668:	4658      	mov	r0, fp
 800766a:	f000 faf7 	bl	8007c5c <__multadd>
 800766e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007670:	4681      	mov	r9, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8172 	beq.w	800795c <_dtoa_r+0xb4c>
 8007678:	2300      	movs	r3, #0
 800767a:	4629      	mov	r1, r5
 800767c:	220a      	movs	r2, #10
 800767e:	4658      	mov	r0, fp
 8007680:	f000 faec 	bl	8007c5c <__multadd>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	4605      	mov	r5, r0
 800768a:	dc67      	bgt.n	800775c <_dtoa_r+0x94c>
 800768c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768e:	2b02      	cmp	r3, #2
 8007690:	dc41      	bgt.n	8007716 <_dtoa_r+0x906>
 8007692:	e063      	b.n	800775c <_dtoa_r+0x94c>
 8007694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800769a:	e746      	b.n	800752a <_dtoa_r+0x71a>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	1e5c      	subs	r4, r3, #1
 80076a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	bfbf      	itttt	lt
 80076a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076ac:	1ae3      	sublt	r3, r4, r3
 80076ae:	bfb4      	ite	lt
 80076b0:	18d2      	addlt	r2, r2, r3
 80076b2:	1b1c      	subge	r4, r3, r4
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	bfbc      	itt	lt
 80076b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076ba:	2400      	movlt	r4, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfb5      	itete	lt
 80076c0:	eba8 0603 	sublt.w	r6, r8, r3
 80076c4:	9b07      	ldrge	r3, [sp, #28]
 80076c6:	2300      	movlt	r3, #0
 80076c8:	4646      	movge	r6, r8
 80076ca:	e730      	b.n	800752e <_dtoa_r+0x71e>
 80076cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076d0:	4646      	mov	r6, r8
 80076d2:	e735      	b.n	8007540 <_dtoa_r+0x730>
 80076d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076d6:	e75c      	b.n	8007592 <_dtoa_r+0x782>
 80076d8:	2300      	movs	r3, #0
 80076da:	e788      	b.n	80075ee <_dtoa_r+0x7de>
 80076dc:	3fe00000 	.word	0x3fe00000
 80076e0:	40240000 	.word	0x40240000
 80076e4:	40140000 	.word	0x40140000
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	e780      	b.n	80075ee <_dtoa_r+0x7de>
 80076ec:	2300      	movs	r3, #0
 80076ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80076f0:	e782      	b.n	80075f8 <_dtoa_r+0x7e8>
 80076f2:	d099      	beq.n	8007628 <_dtoa_r+0x818>
 80076f4:	9a08      	ldr	r2, [sp, #32]
 80076f6:	331c      	adds	r3, #28
 80076f8:	441a      	add	r2, r3
 80076fa:	4498      	add	r8, r3
 80076fc:	441e      	add	r6, r3
 80076fe:	9208      	str	r2, [sp, #32]
 8007700:	e792      	b.n	8007628 <_dtoa_r+0x818>
 8007702:	4603      	mov	r3, r0
 8007704:	e7f6      	b.n	80076f4 <_dtoa_r+0x8e4>
 8007706:	9b07      	ldr	r3, [sp, #28]
 8007708:	9704      	str	r7, [sp, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dc20      	bgt.n	8007750 <_dtoa_r+0x940>
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007712:	2b02      	cmp	r3, #2
 8007714:	dd1e      	ble.n	8007754 <_dtoa_r+0x944>
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f47f aec0 	bne.w	800749e <_dtoa_r+0x68e>
 800771e:	4621      	mov	r1, r4
 8007720:	2205      	movs	r2, #5
 8007722:	4658      	mov	r0, fp
 8007724:	f000 fa9a 	bl	8007c5c <__multadd>
 8007728:	4601      	mov	r1, r0
 800772a:	4604      	mov	r4, r0
 800772c:	4648      	mov	r0, r9
 800772e:	f000 fcf7 	bl	8008120 <__mcmp>
 8007732:	2800      	cmp	r0, #0
 8007734:	f77f aeb3 	ble.w	800749e <_dtoa_r+0x68e>
 8007738:	4656      	mov	r6, sl
 800773a:	2331      	movs	r3, #49	@ 0x31
 800773c:	f806 3b01 	strb.w	r3, [r6], #1
 8007740:	9b04      	ldr	r3, [sp, #16]
 8007742:	3301      	adds	r3, #1
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	e6ae      	b.n	80074a6 <_dtoa_r+0x696>
 8007748:	9c07      	ldr	r4, [sp, #28]
 800774a:	9704      	str	r7, [sp, #16]
 800774c:	4625      	mov	r5, r4
 800774e:	e7f3      	b.n	8007738 <_dtoa_r+0x928>
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8104 	beq.w	8007964 <_dtoa_r+0xb54>
 800775c:	2e00      	cmp	r6, #0
 800775e:	dd05      	ble.n	800776c <_dtoa_r+0x95c>
 8007760:	4629      	mov	r1, r5
 8007762:	4632      	mov	r2, r6
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fc6f 	bl	8008048 <__lshift>
 800776a:	4605      	mov	r5, r0
 800776c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d05a      	beq.n	8007828 <_dtoa_r+0xa18>
 8007772:	6869      	ldr	r1, [r5, #4]
 8007774:	4658      	mov	r0, fp
 8007776:	f000 fa0f 	bl	8007b98 <_Balloc>
 800777a:	4606      	mov	r6, r0
 800777c:	b928      	cbnz	r0, 800778a <_dtoa_r+0x97a>
 800777e:	4b84      	ldr	r3, [pc, #528]	@ (8007990 <_dtoa_r+0xb80>)
 8007780:	4602      	mov	r2, r0
 8007782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007786:	f7ff bb5a 	b.w	8006e3e <_dtoa_r+0x2e>
 800778a:	692a      	ldr	r2, [r5, #16]
 800778c:	3202      	adds	r2, #2
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	f105 010c 	add.w	r1, r5, #12
 8007794:	300c      	adds	r0, #12
 8007796:	f001 ff75 	bl	8009684 <memcpy>
 800779a:	2201      	movs	r2, #1
 800779c:	4631      	mov	r1, r6
 800779e:	4658      	mov	r0, fp
 80077a0:	f000 fc52 	bl	8008048 <__lshift>
 80077a4:	f10a 0301 	add.w	r3, sl, #1
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	9b00      	ldr	r3, [sp, #0]
 80077ac:	4453      	add	r3, sl
 80077ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	462f      	mov	r7, r5
 80077b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ba:	4605      	mov	r5, r0
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	4621      	mov	r1, r4
 80077c0:	3b01      	subs	r3, #1
 80077c2:	4648      	mov	r0, r9
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	f7ff fa9b 	bl	8006d00 <quorem>
 80077ca:	4639      	mov	r1, r7
 80077cc:	9002      	str	r0, [sp, #8]
 80077ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fca4 	bl	8008120 <__mcmp>
 80077d8:	462a      	mov	r2, r5
 80077da:	9008      	str	r0, [sp, #32]
 80077dc:	4621      	mov	r1, r4
 80077de:	4658      	mov	r0, fp
 80077e0:	f000 fcba 	bl	8008158 <__mdiff>
 80077e4:	68c2      	ldr	r2, [r0, #12]
 80077e6:	4606      	mov	r6, r0
 80077e8:	bb02      	cbnz	r2, 800782c <_dtoa_r+0xa1c>
 80077ea:	4601      	mov	r1, r0
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fc97 	bl	8008120 <__mcmp>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4631      	mov	r1, r6
 80077f6:	4658      	mov	r0, fp
 80077f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077fa:	f000 fa0d 	bl	8007c18 <_Bfree>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007802:	9e07      	ldr	r6, [sp, #28]
 8007804:	ea43 0102 	orr.w	r1, r3, r2
 8007808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800780a:	4319      	orrs	r1, r3
 800780c:	d110      	bne.n	8007830 <_dtoa_r+0xa20>
 800780e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007812:	d029      	beq.n	8007868 <_dtoa_r+0xa58>
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd02      	ble.n	8007820 <_dtoa_r+0xa10>
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007820:	9b00      	ldr	r3, [sp, #0]
 8007822:	f883 8000 	strb.w	r8, [r3]
 8007826:	e63f      	b.n	80074a8 <_dtoa_r+0x698>
 8007828:	4628      	mov	r0, r5
 800782a:	e7bb      	b.n	80077a4 <_dtoa_r+0x994>
 800782c:	2201      	movs	r2, #1
 800782e:	e7e1      	b.n	80077f4 <_dtoa_r+0x9e4>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	db04      	blt.n	8007840 <_dtoa_r+0xa30>
 8007836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007838:	430b      	orrs	r3, r1
 800783a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800783c:	430b      	orrs	r3, r1
 800783e:	d120      	bne.n	8007882 <_dtoa_r+0xa72>
 8007840:	2a00      	cmp	r2, #0
 8007842:	dded      	ble.n	8007820 <_dtoa_r+0xa10>
 8007844:	4649      	mov	r1, r9
 8007846:	2201      	movs	r2, #1
 8007848:	4658      	mov	r0, fp
 800784a:	f000 fbfd 	bl	8008048 <__lshift>
 800784e:	4621      	mov	r1, r4
 8007850:	4681      	mov	r9, r0
 8007852:	f000 fc65 	bl	8008120 <__mcmp>
 8007856:	2800      	cmp	r0, #0
 8007858:	dc03      	bgt.n	8007862 <_dtoa_r+0xa52>
 800785a:	d1e1      	bne.n	8007820 <_dtoa_r+0xa10>
 800785c:	f018 0f01 	tst.w	r8, #1
 8007860:	d0de      	beq.n	8007820 <_dtoa_r+0xa10>
 8007862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007866:	d1d8      	bne.n	800781a <_dtoa_r+0xa0a>
 8007868:	9a00      	ldr	r2, [sp, #0]
 800786a:	2339      	movs	r3, #57	@ 0x39
 800786c:	7013      	strb	r3, [r2, #0]
 800786e:	4633      	mov	r3, r6
 8007870:	461e      	mov	r6, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007878:	2a39      	cmp	r2, #57	@ 0x39
 800787a:	d052      	beq.n	8007922 <_dtoa_r+0xb12>
 800787c:	3201      	adds	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e612      	b.n	80074a8 <_dtoa_r+0x698>
 8007882:	2a00      	cmp	r2, #0
 8007884:	dd07      	ble.n	8007896 <_dtoa_r+0xa86>
 8007886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800788a:	d0ed      	beq.n	8007868 <_dtoa_r+0xa58>
 800788c:	9a00      	ldr	r2, [sp, #0]
 800788e:	f108 0301 	add.w	r3, r8, #1
 8007892:	7013      	strb	r3, [r2, #0]
 8007894:	e608      	b.n	80074a8 <_dtoa_r+0x698>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	9a07      	ldr	r2, [sp, #28]
 800789a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800789e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d028      	beq.n	80078f6 <_dtoa_r+0xae6>
 80078a4:	4649      	mov	r1, r9
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 f9d6 	bl	8007c5c <__multadd>
 80078b0:	42af      	cmp	r7, r5
 80078b2:	4681      	mov	r9, r0
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f04f 020a 	mov.w	r2, #10
 80078bc:	4639      	mov	r1, r7
 80078be:	4658      	mov	r0, fp
 80078c0:	d107      	bne.n	80078d2 <_dtoa_r+0xac2>
 80078c2:	f000 f9cb 	bl	8007c5c <__multadd>
 80078c6:	4607      	mov	r7, r0
 80078c8:	4605      	mov	r5, r0
 80078ca:	9b07      	ldr	r3, [sp, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	e774      	b.n	80077bc <_dtoa_r+0x9ac>
 80078d2:	f000 f9c3 	bl	8007c5c <__multadd>
 80078d6:	4629      	mov	r1, r5
 80078d8:	4607      	mov	r7, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	220a      	movs	r2, #10
 80078de:	4658      	mov	r0, fp
 80078e0:	f000 f9bc 	bl	8007c5c <__multadd>
 80078e4:	4605      	mov	r5, r0
 80078e6:	e7f0      	b.n	80078ca <_dtoa_r+0xaba>
 80078e8:	9b00      	ldr	r3, [sp, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfcc      	ite	gt
 80078ee:	461e      	movgt	r6, r3
 80078f0:	2601      	movle	r6, #1
 80078f2:	4456      	add	r6, sl
 80078f4:	2700      	movs	r7, #0
 80078f6:	4649      	mov	r1, r9
 80078f8:	2201      	movs	r2, #1
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fba4 	bl	8008048 <__lshift>
 8007900:	4621      	mov	r1, r4
 8007902:	4681      	mov	r9, r0
 8007904:	f000 fc0c 	bl	8008120 <__mcmp>
 8007908:	2800      	cmp	r0, #0
 800790a:	dcb0      	bgt.n	800786e <_dtoa_r+0xa5e>
 800790c:	d102      	bne.n	8007914 <_dtoa_r+0xb04>
 800790e:	f018 0f01 	tst.w	r8, #1
 8007912:	d1ac      	bne.n	800786e <_dtoa_r+0xa5e>
 8007914:	4633      	mov	r3, r6
 8007916:	461e      	mov	r6, r3
 8007918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800791c:	2a30      	cmp	r2, #48	@ 0x30
 800791e:	d0fa      	beq.n	8007916 <_dtoa_r+0xb06>
 8007920:	e5c2      	b.n	80074a8 <_dtoa_r+0x698>
 8007922:	459a      	cmp	sl, r3
 8007924:	d1a4      	bne.n	8007870 <_dtoa_r+0xa60>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	2331      	movs	r3, #49	@ 0x31
 800792e:	f88a 3000 	strb.w	r3, [sl]
 8007932:	e5b9      	b.n	80074a8 <_dtoa_r+0x698>
 8007934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007994 <_dtoa_r+0xb84>
 800793a:	b11b      	cbz	r3, 8007944 <_dtoa_r+0xb34>
 800793c:	f10a 0308 	add.w	r3, sl, #8
 8007940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	4650      	mov	r0, sl
 8007946:	b019      	add	sp, #100	@ 0x64
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794e:	2b01      	cmp	r3, #1
 8007950:	f77f ae37 	ble.w	80075c2 <_dtoa_r+0x7b2>
 8007954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007956:	930a      	str	r3, [sp, #40]	@ 0x28
 8007958:	2001      	movs	r0, #1
 800795a:	e655      	b.n	8007608 <_dtoa_r+0x7f8>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f77f aed6 	ble.w	8007710 <_dtoa_r+0x900>
 8007964:	4656      	mov	r6, sl
 8007966:	4621      	mov	r1, r4
 8007968:	4648      	mov	r0, r9
 800796a:	f7ff f9c9 	bl	8006d00 <quorem>
 800796e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007972:	f806 8b01 	strb.w	r8, [r6], #1
 8007976:	9b00      	ldr	r3, [sp, #0]
 8007978:	eba6 020a 	sub.w	r2, r6, sl
 800797c:	4293      	cmp	r3, r2
 800797e:	ddb3      	ble.n	80078e8 <_dtoa_r+0xad8>
 8007980:	4649      	mov	r1, r9
 8007982:	2300      	movs	r3, #0
 8007984:	220a      	movs	r2, #10
 8007986:	4658      	mov	r0, fp
 8007988:	f000 f968 	bl	8007c5c <__multadd>
 800798c:	4681      	mov	r9, r0
 800798e:	e7ea      	b.n	8007966 <_dtoa_r+0xb56>
 8007990:	0800a5a5 	.word	0x0800a5a5
 8007994:	0800a529 	.word	0x0800a529

08007998 <_free_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4605      	mov	r5, r0
 800799c:	2900      	cmp	r1, #0
 800799e:	d041      	beq.n	8007a24 <_free_r+0x8c>
 80079a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a4:	1f0c      	subs	r4, r1, #4
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bfb8      	it	lt
 80079aa:	18e4      	addlt	r4, r4, r3
 80079ac:	f000 f8e8 	bl	8007b80 <__malloc_lock>
 80079b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <_free_r+0x90>)
 80079b2:	6813      	ldr	r3, [r2, #0]
 80079b4:	b933      	cbnz	r3, 80079c4 <_free_r+0x2c>
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	6014      	str	r4, [r2, #0]
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c0:	f000 b8e4 	b.w	8007b8c <__malloc_unlock>
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d908      	bls.n	80079da <_free_r+0x42>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	1821      	adds	r1, r4, r0
 80079cc:	428b      	cmp	r3, r1
 80079ce:	bf01      	itttt	eq
 80079d0:	6819      	ldreq	r1, [r3, #0]
 80079d2:	685b      	ldreq	r3, [r3, #4]
 80079d4:	1809      	addeq	r1, r1, r0
 80079d6:	6021      	streq	r1, [r4, #0]
 80079d8:	e7ed      	b.n	80079b6 <_free_r+0x1e>
 80079da:	461a      	mov	r2, r3
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b10b      	cbz	r3, 80079e4 <_free_r+0x4c>
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d9fa      	bls.n	80079da <_free_r+0x42>
 80079e4:	6811      	ldr	r1, [r2, #0]
 80079e6:	1850      	adds	r0, r2, r1
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d10b      	bne.n	8007a04 <_free_r+0x6c>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	4401      	add	r1, r0
 80079f0:	1850      	adds	r0, r2, r1
 80079f2:	4283      	cmp	r3, r0
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	d1e0      	bne.n	80079ba <_free_r+0x22>
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6053      	str	r3, [r2, #4]
 80079fe:	4408      	add	r0, r1
 8007a00:	6010      	str	r0, [r2, #0]
 8007a02:	e7da      	b.n	80079ba <_free_r+0x22>
 8007a04:	d902      	bls.n	8007a0c <_free_r+0x74>
 8007a06:	230c      	movs	r3, #12
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	e7d6      	b.n	80079ba <_free_r+0x22>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	1821      	adds	r1, r4, r0
 8007a10:	428b      	cmp	r3, r1
 8007a12:	bf04      	itt	eq
 8007a14:	6819      	ldreq	r1, [r3, #0]
 8007a16:	685b      	ldreq	r3, [r3, #4]
 8007a18:	6063      	str	r3, [r4, #4]
 8007a1a:	bf04      	itt	eq
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	6054      	str	r4, [r2, #4]
 8007a22:	e7ca      	b.n	80079ba <_free_r+0x22>
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
 8007a26:	bf00      	nop
 8007a28:	20000b0c 	.word	0x20000b0c

08007a2c <malloc>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	@ (8007a38 <malloc+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f000 b825 	b.w	8007a80 <_malloc_r>
 8007a36:	bf00      	nop
 8007a38:	2000001c 	.word	0x2000001c

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a7c <sbrk_aligned+0x40>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f001 fe0c 	bl	8009664 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f001 fe07 	bl	8009664 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d103      	bne.n	8007a62 <sbrk_aligned+0x26>
 8007a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a5e:	4620      	mov	r0, r4
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	1cc4      	adds	r4, r0, #3
 8007a64:	f024 0403 	bic.w	r4, r4, #3
 8007a68:	42a0      	cmp	r0, r4
 8007a6a:	d0f8      	beq.n	8007a5e <sbrk_aligned+0x22>
 8007a6c:	1a21      	subs	r1, r4, r0
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f001 fdf8 	bl	8009664 <_sbrk_r>
 8007a74:	3001      	adds	r0, #1
 8007a76:	d1f2      	bne.n	8007a5e <sbrk_aligned+0x22>
 8007a78:	e7ef      	b.n	8007a5a <sbrk_aligned+0x1e>
 8007a7a:	bf00      	nop
 8007a7c:	20000b08 	.word	0x20000b08

08007a80 <_malloc_r>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	1ccd      	adds	r5, r1, #3
 8007a86:	f025 0503 	bic.w	r5, r5, #3
 8007a8a:	3508      	adds	r5, #8
 8007a8c:	2d0c      	cmp	r5, #12
 8007a8e:	bf38      	it	cc
 8007a90:	250c      	movcc	r5, #12
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	4606      	mov	r6, r0
 8007a96:	db01      	blt.n	8007a9c <_malloc_r+0x1c>
 8007a98:	42a9      	cmp	r1, r5
 8007a9a:	d904      	bls.n	8007aa6 <_malloc_r+0x26>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b7c <_malloc_r+0xfc>
 8007aaa:	f000 f869 	bl	8007b80 <__malloc_lock>
 8007aae:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab2:	461c      	mov	r4, r3
 8007ab4:	bb44      	cbnz	r4, 8007b08 <_malloc_r+0x88>
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff ffbf 	bl	8007a3c <sbrk_aligned>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	d158      	bne.n	8007b76 <_malloc_r+0xf6>
 8007ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac8:	4627      	mov	r7, r4
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d143      	bne.n	8007b56 <_malloc_r+0xd6>
 8007ace:	2c00      	cmp	r4, #0
 8007ad0:	d04b      	beq.n	8007b6a <_malloc_r+0xea>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	eb04 0903 	add.w	r9, r4, r3
 8007adc:	f001 fdc2 	bl	8009664 <_sbrk_r>
 8007ae0:	4581      	cmp	r9, r0
 8007ae2:	d142      	bne.n	8007b6a <_malloc_r+0xea>
 8007ae4:	6821      	ldr	r1, [r4, #0]
 8007ae6:	1a6d      	subs	r5, r5, r1
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f7ff ffa6 	bl	8007a3c <sbrk_aligned>
 8007af0:	3001      	adds	r0, #1
 8007af2:	d03a      	beq.n	8007b6a <_malloc_r+0xea>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	442b      	add	r3, r5
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	f8d8 3000 	ldr.w	r3, [r8]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	bb62      	cbnz	r2, 8007b5c <_malloc_r+0xdc>
 8007b02:	f8c8 7000 	str.w	r7, [r8]
 8007b06:	e00f      	b.n	8007b28 <_malloc_r+0xa8>
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	1b52      	subs	r2, r2, r5
 8007b0c:	d420      	bmi.n	8007b50 <_malloc_r+0xd0>
 8007b0e:	2a0b      	cmp	r2, #11
 8007b10:	d917      	bls.n	8007b42 <_malloc_r+0xc2>
 8007b12:	1961      	adds	r1, r4, r5
 8007b14:	42a3      	cmp	r3, r4
 8007b16:	6025      	str	r5, [r4, #0]
 8007b18:	bf18      	it	ne
 8007b1a:	6059      	strne	r1, [r3, #4]
 8007b1c:	6863      	ldr	r3, [r4, #4]
 8007b1e:	bf08      	it	eq
 8007b20:	f8c8 1000 	streq.w	r1, [r8]
 8007b24:	5162      	str	r2, [r4, r5]
 8007b26:	604b      	str	r3, [r1, #4]
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f000 f82f 	bl	8007b8c <__malloc_unlock>
 8007b2e:	f104 000b 	add.w	r0, r4, #11
 8007b32:	1d23      	adds	r3, r4, #4
 8007b34:	f020 0007 	bic.w	r0, r0, #7
 8007b38:	1ac2      	subs	r2, r0, r3
 8007b3a:	bf1c      	itt	ne
 8007b3c:	1a1b      	subne	r3, r3, r0
 8007b3e:	50a3      	strne	r3, [r4, r2]
 8007b40:	e7af      	b.n	8007aa2 <_malloc_r+0x22>
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	bf0c      	ite	eq
 8007b48:	f8c8 2000 	streq.w	r2, [r8]
 8007b4c:	605a      	strne	r2, [r3, #4]
 8007b4e:	e7eb      	b.n	8007b28 <_malloc_r+0xa8>
 8007b50:	4623      	mov	r3, r4
 8007b52:	6864      	ldr	r4, [r4, #4]
 8007b54:	e7ae      	b.n	8007ab4 <_malloc_r+0x34>
 8007b56:	463c      	mov	r4, r7
 8007b58:	687f      	ldr	r7, [r7, #4]
 8007b5a:	e7b6      	b.n	8007aca <_malloc_r+0x4a>
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d1fb      	bne.n	8007b5c <_malloc_r+0xdc>
 8007b64:	2300      	movs	r3, #0
 8007b66:	6053      	str	r3, [r2, #4]
 8007b68:	e7de      	b.n	8007b28 <_malloc_r+0xa8>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	6033      	str	r3, [r6, #0]
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f000 f80c 	bl	8007b8c <__malloc_unlock>
 8007b74:	e794      	b.n	8007aa0 <_malloc_r+0x20>
 8007b76:	6005      	str	r5, [r0, #0]
 8007b78:	e7d6      	b.n	8007b28 <_malloc_r+0xa8>
 8007b7a:	bf00      	nop
 8007b7c:	20000b0c 	.word	0x20000b0c

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	@ (8007b88 <__malloc_lock+0x8>)
 8007b82:	f7ff b8b4 	b.w	8006cee <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000b04 	.word	0x20000b04

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	@ (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f7ff b8af 	b.w	8006cf0 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20000b04 	.word	0x20000b04

08007b98 <_Balloc>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	69c6      	ldr	r6, [r0, #28]
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	460d      	mov	r5, r1
 8007ba0:	b976      	cbnz	r6, 8007bc0 <_Balloc+0x28>
 8007ba2:	2010      	movs	r0, #16
 8007ba4:	f7ff ff42 	bl	8007a2c <malloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	61e0      	str	r0, [r4, #28]
 8007bac:	b920      	cbnz	r0, 8007bb8 <_Balloc+0x20>
 8007bae:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <_Balloc+0x78>)
 8007bb0:	4818      	ldr	r0, [pc, #96]	@ (8007c14 <_Balloc+0x7c>)
 8007bb2:	216b      	movs	r1, #107	@ 0x6b
 8007bb4:	f001 fd7c 	bl	80096b0 <__assert_func>
 8007bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bbc:	6006      	str	r6, [r0, #0]
 8007bbe:	60c6      	str	r6, [r0, #12]
 8007bc0:	69e6      	ldr	r6, [r4, #28]
 8007bc2:	68f3      	ldr	r3, [r6, #12]
 8007bc4:	b183      	cbz	r3, 8007be8 <_Balloc+0x50>
 8007bc6:	69e3      	ldr	r3, [r4, #28]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bce:	b9b8      	cbnz	r0, 8007c00 <_Balloc+0x68>
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8007bd6:	1d72      	adds	r2, r6, #5
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f001 fd86 	bl	80096ec <_calloc_r>
 8007be0:	b160      	cbz	r0, 8007bfc <_Balloc+0x64>
 8007be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007be6:	e00e      	b.n	8007c06 <_Balloc+0x6e>
 8007be8:	2221      	movs	r2, #33	@ 0x21
 8007bea:	2104      	movs	r1, #4
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 fd7d 	bl	80096ec <_calloc_r>
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	60f0      	str	r0, [r6, #12]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e4      	bne.n	8007bc6 <_Balloc+0x2e>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	6802      	ldr	r2, [r0, #0]
 8007c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c06:	2300      	movs	r3, #0
 8007c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c0c:	e7f7      	b.n	8007bfe <_Balloc+0x66>
 8007c0e:	bf00      	nop
 8007c10:	0800a536 	.word	0x0800a536
 8007c14:	0800a5b6 	.word	0x0800a5b6

08007c18 <_Bfree>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	69c6      	ldr	r6, [r0, #28]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b976      	cbnz	r6, 8007c40 <_Bfree+0x28>
 8007c22:	2010      	movs	r0, #16
 8007c24:	f7ff ff02 	bl	8007a2c <malloc>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	61e8      	str	r0, [r5, #28]
 8007c2c:	b920      	cbnz	r0, 8007c38 <_Bfree+0x20>
 8007c2e:	4b09      	ldr	r3, [pc, #36]	@ (8007c54 <_Bfree+0x3c>)
 8007c30:	4809      	ldr	r0, [pc, #36]	@ (8007c58 <_Bfree+0x40>)
 8007c32:	218f      	movs	r1, #143	@ 0x8f
 8007c34:	f001 fd3c 	bl	80096b0 <__assert_func>
 8007c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c3c:	6006      	str	r6, [r0, #0]
 8007c3e:	60c6      	str	r6, [r0, #12]
 8007c40:	b13c      	cbz	r4, 8007c52 <_Bfree+0x3a>
 8007c42:	69eb      	ldr	r3, [r5, #28]
 8007c44:	6862      	ldr	r2, [r4, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c4c:	6021      	str	r1, [r4, #0]
 8007c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c52:	bd70      	pop	{r4, r5, r6, pc}
 8007c54:	0800a536 	.word	0x0800a536
 8007c58:	0800a5b6 	.word	0x0800a5b6

08007c5c <__multadd>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	690d      	ldr	r5, [r1, #16]
 8007c62:	4607      	mov	r7, r0
 8007c64:	460c      	mov	r4, r1
 8007c66:	461e      	mov	r6, r3
 8007c68:	f101 0c14 	add.w	ip, r1, #20
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c72:	b299      	uxth	r1, r3
 8007c74:	fb02 6101 	mla	r1, r2, r1, r6
 8007c78:	0c1e      	lsrs	r6, r3, #16
 8007c7a:	0c0b      	lsrs	r3, r1, #16
 8007c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c80:	b289      	uxth	r1, r1
 8007c82:	3001      	adds	r0, #1
 8007c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c88:	4285      	cmp	r5, r0
 8007c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c92:	dcec      	bgt.n	8007c6e <__multadd+0x12>
 8007c94:	b30e      	cbz	r6, 8007cda <__multadd+0x7e>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	42ab      	cmp	r3, r5
 8007c9a:	dc19      	bgt.n	8007cd0 <__multadd+0x74>
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	3101      	adds	r1, #1
 8007ca2:	f7ff ff79 	bl	8007b98 <_Balloc>
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	b928      	cbnz	r0, 8007cb6 <__multadd+0x5a>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <__multadd+0x84>)
 8007cae:	480d      	ldr	r0, [pc, #52]	@ (8007ce4 <__multadd+0x88>)
 8007cb0:	21ba      	movs	r1, #186	@ 0xba
 8007cb2:	f001 fcfd 	bl	80096b0 <__assert_func>
 8007cb6:	6922      	ldr	r2, [r4, #16]
 8007cb8:	3202      	adds	r2, #2
 8007cba:	f104 010c 	add.w	r1, r4, #12
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f001 fcdf 	bl	8009684 <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ffa5 	bl	8007c18 <_Bfree>
 8007cce:	4644      	mov	r4, r8
 8007cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	615e      	str	r6, [r3, #20]
 8007cd8:	6125      	str	r5, [r4, #16]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	0800a5a5 	.word	0x0800a5a5
 8007ce4:	0800a5b6 	.word	0x0800a5b6

08007ce8 <__s2b>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	460c      	mov	r4, r1
 8007cee:	4615      	mov	r5, r2
 8007cf0:	461f      	mov	r7, r3
 8007cf2:	2209      	movs	r2, #9
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	2201      	movs	r2, #1
 8007d00:	429a      	cmp	r2, r3
 8007d02:	db09      	blt.n	8007d18 <__s2b+0x30>
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7ff ff47 	bl	8007b98 <_Balloc>
 8007d0a:	b940      	cbnz	r0, 8007d1e <__s2b+0x36>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4b19      	ldr	r3, [pc, #100]	@ (8007d74 <__s2b+0x8c>)
 8007d10:	4819      	ldr	r0, [pc, #100]	@ (8007d78 <__s2b+0x90>)
 8007d12:	21d3      	movs	r1, #211	@ 0xd3
 8007d14:	f001 fccc 	bl	80096b0 <__assert_func>
 8007d18:	0052      	lsls	r2, r2, #1
 8007d1a:	3101      	adds	r1, #1
 8007d1c:	e7f0      	b.n	8007d00 <__s2b+0x18>
 8007d1e:	9b08      	ldr	r3, [sp, #32]
 8007d20:	6143      	str	r3, [r0, #20]
 8007d22:	2d09      	cmp	r5, #9
 8007d24:	f04f 0301 	mov.w	r3, #1
 8007d28:	6103      	str	r3, [r0, #16]
 8007d2a:	dd16      	ble.n	8007d5a <__s2b+0x72>
 8007d2c:	f104 0909 	add.w	r9, r4, #9
 8007d30:	46c8      	mov	r8, r9
 8007d32:	442c      	add	r4, r5
 8007d34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d38:	4601      	mov	r1, r0
 8007d3a:	3b30      	subs	r3, #48	@ 0x30
 8007d3c:	220a      	movs	r2, #10
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff8c 	bl	8007c5c <__multadd>
 8007d44:	45a0      	cmp	r8, r4
 8007d46:	d1f5      	bne.n	8007d34 <__s2b+0x4c>
 8007d48:	f1a5 0408 	sub.w	r4, r5, #8
 8007d4c:	444c      	add	r4, r9
 8007d4e:	1b2d      	subs	r5, r5, r4
 8007d50:	1963      	adds	r3, r4, r5
 8007d52:	42bb      	cmp	r3, r7
 8007d54:	db04      	blt.n	8007d60 <__s2b+0x78>
 8007d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5a:	340a      	adds	r4, #10
 8007d5c:	2509      	movs	r5, #9
 8007d5e:	e7f6      	b.n	8007d4e <__s2b+0x66>
 8007d60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d64:	4601      	mov	r1, r0
 8007d66:	3b30      	subs	r3, #48	@ 0x30
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff76 	bl	8007c5c <__multadd>
 8007d70:	e7ee      	b.n	8007d50 <__s2b+0x68>
 8007d72:	bf00      	nop
 8007d74:	0800a5a5 	.word	0x0800a5a5
 8007d78:	0800a5b6 	.word	0x0800a5b6

08007d7c <__hi0bits>:
 8007d7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d80:	4603      	mov	r3, r0
 8007d82:	bf36      	itet	cc
 8007d84:	0403      	lslcc	r3, r0, #16
 8007d86:	2000      	movcs	r0, #0
 8007d88:	2010      	movcc	r0, #16
 8007d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d8e:	bf3c      	itt	cc
 8007d90:	021b      	lslcc	r3, r3, #8
 8007d92:	3008      	addcc	r0, #8
 8007d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d98:	bf3c      	itt	cc
 8007d9a:	011b      	lslcc	r3, r3, #4
 8007d9c:	3004      	addcc	r0, #4
 8007d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da2:	bf3c      	itt	cc
 8007da4:	009b      	lslcc	r3, r3, #2
 8007da6:	3002      	addcc	r0, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	db05      	blt.n	8007db8 <__hi0bits+0x3c>
 8007dac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007db0:	f100 0001 	add.w	r0, r0, #1
 8007db4:	bf08      	it	eq
 8007db6:	2020      	moveq	r0, #32
 8007db8:	4770      	bx	lr

08007dba <__lo0bits>:
 8007dba:	6803      	ldr	r3, [r0, #0]
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	f013 0007 	ands.w	r0, r3, #7
 8007dc2:	d00b      	beq.n	8007ddc <__lo0bits+0x22>
 8007dc4:	07d9      	lsls	r1, r3, #31
 8007dc6:	d421      	bmi.n	8007e0c <__lo0bits+0x52>
 8007dc8:	0798      	lsls	r0, r3, #30
 8007dca:	bf49      	itett	mi
 8007dcc:	085b      	lsrmi	r3, r3, #1
 8007dce:	089b      	lsrpl	r3, r3, #2
 8007dd0:	2001      	movmi	r0, #1
 8007dd2:	6013      	strmi	r3, [r2, #0]
 8007dd4:	bf5c      	itt	pl
 8007dd6:	6013      	strpl	r3, [r2, #0]
 8007dd8:	2002      	movpl	r0, #2
 8007dda:	4770      	bx	lr
 8007ddc:	b299      	uxth	r1, r3
 8007dde:	b909      	cbnz	r1, 8007de4 <__lo0bits+0x2a>
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	2010      	movs	r0, #16
 8007de4:	b2d9      	uxtb	r1, r3
 8007de6:	b909      	cbnz	r1, 8007dec <__lo0bits+0x32>
 8007de8:	3008      	adds	r0, #8
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	0719      	lsls	r1, r3, #28
 8007dee:	bf04      	itt	eq
 8007df0:	091b      	lsreq	r3, r3, #4
 8007df2:	3004      	addeq	r0, #4
 8007df4:	0799      	lsls	r1, r3, #30
 8007df6:	bf04      	itt	eq
 8007df8:	089b      	lsreq	r3, r3, #2
 8007dfa:	3002      	addeq	r0, #2
 8007dfc:	07d9      	lsls	r1, r3, #31
 8007dfe:	d403      	bmi.n	8007e08 <__lo0bits+0x4e>
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	f100 0001 	add.w	r0, r0, #1
 8007e06:	d003      	beq.n	8007e10 <__lo0bits+0x56>
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	4770      	bx	lr
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	4770      	bx	lr
 8007e10:	2020      	movs	r0, #32
 8007e12:	4770      	bx	lr

08007e14 <__i2b>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f7ff febd 	bl	8007b98 <_Balloc>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	b928      	cbnz	r0, 8007e2e <__i2b+0x1a>
 8007e22:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <__i2b+0x24>)
 8007e24:	4805      	ldr	r0, [pc, #20]	@ (8007e3c <__i2b+0x28>)
 8007e26:	f240 1145 	movw	r1, #325	@ 0x145
 8007e2a:	f001 fc41 	bl	80096b0 <__assert_func>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	6144      	str	r4, [r0, #20]
 8007e32:	6103      	str	r3, [r0, #16]
 8007e34:	bd10      	pop	{r4, pc}
 8007e36:	bf00      	nop
 8007e38:	0800a5a5 	.word	0x0800a5a5
 8007e3c:	0800a5b6 	.word	0x0800a5b6

08007e40 <__multiply>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4614      	mov	r4, r2
 8007e46:	690a      	ldr	r2, [r1, #16]
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	bfa8      	it	ge
 8007e4e:	4623      	movge	r3, r4
 8007e50:	460f      	mov	r7, r1
 8007e52:	bfa4      	itt	ge
 8007e54:	460c      	movge	r4, r1
 8007e56:	461f      	movge	r7, r3
 8007e58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e60:	68a3      	ldr	r3, [r4, #8]
 8007e62:	6861      	ldr	r1, [r4, #4]
 8007e64:	eb0a 0609 	add.w	r6, sl, r9
 8007e68:	42b3      	cmp	r3, r6
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	bfb8      	it	lt
 8007e6e:	3101      	addlt	r1, #1
 8007e70:	f7ff fe92 	bl	8007b98 <_Balloc>
 8007e74:	b930      	cbnz	r0, 8007e84 <__multiply+0x44>
 8007e76:	4602      	mov	r2, r0
 8007e78:	4b44      	ldr	r3, [pc, #272]	@ (8007f8c <__multiply+0x14c>)
 8007e7a:	4845      	ldr	r0, [pc, #276]	@ (8007f90 <__multiply+0x150>)
 8007e7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e80:	f001 fc16 	bl	80096b0 <__assert_func>
 8007e84:	f100 0514 	add.w	r5, r0, #20
 8007e88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4543      	cmp	r3, r8
 8007e92:	d321      	bcc.n	8007ed8 <__multiply+0x98>
 8007e94:	f107 0114 	add.w	r1, r7, #20
 8007e98:	f104 0214 	add.w	r2, r4, #20
 8007e9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ea0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	1b13      	subs	r3, r2, r4
 8007ea8:	3b15      	subs	r3, #21
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	3304      	adds	r3, #4
 8007eb0:	f104 0715 	add.w	r7, r4, #21
 8007eb4:	42ba      	cmp	r2, r7
 8007eb6:	bf38      	it	cc
 8007eb8:	2304      	movcc	r3, #4
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	9103      	str	r1, [sp, #12]
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	d80c      	bhi.n	8007ede <__multiply+0x9e>
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	dd03      	ble.n	8007ed0 <__multiply+0x90>
 8007ec8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d05b      	beq.n	8007f88 <__multiply+0x148>
 8007ed0:	6106      	str	r6, [r0, #16]
 8007ed2:	b005      	add	sp, #20
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	f843 2b04 	str.w	r2, [r3], #4
 8007edc:	e7d8      	b.n	8007e90 <__multiply+0x50>
 8007ede:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ee2:	f1ba 0f00 	cmp.w	sl, #0
 8007ee6:	d024      	beq.n	8007f32 <__multiply+0xf2>
 8007ee8:	f104 0e14 	add.w	lr, r4, #20
 8007eec:	46a9      	mov	r9, r5
 8007eee:	f04f 0c00 	mov.w	ip, #0
 8007ef2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ef6:	f8d9 3000 	ldr.w	r3, [r9]
 8007efa:	fa1f fb87 	uxth.w	fp, r7
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f08:	f8d9 7000 	ldr.w	r7, [r9]
 8007f0c:	4463      	add	r3, ip
 8007f0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f12:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f20:	4572      	cmp	r2, lr
 8007f22:	f849 3b04 	str.w	r3, [r9], #4
 8007f26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f2a:	d8e2      	bhi.n	8007ef2 <__multiply+0xb2>
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	f845 c003 	str.w	ip, [r5, r3]
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f38:	3104      	adds	r1, #4
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	d021      	beq.n	8007f84 <__multiply+0x144>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	f104 0c14 	add.w	ip, r4, #20
 8007f46:	46ae      	mov	lr, r5
 8007f48:	f04f 0a00 	mov.w	sl, #0
 8007f4c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f54:	fb09 770b 	mla	r7, r9, fp, r7
 8007f58:	4457      	add	r7, sl
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f60:	f84e 3b04 	str.w	r3, [lr], #4
 8007f64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f6c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f70:	fb09 330a 	mla	r3, r9, sl, r3
 8007f74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f78:	4562      	cmp	r2, ip
 8007f7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f7e:	d8e5      	bhi.n	8007f4c <__multiply+0x10c>
 8007f80:	9f01      	ldr	r7, [sp, #4]
 8007f82:	51eb      	str	r3, [r5, r7]
 8007f84:	3504      	adds	r5, #4
 8007f86:	e799      	b.n	8007ebc <__multiply+0x7c>
 8007f88:	3e01      	subs	r6, #1
 8007f8a:	e79b      	b.n	8007ec4 <__multiply+0x84>
 8007f8c:	0800a5a5 	.word	0x0800a5a5
 8007f90:	0800a5b6 	.word	0x0800a5b6

08007f94 <__pow5mult>:
 8007f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	4615      	mov	r5, r2
 8007f9a:	f012 0203 	ands.w	r2, r2, #3
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	460e      	mov	r6, r1
 8007fa2:	d007      	beq.n	8007fb4 <__pow5mult+0x20>
 8007fa4:	4c25      	ldr	r4, [pc, #148]	@ (800803c <__pow5mult+0xa8>)
 8007fa6:	3a01      	subs	r2, #1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fae:	f7ff fe55 	bl	8007c5c <__multadd>
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	10ad      	asrs	r5, r5, #2
 8007fb6:	d03d      	beq.n	8008034 <__pow5mult+0xa0>
 8007fb8:	69fc      	ldr	r4, [r7, #28]
 8007fba:	b97c      	cbnz	r4, 8007fdc <__pow5mult+0x48>
 8007fbc:	2010      	movs	r0, #16
 8007fbe:	f7ff fd35 	bl	8007a2c <malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	61f8      	str	r0, [r7, #28]
 8007fc6:	b928      	cbnz	r0, 8007fd4 <__pow5mult+0x40>
 8007fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8008040 <__pow5mult+0xac>)
 8007fca:	481e      	ldr	r0, [pc, #120]	@ (8008044 <__pow5mult+0xb0>)
 8007fcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fd0:	f001 fb6e 	bl	80096b0 <__assert_func>
 8007fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fd8:	6004      	str	r4, [r0, #0]
 8007fda:	60c4      	str	r4, [r0, #12]
 8007fdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fe4:	b94c      	cbnz	r4, 8007ffa <__pow5mult+0x66>
 8007fe6:	f240 2171 	movw	r1, #625	@ 0x271
 8007fea:	4638      	mov	r0, r7
 8007fec:	f7ff ff12 	bl	8007e14 <__i2b>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	6003      	str	r3, [r0, #0]
 8007ffa:	f04f 0900 	mov.w	r9, #0
 8007ffe:	07eb      	lsls	r3, r5, #31
 8008000:	d50a      	bpl.n	8008018 <__pow5mult+0x84>
 8008002:	4631      	mov	r1, r6
 8008004:	4622      	mov	r2, r4
 8008006:	4638      	mov	r0, r7
 8008008:	f7ff ff1a 	bl	8007e40 <__multiply>
 800800c:	4631      	mov	r1, r6
 800800e:	4680      	mov	r8, r0
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff fe01 	bl	8007c18 <_Bfree>
 8008016:	4646      	mov	r6, r8
 8008018:	106d      	asrs	r5, r5, #1
 800801a:	d00b      	beq.n	8008034 <__pow5mult+0xa0>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	b938      	cbnz	r0, 8008030 <__pow5mult+0x9c>
 8008020:	4622      	mov	r2, r4
 8008022:	4621      	mov	r1, r4
 8008024:	4638      	mov	r0, r7
 8008026:	f7ff ff0b 	bl	8007e40 <__multiply>
 800802a:	6020      	str	r0, [r4, #0]
 800802c:	f8c0 9000 	str.w	r9, [r0]
 8008030:	4604      	mov	r4, r0
 8008032:	e7e4      	b.n	8007ffe <__pow5mult+0x6a>
 8008034:	4630      	mov	r0, r6
 8008036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803a:	bf00      	nop
 800803c:	0800a610 	.word	0x0800a610
 8008040:	0800a536 	.word	0x0800a536
 8008044:	0800a5b6 	.word	0x0800a5b6

08008048 <__lshift>:
 8008048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	460c      	mov	r4, r1
 800804e:	6849      	ldr	r1, [r1, #4]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	4607      	mov	r7, r0
 800805a:	4691      	mov	r9, r2
 800805c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008060:	f108 0601 	add.w	r6, r8, #1
 8008064:	42b3      	cmp	r3, r6
 8008066:	db0b      	blt.n	8008080 <__lshift+0x38>
 8008068:	4638      	mov	r0, r7
 800806a:	f7ff fd95 	bl	8007b98 <_Balloc>
 800806e:	4605      	mov	r5, r0
 8008070:	b948      	cbnz	r0, 8008086 <__lshift+0x3e>
 8008072:	4602      	mov	r2, r0
 8008074:	4b28      	ldr	r3, [pc, #160]	@ (8008118 <__lshift+0xd0>)
 8008076:	4829      	ldr	r0, [pc, #164]	@ (800811c <__lshift+0xd4>)
 8008078:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800807c:	f001 fb18 	bl	80096b0 <__assert_func>
 8008080:	3101      	adds	r1, #1
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	e7ee      	b.n	8008064 <__lshift+0x1c>
 8008086:	2300      	movs	r3, #0
 8008088:	f100 0114 	add.w	r1, r0, #20
 800808c:	f100 0210 	add.w	r2, r0, #16
 8008090:	4618      	mov	r0, r3
 8008092:	4553      	cmp	r3, sl
 8008094:	db33      	blt.n	80080fe <__lshift+0xb6>
 8008096:	6920      	ldr	r0, [r4, #16]
 8008098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800809c:	f104 0314 	add.w	r3, r4, #20
 80080a0:	f019 091f 	ands.w	r9, r9, #31
 80080a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080ac:	d02b      	beq.n	8008106 <__lshift+0xbe>
 80080ae:	f1c9 0e20 	rsb	lr, r9, #32
 80080b2:	468a      	mov	sl, r1
 80080b4:	2200      	movs	r2, #0
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	fa00 f009 	lsl.w	r0, r0, r9
 80080bc:	4310      	orrs	r0, r2
 80080be:	f84a 0b04 	str.w	r0, [sl], #4
 80080c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c6:	459c      	cmp	ip, r3
 80080c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080cc:	d8f3      	bhi.n	80080b6 <__lshift+0x6e>
 80080ce:	ebac 0304 	sub.w	r3, ip, r4
 80080d2:	3b15      	subs	r3, #21
 80080d4:	f023 0303 	bic.w	r3, r3, #3
 80080d8:	3304      	adds	r3, #4
 80080da:	f104 0015 	add.w	r0, r4, #21
 80080de:	4584      	cmp	ip, r0
 80080e0:	bf38      	it	cc
 80080e2:	2304      	movcc	r3, #4
 80080e4:	50ca      	str	r2, [r1, r3]
 80080e6:	b10a      	cbz	r2, 80080ec <__lshift+0xa4>
 80080e8:	f108 0602 	add.w	r6, r8, #2
 80080ec:	3e01      	subs	r6, #1
 80080ee:	4638      	mov	r0, r7
 80080f0:	612e      	str	r6, [r5, #16]
 80080f2:	4621      	mov	r1, r4
 80080f4:	f7ff fd90 	bl	8007c18 <_Bfree>
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008102:	3301      	adds	r3, #1
 8008104:	e7c5      	b.n	8008092 <__lshift+0x4a>
 8008106:	3904      	subs	r1, #4
 8008108:	f853 2b04 	ldr.w	r2, [r3], #4
 800810c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008110:	459c      	cmp	ip, r3
 8008112:	d8f9      	bhi.n	8008108 <__lshift+0xc0>
 8008114:	e7ea      	b.n	80080ec <__lshift+0xa4>
 8008116:	bf00      	nop
 8008118:	0800a5a5 	.word	0x0800a5a5
 800811c:	0800a5b6 	.word	0x0800a5b6

08008120 <__mcmp>:
 8008120:	690a      	ldr	r2, [r1, #16]
 8008122:	4603      	mov	r3, r0
 8008124:	6900      	ldr	r0, [r0, #16]
 8008126:	1a80      	subs	r0, r0, r2
 8008128:	b530      	push	{r4, r5, lr}
 800812a:	d10e      	bne.n	800814a <__mcmp+0x2a>
 800812c:	3314      	adds	r3, #20
 800812e:	3114      	adds	r1, #20
 8008130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800813c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008140:	4295      	cmp	r5, r2
 8008142:	d003      	beq.n	800814c <__mcmp+0x2c>
 8008144:	d205      	bcs.n	8008152 <__mcmp+0x32>
 8008146:	f04f 30ff 	mov.w	r0, #4294967295
 800814a:	bd30      	pop	{r4, r5, pc}
 800814c:	42a3      	cmp	r3, r4
 800814e:	d3f3      	bcc.n	8008138 <__mcmp+0x18>
 8008150:	e7fb      	b.n	800814a <__mcmp+0x2a>
 8008152:	2001      	movs	r0, #1
 8008154:	e7f9      	b.n	800814a <__mcmp+0x2a>
	...

08008158 <__mdiff>:
 8008158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4689      	mov	r9, r1
 800815e:	4606      	mov	r6, r0
 8008160:	4611      	mov	r1, r2
 8008162:	4648      	mov	r0, r9
 8008164:	4614      	mov	r4, r2
 8008166:	f7ff ffdb 	bl	8008120 <__mcmp>
 800816a:	1e05      	subs	r5, r0, #0
 800816c:	d112      	bne.n	8008194 <__mdiff+0x3c>
 800816e:	4629      	mov	r1, r5
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff fd11 	bl	8007b98 <_Balloc>
 8008176:	4602      	mov	r2, r0
 8008178:	b928      	cbnz	r0, 8008186 <__mdiff+0x2e>
 800817a:	4b3f      	ldr	r3, [pc, #252]	@ (8008278 <__mdiff+0x120>)
 800817c:	f240 2137 	movw	r1, #567	@ 0x237
 8008180:	483e      	ldr	r0, [pc, #248]	@ (800827c <__mdiff+0x124>)
 8008182:	f001 fa95 	bl	80096b0 <__assert_func>
 8008186:	2301      	movs	r3, #1
 8008188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800818c:	4610      	mov	r0, r2
 800818e:	b003      	add	sp, #12
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	bfbc      	itt	lt
 8008196:	464b      	movlt	r3, r9
 8008198:	46a1      	movlt	r9, r4
 800819a:	4630      	mov	r0, r6
 800819c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081a0:	bfba      	itte	lt
 80081a2:	461c      	movlt	r4, r3
 80081a4:	2501      	movlt	r5, #1
 80081a6:	2500      	movge	r5, #0
 80081a8:	f7ff fcf6 	bl	8007b98 <_Balloc>
 80081ac:	4602      	mov	r2, r0
 80081ae:	b918      	cbnz	r0, 80081b8 <__mdiff+0x60>
 80081b0:	4b31      	ldr	r3, [pc, #196]	@ (8008278 <__mdiff+0x120>)
 80081b2:	f240 2145 	movw	r1, #581	@ 0x245
 80081b6:	e7e3      	b.n	8008180 <__mdiff+0x28>
 80081b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081bc:	6926      	ldr	r6, [r4, #16]
 80081be:	60c5      	str	r5, [r0, #12]
 80081c0:	f109 0310 	add.w	r3, r9, #16
 80081c4:	f109 0514 	add.w	r5, r9, #20
 80081c8:	f104 0e14 	add.w	lr, r4, #20
 80081cc:	f100 0b14 	add.w	fp, r0, #20
 80081d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	46d9      	mov	r9, fp
 80081dc:	f04f 0c00 	mov.w	ip, #0
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	fa1f f38a 	uxth.w	r3, sl
 80081f0:	4619      	mov	r1, r3
 80081f2:	b283      	uxth	r3, r0
 80081f4:	1acb      	subs	r3, r1, r3
 80081f6:	0c00      	lsrs	r0, r0, #16
 80081f8:	4463      	add	r3, ip
 80081fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008202:	b29b      	uxth	r3, r3
 8008204:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008208:	4576      	cmp	r6, lr
 800820a:	f849 3b04 	str.w	r3, [r9], #4
 800820e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008212:	d8e5      	bhi.n	80081e0 <__mdiff+0x88>
 8008214:	1b33      	subs	r3, r6, r4
 8008216:	3b15      	subs	r3, #21
 8008218:	f023 0303 	bic.w	r3, r3, #3
 800821c:	3415      	adds	r4, #21
 800821e:	3304      	adds	r3, #4
 8008220:	42a6      	cmp	r6, r4
 8008222:	bf38      	it	cc
 8008224:	2304      	movcc	r3, #4
 8008226:	441d      	add	r5, r3
 8008228:	445b      	add	r3, fp
 800822a:	461e      	mov	r6, r3
 800822c:	462c      	mov	r4, r5
 800822e:	4544      	cmp	r4, r8
 8008230:	d30e      	bcc.n	8008250 <__mdiff+0xf8>
 8008232:	f108 0103 	add.w	r1, r8, #3
 8008236:	1b49      	subs	r1, r1, r5
 8008238:	f021 0103 	bic.w	r1, r1, #3
 800823c:	3d03      	subs	r5, #3
 800823e:	45a8      	cmp	r8, r5
 8008240:	bf38      	it	cc
 8008242:	2100      	movcc	r1, #0
 8008244:	440b      	add	r3, r1
 8008246:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800824a:	b191      	cbz	r1, 8008272 <__mdiff+0x11a>
 800824c:	6117      	str	r7, [r2, #16]
 800824e:	e79d      	b.n	800818c <__mdiff+0x34>
 8008250:	f854 1b04 	ldr.w	r1, [r4], #4
 8008254:	46e6      	mov	lr, ip
 8008256:	0c08      	lsrs	r0, r1, #16
 8008258:	fa1c fc81 	uxtah	ip, ip, r1
 800825c:	4471      	add	r1, lr
 800825e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008262:	b289      	uxth	r1, r1
 8008264:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008268:	f846 1b04 	str.w	r1, [r6], #4
 800826c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008270:	e7dd      	b.n	800822e <__mdiff+0xd6>
 8008272:	3f01      	subs	r7, #1
 8008274:	e7e7      	b.n	8008246 <__mdiff+0xee>
 8008276:	bf00      	nop
 8008278:	0800a5a5 	.word	0x0800a5a5
 800827c:	0800a5b6 	.word	0x0800a5b6

08008280 <__ulp>:
 8008280:	b082      	sub	sp, #8
 8008282:	ed8d 0b00 	vstr	d0, [sp]
 8008286:	9a01      	ldr	r2, [sp, #4]
 8008288:	4b0f      	ldr	r3, [pc, #60]	@ (80082c8 <__ulp+0x48>)
 800828a:	4013      	ands	r3, r2
 800828c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008290:	2b00      	cmp	r3, #0
 8008292:	dc08      	bgt.n	80082a6 <__ulp+0x26>
 8008294:	425b      	negs	r3, r3
 8008296:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800829a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800829e:	da04      	bge.n	80082aa <__ulp+0x2a>
 80082a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082a4:	4113      	asrs	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	e008      	b.n	80082bc <__ulp+0x3c>
 80082aa:	f1a2 0314 	sub.w	r3, r2, #20
 80082ae:	2b1e      	cmp	r3, #30
 80082b0:	bfda      	itte	le
 80082b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082b6:	40da      	lsrle	r2, r3
 80082b8:	2201      	movgt	r2, #1
 80082ba:	2300      	movs	r3, #0
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	ec41 0b10 	vmov	d0, r0, r1
 80082c4:	b002      	add	sp, #8
 80082c6:	4770      	bx	lr
 80082c8:	7ff00000 	.word	0x7ff00000

080082cc <__b2d>:
 80082cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d0:	6906      	ldr	r6, [r0, #16]
 80082d2:	f100 0814 	add.w	r8, r0, #20
 80082d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80082da:	1f37      	subs	r7, r6, #4
 80082dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80082e0:	4610      	mov	r0, r2
 80082e2:	f7ff fd4b 	bl	8007d7c <__hi0bits>
 80082e6:	f1c0 0320 	rsb	r3, r0, #32
 80082ea:	280a      	cmp	r0, #10
 80082ec:	600b      	str	r3, [r1, #0]
 80082ee:	491b      	ldr	r1, [pc, #108]	@ (800835c <__b2d+0x90>)
 80082f0:	dc15      	bgt.n	800831e <__b2d+0x52>
 80082f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80082f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80082fa:	45b8      	cmp	r8, r7
 80082fc:	ea43 0501 	orr.w	r5, r3, r1
 8008300:	bf34      	ite	cc
 8008302:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008306:	2300      	movcs	r3, #0
 8008308:	3015      	adds	r0, #21
 800830a:	fa02 f000 	lsl.w	r0, r2, r0
 800830e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008312:	4303      	orrs	r3, r0
 8008314:	461c      	mov	r4, r3
 8008316:	ec45 4b10 	vmov	d0, r4, r5
 800831a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800831e:	45b8      	cmp	r8, r7
 8008320:	bf3a      	itte	cc
 8008322:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008326:	f1a6 0708 	subcc.w	r7, r6, #8
 800832a:	2300      	movcs	r3, #0
 800832c:	380b      	subs	r0, #11
 800832e:	d012      	beq.n	8008356 <__b2d+0x8a>
 8008330:	f1c0 0120 	rsb	r1, r0, #32
 8008334:	fa23 f401 	lsr.w	r4, r3, r1
 8008338:	4082      	lsls	r2, r0
 800833a:	4322      	orrs	r2, r4
 800833c:	4547      	cmp	r7, r8
 800833e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008342:	bf8c      	ite	hi
 8008344:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008348:	2200      	movls	r2, #0
 800834a:	4083      	lsls	r3, r0
 800834c:	40ca      	lsrs	r2, r1
 800834e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008352:	4313      	orrs	r3, r2
 8008354:	e7de      	b.n	8008314 <__b2d+0x48>
 8008356:	ea42 0501 	orr.w	r5, r2, r1
 800835a:	e7db      	b.n	8008314 <__b2d+0x48>
 800835c:	3ff00000 	.word	0x3ff00000

08008360 <__d2b>:
 8008360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008364:	460f      	mov	r7, r1
 8008366:	2101      	movs	r1, #1
 8008368:	ec59 8b10 	vmov	r8, r9, d0
 800836c:	4616      	mov	r6, r2
 800836e:	f7ff fc13 	bl	8007b98 <_Balloc>
 8008372:	4604      	mov	r4, r0
 8008374:	b930      	cbnz	r0, 8008384 <__d2b+0x24>
 8008376:	4602      	mov	r2, r0
 8008378:	4b23      	ldr	r3, [pc, #140]	@ (8008408 <__d2b+0xa8>)
 800837a:	4824      	ldr	r0, [pc, #144]	@ (800840c <__d2b+0xac>)
 800837c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008380:	f001 f996 	bl	80096b0 <__assert_func>
 8008384:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800838c:	b10d      	cbz	r5, 8008392 <__d2b+0x32>
 800838e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	f1b8 0300 	subs.w	r3, r8, #0
 8008398:	d023      	beq.n	80083e2 <__d2b+0x82>
 800839a:	4668      	mov	r0, sp
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	f7ff fd0c 	bl	8007dba <__lo0bits>
 80083a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083a6:	b1d0      	cbz	r0, 80083de <__d2b+0x7e>
 80083a8:	f1c0 0320 	rsb	r3, r0, #32
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	430b      	orrs	r3, r1
 80083b2:	40c2      	lsrs	r2, r0
 80083b4:	6163      	str	r3, [r4, #20]
 80083b6:	9201      	str	r2, [sp, #4]
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	61a3      	str	r3, [r4, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	bf0c      	ite	eq
 80083c0:	2201      	moveq	r2, #1
 80083c2:	2202      	movne	r2, #2
 80083c4:	6122      	str	r2, [r4, #16]
 80083c6:	b1a5      	cbz	r5, 80083f2 <__d2b+0x92>
 80083c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083cc:	4405      	add	r5, r0
 80083ce:	603d      	str	r5, [r7, #0]
 80083d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083d4:	6030      	str	r0, [r6, #0]
 80083d6:	4620      	mov	r0, r4
 80083d8:	b003      	add	sp, #12
 80083da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083de:	6161      	str	r1, [r4, #20]
 80083e0:	e7ea      	b.n	80083b8 <__d2b+0x58>
 80083e2:	a801      	add	r0, sp, #4
 80083e4:	f7ff fce9 	bl	8007dba <__lo0bits>
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	6163      	str	r3, [r4, #20]
 80083ec:	3020      	adds	r0, #32
 80083ee:	2201      	movs	r2, #1
 80083f0:	e7e8      	b.n	80083c4 <__d2b+0x64>
 80083f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083fa:	6038      	str	r0, [r7, #0]
 80083fc:	6918      	ldr	r0, [r3, #16]
 80083fe:	f7ff fcbd 	bl	8007d7c <__hi0bits>
 8008402:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008406:	e7e5      	b.n	80083d4 <__d2b+0x74>
 8008408:	0800a5a5 	.word	0x0800a5a5
 800840c:	0800a5b6 	.word	0x0800a5b6

08008410 <__ratio>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	b085      	sub	sp, #20
 8008416:	e9cd 1000 	strd	r1, r0, [sp]
 800841a:	a902      	add	r1, sp, #8
 800841c:	f7ff ff56 	bl	80082cc <__b2d>
 8008420:	9800      	ldr	r0, [sp, #0]
 8008422:	a903      	add	r1, sp, #12
 8008424:	ec55 4b10 	vmov	r4, r5, d0
 8008428:	f7ff ff50 	bl	80082cc <__b2d>
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	6919      	ldr	r1, [r3, #16]
 8008430:	9b00      	ldr	r3, [sp, #0]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	1ac9      	subs	r1, r1, r3
 8008436:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	ec5b ab10 	vmov	sl, fp, d0
 8008440:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008444:	2b00      	cmp	r3, #0
 8008446:	bfce      	itee	gt
 8008448:	462a      	movgt	r2, r5
 800844a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800844e:	465a      	movle	r2, fp
 8008450:	462f      	mov	r7, r5
 8008452:	46d9      	mov	r9, fp
 8008454:	bfcc      	ite	gt
 8008456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800845a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800845e:	464b      	mov	r3, r9
 8008460:	4652      	mov	r2, sl
 8008462:	4620      	mov	r0, r4
 8008464:	4639      	mov	r1, r7
 8008466:	f7f8 f9c9 	bl	80007fc <__aeabi_ddiv>
 800846a:	ec41 0b10 	vmov	d0, r0, r1
 800846e:	b005      	add	sp, #20
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008474 <__copybits>:
 8008474:	3901      	subs	r1, #1
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	1149      	asrs	r1, r1, #5
 800847a:	6914      	ldr	r4, [r2, #16]
 800847c:	3101      	adds	r1, #1
 800847e:	f102 0314 	add.w	r3, r2, #20
 8008482:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008486:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800848a:	1f05      	subs	r5, r0, #4
 800848c:	42a3      	cmp	r3, r4
 800848e:	d30c      	bcc.n	80084aa <__copybits+0x36>
 8008490:	1aa3      	subs	r3, r4, r2
 8008492:	3b11      	subs	r3, #17
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	3211      	adds	r2, #17
 800849a:	42a2      	cmp	r2, r4
 800849c:	bf88      	it	hi
 800849e:	2300      	movhi	r3, #0
 80084a0:	4418      	add	r0, r3
 80084a2:	2300      	movs	r3, #0
 80084a4:	4288      	cmp	r0, r1
 80084a6:	d305      	bcc.n	80084b4 <__copybits+0x40>
 80084a8:	bd70      	pop	{r4, r5, r6, pc}
 80084aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80084ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80084b2:	e7eb      	b.n	800848c <__copybits+0x18>
 80084b4:	f840 3b04 	str.w	r3, [r0], #4
 80084b8:	e7f4      	b.n	80084a4 <__copybits+0x30>

080084ba <__any_on>:
 80084ba:	f100 0214 	add.w	r2, r0, #20
 80084be:	6900      	ldr	r0, [r0, #16]
 80084c0:	114b      	asrs	r3, r1, #5
 80084c2:	4298      	cmp	r0, r3
 80084c4:	b510      	push	{r4, lr}
 80084c6:	db11      	blt.n	80084ec <__any_on+0x32>
 80084c8:	dd0a      	ble.n	80084e0 <__any_on+0x26>
 80084ca:	f011 011f 	ands.w	r1, r1, #31
 80084ce:	d007      	beq.n	80084e0 <__any_on+0x26>
 80084d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084d4:	fa24 f001 	lsr.w	r0, r4, r1
 80084d8:	fa00 f101 	lsl.w	r1, r0, r1
 80084dc:	428c      	cmp	r4, r1
 80084de:	d10b      	bne.n	80084f8 <__any_on+0x3e>
 80084e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d803      	bhi.n	80084f0 <__any_on+0x36>
 80084e8:	2000      	movs	r0, #0
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	4603      	mov	r3, r0
 80084ee:	e7f7      	b.n	80084e0 <__any_on+0x26>
 80084f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d0f5      	beq.n	80084e4 <__any_on+0x2a>
 80084f8:	2001      	movs	r0, #1
 80084fa:	e7f6      	b.n	80084ea <__any_on+0x30>

080084fc <sulp>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4604      	mov	r4, r0
 8008500:	460d      	mov	r5, r1
 8008502:	ec45 4b10 	vmov	d0, r4, r5
 8008506:	4616      	mov	r6, r2
 8008508:	f7ff feba 	bl	8008280 <__ulp>
 800850c:	ec51 0b10 	vmov	r0, r1, d0
 8008510:	b17e      	cbz	r6, 8008532 <sulp+0x36>
 8008512:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008516:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd09      	ble.n	8008532 <sulp+0x36>
 800851e:	051b      	lsls	r3, r3, #20
 8008520:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008524:	2400      	movs	r4, #0
 8008526:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800852a:	4622      	mov	r2, r4
 800852c:	462b      	mov	r3, r5
 800852e:	f7f8 f83b 	bl	80005a8 <__aeabi_dmul>
 8008532:	ec41 0b10 	vmov	d0, r0, r1
 8008536:	bd70      	pop	{r4, r5, r6, pc}

08008538 <_strtod_l>:
 8008538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853c:	b09f      	sub	sp, #124	@ 0x7c
 800853e:	460c      	mov	r4, r1
 8008540:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008542:	2200      	movs	r2, #0
 8008544:	921a      	str	r2, [sp, #104]	@ 0x68
 8008546:	9005      	str	r0, [sp, #20]
 8008548:	f04f 0a00 	mov.w	sl, #0
 800854c:	f04f 0b00 	mov.w	fp, #0
 8008550:	460a      	mov	r2, r1
 8008552:	9219      	str	r2, [sp, #100]	@ 0x64
 8008554:	7811      	ldrb	r1, [r2, #0]
 8008556:	292b      	cmp	r1, #43	@ 0x2b
 8008558:	d04a      	beq.n	80085f0 <_strtod_l+0xb8>
 800855a:	d838      	bhi.n	80085ce <_strtod_l+0x96>
 800855c:	290d      	cmp	r1, #13
 800855e:	d832      	bhi.n	80085c6 <_strtod_l+0x8e>
 8008560:	2908      	cmp	r1, #8
 8008562:	d832      	bhi.n	80085ca <_strtod_l+0x92>
 8008564:	2900      	cmp	r1, #0
 8008566:	d03b      	beq.n	80085e0 <_strtod_l+0xa8>
 8008568:	2200      	movs	r2, #0
 800856a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800856c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800856e:	782a      	ldrb	r2, [r5, #0]
 8008570:	2a30      	cmp	r2, #48	@ 0x30
 8008572:	f040 80b3 	bne.w	80086dc <_strtod_l+0x1a4>
 8008576:	786a      	ldrb	r2, [r5, #1]
 8008578:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800857c:	2a58      	cmp	r2, #88	@ 0x58
 800857e:	d16e      	bne.n	800865e <_strtod_l+0x126>
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	ab1a      	add	r3, sp, #104	@ 0x68
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	4a8e      	ldr	r2, [pc, #568]	@ (80087c4 <_strtod_l+0x28c>)
 800858c:	9805      	ldr	r0, [sp, #20]
 800858e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008590:	a919      	add	r1, sp, #100	@ 0x64
 8008592:	f001 f927 	bl	80097e4 <__gethex>
 8008596:	f010 060f 	ands.w	r6, r0, #15
 800859a:	4604      	mov	r4, r0
 800859c:	d005      	beq.n	80085aa <_strtod_l+0x72>
 800859e:	2e06      	cmp	r6, #6
 80085a0:	d128      	bne.n	80085f4 <_strtod_l+0xbc>
 80085a2:	3501      	adds	r5, #1
 80085a4:	2300      	movs	r3, #0
 80085a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80085a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 858e 	bne.w	80090ce <_strtod_l+0xb96>
 80085b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085b4:	b1cb      	cbz	r3, 80085ea <_strtod_l+0xb2>
 80085b6:	4652      	mov	r2, sl
 80085b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80085bc:	ec43 2b10 	vmov	d0, r2, r3
 80085c0:	b01f      	add	sp, #124	@ 0x7c
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	2920      	cmp	r1, #32
 80085c8:	d1ce      	bne.n	8008568 <_strtod_l+0x30>
 80085ca:	3201      	adds	r2, #1
 80085cc:	e7c1      	b.n	8008552 <_strtod_l+0x1a>
 80085ce:	292d      	cmp	r1, #45	@ 0x2d
 80085d0:	d1ca      	bne.n	8008568 <_strtod_l+0x30>
 80085d2:	2101      	movs	r1, #1
 80085d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80085d6:	1c51      	adds	r1, r2, #1
 80085d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80085da:	7852      	ldrb	r2, [r2, #1]
 80085dc:	2a00      	cmp	r2, #0
 80085de:	d1c5      	bne.n	800856c <_strtod_l+0x34>
 80085e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 8570 	bne.w	80090ca <_strtod_l+0xb92>
 80085ea:	4652      	mov	r2, sl
 80085ec:	465b      	mov	r3, fp
 80085ee:	e7e5      	b.n	80085bc <_strtod_l+0x84>
 80085f0:	2100      	movs	r1, #0
 80085f2:	e7ef      	b.n	80085d4 <_strtod_l+0x9c>
 80085f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80085f6:	b13a      	cbz	r2, 8008608 <_strtod_l+0xd0>
 80085f8:	2135      	movs	r1, #53	@ 0x35
 80085fa:	a81c      	add	r0, sp, #112	@ 0x70
 80085fc:	f7ff ff3a 	bl	8008474 <__copybits>
 8008600:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008602:	9805      	ldr	r0, [sp, #20]
 8008604:	f7ff fb08 	bl	8007c18 <_Bfree>
 8008608:	3e01      	subs	r6, #1
 800860a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800860c:	2e04      	cmp	r6, #4
 800860e:	d806      	bhi.n	800861e <_strtod_l+0xe6>
 8008610:	e8df f006 	tbb	[pc, r6]
 8008614:	201d0314 	.word	0x201d0314
 8008618:	14          	.byte	0x14
 8008619:	00          	.byte	0x00
 800861a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800861e:	05e1      	lsls	r1, r4, #23
 8008620:	bf48      	it	mi
 8008622:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800862a:	0d1b      	lsrs	r3, r3, #20
 800862c:	051b      	lsls	r3, r3, #20
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1bb      	bne.n	80085aa <_strtod_l+0x72>
 8008632:	f7fe fb31 	bl	8006c98 <__errno>
 8008636:	2322      	movs	r3, #34	@ 0x22
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	e7b6      	b.n	80085aa <_strtod_l+0x72>
 800863c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008640:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008644:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008648:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800864c:	e7e7      	b.n	800861e <_strtod_l+0xe6>
 800864e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80087cc <_strtod_l+0x294>
 8008652:	e7e4      	b.n	800861e <_strtod_l+0xe6>
 8008654:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008658:	f04f 3aff 	mov.w	sl, #4294967295
 800865c:	e7df      	b.n	800861e <_strtod_l+0xe6>
 800865e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	9219      	str	r2, [sp, #100]	@ 0x64
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b30      	cmp	r3, #48	@ 0x30
 8008668:	d0f9      	beq.n	800865e <_strtod_l+0x126>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d09d      	beq.n	80085aa <_strtod_l+0x72>
 800866e:	2301      	movs	r3, #1
 8008670:	9309      	str	r3, [sp, #36]	@ 0x24
 8008672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008674:	930c      	str	r3, [sp, #48]	@ 0x30
 8008676:	2300      	movs	r3, #0
 8008678:	9308      	str	r3, [sp, #32]
 800867a:	930a      	str	r3, [sp, #40]	@ 0x28
 800867c:	461f      	mov	r7, r3
 800867e:	220a      	movs	r2, #10
 8008680:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008682:	7805      	ldrb	r5, [r0, #0]
 8008684:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008688:	b2d9      	uxtb	r1, r3
 800868a:	2909      	cmp	r1, #9
 800868c:	d928      	bls.n	80086e0 <_strtod_l+0x1a8>
 800868e:	494e      	ldr	r1, [pc, #312]	@ (80087c8 <_strtod_l+0x290>)
 8008690:	2201      	movs	r2, #1
 8008692:	f000 ffd5 	bl	8009640 <strncmp>
 8008696:	2800      	cmp	r0, #0
 8008698:	d032      	beq.n	8008700 <_strtod_l+0x1c8>
 800869a:	2000      	movs	r0, #0
 800869c:	462a      	mov	r2, r5
 800869e:	4681      	mov	r9, r0
 80086a0:	463d      	mov	r5, r7
 80086a2:	4603      	mov	r3, r0
 80086a4:	2a65      	cmp	r2, #101	@ 0x65
 80086a6:	d001      	beq.n	80086ac <_strtod_l+0x174>
 80086a8:	2a45      	cmp	r2, #69	@ 0x45
 80086aa:	d114      	bne.n	80086d6 <_strtod_l+0x19e>
 80086ac:	b91d      	cbnz	r5, 80086b6 <_strtod_l+0x17e>
 80086ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b0:	4302      	orrs	r2, r0
 80086b2:	d095      	beq.n	80085e0 <_strtod_l+0xa8>
 80086b4:	2500      	movs	r5, #0
 80086b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80086b8:	1c62      	adds	r2, r4, #1
 80086ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80086bc:	7862      	ldrb	r2, [r4, #1]
 80086be:	2a2b      	cmp	r2, #43	@ 0x2b
 80086c0:	d077      	beq.n	80087b2 <_strtod_l+0x27a>
 80086c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80086c4:	d07b      	beq.n	80087be <_strtod_l+0x286>
 80086c6:	f04f 0c00 	mov.w	ip, #0
 80086ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80086ce:	2909      	cmp	r1, #9
 80086d0:	f240 8082 	bls.w	80087d8 <_strtod_l+0x2a0>
 80086d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80086d6:	f04f 0800 	mov.w	r8, #0
 80086da:	e0a2      	b.n	8008822 <_strtod_l+0x2ea>
 80086dc:	2300      	movs	r3, #0
 80086de:	e7c7      	b.n	8008670 <_strtod_l+0x138>
 80086e0:	2f08      	cmp	r7, #8
 80086e2:	bfd5      	itete	le
 80086e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80086e6:	9908      	ldrgt	r1, [sp, #32]
 80086e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80086ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80086f0:	f100 0001 	add.w	r0, r0, #1
 80086f4:	bfd4      	ite	le
 80086f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80086f8:	9308      	strgt	r3, [sp, #32]
 80086fa:	3701      	adds	r7, #1
 80086fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80086fe:	e7bf      	b.n	8008680 <_strtod_l+0x148>
 8008700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	9219      	str	r2, [sp, #100]	@ 0x64
 8008706:	785a      	ldrb	r2, [r3, #1]
 8008708:	b37f      	cbz	r7, 800876a <_strtod_l+0x232>
 800870a:	4681      	mov	r9, r0
 800870c:	463d      	mov	r5, r7
 800870e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008712:	2b09      	cmp	r3, #9
 8008714:	d912      	bls.n	800873c <_strtod_l+0x204>
 8008716:	2301      	movs	r3, #1
 8008718:	e7c4      	b.n	80086a4 <_strtod_l+0x16c>
 800871a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008720:	785a      	ldrb	r2, [r3, #1]
 8008722:	3001      	adds	r0, #1
 8008724:	2a30      	cmp	r2, #48	@ 0x30
 8008726:	d0f8      	beq.n	800871a <_strtod_l+0x1e2>
 8008728:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800872c:	2b08      	cmp	r3, #8
 800872e:	f200 84d3 	bhi.w	80090d8 <_strtod_l+0xba0>
 8008732:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008734:	930c      	str	r3, [sp, #48]	@ 0x30
 8008736:	4681      	mov	r9, r0
 8008738:	2000      	movs	r0, #0
 800873a:	4605      	mov	r5, r0
 800873c:	3a30      	subs	r2, #48	@ 0x30
 800873e:	f100 0301 	add.w	r3, r0, #1
 8008742:	d02a      	beq.n	800879a <_strtod_l+0x262>
 8008744:	4499      	add	r9, r3
 8008746:	eb00 0c05 	add.w	ip, r0, r5
 800874a:	462b      	mov	r3, r5
 800874c:	210a      	movs	r1, #10
 800874e:	4563      	cmp	r3, ip
 8008750:	d10d      	bne.n	800876e <_strtod_l+0x236>
 8008752:	1c69      	adds	r1, r5, #1
 8008754:	4401      	add	r1, r0
 8008756:	4428      	add	r0, r5
 8008758:	2808      	cmp	r0, #8
 800875a:	dc16      	bgt.n	800878a <_strtod_l+0x252>
 800875c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800875e:	230a      	movs	r3, #10
 8008760:	fb03 2300 	mla	r3, r3, r0, r2
 8008764:	930a      	str	r3, [sp, #40]	@ 0x28
 8008766:	2300      	movs	r3, #0
 8008768:	e018      	b.n	800879c <_strtod_l+0x264>
 800876a:	4638      	mov	r0, r7
 800876c:	e7da      	b.n	8008724 <_strtod_l+0x1ec>
 800876e:	2b08      	cmp	r3, #8
 8008770:	f103 0301 	add.w	r3, r3, #1
 8008774:	dc03      	bgt.n	800877e <_strtod_l+0x246>
 8008776:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008778:	434e      	muls	r6, r1
 800877a:	960a      	str	r6, [sp, #40]	@ 0x28
 800877c:	e7e7      	b.n	800874e <_strtod_l+0x216>
 800877e:	2b10      	cmp	r3, #16
 8008780:	bfde      	ittt	le
 8008782:	9e08      	ldrle	r6, [sp, #32]
 8008784:	434e      	mulle	r6, r1
 8008786:	9608      	strle	r6, [sp, #32]
 8008788:	e7e1      	b.n	800874e <_strtod_l+0x216>
 800878a:	280f      	cmp	r0, #15
 800878c:	dceb      	bgt.n	8008766 <_strtod_l+0x22e>
 800878e:	9808      	ldr	r0, [sp, #32]
 8008790:	230a      	movs	r3, #10
 8008792:	fb03 2300 	mla	r3, r3, r0, r2
 8008796:	9308      	str	r3, [sp, #32]
 8008798:	e7e5      	b.n	8008766 <_strtod_l+0x22e>
 800879a:	4629      	mov	r1, r5
 800879c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800879e:	1c50      	adds	r0, r2, #1
 80087a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80087a2:	7852      	ldrb	r2, [r2, #1]
 80087a4:	4618      	mov	r0, r3
 80087a6:	460d      	mov	r5, r1
 80087a8:	e7b1      	b.n	800870e <_strtod_l+0x1d6>
 80087aa:	f04f 0900 	mov.w	r9, #0
 80087ae:	2301      	movs	r3, #1
 80087b0:	e77d      	b.n	80086ae <_strtod_l+0x176>
 80087b2:	f04f 0c00 	mov.w	ip, #0
 80087b6:	1ca2      	adds	r2, r4, #2
 80087b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80087ba:	78a2      	ldrb	r2, [r4, #2]
 80087bc:	e785      	b.n	80086ca <_strtod_l+0x192>
 80087be:	f04f 0c01 	mov.w	ip, #1
 80087c2:	e7f8      	b.n	80087b6 <_strtod_l+0x27e>
 80087c4:	0800a728 	.word	0x0800a728
 80087c8:	0800a710 	.word	0x0800a710
 80087cc:	7ff00000 	.word	0x7ff00000
 80087d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087d2:	1c51      	adds	r1, r2, #1
 80087d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087d6:	7852      	ldrb	r2, [r2, #1]
 80087d8:	2a30      	cmp	r2, #48	@ 0x30
 80087da:	d0f9      	beq.n	80087d0 <_strtod_l+0x298>
 80087dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80087e0:	2908      	cmp	r1, #8
 80087e2:	f63f af78 	bhi.w	80086d6 <_strtod_l+0x19e>
 80087e6:	3a30      	subs	r2, #48	@ 0x30
 80087e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80087ee:	f04f 080a 	mov.w	r8, #10
 80087f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087f4:	1c56      	adds	r6, r2, #1
 80087f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80087f8:	7852      	ldrb	r2, [r2, #1]
 80087fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80087fe:	f1be 0f09 	cmp.w	lr, #9
 8008802:	d939      	bls.n	8008878 <_strtod_l+0x340>
 8008804:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008806:	1a76      	subs	r6, r6, r1
 8008808:	2e08      	cmp	r6, #8
 800880a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800880e:	dc03      	bgt.n	8008818 <_strtod_l+0x2e0>
 8008810:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008812:	4588      	cmp	r8, r1
 8008814:	bfa8      	it	ge
 8008816:	4688      	movge	r8, r1
 8008818:	f1bc 0f00 	cmp.w	ip, #0
 800881c:	d001      	beq.n	8008822 <_strtod_l+0x2ea>
 800881e:	f1c8 0800 	rsb	r8, r8, #0
 8008822:	2d00      	cmp	r5, #0
 8008824:	d14e      	bne.n	80088c4 <_strtod_l+0x38c>
 8008826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008828:	4308      	orrs	r0, r1
 800882a:	f47f aebe 	bne.w	80085aa <_strtod_l+0x72>
 800882e:	2b00      	cmp	r3, #0
 8008830:	f47f aed6 	bne.w	80085e0 <_strtod_l+0xa8>
 8008834:	2a69      	cmp	r2, #105	@ 0x69
 8008836:	d028      	beq.n	800888a <_strtod_l+0x352>
 8008838:	dc25      	bgt.n	8008886 <_strtod_l+0x34e>
 800883a:	2a49      	cmp	r2, #73	@ 0x49
 800883c:	d025      	beq.n	800888a <_strtod_l+0x352>
 800883e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008840:	f47f aece 	bne.w	80085e0 <_strtod_l+0xa8>
 8008844:	499b      	ldr	r1, [pc, #620]	@ (8008ab4 <_strtod_l+0x57c>)
 8008846:	a819      	add	r0, sp, #100	@ 0x64
 8008848:	f001 f9ee 	bl	8009c28 <__match>
 800884c:	2800      	cmp	r0, #0
 800884e:	f43f aec7 	beq.w	80085e0 <_strtod_l+0xa8>
 8008852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b28      	cmp	r3, #40	@ 0x28
 8008858:	d12e      	bne.n	80088b8 <_strtod_l+0x380>
 800885a:	4997      	ldr	r1, [pc, #604]	@ (8008ab8 <_strtod_l+0x580>)
 800885c:	aa1c      	add	r2, sp, #112	@ 0x70
 800885e:	a819      	add	r0, sp, #100	@ 0x64
 8008860:	f001 f9f6 	bl	8009c50 <__hexnan>
 8008864:	2805      	cmp	r0, #5
 8008866:	d127      	bne.n	80088b8 <_strtod_l+0x380>
 8008868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800886a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800886e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008872:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008876:	e698      	b.n	80085aa <_strtod_l+0x72>
 8008878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800887a:	fb08 2101 	mla	r1, r8, r1, r2
 800887e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008882:	920e      	str	r2, [sp, #56]	@ 0x38
 8008884:	e7b5      	b.n	80087f2 <_strtod_l+0x2ba>
 8008886:	2a6e      	cmp	r2, #110	@ 0x6e
 8008888:	e7da      	b.n	8008840 <_strtod_l+0x308>
 800888a:	498c      	ldr	r1, [pc, #560]	@ (8008abc <_strtod_l+0x584>)
 800888c:	a819      	add	r0, sp, #100	@ 0x64
 800888e:	f001 f9cb 	bl	8009c28 <__match>
 8008892:	2800      	cmp	r0, #0
 8008894:	f43f aea4 	beq.w	80085e0 <_strtod_l+0xa8>
 8008898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800889a:	4989      	ldr	r1, [pc, #548]	@ (8008ac0 <_strtod_l+0x588>)
 800889c:	3b01      	subs	r3, #1
 800889e:	a819      	add	r0, sp, #100	@ 0x64
 80088a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80088a2:	f001 f9c1 	bl	8009c28 <__match>
 80088a6:	b910      	cbnz	r0, 80088ae <_strtod_l+0x376>
 80088a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088aa:	3301      	adds	r3, #1
 80088ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80088ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008ad0 <_strtod_l+0x598>
 80088b2:	f04f 0a00 	mov.w	sl, #0
 80088b6:	e678      	b.n	80085aa <_strtod_l+0x72>
 80088b8:	4882      	ldr	r0, [pc, #520]	@ (8008ac4 <_strtod_l+0x58c>)
 80088ba:	f000 fef1 	bl	80096a0 <nan>
 80088be:	ec5b ab10 	vmov	sl, fp, d0
 80088c2:	e672      	b.n	80085aa <_strtod_l+0x72>
 80088c4:	eba8 0309 	sub.w	r3, r8, r9
 80088c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80088ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80088cc:	2f00      	cmp	r7, #0
 80088ce:	bf08      	it	eq
 80088d0:	462f      	moveq	r7, r5
 80088d2:	2d10      	cmp	r5, #16
 80088d4:	462c      	mov	r4, r5
 80088d6:	bfa8      	it	ge
 80088d8:	2410      	movge	r4, #16
 80088da:	f7f7 fdeb 	bl	80004b4 <__aeabi_ui2d>
 80088de:	2d09      	cmp	r5, #9
 80088e0:	4682      	mov	sl, r0
 80088e2:	468b      	mov	fp, r1
 80088e4:	dc13      	bgt.n	800890e <_strtod_l+0x3d6>
 80088e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f43f ae5e 	beq.w	80085aa <_strtod_l+0x72>
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	dd78      	ble.n	80089e4 <_strtod_l+0x4ac>
 80088f2:	2b16      	cmp	r3, #22
 80088f4:	dc5f      	bgt.n	80089b6 <_strtod_l+0x47e>
 80088f6:	4974      	ldr	r1, [pc, #464]	@ (8008ac8 <_strtod_l+0x590>)
 80088f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008900:	4652      	mov	r2, sl
 8008902:	465b      	mov	r3, fp
 8008904:	f7f7 fe50 	bl	80005a8 <__aeabi_dmul>
 8008908:	4682      	mov	sl, r0
 800890a:	468b      	mov	fp, r1
 800890c:	e64d      	b.n	80085aa <_strtod_l+0x72>
 800890e:	4b6e      	ldr	r3, [pc, #440]	@ (8008ac8 <_strtod_l+0x590>)
 8008910:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008914:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008918:	f7f7 fe46 	bl	80005a8 <__aeabi_dmul>
 800891c:	4682      	mov	sl, r0
 800891e:	9808      	ldr	r0, [sp, #32]
 8008920:	468b      	mov	fp, r1
 8008922:	f7f7 fdc7 	bl	80004b4 <__aeabi_ui2d>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4650      	mov	r0, sl
 800892c:	4659      	mov	r1, fp
 800892e:	f7f7 fc85 	bl	800023c <__adddf3>
 8008932:	2d0f      	cmp	r5, #15
 8008934:	4682      	mov	sl, r0
 8008936:	468b      	mov	fp, r1
 8008938:	ddd5      	ble.n	80088e6 <_strtod_l+0x3ae>
 800893a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893c:	1b2c      	subs	r4, r5, r4
 800893e:	441c      	add	r4, r3
 8008940:	2c00      	cmp	r4, #0
 8008942:	f340 8096 	ble.w	8008a72 <_strtod_l+0x53a>
 8008946:	f014 030f 	ands.w	r3, r4, #15
 800894a:	d00a      	beq.n	8008962 <_strtod_l+0x42a>
 800894c:	495e      	ldr	r1, [pc, #376]	@ (8008ac8 <_strtod_l+0x590>)
 800894e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008952:	4652      	mov	r2, sl
 8008954:	465b      	mov	r3, fp
 8008956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800895a:	f7f7 fe25 	bl	80005a8 <__aeabi_dmul>
 800895e:	4682      	mov	sl, r0
 8008960:	468b      	mov	fp, r1
 8008962:	f034 040f 	bics.w	r4, r4, #15
 8008966:	d073      	beq.n	8008a50 <_strtod_l+0x518>
 8008968:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800896c:	dd48      	ble.n	8008a00 <_strtod_l+0x4c8>
 800896e:	2400      	movs	r4, #0
 8008970:	46a0      	mov	r8, r4
 8008972:	940a      	str	r4, [sp, #40]	@ 0x28
 8008974:	46a1      	mov	r9, r4
 8008976:	9a05      	ldr	r2, [sp, #20]
 8008978:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008ad0 <_strtod_l+0x598>
 800897c:	2322      	movs	r3, #34	@ 0x22
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	f04f 0a00 	mov.w	sl, #0
 8008984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	f43f ae0f 	beq.w	80085aa <_strtod_l+0x72>
 800898c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800898e:	9805      	ldr	r0, [sp, #20]
 8008990:	f7ff f942 	bl	8007c18 <_Bfree>
 8008994:	9805      	ldr	r0, [sp, #20]
 8008996:	4649      	mov	r1, r9
 8008998:	f7ff f93e 	bl	8007c18 <_Bfree>
 800899c:	9805      	ldr	r0, [sp, #20]
 800899e:	4641      	mov	r1, r8
 80089a0:	f7ff f93a 	bl	8007c18 <_Bfree>
 80089a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	f7ff f936 	bl	8007c18 <_Bfree>
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7ff f932 	bl	8007c18 <_Bfree>
 80089b4:	e5f9      	b.n	80085aa <_strtod_l+0x72>
 80089b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80089bc:	4293      	cmp	r3, r2
 80089be:	dbbc      	blt.n	800893a <_strtod_l+0x402>
 80089c0:	4c41      	ldr	r4, [pc, #260]	@ (8008ac8 <_strtod_l+0x590>)
 80089c2:	f1c5 050f 	rsb	r5, r5, #15
 80089c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089ca:	4652      	mov	r2, sl
 80089cc:	465b      	mov	r3, fp
 80089ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d2:	f7f7 fde9 	bl	80005a8 <__aeabi_dmul>
 80089d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d8:	1b5d      	subs	r5, r3, r5
 80089da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089e2:	e78f      	b.n	8008904 <_strtod_l+0x3cc>
 80089e4:	3316      	adds	r3, #22
 80089e6:	dba8      	blt.n	800893a <_strtod_l+0x402>
 80089e8:	4b37      	ldr	r3, [pc, #220]	@ (8008ac8 <_strtod_l+0x590>)
 80089ea:	eba9 0808 	sub.w	r8, r9, r8
 80089ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80089f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80089f6:	4650      	mov	r0, sl
 80089f8:	4659      	mov	r1, fp
 80089fa:	f7f7 feff 	bl	80007fc <__aeabi_ddiv>
 80089fe:	e783      	b.n	8008908 <_strtod_l+0x3d0>
 8008a00:	4b32      	ldr	r3, [pc, #200]	@ (8008acc <_strtod_l+0x594>)
 8008a02:	9308      	str	r3, [sp, #32]
 8008a04:	2300      	movs	r3, #0
 8008a06:	1124      	asrs	r4, r4, #4
 8008a08:	4650      	mov	r0, sl
 8008a0a:	4659      	mov	r1, fp
 8008a0c:	461e      	mov	r6, r3
 8008a0e:	2c01      	cmp	r4, #1
 8008a10:	dc21      	bgt.n	8008a56 <_strtod_l+0x51e>
 8008a12:	b10b      	cbz	r3, 8008a18 <_strtod_l+0x4e0>
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	492c      	ldr	r1, [pc, #176]	@ (8008acc <_strtod_l+0x594>)
 8008a1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a22:	4652      	mov	r2, sl
 8008a24:	465b      	mov	r3, fp
 8008a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a2a:	f7f7 fdbd 	bl	80005a8 <__aeabi_dmul>
 8008a2e:	4b28      	ldr	r3, [pc, #160]	@ (8008ad0 <_strtod_l+0x598>)
 8008a30:	460a      	mov	r2, r1
 8008a32:	400b      	ands	r3, r1
 8008a34:	4927      	ldr	r1, [pc, #156]	@ (8008ad4 <_strtod_l+0x59c>)
 8008a36:	428b      	cmp	r3, r1
 8008a38:	4682      	mov	sl, r0
 8008a3a:	d898      	bhi.n	800896e <_strtod_l+0x436>
 8008a3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf86      	itte	hi
 8008a44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008ad8 <_strtod_l+0x5a0>
 8008a48:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a50:	2300      	movs	r3, #0
 8008a52:	9308      	str	r3, [sp, #32]
 8008a54:	e07a      	b.n	8008b4c <_strtod_l+0x614>
 8008a56:	07e2      	lsls	r2, r4, #31
 8008a58:	d505      	bpl.n	8008a66 <_strtod_l+0x52e>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fda2 	bl	80005a8 <__aeabi_dmul>
 8008a64:	2301      	movs	r3, #1
 8008a66:	9a08      	ldr	r2, [sp, #32]
 8008a68:	3208      	adds	r2, #8
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	1064      	asrs	r4, r4, #1
 8008a6e:	9208      	str	r2, [sp, #32]
 8008a70:	e7cd      	b.n	8008a0e <_strtod_l+0x4d6>
 8008a72:	d0ed      	beq.n	8008a50 <_strtod_l+0x518>
 8008a74:	4264      	negs	r4, r4
 8008a76:	f014 020f 	ands.w	r2, r4, #15
 8008a7a:	d00a      	beq.n	8008a92 <_strtod_l+0x55a>
 8008a7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ac8 <_strtod_l+0x590>)
 8008a7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a82:	4650      	mov	r0, sl
 8008a84:	4659      	mov	r1, fp
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f7 feb7 	bl	80007fc <__aeabi_ddiv>
 8008a8e:	4682      	mov	sl, r0
 8008a90:	468b      	mov	fp, r1
 8008a92:	1124      	asrs	r4, r4, #4
 8008a94:	d0dc      	beq.n	8008a50 <_strtod_l+0x518>
 8008a96:	2c1f      	cmp	r4, #31
 8008a98:	dd20      	ble.n	8008adc <_strtod_l+0x5a4>
 8008a9a:	2400      	movs	r4, #0
 8008a9c:	46a0      	mov	r8, r4
 8008a9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008aa0:	46a1      	mov	r9, r4
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	2322      	movs	r3, #34	@ 0x22
 8008aa6:	f04f 0a00 	mov.w	sl, #0
 8008aaa:	f04f 0b00 	mov.w	fp, #0
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	e768      	b.n	8008984 <_strtod_l+0x44c>
 8008ab2:	bf00      	nop
 8008ab4:	0800a4fd 	.word	0x0800a4fd
 8008ab8:	0800a714 	.word	0x0800a714
 8008abc:	0800a4f5 	.word	0x0800a4f5
 8008ac0:	0800a52c 	.word	0x0800a52c
 8008ac4:	0800a8bd 	.word	0x0800a8bd
 8008ac8:	0800a648 	.word	0x0800a648
 8008acc:	0800a620 	.word	0x0800a620
 8008ad0:	7ff00000 	.word	0x7ff00000
 8008ad4:	7ca00000 	.word	0x7ca00000
 8008ad8:	7fefffff 	.word	0x7fefffff
 8008adc:	f014 0310 	ands.w	r3, r4, #16
 8008ae0:	bf18      	it	ne
 8008ae2:	236a      	movne	r3, #106	@ 0x6a
 8008ae4:	4ea9      	ldr	r6, [pc, #676]	@ (8008d8c <_strtod_l+0x854>)
 8008ae6:	9308      	str	r3, [sp, #32]
 8008ae8:	4650      	mov	r0, sl
 8008aea:	4659      	mov	r1, fp
 8008aec:	2300      	movs	r3, #0
 8008aee:	07e2      	lsls	r2, r4, #31
 8008af0:	d504      	bpl.n	8008afc <_strtod_l+0x5c4>
 8008af2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008af6:	f7f7 fd57 	bl	80005a8 <__aeabi_dmul>
 8008afa:	2301      	movs	r3, #1
 8008afc:	1064      	asrs	r4, r4, #1
 8008afe:	f106 0608 	add.w	r6, r6, #8
 8008b02:	d1f4      	bne.n	8008aee <_strtod_l+0x5b6>
 8008b04:	b10b      	cbz	r3, 8008b0a <_strtod_l+0x5d2>
 8008b06:	4682      	mov	sl, r0
 8008b08:	468b      	mov	fp, r1
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	b1b3      	cbz	r3, 8008b3c <_strtod_l+0x604>
 8008b0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	4659      	mov	r1, fp
 8008b1a:	dd0f      	ble.n	8008b3c <_strtod_l+0x604>
 8008b1c:	2b1f      	cmp	r3, #31
 8008b1e:	dd55      	ble.n	8008bcc <_strtod_l+0x694>
 8008b20:	2b34      	cmp	r3, #52	@ 0x34
 8008b22:	bfde      	ittt	le
 8008b24:	f04f 33ff 	movle.w	r3, #4294967295
 8008b28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b2c:	4093      	lslle	r3, r2
 8008b2e:	f04f 0a00 	mov.w	sl, #0
 8008b32:	bfcc      	ite	gt
 8008b34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b38:	ea03 0b01 	andle.w	fp, r3, r1
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4650      	mov	r0, sl
 8008b42:	4659      	mov	r1, fp
 8008b44:	f7f7 ff98 	bl	8000a78 <__aeabi_dcmpeq>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d1a6      	bne.n	8008a9a <_strtod_l+0x562>
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b52:	9805      	ldr	r0, [sp, #20]
 8008b54:	462b      	mov	r3, r5
 8008b56:	463a      	mov	r2, r7
 8008b58:	f7ff f8c6 	bl	8007ce8 <__s2b>
 8008b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f43f af05 	beq.w	800896e <_strtod_l+0x436>
 8008b64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	eba9 0308 	sub.w	r3, r9, r8
 8008b6c:	bfa8      	it	ge
 8008b6e:	2300      	movge	r3, #0
 8008b70:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b72:	2400      	movs	r4, #0
 8008b74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b78:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b7a:	46a0      	mov	r8, r4
 8008b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b7e:	9805      	ldr	r0, [sp, #20]
 8008b80:	6859      	ldr	r1, [r3, #4]
 8008b82:	f7ff f809 	bl	8007b98 <_Balloc>
 8008b86:	4681      	mov	r9, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f aef4 	beq.w	8008976 <_strtod_l+0x43e>
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	3202      	adds	r2, #2
 8008b94:	f103 010c 	add.w	r1, r3, #12
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	300c      	adds	r0, #12
 8008b9c:	f000 fd72 	bl	8009684 <memcpy>
 8008ba0:	ec4b ab10 	vmov	d0, sl, fp
 8008ba4:	9805      	ldr	r0, [sp, #20]
 8008ba6:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ba8:	a91b      	add	r1, sp, #108	@ 0x6c
 8008baa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bae:	f7ff fbd7 	bl	8008360 <__d2b>
 8008bb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f43f aede 	beq.w	8008976 <_strtod_l+0x43e>
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	f7ff f929 	bl	8007e14 <__i2b>
 8008bc2:	4680      	mov	r8, r0
 8008bc4:	b948      	cbnz	r0, 8008bda <_strtod_l+0x6a2>
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	e6d4      	b.n	8008976 <_strtod_l+0x43e>
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	ea03 0a0a 	and.w	sl, r3, sl
 8008bd8:	e7b0      	b.n	8008b3c <_strtod_l+0x604>
 8008bda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	bfab      	itete	ge
 8008be2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008be4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008be6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008be8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008bea:	bfac      	ite	ge
 8008bec:	18ef      	addge	r7, r5, r3
 8008bee:	1b5e      	sublt	r6, r3, r5
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	1aed      	subs	r5, r5, r3
 8008bf4:	4415      	add	r5, r2
 8008bf6:	4b66      	ldr	r3, [pc, #408]	@ (8008d90 <_strtod_l+0x858>)
 8008bf8:	3d01      	subs	r5, #1
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c00:	da50      	bge.n	8008ca4 <_strtod_l+0x76c>
 8008c02:	1b5b      	subs	r3, r3, r5
 8008c04:	2b1f      	cmp	r3, #31
 8008c06:	eba2 0203 	sub.w	r2, r2, r3
 8008c0a:	f04f 0101 	mov.w	r1, #1
 8008c0e:	dc3d      	bgt.n	8008c8c <_strtod_l+0x754>
 8008c10:	fa01 f303 	lsl.w	r3, r1, r3
 8008c14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c16:	2300      	movs	r3, #0
 8008c18:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c1a:	18bd      	adds	r5, r7, r2
 8008c1c:	9b08      	ldr	r3, [sp, #32]
 8008c1e:	42af      	cmp	r7, r5
 8008c20:	4416      	add	r6, r2
 8008c22:	441e      	add	r6, r3
 8008c24:	463b      	mov	r3, r7
 8008c26:	bfa8      	it	ge
 8008c28:	462b      	movge	r3, r5
 8008c2a:	42b3      	cmp	r3, r6
 8008c2c:	bfa8      	it	ge
 8008c2e:	4633      	movge	r3, r6
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfc2      	ittt	gt
 8008c34:	1aed      	subgt	r5, r5, r3
 8008c36:	1af6      	subgt	r6, r6, r3
 8008c38:	1aff      	subgt	r7, r7, r3
 8008c3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd16      	ble.n	8008c6e <_strtod_l+0x736>
 8008c40:	4641      	mov	r1, r8
 8008c42:	9805      	ldr	r0, [sp, #20]
 8008c44:	461a      	mov	r2, r3
 8008c46:	f7ff f9a5 	bl	8007f94 <__pow5mult>
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d0ba      	beq.n	8008bc6 <_strtod_l+0x68e>
 8008c50:	4601      	mov	r1, r0
 8008c52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c54:	9805      	ldr	r0, [sp, #20]
 8008c56:	f7ff f8f3 	bl	8007e40 <__multiply>
 8008c5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f43f ae8a 	beq.w	8008976 <_strtod_l+0x43e>
 8008c62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	f7fe ffd7 	bl	8007c18 <_Bfree>
 8008c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	dc1d      	bgt.n	8008cae <_strtod_l+0x776>
 8008c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd23      	ble.n	8008cc0 <_strtod_l+0x788>
 8008c78:	4649      	mov	r1, r9
 8008c7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c7c:	9805      	ldr	r0, [sp, #20]
 8008c7e:	f7ff f989 	bl	8007f94 <__pow5mult>
 8008c82:	4681      	mov	r9, r0
 8008c84:	b9e0      	cbnz	r0, 8008cc0 <_strtod_l+0x788>
 8008c86:	f04f 0900 	mov.w	r9, #0
 8008c8a:	e674      	b.n	8008976 <_strtod_l+0x43e>
 8008c8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008c90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008c94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008c98:	35e2      	adds	r5, #226	@ 0xe2
 8008c9a:	fa01 f305 	lsl.w	r3, r1, r5
 8008c9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ca0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008ca2:	e7ba      	b.n	8008c1a <_strtod_l+0x6e2>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ca8:	2301      	movs	r3, #1
 8008caa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cac:	e7b5      	b.n	8008c1a <_strtod_l+0x6e2>
 8008cae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cb0:	9805      	ldr	r0, [sp, #20]
 8008cb2:	462a      	mov	r2, r5
 8008cb4:	f7ff f9c8 	bl	8008048 <__lshift>
 8008cb8:	901a      	str	r0, [sp, #104]	@ 0x68
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d1d9      	bne.n	8008c72 <_strtod_l+0x73a>
 8008cbe:	e65a      	b.n	8008976 <_strtod_l+0x43e>
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	dd07      	ble.n	8008cd4 <_strtod_l+0x79c>
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	9805      	ldr	r0, [sp, #20]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	f7ff f9bd 	bl	8008048 <__lshift>
 8008cce:	4681      	mov	r9, r0
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d0d8      	beq.n	8008c86 <_strtod_l+0x74e>
 8008cd4:	2f00      	cmp	r7, #0
 8008cd6:	dd08      	ble.n	8008cea <_strtod_l+0x7b2>
 8008cd8:	4641      	mov	r1, r8
 8008cda:	9805      	ldr	r0, [sp, #20]
 8008cdc:	463a      	mov	r2, r7
 8008cde:	f7ff f9b3 	bl	8008048 <__lshift>
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f43f ae46 	beq.w	8008976 <_strtod_l+0x43e>
 8008cea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cec:	9805      	ldr	r0, [sp, #20]
 8008cee:	464a      	mov	r2, r9
 8008cf0:	f7ff fa32 	bl	8008158 <__mdiff>
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f43f ae3d 	beq.w	8008976 <_strtod_l+0x43e>
 8008cfc:	68c3      	ldr	r3, [r0, #12]
 8008cfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d00:	2300      	movs	r3, #0
 8008d02:	60c3      	str	r3, [r0, #12]
 8008d04:	4641      	mov	r1, r8
 8008d06:	f7ff fa0b 	bl	8008120 <__mcmp>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	da46      	bge.n	8008d9c <_strtod_l+0x864>
 8008d0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d10:	ea53 030a 	orrs.w	r3, r3, sl
 8008d14:	d16c      	bne.n	8008df0 <_strtod_l+0x8b8>
 8008d16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d168      	bne.n	8008df0 <_strtod_l+0x8b8>
 8008d1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d22:	0d1b      	lsrs	r3, r3, #20
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d2a:	d961      	bls.n	8008df0 <_strtod_l+0x8b8>
 8008d2c:	6963      	ldr	r3, [r4, #20]
 8008d2e:	b913      	cbnz	r3, 8008d36 <_strtod_l+0x7fe>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	dd5c      	ble.n	8008df0 <_strtod_l+0x8b8>
 8008d36:	4621      	mov	r1, r4
 8008d38:	2201      	movs	r2, #1
 8008d3a:	9805      	ldr	r0, [sp, #20]
 8008d3c:	f7ff f984 	bl	8008048 <__lshift>
 8008d40:	4641      	mov	r1, r8
 8008d42:	4604      	mov	r4, r0
 8008d44:	f7ff f9ec 	bl	8008120 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	dd51      	ble.n	8008df0 <_strtod_l+0x8b8>
 8008d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d50:	9a08      	ldr	r2, [sp, #32]
 8008d52:	0d1b      	lsrs	r3, r3, #20
 8008d54:	051b      	lsls	r3, r3, #20
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d06b      	beq.n	8008e32 <_strtod_l+0x8fa>
 8008d5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d5e:	d868      	bhi.n	8008e32 <_strtod_l+0x8fa>
 8008d60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d64:	f67f ae9d 	bls.w	8008aa2 <_strtod_l+0x56a>
 8008d68:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <_strtod_l+0x85c>)
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7f7 fc1a 	bl	80005a8 <__aeabi_dmul>
 8008d74:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <_strtod_l+0x860>)
 8008d76:	400b      	ands	r3, r1
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f47f ae05 	bne.w	800898c <_strtod_l+0x454>
 8008d82:	9a05      	ldr	r2, [sp, #20]
 8008d84:	2322      	movs	r3, #34	@ 0x22
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	e600      	b.n	800898c <_strtod_l+0x454>
 8008d8a:	bf00      	nop
 8008d8c:	0800a740 	.word	0x0800a740
 8008d90:	fffffc02 	.word	0xfffffc02
 8008d94:	39500000 	.word	0x39500000
 8008d98:	7ff00000 	.word	0x7ff00000
 8008d9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008da0:	d165      	bne.n	8008e6e <_strtod_l+0x936>
 8008da2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008da8:	b35a      	cbz	r2, 8008e02 <_strtod_l+0x8ca>
 8008daa:	4a9f      	ldr	r2, [pc, #636]	@ (8009028 <_strtod_l+0xaf0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d12b      	bne.n	8008e08 <_strtod_l+0x8d0>
 8008db0:	9b08      	ldr	r3, [sp, #32]
 8008db2:	4651      	mov	r1, sl
 8008db4:	b303      	cbz	r3, 8008df8 <_strtod_l+0x8c0>
 8008db6:	4b9d      	ldr	r3, [pc, #628]	@ (800902c <_strtod_l+0xaf4>)
 8008db8:	465a      	mov	r2, fp
 8008dba:	4013      	ands	r3, r2
 8008dbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	d81b      	bhi.n	8008dfe <_strtod_l+0x8c6>
 8008dc6:	0d1b      	lsrs	r3, r3, #20
 8008dc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d119      	bne.n	8008e08 <_strtod_l+0x8d0>
 8008dd4:	4b96      	ldr	r3, [pc, #600]	@ (8009030 <_strtod_l+0xaf8>)
 8008dd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d102      	bne.n	8008de2 <_strtod_l+0x8aa>
 8008ddc:	3101      	adds	r1, #1
 8008dde:	f43f adca 	beq.w	8008976 <_strtod_l+0x43e>
 8008de2:	4b92      	ldr	r3, [pc, #584]	@ (800902c <_strtod_l+0xaf4>)
 8008de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008de6:	401a      	ands	r2, r3
 8008de8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008dec:	f04f 0a00 	mov.w	sl, #0
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1b8      	bne.n	8008d68 <_strtod_l+0x830>
 8008df6:	e5c9      	b.n	800898c <_strtod_l+0x454>
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfc:	e7e8      	b.n	8008dd0 <_strtod_l+0x898>
 8008dfe:	4613      	mov	r3, r2
 8008e00:	e7e6      	b.n	8008dd0 <_strtod_l+0x898>
 8008e02:	ea53 030a 	orrs.w	r3, r3, sl
 8008e06:	d0a1      	beq.n	8008d4c <_strtod_l+0x814>
 8008e08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e0a:	b1db      	cbz	r3, 8008e44 <_strtod_l+0x90c>
 8008e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e0e:	4213      	tst	r3, r2
 8008e10:	d0ee      	beq.n	8008df0 <_strtod_l+0x8b8>
 8008e12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e14:	9a08      	ldr	r2, [sp, #32]
 8008e16:	4650      	mov	r0, sl
 8008e18:	4659      	mov	r1, fp
 8008e1a:	b1bb      	cbz	r3, 8008e4c <_strtod_l+0x914>
 8008e1c:	f7ff fb6e 	bl	80084fc <sulp>
 8008e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e24:	ec53 2b10 	vmov	r2, r3, d0
 8008e28:	f7f7 fa08 	bl	800023c <__adddf3>
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	e7de      	b.n	8008df0 <_strtod_l+0x8b8>
 8008e32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e3e:	f04f 3aff 	mov.w	sl, #4294967295
 8008e42:	e7d5      	b.n	8008df0 <_strtod_l+0x8b8>
 8008e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e46:	ea13 0f0a 	tst.w	r3, sl
 8008e4a:	e7e1      	b.n	8008e10 <_strtod_l+0x8d8>
 8008e4c:	f7ff fb56 	bl	80084fc <sulp>
 8008e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e54:	ec53 2b10 	vmov	r2, r3, d0
 8008e58:	f7f7 f9ee 	bl	8000238 <__aeabi_dsub>
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2300      	movs	r3, #0
 8008e60:	4682      	mov	sl, r0
 8008e62:	468b      	mov	fp, r1
 8008e64:	f7f7 fe08 	bl	8000a78 <__aeabi_dcmpeq>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d0c1      	beq.n	8008df0 <_strtod_l+0x8b8>
 8008e6c:	e619      	b.n	8008aa2 <_strtod_l+0x56a>
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff facd 	bl	8008410 <__ratio>
 8008e76:	ec57 6b10 	vmov	r6, r7, d0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fe0c 	bl	8000aa0 <__aeabi_dcmple>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d06f      	beq.n	8008f6c <_strtod_l+0xa34>
 8008e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d17a      	bne.n	8008f88 <_strtod_l+0xa50>
 8008e92:	f1ba 0f00 	cmp.w	sl, #0
 8008e96:	d158      	bne.n	8008f4a <_strtod_l+0xa12>
 8008e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d15a      	bne.n	8008f58 <_strtod_l+0xa20>
 8008ea2:	4b64      	ldr	r3, [pc, #400]	@ (8009034 <_strtod_l+0xafc>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f7f7 fdef 	bl	8000a8c <__aeabi_dcmplt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d159      	bne.n	8008f66 <_strtod_l+0xa2e>
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4b60      	ldr	r3, [pc, #384]	@ (8009038 <_strtod_l+0xb00>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f7f7 fb75 	bl	80005a8 <__aeabi_dmul>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ec6:	9606      	str	r6, [sp, #24]
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ece:	4d57      	ldr	r5, [pc, #348]	@ (800902c <_strtod_l+0xaf4>)
 8008ed0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed6:	401d      	ands	r5, r3
 8008ed8:	4b58      	ldr	r3, [pc, #352]	@ (800903c <_strtod_l+0xb04>)
 8008eda:	429d      	cmp	r5, r3
 8008edc:	f040 80b2 	bne.w	8009044 <_strtod_l+0xb0c>
 8008ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ee6:	ec4b ab10 	vmov	d0, sl, fp
 8008eea:	f7ff f9c9 	bl	8008280 <__ulp>
 8008eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef2:	ec51 0b10 	vmov	r0, r1, d0
 8008ef6:	f7f7 fb57 	bl	80005a8 <__aeabi_dmul>
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	f7f7 f99d 	bl	800023c <__adddf3>
 8008f02:	460b      	mov	r3, r1
 8008f04:	4949      	ldr	r1, [pc, #292]	@ (800902c <_strtod_l+0xaf4>)
 8008f06:	4a4e      	ldr	r2, [pc, #312]	@ (8009040 <_strtod_l+0xb08>)
 8008f08:	4019      	ands	r1, r3
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	d942      	bls.n	8008f96 <_strtod_l+0xa5e>
 8008f10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f12:	4b47      	ldr	r3, [pc, #284]	@ (8009030 <_strtod_l+0xaf8>)
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d103      	bne.n	8008f20 <_strtod_l+0x9e8>
 8008f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	f43f ad2b 	beq.w	8008976 <_strtod_l+0x43e>
 8008f20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009030 <_strtod_l+0xaf8>
 8008f24:	f04f 3aff 	mov.w	sl, #4294967295
 8008f28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2a:	9805      	ldr	r0, [sp, #20]
 8008f2c:	f7fe fe74 	bl	8007c18 <_Bfree>
 8008f30:	9805      	ldr	r0, [sp, #20]
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7fe fe70 	bl	8007c18 <_Bfree>
 8008f38:	9805      	ldr	r0, [sp, #20]
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	f7fe fe6c 	bl	8007c18 <_Bfree>
 8008f40:	9805      	ldr	r0, [sp, #20]
 8008f42:	4621      	mov	r1, r4
 8008f44:	f7fe fe68 	bl	8007c18 <_Bfree>
 8008f48:	e618      	b.n	8008b7c <_strtod_l+0x644>
 8008f4a:	f1ba 0f01 	cmp.w	sl, #1
 8008f4e:	d103      	bne.n	8008f58 <_strtod_l+0xa20>
 8008f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f43f ada5 	beq.w	8008aa2 <_strtod_l+0x56a>
 8008f58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009008 <_strtod_l+0xad0>
 8008f5c:	4f35      	ldr	r7, [pc, #212]	@ (8009034 <_strtod_l+0xafc>)
 8008f5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f62:	2600      	movs	r6, #0
 8008f64:	e7b1      	b.n	8008eca <_strtod_l+0x992>
 8008f66:	4f34      	ldr	r7, [pc, #208]	@ (8009038 <_strtod_l+0xb00>)
 8008f68:	2600      	movs	r6, #0
 8008f6a:	e7aa      	b.n	8008ec2 <_strtod_l+0x98a>
 8008f6c:	4b32      	ldr	r3, [pc, #200]	@ (8009038 <_strtod_l+0xb00>)
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	2200      	movs	r2, #0
 8008f74:	f7f7 fb18 	bl	80005a8 <__aeabi_dmul>
 8008f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d09f      	beq.n	8008ec2 <_strtod_l+0x98a>
 8008f82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f86:	e7a0      	b.n	8008eca <_strtod_l+0x992>
 8008f88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009010 <_strtod_l+0xad8>
 8008f8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008f90:	ec57 6b17 	vmov	r6, r7, d7
 8008f94:	e799      	b.n	8008eca <_strtod_l+0x992>
 8008f96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008f9a:	9b08      	ldr	r3, [sp, #32]
 8008f9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1c1      	bne.n	8008f28 <_strtod_l+0x9f0>
 8008fa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fa8:	0d1b      	lsrs	r3, r3, #20
 8008faa:	051b      	lsls	r3, r3, #20
 8008fac:	429d      	cmp	r5, r3
 8008fae:	d1bb      	bne.n	8008f28 <_strtod_l+0x9f0>
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	f7f7 fe58 	bl	8000c68 <__aeabi_d2lz>
 8008fb8:	f7f7 fac8 	bl	800054c <__aeabi_l2d>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	f7f7 f938 	bl	8000238 <__aeabi_dsub>
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4602      	mov	r2, r0
 8008fcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008fd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd6:	ea46 060a 	orr.w	r6, r6, sl
 8008fda:	431e      	orrs	r6, r3
 8008fdc:	d06f      	beq.n	80090be <_strtod_l+0xb86>
 8008fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8009018 <_strtod_l+0xae0>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 fd52 	bl	8000a8c <__aeabi_dcmplt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f47f accf 	bne.w	800898c <_strtod_l+0x454>
 8008fee:	a30c      	add	r3, pc, #48	@ (adr r3, 8009020 <_strtod_l+0xae8>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ff8:	f7f7 fd66 	bl	8000ac8 <__aeabi_dcmpgt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d093      	beq.n	8008f28 <_strtod_l+0x9f0>
 8009000:	e4c4      	b.n	800898c <_strtod_l+0x454>
 8009002:	bf00      	nop
 8009004:	f3af 8000 	nop.w
 8009008:	00000000 	.word	0x00000000
 800900c:	bff00000 	.word	0xbff00000
 8009010:	00000000 	.word	0x00000000
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	94a03595 	.word	0x94a03595
 800901c:	3fdfffff 	.word	0x3fdfffff
 8009020:	35afe535 	.word	0x35afe535
 8009024:	3fe00000 	.word	0x3fe00000
 8009028:	000fffff 	.word	0x000fffff
 800902c:	7ff00000 	.word	0x7ff00000
 8009030:	7fefffff 	.word	0x7fefffff
 8009034:	3ff00000 	.word	0x3ff00000
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	7fe00000 	.word	0x7fe00000
 8009040:	7c9fffff 	.word	0x7c9fffff
 8009044:	9b08      	ldr	r3, [sp, #32]
 8009046:	b323      	cbz	r3, 8009092 <_strtod_l+0xb5a>
 8009048:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800904c:	d821      	bhi.n	8009092 <_strtod_l+0xb5a>
 800904e:	a328      	add	r3, pc, #160	@ (adr r3, 80090f0 <_strtod_l+0xbb8>)
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 fd22 	bl	8000aa0 <__aeabi_dcmple>
 800905c:	b1a0      	cbz	r0, 8009088 <_strtod_l+0xb50>
 800905e:	4639      	mov	r1, r7
 8009060:	4630      	mov	r0, r6
 8009062:	f7f7 fd79 	bl	8000b58 <__aeabi_d2uiz>
 8009066:	2801      	cmp	r0, #1
 8009068:	bf38      	it	cc
 800906a:	2001      	movcc	r0, #1
 800906c:	f7f7 fa22 	bl	80004b4 <__aeabi_ui2d>
 8009070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	b9fb      	cbnz	r3, 80090b8 <_strtod_l+0xb80>
 8009078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800907c:	9014      	str	r0, [sp, #80]	@ 0x50
 800907e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009080:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009084:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009088:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800908a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800908e:	1b5b      	subs	r3, r3, r5
 8009090:	9311      	str	r3, [sp, #68]	@ 0x44
 8009092:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009096:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800909a:	f7ff f8f1 	bl	8008280 <__ulp>
 800909e:	4650      	mov	r0, sl
 80090a0:	ec53 2b10 	vmov	r2, r3, d0
 80090a4:	4659      	mov	r1, fp
 80090a6:	f7f7 fa7f 	bl	80005a8 <__aeabi_dmul>
 80090aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090ae:	f7f7 f8c5 	bl	800023c <__adddf3>
 80090b2:	4682      	mov	sl, r0
 80090b4:	468b      	mov	fp, r1
 80090b6:	e770      	b.n	8008f9a <_strtod_l+0xa62>
 80090b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80090bc:	e7e0      	b.n	8009080 <_strtod_l+0xb48>
 80090be:	a30e      	add	r3, pc, #56	@ (adr r3, 80090f8 <_strtod_l+0xbc0>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f7f7 fce2 	bl	8000a8c <__aeabi_dcmplt>
 80090c8:	e798      	b.n	8008ffc <_strtod_l+0xac4>
 80090ca:	2300      	movs	r3, #0
 80090cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	f7ff ba6d 	b.w	80085b2 <_strtod_l+0x7a>
 80090d8:	2a65      	cmp	r2, #101	@ 0x65
 80090da:	f43f ab66 	beq.w	80087aa <_strtod_l+0x272>
 80090de:	2a45      	cmp	r2, #69	@ 0x45
 80090e0:	f43f ab63 	beq.w	80087aa <_strtod_l+0x272>
 80090e4:	2301      	movs	r3, #1
 80090e6:	f7ff bb9e 	b.w	8008826 <_strtod_l+0x2ee>
 80090ea:	bf00      	nop
 80090ec:	f3af 8000 	nop.w
 80090f0:	ffc00000 	.word	0xffc00000
 80090f4:	41dfffff 	.word	0x41dfffff
 80090f8:	94a03595 	.word	0x94a03595
 80090fc:	3fcfffff 	.word	0x3fcfffff

08009100 <_strtod_r>:
 8009100:	4b01      	ldr	r3, [pc, #4]	@ (8009108 <_strtod_r+0x8>)
 8009102:	f7ff ba19 	b.w	8008538 <_strtod_l>
 8009106:	bf00      	nop
 8009108:	2000006c 	.word	0x2000006c

0800910c <_strtol_l.constprop.0>:
 800910c:	2b24      	cmp	r3, #36	@ 0x24
 800910e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009112:	4686      	mov	lr, r0
 8009114:	4690      	mov	r8, r2
 8009116:	d801      	bhi.n	800911c <_strtol_l.constprop.0+0x10>
 8009118:	2b01      	cmp	r3, #1
 800911a:	d106      	bne.n	800912a <_strtol_l.constprop.0+0x1e>
 800911c:	f7fd fdbc 	bl	8006c98 <__errno>
 8009120:	2316      	movs	r3, #22
 8009122:	6003      	str	r3, [r0, #0]
 8009124:	2000      	movs	r0, #0
 8009126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912a:	4834      	ldr	r0, [pc, #208]	@ (80091fc <_strtol_l.constprop.0+0xf0>)
 800912c:	460d      	mov	r5, r1
 800912e:	462a      	mov	r2, r5
 8009130:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009134:	5d06      	ldrb	r6, [r0, r4]
 8009136:	f016 0608 	ands.w	r6, r6, #8
 800913a:	d1f8      	bne.n	800912e <_strtol_l.constprop.0+0x22>
 800913c:	2c2d      	cmp	r4, #45	@ 0x2d
 800913e:	d12d      	bne.n	800919c <_strtol_l.constprop.0+0x90>
 8009140:	782c      	ldrb	r4, [r5, #0]
 8009142:	2601      	movs	r6, #1
 8009144:	1c95      	adds	r5, r2, #2
 8009146:	f033 0210 	bics.w	r2, r3, #16
 800914a:	d109      	bne.n	8009160 <_strtol_l.constprop.0+0x54>
 800914c:	2c30      	cmp	r4, #48	@ 0x30
 800914e:	d12a      	bne.n	80091a6 <_strtol_l.constprop.0+0x9a>
 8009150:	782a      	ldrb	r2, [r5, #0]
 8009152:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009156:	2a58      	cmp	r2, #88	@ 0x58
 8009158:	d125      	bne.n	80091a6 <_strtol_l.constprop.0+0x9a>
 800915a:	786c      	ldrb	r4, [r5, #1]
 800915c:	2310      	movs	r3, #16
 800915e:	3502      	adds	r5, #2
 8009160:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009164:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009168:	2200      	movs	r2, #0
 800916a:	fbbc f9f3 	udiv	r9, ip, r3
 800916e:	4610      	mov	r0, r2
 8009170:	fb03 ca19 	mls	sl, r3, r9, ip
 8009174:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009178:	2f09      	cmp	r7, #9
 800917a:	d81b      	bhi.n	80091b4 <_strtol_l.constprop.0+0xa8>
 800917c:	463c      	mov	r4, r7
 800917e:	42a3      	cmp	r3, r4
 8009180:	dd27      	ble.n	80091d2 <_strtol_l.constprop.0+0xc6>
 8009182:	1c57      	adds	r7, r2, #1
 8009184:	d007      	beq.n	8009196 <_strtol_l.constprop.0+0x8a>
 8009186:	4581      	cmp	r9, r0
 8009188:	d320      	bcc.n	80091cc <_strtol_l.constprop.0+0xc0>
 800918a:	d101      	bne.n	8009190 <_strtol_l.constprop.0+0x84>
 800918c:	45a2      	cmp	sl, r4
 800918e:	db1d      	blt.n	80091cc <_strtol_l.constprop.0+0xc0>
 8009190:	fb00 4003 	mla	r0, r0, r3, r4
 8009194:	2201      	movs	r2, #1
 8009196:	f815 4b01 	ldrb.w	r4, [r5], #1
 800919a:	e7eb      	b.n	8009174 <_strtol_l.constprop.0+0x68>
 800919c:	2c2b      	cmp	r4, #43	@ 0x2b
 800919e:	bf04      	itt	eq
 80091a0:	782c      	ldrbeq	r4, [r5, #0]
 80091a2:	1c95      	addeq	r5, r2, #2
 80091a4:	e7cf      	b.n	8009146 <_strtol_l.constprop.0+0x3a>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1da      	bne.n	8009160 <_strtol_l.constprop.0+0x54>
 80091aa:	2c30      	cmp	r4, #48	@ 0x30
 80091ac:	bf0c      	ite	eq
 80091ae:	2308      	moveq	r3, #8
 80091b0:	230a      	movne	r3, #10
 80091b2:	e7d5      	b.n	8009160 <_strtol_l.constprop.0+0x54>
 80091b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80091b8:	2f19      	cmp	r7, #25
 80091ba:	d801      	bhi.n	80091c0 <_strtol_l.constprop.0+0xb4>
 80091bc:	3c37      	subs	r4, #55	@ 0x37
 80091be:	e7de      	b.n	800917e <_strtol_l.constprop.0+0x72>
 80091c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80091c4:	2f19      	cmp	r7, #25
 80091c6:	d804      	bhi.n	80091d2 <_strtol_l.constprop.0+0xc6>
 80091c8:	3c57      	subs	r4, #87	@ 0x57
 80091ca:	e7d8      	b.n	800917e <_strtol_l.constprop.0+0x72>
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	e7e1      	b.n	8009196 <_strtol_l.constprop.0+0x8a>
 80091d2:	1c53      	adds	r3, r2, #1
 80091d4:	d108      	bne.n	80091e8 <_strtol_l.constprop.0+0xdc>
 80091d6:	2322      	movs	r3, #34	@ 0x22
 80091d8:	f8ce 3000 	str.w	r3, [lr]
 80091dc:	4660      	mov	r0, ip
 80091de:	f1b8 0f00 	cmp.w	r8, #0
 80091e2:	d0a0      	beq.n	8009126 <_strtol_l.constprop.0+0x1a>
 80091e4:	1e69      	subs	r1, r5, #1
 80091e6:	e006      	b.n	80091f6 <_strtol_l.constprop.0+0xea>
 80091e8:	b106      	cbz	r6, 80091ec <_strtol_l.constprop.0+0xe0>
 80091ea:	4240      	negs	r0, r0
 80091ec:	f1b8 0f00 	cmp.w	r8, #0
 80091f0:	d099      	beq.n	8009126 <_strtol_l.constprop.0+0x1a>
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	d1f6      	bne.n	80091e4 <_strtol_l.constprop.0+0xd8>
 80091f6:	f8c8 1000 	str.w	r1, [r8]
 80091fa:	e794      	b.n	8009126 <_strtol_l.constprop.0+0x1a>
 80091fc:	0800a769 	.word	0x0800a769

08009200 <_strtol_r>:
 8009200:	f7ff bf84 	b.w	800910c <_strtol_l.constprop.0>

08009204 <__ssputs_r>:
 8009204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	688e      	ldr	r6, [r1, #8]
 800920a:	461f      	mov	r7, r3
 800920c:	42be      	cmp	r6, r7
 800920e:	680b      	ldr	r3, [r1, #0]
 8009210:	4682      	mov	sl, r0
 8009212:	460c      	mov	r4, r1
 8009214:	4690      	mov	r8, r2
 8009216:	d82d      	bhi.n	8009274 <__ssputs_r+0x70>
 8009218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800921c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009220:	d026      	beq.n	8009270 <__ssputs_r+0x6c>
 8009222:	6965      	ldr	r5, [r4, #20]
 8009224:	6909      	ldr	r1, [r1, #16]
 8009226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800922a:	eba3 0901 	sub.w	r9, r3, r1
 800922e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009232:	1c7b      	adds	r3, r7, #1
 8009234:	444b      	add	r3, r9
 8009236:	106d      	asrs	r5, r5, #1
 8009238:	429d      	cmp	r5, r3
 800923a:	bf38      	it	cc
 800923c:	461d      	movcc	r5, r3
 800923e:	0553      	lsls	r3, r2, #21
 8009240:	d527      	bpl.n	8009292 <__ssputs_r+0x8e>
 8009242:	4629      	mov	r1, r5
 8009244:	f7fe fc1c 	bl	8007a80 <_malloc_r>
 8009248:	4606      	mov	r6, r0
 800924a:	b360      	cbz	r0, 80092a6 <__ssputs_r+0xa2>
 800924c:	6921      	ldr	r1, [r4, #16]
 800924e:	464a      	mov	r2, r9
 8009250:	f000 fa18 	bl	8009684 <memcpy>
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800925a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	6126      	str	r6, [r4, #16]
 8009262:	6165      	str	r5, [r4, #20]
 8009264:	444e      	add	r6, r9
 8009266:	eba5 0509 	sub.w	r5, r5, r9
 800926a:	6026      	str	r6, [r4, #0]
 800926c:	60a5      	str	r5, [r4, #8]
 800926e:	463e      	mov	r6, r7
 8009270:	42be      	cmp	r6, r7
 8009272:	d900      	bls.n	8009276 <__ssputs_r+0x72>
 8009274:	463e      	mov	r6, r7
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	4632      	mov	r2, r6
 800927a:	4641      	mov	r1, r8
 800927c:	f000 f9c6 	bl	800960c <memmove>
 8009280:	68a3      	ldr	r3, [r4, #8]
 8009282:	1b9b      	subs	r3, r3, r6
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	4433      	add	r3, r6
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009292:	462a      	mov	r2, r5
 8009294:	f000 fd89 	bl	8009daa <_realloc_r>
 8009298:	4606      	mov	r6, r0
 800929a:	2800      	cmp	r0, #0
 800929c:	d1e0      	bne.n	8009260 <__ssputs_r+0x5c>
 800929e:	6921      	ldr	r1, [r4, #16]
 80092a0:	4650      	mov	r0, sl
 80092a2:	f7fe fb79 	bl	8007998 <_free_r>
 80092a6:	230c      	movs	r3, #12
 80092a8:	f8ca 3000 	str.w	r3, [sl]
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	f04f 30ff 	mov.w	r0, #4294967295
 80092b8:	e7e9      	b.n	800928e <__ssputs_r+0x8a>
	...

080092bc <_svfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	4698      	mov	r8, r3
 80092c2:	898b      	ldrh	r3, [r1, #12]
 80092c4:	061b      	lsls	r3, r3, #24
 80092c6:	b09d      	sub	sp, #116	@ 0x74
 80092c8:	4607      	mov	r7, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	4614      	mov	r4, r2
 80092ce:	d510      	bpl.n	80092f2 <_svfiprintf_r+0x36>
 80092d0:	690b      	ldr	r3, [r1, #16]
 80092d2:	b973      	cbnz	r3, 80092f2 <_svfiprintf_r+0x36>
 80092d4:	2140      	movs	r1, #64	@ 0x40
 80092d6:	f7fe fbd3 	bl	8007a80 <_malloc_r>
 80092da:	6028      	str	r0, [r5, #0]
 80092dc:	6128      	str	r0, [r5, #16]
 80092de:	b930      	cbnz	r0, 80092ee <_svfiprintf_r+0x32>
 80092e0:	230c      	movs	r3, #12
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	b01d      	add	sp, #116	@ 0x74
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	2340      	movs	r3, #64	@ 0x40
 80092f0:	616b      	str	r3, [r5, #20]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f6:	2320      	movs	r3, #32
 80092f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009300:	2330      	movs	r3, #48	@ 0x30
 8009302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80094a0 <_svfiprintf_r+0x1e4>
 8009306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800930a:	f04f 0901 	mov.w	r9, #1
 800930e:	4623      	mov	r3, r4
 8009310:	469a      	mov	sl, r3
 8009312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009316:	b10a      	cbz	r2, 800931c <_svfiprintf_r+0x60>
 8009318:	2a25      	cmp	r2, #37	@ 0x25
 800931a:	d1f9      	bne.n	8009310 <_svfiprintf_r+0x54>
 800931c:	ebba 0b04 	subs.w	fp, sl, r4
 8009320:	d00b      	beq.n	800933a <_svfiprintf_r+0x7e>
 8009322:	465b      	mov	r3, fp
 8009324:	4622      	mov	r2, r4
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ff6b 	bl	8009204 <__ssputs_r>
 800932e:	3001      	adds	r0, #1
 8009330:	f000 80a7 	beq.w	8009482 <_svfiprintf_r+0x1c6>
 8009334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009336:	445a      	add	r2, fp
 8009338:	9209      	str	r2, [sp, #36]	@ 0x24
 800933a:	f89a 3000 	ldrb.w	r3, [sl]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 809f 	beq.w	8009482 <_svfiprintf_r+0x1c6>
 8009344:	2300      	movs	r3, #0
 8009346:	f04f 32ff 	mov.w	r2, #4294967295
 800934a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800934e:	f10a 0a01 	add.w	sl, sl, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	9307      	str	r3, [sp, #28]
 8009356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800935a:	931a      	str	r3, [sp, #104]	@ 0x68
 800935c:	4654      	mov	r4, sl
 800935e:	2205      	movs	r2, #5
 8009360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009364:	484e      	ldr	r0, [pc, #312]	@ (80094a0 <_svfiprintf_r+0x1e4>)
 8009366:	f7f6 ff0b 	bl	8000180 <memchr>
 800936a:	9a04      	ldr	r2, [sp, #16]
 800936c:	b9d8      	cbnz	r0, 80093a6 <_svfiprintf_r+0xea>
 800936e:	06d0      	lsls	r0, r2, #27
 8009370:	bf44      	itt	mi
 8009372:	2320      	movmi	r3, #32
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009378:	0711      	lsls	r1, r2, #28
 800937a:	bf44      	itt	mi
 800937c:	232b      	movmi	r3, #43	@ 0x2b
 800937e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009382:	f89a 3000 	ldrb.w	r3, [sl]
 8009386:	2b2a      	cmp	r3, #42	@ 0x2a
 8009388:	d015      	beq.n	80093b6 <_svfiprintf_r+0xfa>
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	4654      	mov	r4, sl
 800938e:	2000      	movs	r0, #0
 8009390:	f04f 0c0a 	mov.w	ip, #10
 8009394:	4621      	mov	r1, r4
 8009396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939a:	3b30      	subs	r3, #48	@ 0x30
 800939c:	2b09      	cmp	r3, #9
 800939e:	d94b      	bls.n	8009438 <_svfiprintf_r+0x17c>
 80093a0:	b1b0      	cbz	r0, 80093d0 <_svfiprintf_r+0x114>
 80093a2:	9207      	str	r2, [sp, #28]
 80093a4:	e014      	b.n	80093d0 <_svfiprintf_r+0x114>
 80093a6:	eba0 0308 	sub.w	r3, r0, r8
 80093aa:	fa09 f303 	lsl.w	r3, r9, r3
 80093ae:	4313      	orrs	r3, r2
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	46a2      	mov	sl, r4
 80093b4:	e7d2      	b.n	800935c <_svfiprintf_r+0xa0>
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	1d19      	adds	r1, r3, #4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	9103      	str	r1, [sp, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfbb      	ittet	lt
 80093c2:	425b      	neglt	r3, r3
 80093c4:	f042 0202 	orrlt.w	r2, r2, #2
 80093c8:	9307      	strge	r3, [sp, #28]
 80093ca:	9307      	strlt	r3, [sp, #28]
 80093cc:	bfb8      	it	lt
 80093ce:	9204      	strlt	r2, [sp, #16]
 80093d0:	7823      	ldrb	r3, [r4, #0]
 80093d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80093d4:	d10a      	bne.n	80093ec <_svfiprintf_r+0x130>
 80093d6:	7863      	ldrb	r3, [r4, #1]
 80093d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093da:	d132      	bne.n	8009442 <_svfiprintf_r+0x186>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9203      	str	r2, [sp, #12]
 80093e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093e8:	3402      	adds	r4, #2
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80094b0 <_svfiprintf_r+0x1f4>
 80093f0:	7821      	ldrb	r1, [r4, #0]
 80093f2:	2203      	movs	r2, #3
 80093f4:	4650      	mov	r0, sl
 80093f6:	f7f6 fec3 	bl	8000180 <memchr>
 80093fa:	b138      	cbz	r0, 800940c <_svfiprintf_r+0x150>
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	eba0 000a 	sub.w	r0, r0, sl
 8009402:	2240      	movs	r2, #64	@ 0x40
 8009404:	4082      	lsls	r2, r0
 8009406:	4313      	orrs	r3, r2
 8009408:	3401      	adds	r4, #1
 800940a:	9304      	str	r3, [sp, #16]
 800940c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009410:	4824      	ldr	r0, [pc, #144]	@ (80094a4 <_svfiprintf_r+0x1e8>)
 8009412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009416:	2206      	movs	r2, #6
 8009418:	f7f6 feb2 	bl	8000180 <memchr>
 800941c:	2800      	cmp	r0, #0
 800941e:	d036      	beq.n	800948e <_svfiprintf_r+0x1d2>
 8009420:	4b21      	ldr	r3, [pc, #132]	@ (80094a8 <_svfiprintf_r+0x1ec>)
 8009422:	bb1b      	cbnz	r3, 800946c <_svfiprintf_r+0x1b0>
 8009424:	9b03      	ldr	r3, [sp, #12]
 8009426:	3307      	adds	r3, #7
 8009428:	f023 0307 	bic.w	r3, r3, #7
 800942c:	3308      	adds	r3, #8
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009432:	4433      	add	r3, r6
 8009434:	9309      	str	r3, [sp, #36]	@ 0x24
 8009436:	e76a      	b.n	800930e <_svfiprintf_r+0x52>
 8009438:	fb0c 3202 	mla	r2, ip, r2, r3
 800943c:	460c      	mov	r4, r1
 800943e:	2001      	movs	r0, #1
 8009440:	e7a8      	b.n	8009394 <_svfiprintf_r+0xd8>
 8009442:	2300      	movs	r3, #0
 8009444:	3401      	adds	r4, #1
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	4619      	mov	r1, r3
 800944a:	f04f 0c0a 	mov.w	ip, #10
 800944e:	4620      	mov	r0, r4
 8009450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009454:	3a30      	subs	r2, #48	@ 0x30
 8009456:	2a09      	cmp	r2, #9
 8009458:	d903      	bls.n	8009462 <_svfiprintf_r+0x1a6>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d0c6      	beq.n	80093ec <_svfiprintf_r+0x130>
 800945e:	9105      	str	r1, [sp, #20]
 8009460:	e7c4      	b.n	80093ec <_svfiprintf_r+0x130>
 8009462:	fb0c 2101 	mla	r1, ip, r1, r2
 8009466:	4604      	mov	r4, r0
 8009468:	2301      	movs	r3, #1
 800946a:	e7f0      	b.n	800944e <_svfiprintf_r+0x192>
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	462a      	mov	r2, r5
 8009472:	4b0e      	ldr	r3, [pc, #56]	@ (80094ac <_svfiprintf_r+0x1f0>)
 8009474:	a904      	add	r1, sp, #16
 8009476:	4638      	mov	r0, r7
 8009478:	f7fc fcca 	bl	8005e10 <_printf_float>
 800947c:	1c42      	adds	r2, r0, #1
 800947e:	4606      	mov	r6, r0
 8009480:	d1d6      	bne.n	8009430 <_svfiprintf_r+0x174>
 8009482:	89ab      	ldrh	r3, [r5, #12]
 8009484:	065b      	lsls	r3, r3, #25
 8009486:	f53f af2d 	bmi.w	80092e4 <_svfiprintf_r+0x28>
 800948a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800948c:	e72c      	b.n	80092e8 <_svfiprintf_r+0x2c>
 800948e:	ab03      	add	r3, sp, #12
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	462a      	mov	r2, r5
 8009494:	4b05      	ldr	r3, [pc, #20]	@ (80094ac <_svfiprintf_r+0x1f0>)
 8009496:	a904      	add	r1, sp, #16
 8009498:	4638      	mov	r0, r7
 800949a:	f7fc ff51 	bl	8006340 <_printf_i>
 800949e:	e7ed      	b.n	800947c <_svfiprintf_r+0x1c0>
 80094a0:	0800a869 	.word	0x0800a869
 80094a4:	0800a873 	.word	0x0800a873
 80094a8:	08005e11 	.word	0x08005e11
 80094ac:	08009205 	.word	0x08009205
 80094b0:	0800a86f 	.word	0x0800a86f

080094b4 <__sflush_r>:
 80094b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	0716      	lsls	r6, r2, #28
 80094be:	4605      	mov	r5, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	d454      	bmi.n	800956e <__sflush_r+0xba>
 80094c4:	684b      	ldr	r3, [r1, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dc02      	bgt.n	80094d0 <__sflush_r+0x1c>
 80094ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dd48      	ble.n	8009562 <__sflush_r+0xae>
 80094d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094d2:	2e00      	cmp	r6, #0
 80094d4:	d045      	beq.n	8009562 <__sflush_r+0xae>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094dc:	682f      	ldr	r7, [r5, #0]
 80094de:	6a21      	ldr	r1, [r4, #32]
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	d030      	beq.n	8009546 <__sflush_r+0x92>
 80094e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	0759      	lsls	r1, r3, #29
 80094ea:	d505      	bpl.n	80094f8 <__sflush_r+0x44>
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	1ad2      	subs	r2, r2, r3
 80094f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094f2:	b10b      	cbz	r3, 80094f8 <__sflush_r+0x44>
 80094f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094f6:	1ad2      	subs	r2, r2, r3
 80094f8:	2300      	movs	r3, #0
 80094fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094fc:	6a21      	ldr	r1, [r4, #32]
 80094fe:	4628      	mov	r0, r5
 8009500:	47b0      	blx	r6
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	89a3      	ldrh	r3, [r4, #12]
 8009506:	d106      	bne.n	8009516 <__sflush_r+0x62>
 8009508:	6829      	ldr	r1, [r5, #0]
 800950a:	291d      	cmp	r1, #29
 800950c:	d82b      	bhi.n	8009566 <__sflush_r+0xb2>
 800950e:	4a2a      	ldr	r2, [pc, #168]	@ (80095b8 <__sflush_r+0x104>)
 8009510:	410a      	asrs	r2, r1
 8009512:	07d6      	lsls	r6, r2, #31
 8009514:	d427      	bmi.n	8009566 <__sflush_r+0xb2>
 8009516:	2200      	movs	r2, #0
 8009518:	6062      	str	r2, [r4, #4]
 800951a:	04d9      	lsls	r1, r3, #19
 800951c:	6922      	ldr	r2, [r4, #16]
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	d504      	bpl.n	800952c <__sflush_r+0x78>
 8009522:	1c42      	adds	r2, r0, #1
 8009524:	d101      	bne.n	800952a <__sflush_r+0x76>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	b903      	cbnz	r3, 800952c <__sflush_r+0x78>
 800952a:	6560      	str	r0, [r4, #84]	@ 0x54
 800952c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800952e:	602f      	str	r7, [r5, #0]
 8009530:	b1b9      	cbz	r1, 8009562 <__sflush_r+0xae>
 8009532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009536:	4299      	cmp	r1, r3
 8009538:	d002      	beq.n	8009540 <__sflush_r+0x8c>
 800953a:	4628      	mov	r0, r5
 800953c:	f7fe fa2c 	bl	8007998 <_free_r>
 8009540:	2300      	movs	r3, #0
 8009542:	6363      	str	r3, [r4, #52]	@ 0x34
 8009544:	e00d      	b.n	8009562 <__sflush_r+0xae>
 8009546:	2301      	movs	r3, #1
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	4602      	mov	r2, r0
 800954e:	1c50      	adds	r0, r2, #1
 8009550:	d1c9      	bne.n	80094e6 <__sflush_r+0x32>
 8009552:	682b      	ldr	r3, [r5, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0c6      	beq.n	80094e6 <__sflush_r+0x32>
 8009558:	2b1d      	cmp	r3, #29
 800955a:	d001      	beq.n	8009560 <__sflush_r+0xac>
 800955c:	2b16      	cmp	r3, #22
 800955e:	d11e      	bne.n	800959e <__sflush_r+0xea>
 8009560:	602f      	str	r7, [r5, #0]
 8009562:	2000      	movs	r0, #0
 8009564:	e022      	b.n	80095ac <__sflush_r+0xf8>
 8009566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800956a:	b21b      	sxth	r3, r3
 800956c:	e01b      	b.n	80095a6 <__sflush_r+0xf2>
 800956e:	690f      	ldr	r7, [r1, #16]
 8009570:	2f00      	cmp	r7, #0
 8009572:	d0f6      	beq.n	8009562 <__sflush_r+0xae>
 8009574:	0793      	lsls	r3, r2, #30
 8009576:	680e      	ldr	r6, [r1, #0]
 8009578:	bf08      	it	eq
 800957a:	694b      	ldreq	r3, [r1, #20]
 800957c:	600f      	str	r7, [r1, #0]
 800957e:	bf18      	it	ne
 8009580:	2300      	movne	r3, #0
 8009582:	eba6 0807 	sub.w	r8, r6, r7
 8009586:	608b      	str	r3, [r1, #8]
 8009588:	f1b8 0f00 	cmp.w	r8, #0
 800958c:	dde9      	ble.n	8009562 <__sflush_r+0xae>
 800958e:	6a21      	ldr	r1, [r4, #32]
 8009590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009592:	4643      	mov	r3, r8
 8009594:	463a      	mov	r2, r7
 8009596:	4628      	mov	r0, r5
 8009598:	47b0      	blx	r6
 800959a:	2800      	cmp	r0, #0
 800959c:	dc08      	bgt.n	80095b0 <__sflush_r+0xfc>
 800959e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b0:	4407      	add	r7, r0
 80095b2:	eba8 0800 	sub.w	r8, r8, r0
 80095b6:	e7e7      	b.n	8009588 <__sflush_r+0xd4>
 80095b8:	dfbffffe 	.word	0xdfbffffe

080095bc <_fflush_r>:
 80095bc:	b538      	push	{r3, r4, r5, lr}
 80095be:	690b      	ldr	r3, [r1, #16]
 80095c0:	4605      	mov	r5, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	b913      	cbnz	r3, 80095cc <_fflush_r+0x10>
 80095c6:	2500      	movs	r5, #0
 80095c8:	4628      	mov	r0, r5
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	b118      	cbz	r0, 80095d6 <_fflush_r+0x1a>
 80095ce:	6a03      	ldr	r3, [r0, #32]
 80095d0:	b90b      	cbnz	r3, 80095d6 <_fflush_r+0x1a>
 80095d2:	f7fd fa75 	bl	8006ac0 <__sinit>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0f3      	beq.n	80095c6 <_fflush_r+0xa>
 80095de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095e0:	07d0      	lsls	r0, r2, #31
 80095e2:	d404      	bmi.n	80095ee <_fflush_r+0x32>
 80095e4:	0599      	lsls	r1, r3, #22
 80095e6:	d402      	bmi.n	80095ee <_fflush_r+0x32>
 80095e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ea:	f7fd fb80 	bl	8006cee <__retarget_lock_acquire_recursive>
 80095ee:	4628      	mov	r0, r5
 80095f0:	4621      	mov	r1, r4
 80095f2:	f7ff ff5f 	bl	80094b4 <__sflush_r>
 80095f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095f8:	07da      	lsls	r2, r3, #31
 80095fa:	4605      	mov	r5, r0
 80095fc:	d4e4      	bmi.n	80095c8 <_fflush_r+0xc>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	059b      	lsls	r3, r3, #22
 8009602:	d4e1      	bmi.n	80095c8 <_fflush_r+0xc>
 8009604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009606:	f7fd fb73 	bl	8006cf0 <__retarget_lock_release_recursive>
 800960a:	e7dd      	b.n	80095c8 <_fflush_r+0xc>

0800960c <memmove>:
 800960c:	4288      	cmp	r0, r1
 800960e:	b510      	push	{r4, lr}
 8009610:	eb01 0402 	add.w	r4, r1, r2
 8009614:	d902      	bls.n	800961c <memmove+0x10>
 8009616:	4284      	cmp	r4, r0
 8009618:	4623      	mov	r3, r4
 800961a:	d807      	bhi.n	800962c <memmove+0x20>
 800961c:	1e43      	subs	r3, r0, #1
 800961e:	42a1      	cmp	r1, r4
 8009620:	d008      	beq.n	8009634 <memmove+0x28>
 8009622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800962a:	e7f8      	b.n	800961e <memmove+0x12>
 800962c:	4402      	add	r2, r0
 800962e:	4601      	mov	r1, r0
 8009630:	428a      	cmp	r2, r1
 8009632:	d100      	bne.n	8009636 <memmove+0x2a>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800963a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800963e:	e7f7      	b.n	8009630 <memmove+0x24>

08009640 <strncmp>:
 8009640:	b510      	push	{r4, lr}
 8009642:	b16a      	cbz	r2, 8009660 <strncmp+0x20>
 8009644:	3901      	subs	r1, #1
 8009646:	1884      	adds	r4, r0, r2
 8009648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800964c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009650:	429a      	cmp	r2, r3
 8009652:	d103      	bne.n	800965c <strncmp+0x1c>
 8009654:	42a0      	cmp	r0, r4
 8009656:	d001      	beq.n	800965c <strncmp+0x1c>
 8009658:	2a00      	cmp	r2, #0
 800965a:	d1f5      	bne.n	8009648 <strncmp+0x8>
 800965c:	1ad0      	subs	r0, r2, r3
 800965e:	bd10      	pop	{r4, pc}
 8009660:	4610      	mov	r0, r2
 8009662:	e7fc      	b.n	800965e <strncmp+0x1e>

08009664 <_sbrk_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4d06      	ldr	r5, [pc, #24]	@ (8009680 <_sbrk_r+0x1c>)
 8009668:	2300      	movs	r3, #0
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f7f8 fbda 	bl	8001e28 <_sbrk>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_sbrk_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_sbrk_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	20000b00 	.word	0x20000b00

08009684 <memcpy>:
 8009684:	440a      	add	r2, r1
 8009686:	4291      	cmp	r1, r2
 8009688:	f100 33ff 	add.w	r3, r0, #4294967295
 800968c:	d100      	bne.n	8009690 <memcpy+0xc>
 800968e:	4770      	bx	lr
 8009690:	b510      	push	{r4, lr}
 8009692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800969a:	4291      	cmp	r1, r2
 800969c:	d1f9      	bne.n	8009692 <memcpy+0xe>
 800969e:	bd10      	pop	{r4, pc}

080096a0 <nan>:
 80096a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096a8 <nan+0x8>
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	00000000 	.word	0x00000000
 80096ac:	7ff80000 	.word	0x7ff80000

080096b0 <__assert_func>:
 80096b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096b2:	4614      	mov	r4, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4b09      	ldr	r3, [pc, #36]	@ (80096dc <__assert_func+0x2c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4605      	mov	r5, r0
 80096bc:	68d8      	ldr	r0, [r3, #12]
 80096be:	b954      	cbnz	r4, 80096d6 <__assert_func+0x26>
 80096c0:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <__assert_func+0x30>)
 80096c2:	461c      	mov	r4, r3
 80096c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096c8:	9100      	str	r1, [sp, #0]
 80096ca:	462b      	mov	r3, r5
 80096cc:	4905      	ldr	r1, [pc, #20]	@ (80096e4 <__assert_func+0x34>)
 80096ce:	f000 fba7 	bl	8009e20 <fiprintf>
 80096d2:	f000 fbb7 	bl	8009e44 <abort>
 80096d6:	4b04      	ldr	r3, [pc, #16]	@ (80096e8 <__assert_func+0x38>)
 80096d8:	e7f4      	b.n	80096c4 <__assert_func+0x14>
 80096da:	bf00      	nop
 80096dc:	2000001c 	.word	0x2000001c
 80096e0:	0800a8bd 	.word	0x0800a8bd
 80096e4:	0800a88f 	.word	0x0800a88f
 80096e8:	0800a882 	.word	0x0800a882

080096ec <_calloc_r>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	fba1 5402 	umull	r5, r4, r1, r2
 80096f2:	b93c      	cbnz	r4, 8009704 <_calloc_r+0x18>
 80096f4:	4629      	mov	r1, r5
 80096f6:	f7fe f9c3 	bl	8007a80 <_malloc_r>
 80096fa:	4606      	mov	r6, r0
 80096fc:	b928      	cbnz	r0, 800970a <_calloc_r+0x1e>
 80096fe:	2600      	movs	r6, #0
 8009700:	4630      	mov	r0, r6
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	220c      	movs	r2, #12
 8009706:	6002      	str	r2, [r0, #0]
 8009708:	e7f9      	b.n	80096fe <_calloc_r+0x12>
 800970a:	462a      	mov	r2, r5
 800970c:	4621      	mov	r1, r4
 800970e:	f7fd fa70 	bl	8006bf2 <memset>
 8009712:	e7f5      	b.n	8009700 <_calloc_r+0x14>

08009714 <rshift>:
 8009714:	6903      	ldr	r3, [r0, #16]
 8009716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800971a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800971e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009722:	f100 0414 	add.w	r4, r0, #20
 8009726:	dd45      	ble.n	80097b4 <rshift+0xa0>
 8009728:	f011 011f 	ands.w	r1, r1, #31
 800972c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009734:	d10c      	bne.n	8009750 <rshift+0x3c>
 8009736:	f100 0710 	add.w	r7, r0, #16
 800973a:	4629      	mov	r1, r5
 800973c:	42b1      	cmp	r1, r6
 800973e:	d334      	bcc.n	80097aa <rshift+0x96>
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	1eea      	subs	r2, r5, #3
 8009746:	4296      	cmp	r6, r2
 8009748:	bf38      	it	cc
 800974a:	2300      	movcc	r3, #0
 800974c:	4423      	add	r3, r4
 800974e:	e015      	b.n	800977c <rshift+0x68>
 8009750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009754:	f1c1 0820 	rsb	r8, r1, #32
 8009758:	40cf      	lsrs	r7, r1
 800975a:	f105 0e04 	add.w	lr, r5, #4
 800975e:	46a1      	mov	r9, r4
 8009760:	4576      	cmp	r6, lr
 8009762:	46f4      	mov	ip, lr
 8009764:	d815      	bhi.n	8009792 <rshift+0x7e>
 8009766:	1a9a      	subs	r2, r3, r2
 8009768:	0092      	lsls	r2, r2, #2
 800976a:	3a04      	subs	r2, #4
 800976c:	3501      	adds	r5, #1
 800976e:	42ae      	cmp	r6, r5
 8009770:	bf38      	it	cc
 8009772:	2200      	movcc	r2, #0
 8009774:	18a3      	adds	r3, r4, r2
 8009776:	50a7      	str	r7, [r4, r2]
 8009778:	b107      	cbz	r7, 800977c <rshift+0x68>
 800977a:	3304      	adds	r3, #4
 800977c:	1b1a      	subs	r2, r3, r4
 800977e:	42a3      	cmp	r3, r4
 8009780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009784:	bf08      	it	eq
 8009786:	2300      	moveq	r3, #0
 8009788:	6102      	str	r2, [r0, #16]
 800978a:	bf08      	it	eq
 800978c:	6143      	streq	r3, [r0, #20]
 800978e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009792:	f8dc c000 	ldr.w	ip, [ip]
 8009796:	fa0c fc08 	lsl.w	ip, ip, r8
 800979a:	ea4c 0707 	orr.w	r7, ip, r7
 800979e:	f849 7b04 	str.w	r7, [r9], #4
 80097a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097a6:	40cf      	lsrs	r7, r1
 80097a8:	e7da      	b.n	8009760 <rshift+0x4c>
 80097aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80097ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80097b2:	e7c3      	b.n	800973c <rshift+0x28>
 80097b4:	4623      	mov	r3, r4
 80097b6:	e7e1      	b.n	800977c <rshift+0x68>

080097b8 <__hexdig_fun>:
 80097b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80097bc:	2b09      	cmp	r3, #9
 80097be:	d802      	bhi.n	80097c6 <__hexdig_fun+0xe>
 80097c0:	3820      	subs	r0, #32
 80097c2:	b2c0      	uxtb	r0, r0
 80097c4:	4770      	bx	lr
 80097c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d801      	bhi.n	80097d2 <__hexdig_fun+0x1a>
 80097ce:	3847      	subs	r0, #71	@ 0x47
 80097d0:	e7f7      	b.n	80097c2 <__hexdig_fun+0xa>
 80097d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097d6:	2b05      	cmp	r3, #5
 80097d8:	d801      	bhi.n	80097de <__hexdig_fun+0x26>
 80097da:	3827      	subs	r0, #39	@ 0x27
 80097dc:	e7f1      	b.n	80097c2 <__hexdig_fun+0xa>
 80097de:	2000      	movs	r0, #0
 80097e0:	4770      	bx	lr
	...

080097e4 <__gethex>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	b085      	sub	sp, #20
 80097ea:	468a      	mov	sl, r1
 80097ec:	9302      	str	r3, [sp, #8]
 80097ee:	680b      	ldr	r3, [r1, #0]
 80097f0:	9001      	str	r0, [sp, #4]
 80097f2:	4690      	mov	r8, r2
 80097f4:	1c9c      	adds	r4, r3, #2
 80097f6:	46a1      	mov	r9, r4
 80097f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097fc:	2830      	cmp	r0, #48	@ 0x30
 80097fe:	d0fa      	beq.n	80097f6 <__gethex+0x12>
 8009800:	eba9 0303 	sub.w	r3, r9, r3
 8009804:	f1a3 0b02 	sub.w	fp, r3, #2
 8009808:	f7ff ffd6 	bl	80097b8 <__hexdig_fun>
 800980c:	4605      	mov	r5, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d168      	bne.n	80098e4 <__gethex+0x100>
 8009812:	49a0      	ldr	r1, [pc, #640]	@ (8009a94 <__gethex+0x2b0>)
 8009814:	2201      	movs	r2, #1
 8009816:	4648      	mov	r0, r9
 8009818:	f7ff ff12 	bl	8009640 <strncmp>
 800981c:	4607      	mov	r7, r0
 800981e:	2800      	cmp	r0, #0
 8009820:	d167      	bne.n	80098f2 <__gethex+0x10e>
 8009822:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009826:	4626      	mov	r6, r4
 8009828:	f7ff ffc6 	bl	80097b8 <__hexdig_fun>
 800982c:	2800      	cmp	r0, #0
 800982e:	d062      	beq.n	80098f6 <__gethex+0x112>
 8009830:	4623      	mov	r3, r4
 8009832:	7818      	ldrb	r0, [r3, #0]
 8009834:	2830      	cmp	r0, #48	@ 0x30
 8009836:	4699      	mov	r9, r3
 8009838:	f103 0301 	add.w	r3, r3, #1
 800983c:	d0f9      	beq.n	8009832 <__gethex+0x4e>
 800983e:	f7ff ffbb 	bl	80097b8 <__hexdig_fun>
 8009842:	fab0 f580 	clz	r5, r0
 8009846:	096d      	lsrs	r5, r5, #5
 8009848:	f04f 0b01 	mov.w	fp, #1
 800984c:	464a      	mov	r2, r9
 800984e:	4616      	mov	r6, r2
 8009850:	3201      	adds	r2, #1
 8009852:	7830      	ldrb	r0, [r6, #0]
 8009854:	f7ff ffb0 	bl	80097b8 <__hexdig_fun>
 8009858:	2800      	cmp	r0, #0
 800985a:	d1f8      	bne.n	800984e <__gethex+0x6a>
 800985c:	498d      	ldr	r1, [pc, #564]	@ (8009a94 <__gethex+0x2b0>)
 800985e:	2201      	movs	r2, #1
 8009860:	4630      	mov	r0, r6
 8009862:	f7ff feed 	bl	8009640 <strncmp>
 8009866:	2800      	cmp	r0, #0
 8009868:	d13f      	bne.n	80098ea <__gethex+0x106>
 800986a:	b944      	cbnz	r4, 800987e <__gethex+0x9a>
 800986c:	1c74      	adds	r4, r6, #1
 800986e:	4622      	mov	r2, r4
 8009870:	4616      	mov	r6, r2
 8009872:	3201      	adds	r2, #1
 8009874:	7830      	ldrb	r0, [r6, #0]
 8009876:	f7ff ff9f 	bl	80097b8 <__hexdig_fun>
 800987a:	2800      	cmp	r0, #0
 800987c:	d1f8      	bne.n	8009870 <__gethex+0x8c>
 800987e:	1ba4      	subs	r4, r4, r6
 8009880:	00a7      	lsls	r7, r4, #2
 8009882:	7833      	ldrb	r3, [r6, #0]
 8009884:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009888:	2b50      	cmp	r3, #80	@ 0x50
 800988a:	d13e      	bne.n	800990a <__gethex+0x126>
 800988c:	7873      	ldrb	r3, [r6, #1]
 800988e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009890:	d033      	beq.n	80098fa <__gethex+0x116>
 8009892:	2b2d      	cmp	r3, #45	@ 0x2d
 8009894:	d034      	beq.n	8009900 <__gethex+0x11c>
 8009896:	1c71      	adds	r1, r6, #1
 8009898:	2400      	movs	r4, #0
 800989a:	7808      	ldrb	r0, [r1, #0]
 800989c:	f7ff ff8c 	bl	80097b8 <__hexdig_fun>
 80098a0:	1e43      	subs	r3, r0, #1
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b18      	cmp	r3, #24
 80098a6:	d830      	bhi.n	800990a <__gethex+0x126>
 80098a8:	f1a0 0210 	sub.w	r2, r0, #16
 80098ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80098b0:	f7ff ff82 	bl	80097b8 <__hexdig_fun>
 80098b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80098b8:	fa5f fc8c 	uxtb.w	ip, ip
 80098bc:	f1bc 0f18 	cmp.w	ip, #24
 80098c0:	f04f 030a 	mov.w	r3, #10
 80098c4:	d91e      	bls.n	8009904 <__gethex+0x120>
 80098c6:	b104      	cbz	r4, 80098ca <__gethex+0xe6>
 80098c8:	4252      	negs	r2, r2
 80098ca:	4417      	add	r7, r2
 80098cc:	f8ca 1000 	str.w	r1, [sl]
 80098d0:	b1ed      	cbz	r5, 800990e <__gethex+0x12a>
 80098d2:	f1bb 0f00 	cmp.w	fp, #0
 80098d6:	bf0c      	ite	eq
 80098d8:	2506      	moveq	r5, #6
 80098da:	2500      	movne	r5, #0
 80098dc:	4628      	mov	r0, r5
 80098de:	b005      	add	sp, #20
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	2500      	movs	r5, #0
 80098e6:	462c      	mov	r4, r5
 80098e8:	e7b0      	b.n	800984c <__gethex+0x68>
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d1c7      	bne.n	800987e <__gethex+0x9a>
 80098ee:	4627      	mov	r7, r4
 80098f0:	e7c7      	b.n	8009882 <__gethex+0x9e>
 80098f2:	464e      	mov	r6, r9
 80098f4:	462f      	mov	r7, r5
 80098f6:	2501      	movs	r5, #1
 80098f8:	e7c3      	b.n	8009882 <__gethex+0x9e>
 80098fa:	2400      	movs	r4, #0
 80098fc:	1cb1      	adds	r1, r6, #2
 80098fe:	e7cc      	b.n	800989a <__gethex+0xb6>
 8009900:	2401      	movs	r4, #1
 8009902:	e7fb      	b.n	80098fc <__gethex+0x118>
 8009904:	fb03 0002 	mla	r0, r3, r2, r0
 8009908:	e7ce      	b.n	80098a8 <__gethex+0xc4>
 800990a:	4631      	mov	r1, r6
 800990c:	e7de      	b.n	80098cc <__gethex+0xe8>
 800990e:	eba6 0309 	sub.w	r3, r6, r9
 8009912:	3b01      	subs	r3, #1
 8009914:	4629      	mov	r1, r5
 8009916:	2b07      	cmp	r3, #7
 8009918:	dc0a      	bgt.n	8009930 <__gethex+0x14c>
 800991a:	9801      	ldr	r0, [sp, #4]
 800991c:	f7fe f93c 	bl	8007b98 <_Balloc>
 8009920:	4604      	mov	r4, r0
 8009922:	b940      	cbnz	r0, 8009936 <__gethex+0x152>
 8009924:	4b5c      	ldr	r3, [pc, #368]	@ (8009a98 <__gethex+0x2b4>)
 8009926:	4602      	mov	r2, r0
 8009928:	21e4      	movs	r1, #228	@ 0xe4
 800992a:	485c      	ldr	r0, [pc, #368]	@ (8009a9c <__gethex+0x2b8>)
 800992c:	f7ff fec0 	bl	80096b0 <__assert_func>
 8009930:	3101      	adds	r1, #1
 8009932:	105b      	asrs	r3, r3, #1
 8009934:	e7ef      	b.n	8009916 <__gethex+0x132>
 8009936:	f100 0a14 	add.w	sl, r0, #20
 800993a:	2300      	movs	r3, #0
 800993c:	4655      	mov	r5, sl
 800993e:	469b      	mov	fp, r3
 8009940:	45b1      	cmp	r9, r6
 8009942:	d337      	bcc.n	80099b4 <__gethex+0x1d0>
 8009944:	f845 bb04 	str.w	fp, [r5], #4
 8009948:	eba5 050a 	sub.w	r5, r5, sl
 800994c:	10ad      	asrs	r5, r5, #2
 800994e:	6125      	str	r5, [r4, #16]
 8009950:	4658      	mov	r0, fp
 8009952:	f7fe fa13 	bl	8007d7c <__hi0bits>
 8009956:	016d      	lsls	r5, r5, #5
 8009958:	f8d8 6000 	ldr.w	r6, [r8]
 800995c:	1a2d      	subs	r5, r5, r0
 800995e:	42b5      	cmp	r5, r6
 8009960:	dd54      	ble.n	8009a0c <__gethex+0x228>
 8009962:	1bad      	subs	r5, r5, r6
 8009964:	4629      	mov	r1, r5
 8009966:	4620      	mov	r0, r4
 8009968:	f7fe fda7 	bl	80084ba <__any_on>
 800996c:	4681      	mov	r9, r0
 800996e:	b178      	cbz	r0, 8009990 <__gethex+0x1ac>
 8009970:	1e6b      	subs	r3, r5, #1
 8009972:	1159      	asrs	r1, r3, #5
 8009974:	f003 021f 	and.w	r2, r3, #31
 8009978:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800997c:	f04f 0901 	mov.w	r9, #1
 8009980:	fa09 f202 	lsl.w	r2, r9, r2
 8009984:	420a      	tst	r2, r1
 8009986:	d003      	beq.n	8009990 <__gethex+0x1ac>
 8009988:	454b      	cmp	r3, r9
 800998a:	dc36      	bgt.n	80099fa <__gethex+0x216>
 800998c:	f04f 0902 	mov.w	r9, #2
 8009990:	4629      	mov	r1, r5
 8009992:	4620      	mov	r0, r4
 8009994:	f7ff febe 	bl	8009714 <rshift>
 8009998:	442f      	add	r7, r5
 800999a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800999e:	42bb      	cmp	r3, r7
 80099a0:	da42      	bge.n	8009a28 <__gethex+0x244>
 80099a2:	9801      	ldr	r0, [sp, #4]
 80099a4:	4621      	mov	r1, r4
 80099a6:	f7fe f937 	bl	8007c18 <_Bfree>
 80099aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ac:	2300      	movs	r3, #0
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	25a3      	movs	r5, #163	@ 0xa3
 80099b2:	e793      	b.n	80098dc <__gethex+0xf8>
 80099b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80099b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80099ba:	d012      	beq.n	80099e2 <__gethex+0x1fe>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d104      	bne.n	80099ca <__gethex+0x1e6>
 80099c0:	f845 bb04 	str.w	fp, [r5], #4
 80099c4:	f04f 0b00 	mov.w	fp, #0
 80099c8:	465b      	mov	r3, fp
 80099ca:	7830      	ldrb	r0, [r6, #0]
 80099cc:	9303      	str	r3, [sp, #12]
 80099ce:	f7ff fef3 	bl	80097b8 <__hexdig_fun>
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	f000 000f 	and.w	r0, r0, #15
 80099d8:	4098      	lsls	r0, r3
 80099da:	ea4b 0b00 	orr.w	fp, fp, r0
 80099de:	3304      	adds	r3, #4
 80099e0:	e7ae      	b.n	8009940 <__gethex+0x15c>
 80099e2:	45b1      	cmp	r9, r6
 80099e4:	d8ea      	bhi.n	80099bc <__gethex+0x1d8>
 80099e6:	492b      	ldr	r1, [pc, #172]	@ (8009a94 <__gethex+0x2b0>)
 80099e8:	9303      	str	r3, [sp, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	4630      	mov	r0, r6
 80099ee:	f7ff fe27 	bl	8009640 <strncmp>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d1e1      	bne.n	80099bc <__gethex+0x1d8>
 80099f8:	e7a2      	b.n	8009940 <__gethex+0x15c>
 80099fa:	1ea9      	subs	r1, r5, #2
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7fe fd5c 	bl	80084ba <__any_on>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	d0c2      	beq.n	800998c <__gethex+0x1a8>
 8009a06:	f04f 0903 	mov.w	r9, #3
 8009a0a:	e7c1      	b.n	8009990 <__gethex+0x1ac>
 8009a0c:	da09      	bge.n	8009a22 <__gethex+0x23e>
 8009a0e:	1b75      	subs	r5, r6, r5
 8009a10:	4621      	mov	r1, r4
 8009a12:	9801      	ldr	r0, [sp, #4]
 8009a14:	462a      	mov	r2, r5
 8009a16:	f7fe fb17 	bl	8008048 <__lshift>
 8009a1a:	1b7f      	subs	r7, r7, r5
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	f100 0a14 	add.w	sl, r0, #20
 8009a22:	f04f 0900 	mov.w	r9, #0
 8009a26:	e7b8      	b.n	800999a <__gethex+0x1b6>
 8009a28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a2c:	42bd      	cmp	r5, r7
 8009a2e:	dd6f      	ble.n	8009b10 <__gethex+0x32c>
 8009a30:	1bed      	subs	r5, r5, r7
 8009a32:	42ae      	cmp	r6, r5
 8009a34:	dc34      	bgt.n	8009aa0 <__gethex+0x2bc>
 8009a36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d022      	beq.n	8009a84 <__gethex+0x2a0>
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d024      	beq.n	8009a8c <__gethex+0x2a8>
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d115      	bne.n	8009a72 <__gethex+0x28e>
 8009a46:	42ae      	cmp	r6, r5
 8009a48:	d113      	bne.n	8009a72 <__gethex+0x28e>
 8009a4a:	2e01      	cmp	r6, #1
 8009a4c:	d10b      	bne.n	8009a66 <__gethex+0x282>
 8009a4e:	9a02      	ldr	r2, [sp, #8]
 8009a50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	2301      	movs	r3, #1
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	f8ca 3000 	str.w	r3, [sl]
 8009a5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a60:	2562      	movs	r5, #98	@ 0x62
 8009a62:	601c      	str	r4, [r3, #0]
 8009a64:	e73a      	b.n	80098dc <__gethex+0xf8>
 8009a66:	1e71      	subs	r1, r6, #1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f7fe fd26 	bl	80084ba <__any_on>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d1ed      	bne.n	8009a4e <__gethex+0x26a>
 8009a72:	9801      	ldr	r0, [sp, #4]
 8009a74:	4621      	mov	r1, r4
 8009a76:	f7fe f8cf 	bl	8007c18 <_Bfree>
 8009a7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	2550      	movs	r5, #80	@ 0x50
 8009a82:	e72b      	b.n	80098dc <__gethex+0xf8>
 8009a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f3      	bne.n	8009a72 <__gethex+0x28e>
 8009a8a:	e7e0      	b.n	8009a4e <__gethex+0x26a>
 8009a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1dd      	bne.n	8009a4e <__gethex+0x26a>
 8009a92:	e7ee      	b.n	8009a72 <__gethex+0x28e>
 8009a94:	0800a710 	.word	0x0800a710
 8009a98:	0800a5a5 	.word	0x0800a5a5
 8009a9c:	0800a8be 	.word	0x0800a8be
 8009aa0:	1e6f      	subs	r7, r5, #1
 8009aa2:	f1b9 0f00 	cmp.w	r9, #0
 8009aa6:	d130      	bne.n	8009b0a <__gethex+0x326>
 8009aa8:	b127      	cbz	r7, 8009ab4 <__gethex+0x2d0>
 8009aaa:	4639      	mov	r1, r7
 8009aac:	4620      	mov	r0, r4
 8009aae:	f7fe fd04 	bl	80084ba <__any_on>
 8009ab2:	4681      	mov	r9, r0
 8009ab4:	117a      	asrs	r2, r7, #5
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009abc:	f007 071f 	and.w	r7, r7, #31
 8009ac0:	40bb      	lsls	r3, r7
 8009ac2:	4213      	tst	r3, r2
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	bf18      	it	ne
 8009aca:	f049 0902 	orrne.w	r9, r9, #2
 8009ace:	f7ff fe21 	bl	8009714 <rshift>
 8009ad2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009ad6:	1b76      	subs	r6, r6, r5
 8009ad8:	2502      	movs	r5, #2
 8009ada:	f1b9 0f00 	cmp.w	r9, #0
 8009ade:	d047      	beq.n	8009b70 <__gethex+0x38c>
 8009ae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d015      	beq.n	8009b14 <__gethex+0x330>
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d017      	beq.n	8009b1c <__gethex+0x338>
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d109      	bne.n	8009b04 <__gethex+0x320>
 8009af0:	f019 0f02 	tst.w	r9, #2
 8009af4:	d006      	beq.n	8009b04 <__gethex+0x320>
 8009af6:	f8da 3000 	ldr.w	r3, [sl]
 8009afa:	ea49 0903 	orr.w	r9, r9, r3
 8009afe:	f019 0f01 	tst.w	r9, #1
 8009b02:	d10e      	bne.n	8009b22 <__gethex+0x33e>
 8009b04:	f045 0510 	orr.w	r5, r5, #16
 8009b08:	e032      	b.n	8009b70 <__gethex+0x38c>
 8009b0a:	f04f 0901 	mov.w	r9, #1
 8009b0e:	e7d1      	b.n	8009ab4 <__gethex+0x2d0>
 8009b10:	2501      	movs	r5, #1
 8009b12:	e7e2      	b.n	8009ada <__gethex+0x2f6>
 8009b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b16:	f1c3 0301 	rsb	r3, r3, #1
 8009b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0f0      	beq.n	8009b04 <__gethex+0x320>
 8009b22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b26:	f104 0314 	add.w	r3, r4, #20
 8009b2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b32:	f04f 0c00 	mov.w	ip, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b40:	d01b      	beq.n	8009b7a <__gethex+0x396>
 8009b42:	3201      	adds	r2, #1
 8009b44:	6002      	str	r2, [r0, #0]
 8009b46:	2d02      	cmp	r5, #2
 8009b48:	f104 0314 	add.w	r3, r4, #20
 8009b4c:	d13c      	bne.n	8009bc8 <__gethex+0x3e4>
 8009b4e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b52:	3a01      	subs	r2, #1
 8009b54:	42b2      	cmp	r2, r6
 8009b56:	d109      	bne.n	8009b6c <__gethex+0x388>
 8009b58:	1171      	asrs	r1, r6, #5
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b60:	f006 061f 	and.w	r6, r6, #31
 8009b64:	fa02 f606 	lsl.w	r6, r2, r6
 8009b68:	421e      	tst	r6, r3
 8009b6a:	d13a      	bne.n	8009be2 <__gethex+0x3fe>
 8009b6c:	f045 0520 	orr.w	r5, r5, #32
 8009b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b72:	601c      	str	r4, [r3, #0]
 8009b74:	9b02      	ldr	r3, [sp, #8]
 8009b76:	601f      	str	r7, [r3, #0]
 8009b78:	e6b0      	b.n	80098dc <__gethex+0xf8>
 8009b7a:	4299      	cmp	r1, r3
 8009b7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b80:	d8d9      	bhi.n	8009b36 <__gethex+0x352>
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	459b      	cmp	fp, r3
 8009b86:	db17      	blt.n	8009bb8 <__gethex+0x3d4>
 8009b88:	6861      	ldr	r1, [r4, #4]
 8009b8a:	9801      	ldr	r0, [sp, #4]
 8009b8c:	3101      	adds	r1, #1
 8009b8e:	f7fe f803 	bl	8007b98 <_Balloc>
 8009b92:	4681      	mov	r9, r0
 8009b94:	b918      	cbnz	r0, 8009b9e <__gethex+0x3ba>
 8009b96:	4b1a      	ldr	r3, [pc, #104]	@ (8009c00 <__gethex+0x41c>)
 8009b98:	4602      	mov	r2, r0
 8009b9a:	2184      	movs	r1, #132	@ 0x84
 8009b9c:	e6c5      	b.n	800992a <__gethex+0x146>
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	3202      	adds	r2, #2
 8009ba2:	f104 010c 	add.w	r1, r4, #12
 8009ba6:	0092      	lsls	r2, r2, #2
 8009ba8:	300c      	adds	r0, #12
 8009baa:	f7ff fd6b 	bl	8009684 <memcpy>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	9801      	ldr	r0, [sp, #4]
 8009bb2:	f7fe f831 	bl	8007c18 <_Bfree>
 8009bb6:	464c      	mov	r4, r9
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bc0:	6122      	str	r2, [r4, #16]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	615a      	str	r2, [r3, #20]
 8009bc6:	e7be      	b.n	8009b46 <__gethex+0x362>
 8009bc8:	6922      	ldr	r2, [r4, #16]
 8009bca:	455a      	cmp	r2, fp
 8009bcc:	dd0b      	ble.n	8009be6 <__gethex+0x402>
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7ff fd9f 	bl	8009714 <rshift>
 8009bd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bda:	3701      	adds	r7, #1
 8009bdc:	42bb      	cmp	r3, r7
 8009bde:	f6ff aee0 	blt.w	80099a2 <__gethex+0x1be>
 8009be2:	2501      	movs	r5, #1
 8009be4:	e7c2      	b.n	8009b6c <__gethex+0x388>
 8009be6:	f016 061f 	ands.w	r6, r6, #31
 8009bea:	d0fa      	beq.n	8009be2 <__gethex+0x3fe>
 8009bec:	4453      	add	r3, sl
 8009bee:	f1c6 0620 	rsb	r6, r6, #32
 8009bf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bf6:	f7fe f8c1 	bl	8007d7c <__hi0bits>
 8009bfa:	42b0      	cmp	r0, r6
 8009bfc:	dbe7      	blt.n	8009bce <__gethex+0x3ea>
 8009bfe:	e7f0      	b.n	8009be2 <__gethex+0x3fe>
 8009c00:	0800a5a5 	.word	0x0800a5a5

08009c04 <L_shift>:
 8009c04:	f1c2 0208 	rsb	r2, r2, #8
 8009c08:	0092      	lsls	r2, r2, #2
 8009c0a:	b570      	push	{r4, r5, r6, lr}
 8009c0c:	f1c2 0620 	rsb	r6, r2, #32
 8009c10:	6843      	ldr	r3, [r0, #4]
 8009c12:	6804      	ldr	r4, [r0, #0]
 8009c14:	fa03 f506 	lsl.w	r5, r3, r6
 8009c18:	432c      	orrs	r4, r5
 8009c1a:	40d3      	lsrs	r3, r2
 8009c1c:	6004      	str	r4, [r0, #0]
 8009c1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c22:	4288      	cmp	r0, r1
 8009c24:	d3f4      	bcc.n	8009c10 <L_shift+0xc>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}

08009c28 <__match>:
 8009c28:	b530      	push	{r4, r5, lr}
 8009c2a:	6803      	ldr	r3, [r0, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c32:	b914      	cbnz	r4, 8009c3a <__match+0x12>
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	2001      	movs	r0, #1
 8009c38:	bd30      	pop	{r4, r5, pc}
 8009c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c42:	2d19      	cmp	r5, #25
 8009c44:	bf98      	it	ls
 8009c46:	3220      	addls	r2, #32
 8009c48:	42a2      	cmp	r2, r4
 8009c4a:	d0f0      	beq.n	8009c2e <__match+0x6>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e7f3      	b.n	8009c38 <__match+0x10>

08009c50 <__hexnan>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	680b      	ldr	r3, [r1, #0]
 8009c56:	6801      	ldr	r1, [r0, #0]
 8009c58:	115e      	asrs	r6, r3, #5
 8009c5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c5e:	f013 031f 	ands.w	r3, r3, #31
 8009c62:	b087      	sub	sp, #28
 8009c64:	bf18      	it	ne
 8009c66:	3604      	addne	r6, #4
 8009c68:	2500      	movs	r5, #0
 8009c6a:	1f37      	subs	r7, r6, #4
 8009c6c:	4682      	mov	sl, r0
 8009c6e:	4690      	mov	r8, r2
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c76:	46b9      	mov	r9, r7
 8009c78:	463c      	mov	r4, r7
 8009c7a:	9502      	str	r5, [sp, #8]
 8009c7c:	46ab      	mov	fp, r5
 8009c7e:	784a      	ldrb	r2, [r1, #1]
 8009c80:	1c4b      	adds	r3, r1, #1
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	b342      	cbz	r2, 8009cd8 <__hexnan+0x88>
 8009c86:	4610      	mov	r0, r2
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	9204      	str	r2, [sp, #16]
 8009c8c:	f7ff fd94 	bl	80097b8 <__hexdig_fun>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d151      	bne.n	8009d38 <__hexnan+0xe8>
 8009c94:	9a04      	ldr	r2, [sp, #16]
 8009c96:	9905      	ldr	r1, [sp, #20]
 8009c98:	2a20      	cmp	r2, #32
 8009c9a:	d818      	bhi.n	8009cce <__hexnan+0x7e>
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	459b      	cmp	fp, r3
 8009ca0:	dd13      	ble.n	8009cca <__hexnan+0x7a>
 8009ca2:	454c      	cmp	r4, r9
 8009ca4:	d206      	bcs.n	8009cb4 <__hexnan+0x64>
 8009ca6:	2d07      	cmp	r5, #7
 8009ca8:	dc04      	bgt.n	8009cb4 <__hexnan+0x64>
 8009caa:	462a      	mov	r2, r5
 8009cac:	4649      	mov	r1, r9
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff ffa8 	bl	8009c04 <L_shift>
 8009cb4:	4544      	cmp	r4, r8
 8009cb6:	d952      	bls.n	8009d5e <__hexnan+0x10e>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f1a4 0904 	sub.w	r9, r4, #4
 8009cbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cc2:	f8cd b008 	str.w	fp, [sp, #8]
 8009cc6:	464c      	mov	r4, r9
 8009cc8:	461d      	mov	r5, r3
 8009cca:	9903      	ldr	r1, [sp, #12]
 8009ccc:	e7d7      	b.n	8009c7e <__hexnan+0x2e>
 8009cce:	2a29      	cmp	r2, #41	@ 0x29
 8009cd0:	d157      	bne.n	8009d82 <__hexnan+0x132>
 8009cd2:	3102      	adds	r1, #2
 8009cd4:	f8ca 1000 	str.w	r1, [sl]
 8009cd8:	f1bb 0f00 	cmp.w	fp, #0
 8009cdc:	d051      	beq.n	8009d82 <__hexnan+0x132>
 8009cde:	454c      	cmp	r4, r9
 8009ce0:	d206      	bcs.n	8009cf0 <__hexnan+0xa0>
 8009ce2:	2d07      	cmp	r5, #7
 8009ce4:	dc04      	bgt.n	8009cf0 <__hexnan+0xa0>
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff ff8a 	bl	8009c04 <L_shift>
 8009cf0:	4544      	cmp	r4, r8
 8009cf2:	d936      	bls.n	8009d62 <__hexnan+0x112>
 8009cf4:	f1a8 0204 	sub.w	r2, r8, #4
 8009cf8:	4623      	mov	r3, r4
 8009cfa:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cfe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d02:	429f      	cmp	r7, r3
 8009d04:	d2f9      	bcs.n	8009cfa <__hexnan+0xaa>
 8009d06:	1b3b      	subs	r3, r7, r4
 8009d08:	f023 0303 	bic.w	r3, r3, #3
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	3401      	adds	r4, #1
 8009d10:	3e03      	subs	r6, #3
 8009d12:	42b4      	cmp	r4, r6
 8009d14:	bf88      	it	hi
 8009d16:	2304      	movhi	r3, #4
 8009d18:	4443      	add	r3, r8
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f843 2b04 	str.w	r2, [r3], #4
 8009d20:	429f      	cmp	r7, r3
 8009d22:	d2fb      	bcs.n	8009d1c <__hexnan+0xcc>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	b91b      	cbnz	r3, 8009d30 <__hexnan+0xe0>
 8009d28:	4547      	cmp	r7, r8
 8009d2a:	d128      	bne.n	8009d7e <__hexnan+0x12e>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	2005      	movs	r0, #5
 8009d32:	b007      	add	sp, #28
 8009d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d38:	3501      	adds	r5, #1
 8009d3a:	2d08      	cmp	r5, #8
 8009d3c:	f10b 0b01 	add.w	fp, fp, #1
 8009d40:	dd06      	ble.n	8009d50 <__hexnan+0x100>
 8009d42:	4544      	cmp	r4, r8
 8009d44:	d9c1      	bls.n	8009cca <__hexnan+0x7a>
 8009d46:	2300      	movs	r3, #0
 8009d48:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d4c:	2501      	movs	r5, #1
 8009d4e:	3c04      	subs	r4, #4
 8009d50:	6822      	ldr	r2, [r4, #0]
 8009d52:	f000 000f 	and.w	r0, r0, #15
 8009d56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d5a:	6020      	str	r0, [r4, #0]
 8009d5c:	e7b5      	b.n	8009cca <__hexnan+0x7a>
 8009d5e:	2508      	movs	r5, #8
 8009d60:	e7b3      	b.n	8009cca <__hexnan+0x7a>
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d0dd      	beq.n	8009d24 <__hexnan+0xd4>
 8009d68:	f1c3 0320 	rsb	r3, r3, #32
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	40da      	lsrs	r2, r3
 8009d72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d76:	4013      	ands	r3, r2
 8009d78:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d7c:	e7d2      	b.n	8009d24 <__hexnan+0xd4>
 8009d7e:	3f04      	subs	r7, #4
 8009d80:	e7d0      	b.n	8009d24 <__hexnan+0xd4>
 8009d82:	2004      	movs	r0, #4
 8009d84:	e7d5      	b.n	8009d32 <__hexnan+0xe2>

08009d86 <__ascii_mbtowc>:
 8009d86:	b082      	sub	sp, #8
 8009d88:	b901      	cbnz	r1, 8009d8c <__ascii_mbtowc+0x6>
 8009d8a:	a901      	add	r1, sp, #4
 8009d8c:	b142      	cbz	r2, 8009da0 <__ascii_mbtowc+0x1a>
 8009d8e:	b14b      	cbz	r3, 8009da4 <__ascii_mbtowc+0x1e>
 8009d90:	7813      	ldrb	r3, [r2, #0]
 8009d92:	600b      	str	r3, [r1, #0]
 8009d94:	7812      	ldrb	r2, [r2, #0]
 8009d96:	1e10      	subs	r0, r2, #0
 8009d98:	bf18      	it	ne
 8009d9a:	2001      	movne	r0, #1
 8009d9c:	b002      	add	sp, #8
 8009d9e:	4770      	bx	lr
 8009da0:	4610      	mov	r0, r2
 8009da2:	e7fb      	b.n	8009d9c <__ascii_mbtowc+0x16>
 8009da4:	f06f 0001 	mvn.w	r0, #1
 8009da8:	e7f8      	b.n	8009d9c <__ascii_mbtowc+0x16>

08009daa <_realloc_r>:
 8009daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	4680      	mov	r8, r0
 8009db0:	4615      	mov	r5, r2
 8009db2:	460c      	mov	r4, r1
 8009db4:	b921      	cbnz	r1, 8009dc0 <_realloc_r+0x16>
 8009db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	4611      	mov	r1, r2
 8009dbc:	f7fd be60 	b.w	8007a80 <_malloc_r>
 8009dc0:	b92a      	cbnz	r2, 8009dce <_realloc_r+0x24>
 8009dc2:	f7fd fde9 	bl	8007998 <_free_r>
 8009dc6:	2400      	movs	r4, #0
 8009dc8:	4620      	mov	r0, r4
 8009dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dce:	f000 f840 	bl	8009e52 <_malloc_usable_size_r>
 8009dd2:	4285      	cmp	r5, r0
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	d802      	bhi.n	8009dde <_realloc_r+0x34>
 8009dd8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ddc:	d8f4      	bhi.n	8009dc8 <_realloc_r+0x1e>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4640      	mov	r0, r8
 8009de2:	f7fd fe4d 	bl	8007a80 <_malloc_r>
 8009de6:	4607      	mov	r7, r0
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0ec      	beq.n	8009dc6 <_realloc_r+0x1c>
 8009dec:	42b5      	cmp	r5, r6
 8009dee:	462a      	mov	r2, r5
 8009df0:	4621      	mov	r1, r4
 8009df2:	bf28      	it	cs
 8009df4:	4632      	movcs	r2, r6
 8009df6:	f7ff fc45 	bl	8009684 <memcpy>
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	f7fd fdcb 	bl	8007998 <_free_r>
 8009e02:	463c      	mov	r4, r7
 8009e04:	e7e0      	b.n	8009dc8 <_realloc_r+0x1e>

08009e06 <__ascii_wctomb>:
 8009e06:	4603      	mov	r3, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	b141      	cbz	r1, 8009e1e <__ascii_wctomb+0x18>
 8009e0c:	2aff      	cmp	r2, #255	@ 0xff
 8009e0e:	d904      	bls.n	8009e1a <__ascii_wctomb+0x14>
 8009e10:	228a      	movs	r2, #138	@ 0x8a
 8009e12:	601a      	str	r2, [r3, #0]
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	4770      	bx	lr
 8009e1a:	700a      	strb	r2, [r1, #0]
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	4770      	bx	lr

08009e20 <fiprintf>:
 8009e20:	b40e      	push	{r1, r2, r3}
 8009e22:	b503      	push	{r0, r1, lr}
 8009e24:	4601      	mov	r1, r0
 8009e26:	ab03      	add	r3, sp, #12
 8009e28:	4805      	ldr	r0, [pc, #20]	@ (8009e40 <fiprintf+0x20>)
 8009e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	f000 f83f 	bl	8009eb4 <_vfiprintf_r>
 8009e36:	b002      	add	sp, #8
 8009e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e3c:	b003      	add	sp, #12
 8009e3e:	4770      	bx	lr
 8009e40:	2000001c 	.word	0x2000001c

08009e44 <abort>:
 8009e44:	b508      	push	{r3, lr}
 8009e46:	2006      	movs	r0, #6
 8009e48:	f000 fa08 	bl	800a25c <raise>
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	f7f7 ff8e 	bl	8001d6e <_exit>

08009e52 <_malloc_usable_size_r>:
 8009e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e56:	1f18      	subs	r0, r3, #4
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfbc      	itt	lt
 8009e5c:	580b      	ldrlt	r3, [r1, r0]
 8009e5e:	18c0      	addlt	r0, r0, r3
 8009e60:	4770      	bx	lr

08009e62 <__sfputc_r>:
 8009e62:	6893      	ldr	r3, [r2, #8]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	b410      	push	{r4}
 8009e6a:	6093      	str	r3, [r2, #8]
 8009e6c:	da08      	bge.n	8009e80 <__sfputc_r+0x1e>
 8009e6e:	6994      	ldr	r4, [r2, #24]
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	db01      	blt.n	8009e78 <__sfputc_r+0x16>
 8009e74:	290a      	cmp	r1, #10
 8009e76:	d103      	bne.n	8009e80 <__sfputc_r+0x1e>
 8009e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e7c:	f000 b932 	b.w	800a0e4 <__swbuf_r>
 8009e80:	6813      	ldr	r3, [r2, #0]
 8009e82:	1c58      	adds	r0, r3, #1
 8009e84:	6010      	str	r0, [r2, #0]
 8009e86:	7019      	strb	r1, [r3, #0]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <__sfputs_r>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	4614      	mov	r4, r2
 8009e98:	18d5      	adds	r5, r2, r3
 8009e9a:	42ac      	cmp	r4, r5
 8009e9c:	d101      	bne.n	8009ea2 <__sfputs_r+0x12>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	e007      	b.n	8009eb2 <__sfputs_r+0x22>
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff ffda 	bl	8009e62 <__sfputc_r>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d1f3      	bne.n	8009e9a <__sfputs_r+0xa>
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eb4 <_vfiprintf_r>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	460d      	mov	r5, r1
 8009eba:	b09d      	sub	sp, #116	@ 0x74
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	4698      	mov	r8, r3
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b118      	cbz	r0, 8009ecc <_vfiprintf_r+0x18>
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <_vfiprintf_r+0x18>
 8009ec8:	f7fc fdfa 	bl	8006ac0 <__sinit>
 8009ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ece:	07d9      	lsls	r1, r3, #31
 8009ed0:	d405      	bmi.n	8009ede <_vfiprintf_r+0x2a>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	059a      	lsls	r2, r3, #22
 8009ed6:	d402      	bmi.n	8009ede <_vfiprintf_r+0x2a>
 8009ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eda:	f7fc ff08 	bl	8006cee <__retarget_lock_acquire_recursive>
 8009ede:	89ab      	ldrh	r3, [r5, #12]
 8009ee0:	071b      	lsls	r3, r3, #28
 8009ee2:	d501      	bpl.n	8009ee8 <_vfiprintf_r+0x34>
 8009ee4:	692b      	ldr	r3, [r5, #16]
 8009ee6:	b99b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x5c>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4630      	mov	r0, r6
 8009eec:	f000 f938 	bl	800a160 <__swsetup_r>
 8009ef0:	b170      	cbz	r0, 8009f10 <_vfiprintf_r+0x5c>
 8009ef2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ef4:	07dc      	lsls	r4, r3, #31
 8009ef6:	d504      	bpl.n	8009f02 <_vfiprintf_r+0x4e>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	b01d      	add	sp, #116	@ 0x74
 8009efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f02:	89ab      	ldrh	r3, [r5, #12]
 8009f04:	0598      	lsls	r0, r3, #22
 8009f06:	d4f7      	bmi.n	8009ef8 <_vfiprintf_r+0x44>
 8009f08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f0a:	f7fc fef1 	bl	8006cf0 <__retarget_lock_release_recursive>
 8009f0e:	e7f3      	b.n	8009ef8 <_vfiprintf_r+0x44>
 8009f10:	2300      	movs	r3, #0
 8009f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f14:	2320      	movs	r3, #32
 8009f16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f1e:	2330      	movs	r3, #48	@ 0x30
 8009f20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0d0 <_vfiprintf_r+0x21c>
 8009f24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f28:	f04f 0901 	mov.w	r9, #1
 8009f2c:	4623      	mov	r3, r4
 8009f2e:	469a      	mov	sl, r3
 8009f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f34:	b10a      	cbz	r2, 8009f3a <_vfiprintf_r+0x86>
 8009f36:	2a25      	cmp	r2, #37	@ 0x25
 8009f38:	d1f9      	bne.n	8009f2e <_vfiprintf_r+0x7a>
 8009f3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f3e:	d00b      	beq.n	8009f58 <_vfiprintf_r+0xa4>
 8009f40:	465b      	mov	r3, fp
 8009f42:	4622      	mov	r2, r4
 8009f44:	4629      	mov	r1, r5
 8009f46:	4630      	mov	r0, r6
 8009f48:	f7ff ffa2 	bl	8009e90 <__sfputs_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f000 80a7 	beq.w	800a0a0 <_vfiprintf_r+0x1ec>
 8009f52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f54:	445a      	add	r2, fp
 8009f56:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f58:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 809f 	beq.w	800a0a0 <_vfiprintf_r+0x1ec>
 8009f62:	2300      	movs	r3, #0
 8009f64:	f04f 32ff 	mov.w	r2, #4294967295
 8009f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f6c:	f10a 0a01 	add.w	sl, sl, #1
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	9307      	str	r3, [sp, #28]
 8009f74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f78:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f7a:	4654      	mov	r4, sl
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	4853      	ldr	r0, [pc, #332]	@ (800a0d0 <_vfiprintf_r+0x21c>)
 8009f84:	f7f6 f8fc 	bl	8000180 <memchr>
 8009f88:	9a04      	ldr	r2, [sp, #16]
 8009f8a:	b9d8      	cbnz	r0, 8009fc4 <_vfiprintf_r+0x110>
 8009f8c:	06d1      	lsls	r1, r2, #27
 8009f8e:	bf44      	itt	mi
 8009f90:	2320      	movmi	r3, #32
 8009f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f96:	0713      	lsls	r3, r2, #28
 8009f98:	bf44      	itt	mi
 8009f9a:	232b      	movmi	r3, #43	@ 0x2b
 8009f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fa6:	d015      	beq.n	8009fd4 <_vfiprintf_r+0x120>
 8009fa8:	9a07      	ldr	r2, [sp, #28]
 8009faa:	4654      	mov	r4, sl
 8009fac:	2000      	movs	r0, #0
 8009fae:	f04f 0c0a 	mov.w	ip, #10
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fb8:	3b30      	subs	r3, #48	@ 0x30
 8009fba:	2b09      	cmp	r3, #9
 8009fbc:	d94b      	bls.n	800a056 <_vfiprintf_r+0x1a2>
 8009fbe:	b1b0      	cbz	r0, 8009fee <_vfiprintf_r+0x13a>
 8009fc0:	9207      	str	r2, [sp, #28]
 8009fc2:	e014      	b.n	8009fee <_vfiprintf_r+0x13a>
 8009fc4:	eba0 0308 	sub.w	r3, r0, r8
 8009fc8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	9304      	str	r3, [sp, #16]
 8009fd0:	46a2      	mov	sl, r4
 8009fd2:	e7d2      	b.n	8009f7a <_vfiprintf_r+0xc6>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	1d19      	adds	r1, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	9103      	str	r1, [sp, #12]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfbb      	ittet	lt
 8009fe0:	425b      	neglt	r3, r3
 8009fe2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fe6:	9307      	strge	r3, [sp, #28]
 8009fe8:	9307      	strlt	r3, [sp, #28]
 8009fea:	bfb8      	it	lt
 8009fec:	9204      	strlt	r2, [sp, #16]
 8009fee:	7823      	ldrb	r3, [r4, #0]
 8009ff0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ff2:	d10a      	bne.n	800a00a <_vfiprintf_r+0x156>
 8009ff4:	7863      	ldrb	r3, [r4, #1]
 8009ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff8:	d132      	bne.n	800a060 <_vfiprintf_r+0x1ac>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	9203      	str	r2, [sp, #12]
 800a002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a006:	3402      	adds	r4, #2
 800a008:	9305      	str	r3, [sp, #20]
 800a00a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0e0 <_vfiprintf_r+0x22c>
 800a00e:	7821      	ldrb	r1, [r4, #0]
 800a010:	2203      	movs	r2, #3
 800a012:	4650      	mov	r0, sl
 800a014:	f7f6 f8b4 	bl	8000180 <memchr>
 800a018:	b138      	cbz	r0, 800a02a <_vfiprintf_r+0x176>
 800a01a:	9b04      	ldr	r3, [sp, #16]
 800a01c:	eba0 000a 	sub.w	r0, r0, sl
 800a020:	2240      	movs	r2, #64	@ 0x40
 800a022:	4082      	lsls	r2, r0
 800a024:	4313      	orrs	r3, r2
 800a026:	3401      	adds	r4, #1
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02e:	4829      	ldr	r0, [pc, #164]	@ (800a0d4 <_vfiprintf_r+0x220>)
 800a030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a034:	2206      	movs	r2, #6
 800a036:	f7f6 f8a3 	bl	8000180 <memchr>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d03f      	beq.n	800a0be <_vfiprintf_r+0x20a>
 800a03e:	4b26      	ldr	r3, [pc, #152]	@ (800a0d8 <_vfiprintf_r+0x224>)
 800a040:	bb1b      	cbnz	r3, 800a08a <_vfiprintf_r+0x1d6>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	3307      	adds	r3, #7
 800a046:	f023 0307 	bic.w	r3, r3, #7
 800a04a:	3308      	adds	r3, #8
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a050:	443b      	add	r3, r7
 800a052:	9309      	str	r3, [sp, #36]	@ 0x24
 800a054:	e76a      	b.n	8009f2c <_vfiprintf_r+0x78>
 800a056:	fb0c 3202 	mla	r2, ip, r2, r3
 800a05a:	460c      	mov	r4, r1
 800a05c:	2001      	movs	r0, #1
 800a05e:	e7a8      	b.n	8009fb2 <_vfiprintf_r+0xfe>
 800a060:	2300      	movs	r3, #0
 800a062:	3401      	adds	r4, #1
 800a064:	9305      	str	r3, [sp, #20]
 800a066:	4619      	mov	r1, r3
 800a068:	f04f 0c0a 	mov.w	ip, #10
 800a06c:	4620      	mov	r0, r4
 800a06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a072:	3a30      	subs	r2, #48	@ 0x30
 800a074:	2a09      	cmp	r2, #9
 800a076:	d903      	bls.n	800a080 <_vfiprintf_r+0x1cc>
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d0c6      	beq.n	800a00a <_vfiprintf_r+0x156>
 800a07c:	9105      	str	r1, [sp, #20]
 800a07e:	e7c4      	b.n	800a00a <_vfiprintf_r+0x156>
 800a080:	fb0c 2101 	mla	r1, ip, r1, r2
 800a084:	4604      	mov	r4, r0
 800a086:	2301      	movs	r3, #1
 800a088:	e7f0      	b.n	800a06c <_vfiprintf_r+0x1b8>
 800a08a:	ab03      	add	r3, sp, #12
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	462a      	mov	r2, r5
 800a090:	4b12      	ldr	r3, [pc, #72]	@ (800a0dc <_vfiprintf_r+0x228>)
 800a092:	a904      	add	r1, sp, #16
 800a094:	4630      	mov	r0, r6
 800a096:	f7fb febb 	bl	8005e10 <_printf_float>
 800a09a:	4607      	mov	r7, r0
 800a09c:	1c78      	adds	r0, r7, #1
 800a09e:	d1d6      	bne.n	800a04e <_vfiprintf_r+0x19a>
 800a0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0a2:	07d9      	lsls	r1, r3, #31
 800a0a4:	d405      	bmi.n	800a0b2 <_vfiprintf_r+0x1fe>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	059a      	lsls	r2, r3, #22
 800a0aa:	d402      	bmi.n	800a0b2 <_vfiprintf_r+0x1fe>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ae:	f7fc fe1f 	bl	8006cf0 <__retarget_lock_release_recursive>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	065b      	lsls	r3, r3, #25
 800a0b6:	f53f af1f 	bmi.w	8009ef8 <_vfiprintf_r+0x44>
 800a0ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0bc:	e71e      	b.n	8009efc <_vfiprintf_r+0x48>
 800a0be:	ab03      	add	r3, sp, #12
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <_vfiprintf_r+0x228>)
 800a0c6:	a904      	add	r1, sp, #16
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7fc f939 	bl	8006340 <_printf_i>
 800a0ce:	e7e4      	b.n	800a09a <_vfiprintf_r+0x1e6>
 800a0d0:	0800a869 	.word	0x0800a869
 800a0d4:	0800a873 	.word	0x0800a873
 800a0d8:	08005e11 	.word	0x08005e11
 800a0dc:	08009e91 	.word	0x08009e91
 800a0e0:	0800a86f 	.word	0x0800a86f

0800a0e4 <__swbuf_r>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	460e      	mov	r6, r1
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	b118      	cbz	r0, 800a0f6 <__swbuf_r+0x12>
 800a0ee:	6a03      	ldr	r3, [r0, #32]
 800a0f0:	b90b      	cbnz	r3, 800a0f6 <__swbuf_r+0x12>
 800a0f2:	f7fc fce5 	bl	8006ac0 <__sinit>
 800a0f6:	69a3      	ldr	r3, [r4, #24]
 800a0f8:	60a3      	str	r3, [r4, #8]
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	071a      	lsls	r2, r3, #28
 800a0fe:	d501      	bpl.n	800a104 <__swbuf_r+0x20>
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	b943      	cbnz	r3, 800a116 <__swbuf_r+0x32>
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f82a 	bl	800a160 <__swsetup_r>
 800a10c:	b118      	cbz	r0, 800a116 <__swbuf_r+0x32>
 800a10e:	f04f 37ff 	mov.w	r7, #4294967295
 800a112:	4638      	mov	r0, r7
 800a114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	6922      	ldr	r2, [r4, #16]
 800a11a:	1a98      	subs	r0, r3, r2
 800a11c:	6963      	ldr	r3, [r4, #20]
 800a11e:	b2f6      	uxtb	r6, r6
 800a120:	4283      	cmp	r3, r0
 800a122:	4637      	mov	r7, r6
 800a124:	dc05      	bgt.n	800a132 <__swbuf_r+0x4e>
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	f7ff fa47 	bl	80095bc <_fflush_r>
 800a12e:	2800      	cmp	r0, #0
 800a130:	d1ed      	bne.n	800a10e <__swbuf_r+0x2a>
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	3b01      	subs	r3, #1
 800a136:	60a3      	str	r3, [r4, #8]
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	701e      	strb	r6, [r3, #0]
 800a140:	6962      	ldr	r2, [r4, #20]
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	429a      	cmp	r2, r3
 800a146:	d004      	beq.n	800a152 <__swbuf_r+0x6e>
 800a148:	89a3      	ldrh	r3, [r4, #12]
 800a14a:	07db      	lsls	r3, r3, #31
 800a14c:	d5e1      	bpl.n	800a112 <__swbuf_r+0x2e>
 800a14e:	2e0a      	cmp	r6, #10
 800a150:	d1df      	bne.n	800a112 <__swbuf_r+0x2e>
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f7ff fa31 	bl	80095bc <_fflush_r>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d0d9      	beq.n	800a112 <__swbuf_r+0x2e>
 800a15e:	e7d6      	b.n	800a10e <__swbuf_r+0x2a>

0800a160 <__swsetup_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4b29      	ldr	r3, [pc, #164]	@ (800a208 <__swsetup_r+0xa8>)
 800a164:	4605      	mov	r5, r0
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	460c      	mov	r4, r1
 800a16a:	b118      	cbz	r0, 800a174 <__swsetup_r+0x14>
 800a16c:	6a03      	ldr	r3, [r0, #32]
 800a16e:	b90b      	cbnz	r3, 800a174 <__swsetup_r+0x14>
 800a170:	f7fc fca6 	bl	8006ac0 <__sinit>
 800a174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a178:	0719      	lsls	r1, r3, #28
 800a17a:	d422      	bmi.n	800a1c2 <__swsetup_r+0x62>
 800a17c:	06da      	lsls	r2, r3, #27
 800a17e:	d407      	bmi.n	800a190 <__swsetup_r+0x30>
 800a180:	2209      	movs	r2, #9
 800a182:	602a      	str	r2, [r5, #0]
 800a184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	f04f 30ff 	mov.w	r0, #4294967295
 800a18e:	e033      	b.n	800a1f8 <__swsetup_r+0x98>
 800a190:	0758      	lsls	r0, r3, #29
 800a192:	d512      	bpl.n	800a1ba <__swsetup_r+0x5a>
 800a194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a196:	b141      	cbz	r1, 800a1aa <__swsetup_r+0x4a>
 800a198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a19c:	4299      	cmp	r1, r3
 800a19e:	d002      	beq.n	800a1a6 <__swsetup_r+0x46>
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f7fd fbf9 	bl	8007998 <_free_r>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f043 0308 	orr.w	r3, r3, #8
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	b94b      	cbnz	r3, 800a1da <__swsetup_r+0x7a>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d0:	d003      	beq.n	800a1da <__swsetup_r+0x7a>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 f883 	bl	800a2e0 <__smakebuf_r>
 800a1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1de:	f013 0201 	ands.w	r2, r3, #1
 800a1e2:	d00a      	beq.n	800a1fa <__swsetup_r+0x9a>
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	60a2      	str	r2, [r4, #8]
 800a1e8:	6962      	ldr	r2, [r4, #20]
 800a1ea:	4252      	negs	r2, r2
 800a1ec:	61a2      	str	r2, [r4, #24]
 800a1ee:	6922      	ldr	r2, [r4, #16]
 800a1f0:	b942      	cbnz	r2, 800a204 <__swsetup_r+0xa4>
 800a1f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1f6:	d1c5      	bne.n	800a184 <__swsetup_r+0x24>
 800a1f8:	bd38      	pop	{r3, r4, r5, pc}
 800a1fa:	0799      	lsls	r1, r3, #30
 800a1fc:	bf58      	it	pl
 800a1fe:	6962      	ldrpl	r2, [r4, #20]
 800a200:	60a2      	str	r2, [r4, #8]
 800a202:	e7f4      	b.n	800a1ee <__swsetup_r+0x8e>
 800a204:	2000      	movs	r0, #0
 800a206:	e7f7      	b.n	800a1f8 <__swsetup_r+0x98>
 800a208:	2000001c 	.word	0x2000001c

0800a20c <_raise_r>:
 800a20c:	291f      	cmp	r1, #31
 800a20e:	b538      	push	{r3, r4, r5, lr}
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	d904      	bls.n	800a220 <_raise_r+0x14>
 800a216:	2316      	movs	r3, #22
 800a218:	6003      	str	r3, [r0, #0]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a222:	b112      	cbz	r2, 800a22a <_raise_r+0x1e>
 800a224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a228:	b94b      	cbnz	r3, 800a23e <_raise_r+0x32>
 800a22a:	4628      	mov	r0, r5
 800a22c:	f000 f830 	bl	800a290 <_getpid_r>
 800a230:	4622      	mov	r2, r4
 800a232:	4601      	mov	r1, r0
 800a234:	4628      	mov	r0, r5
 800a236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a23a:	f000 b817 	b.w	800a26c <_kill_r>
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d00a      	beq.n	800a258 <_raise_r+0x4c>
 800a242:	1c59      	adds	r1, r3, #1
 800a244:	d103      	bne.n	800a24e <_raise_r+0x42>
 800a246:	2316      	movs	r3, #22
 800a248:	6003      	str	r3, [r0, #0]
 800a24a:	2001      	movs	r0, #1
 800a24c:	e7e7      	b.n	800a21e <_raise_r+0x12>
 800a24e:	2100      	movs	r1, #0
 800a250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a254:	4620      	mov	r0, r4
 800a256:	4798      	blx	r3
 800a258:	2000      	movs	r0, #0
 800a25a:	e7e0      	b.n	800a21e <_raise_r+0x12>

0800a25c <raise>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <raise+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f7ff bfd3 	b.w	800a20c <_raise_r>
 800a266:	bf00      	nop
 800a268:	2000001c 	.word	0x2000001c

0800a26c <_kill_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d07      	ldr	r5, [pc, #28]	@ (800a28c <_kill_r+0x20>)
 800a270:	2300      	movs	r3, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	f7f7 fd68 	bl	8001d4e <_kill>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d102      	bne.n	800a288 <_kill_r+0x1c>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	b103      	cbz	r3, 800a288 <_kill_r+0x1c>
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	bf00      	nop
 800a28c:	20000b00 	.word	0x20000b00

0800a290 <_getpid_r>:
 800a290:	f7f7 bd55 	b.w	8001d3e <_getpid>

0800a294 <__swhatbuf_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	460c      	mov	r4, r1
 800a298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29c:	2900      	cmp	r1, #0
 800a29e:	b096      	sub	sp, #88	@ 0x58
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	461e      	mov	r6, r3
 800a2a4:	da0d      	bge.n	800a2c2 <__swhatbuf_r+0x2e>
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2ac:	f04f 0100 	mov.w	r1, #0
 800a2b0:	bf14      	ite	ne
 800a2b2:	2340      	movne	r3, #64	@ 0x40
 800a2b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	6031      	str	r1, [r6, #0]
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	b016      	add	sp, #88	@ 0x58
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	466a      	mov	r2, sp
 800a2c4:	f000 f848 	bl	800a358 <_fstat_r>
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	dbec      	blt.n	800a2a6 <__swhatbuf_r+0x12>
 800a2cc:	9901      	ldr	r1, [sp, #4]
 800a2ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2d6:	4259      	negs	r1, r3
 800a2d8:	4159      	adcs	r1, r3
 800a2da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2de:	e7eb      	b.n	800a2b8 <__swhatbuf_r+0x24>

0800a2e0 <__smakebuf_r>:
 800a2e0:	898b      	ldrh	r3, [r1, #12]
 800a2e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e4:	079d      	lsls	r5, r3, #30
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	d507      	bpl.n	800a2fc <__smakebuf_r+0x1c>
 800a2ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	6163      	str	r3, [r4, #20]
 800a2f8:	b003      	add	sp, #12
 800a2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2fc:	ab01      	add	r3, sp, #4
 800a2fe:	466a      	mov	r2, sp
 800a300:	f7ff ffc8 	bl	800a294 <__swhatbuf_r>
 800a304:	9f00      	ldr	r7, [sp, #0]
 800a306:	4605      	mov	r5, r0
 800a308:	4639      	mov	r1, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7fd fbb8 	bl	8007a80 <_malloc_r>
 800a310:	b948      	cbnz	r0, 800a326 <__smakebuf_r+0x46>
 800a312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a316:	059a      	lsls	r2, r3, #22
 800a318:	d4ee      	bmi.n	800a2f8 <__smakebuf_r+0x18>
 800a31a:	f023 0303 	bic.w	r3, r3, #3
 800a31e:	f043 0302 	orr.w	r3, r3, #2
 800a322:	81a3      	strh	r3, [r4, #12]
 800a324:	e7e2      	b.n	800a2ec <__smakebuf_r+0xc>
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	6020      	str	r0, [r4, #0]
 800a32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	9b01      	ldr	r3, [sp, #4]
 800a332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a336:	b15b      	cbz	r3, 800a350 <__smakebuf_r+0x70>
 800a338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 f81d 	bl	800a37c <_isatty_r>
 800a342:	b128      	cbz	r0, 800a350 <__smakebuf_r+0x70>
 800a344:	89a3      	ldrh	r3, [r4, #12]
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	f043 0301 	orr.w	r3, r3, #1
 800a34e:	81a3      	strh	r3, [r4, #12]
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	431d      	orrs	r5, r3
 800a354:	81a5      	strh	r5, [r4, #12]
 800a356:	e7cf      	b.n	800a2f8 <__smakebuf_r+0x18>

0800a358 <_fstat_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d07      	ldr	r5, [pc, #28]	@ (800a378 <_fstat_r+0x20>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	4611      	mov	r1, r2
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	f7f7 fd36 	bl	8001dd6 <_fstat>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	d102      	bne.n	800a374 <_fstat_r+0x1c>
 800a36e:	682b      	ldr	r3, [r5, #0]
 800a370:	b103      	cbz	r3, 800a374 <_fstat_r+0x1c>
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	bd38      	pop	{r3, r4, r5, pc}
 800a376:	bf00      	nop
 800a378:	20000b00 	.word	0x20000b00

0800a37c <_isatty_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d06      	ldr	r5, [pc, #24]	@ (800a398 <_isatty_r+0x1c>)
 800a380:	2300      	movs	r3, #0
 800a382:	4604      	mov	r4, r0
 800a384:	4608      	mov	r0, r1
 800a386:	602b      	str	r3, [r5, #0]
 800a388:	f7f7 fd35 	bl	8001df6 <_isatty>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_isatty_r+0x1a>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_isatty_r+0x1a>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	20000b00 	.word	0x20000b00

0800a39c <_init>:
 800a39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39e:	bf00      	nop
 800a3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a2:	bc08      	pop	{r3}
 800a3a4:	469e      	mov	lr, r3
 800a3a6:	4770      	bx	lr

0800a3a8 <_fini>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr
